{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"BERTopic \u00b6 BERTopic is a topic modeling technique that leverages \ud83e\udd17 transformers and c-TF-IDF to create dense clusters allowing for easily interpretable topics whilst keeping important words in the topic descriptions. BERTopic supports guided , supervised , semi-supervised , manual , long-document , hierarchical , class-based , dynamic , and online topic modeling. It even supports visualizations similar to LDAvis! Corresponding medium posts can be found here , here and here . For a more detailed overview, you can read the paper or see a brief overview . Installation \u00b6 Installation, with sentence-transformers, can be done using pypi : pip install bertopic You may want to install more depending on the transformers and language backends that you will be using. The possible installations are: pip install bertopic [ flair ] pip install bertopic [ gensim ] pip install bertopic [ spacy ] pip install bertopic [ use ] Quick Start \u00b6 We start by extracting topics from the well-known 20 newsgroups dataset containing English documents: from bertopic import BERTopic from sklearn.datasets import fetch_20newsgroups docs = fetch_20newsgroups ( subset = 'all' , remove = ( 'headers' , 'footers' , 'quotes' ))[ 'data' ] topic_model = BERTopic () topics , probs = topic_model . fit_transform ( docs ) After generating topics and their probabilities, we can access the frequent topics that were generated: >>> topic_model . get_topic_info () Topic Count Name - 1 4630 - 1 _can_your_will_any 0 693 49 _windows_drive_dos_file 1 466 32 _jesus_bible_christian_faith 2 441 2 _space_launch_orbit_lunar 3 381 22 _key_encryption_keys_encrypted -1 refers to all outliers and should typically be ignored. Next, let's take a look at the most frequent topic that was generated, topic 0: >>> topic_model . get_topic ( 0 ) [( 'windows' , 0.006152228076250982 ), ( 'drive' , 0.004982897610645755 ), ( 'dos' , 0.004845038866360651 ), ( 'file' , 0.004140142872194834 ), ( 'disk' , 0.004131678774810884 ), ( 'mac' , 0.003624848635985097 ), ( 'memory' , 0.0034840976976789903 ), ( 'software' , 0.0034415334250699077 ), ( 'email' , 0.0034239554442333257 ), ( 'pc' , 0.003047105930670237 )] Using .get_document_info , we can also extract information on a document level, such as their corresponding topics, probabilities, whether they are representative documents for a topic, etc.: >>> topic_model . get_document_info ( docs ) Document Topic Name Top_n_words Probability ... I am sure some bashers of Pens ... 0 0 _game_team_games_season game - team - games ... 0.200010 ... My brother is in the market for ... - 1 - 1 _can_your_will_any can - your - will ... 0.420668 ... Finally you said what you dream ... - 1 - 1 _can_your_will_any can - your - will ... 0.807259 ... Think ! It is the SCSI card doing ... 49 49 _windows_drive_dos_file windows - drive - docs ... 0.071746 ... 1 ) I have an old Jasmine drive ... 49 49 _windows_drive_dos_file windows - drive - docs ... 0.038983 ... NOTE : Use BERTopic(language=\"multilingual\") to select a model that supports 50+ languages. Modularity \u00b6 By default, the main steps for topic modeling with BERTopic are sentence-transformers, UMAP, HDBSCAN, and c-TF-IDF run in sequence. However, it assumes some independence between these steps which makes BERTopic quite modular. In other words, BERTopic not only allows you to build your own topic model but to explore several topic modeling techniques on top of your customized topic model: You can swap out any of these models or even remove them entirely. Starting with the embedding step, you can find out how to do this here and more about the underlying algorithm and assumptions here . Overview \u00b6 BERTopic has many functions that quickly can become overwhelming. To alleviate this issue, you will find an overview of all methods and a short description of its purpose. Common \u00b6 Below, you will find an overview of common functions in BERTopic. Method Code Fit the model .fit(docs) Fit the model and predict documents .fit_transform(docs) Predict new documents .transform([new_doc]) Access single topic .get_topic(topic=12) Access all topics .get_topics() Get topic freq .get_topic_freq() Get all topic information .get_topic_info() Get all document information .get_document_info(docs) Get representative docs per topic .get_representative_docs() Update topic representation .update_topics(docs, n_gram_range=(1, 3)) Generate topic labels .generate_topic_labels() Set topic labels .set_topic_labels(my_custom_labels) Merge topics .merge_topics(docs, topics_to_merge) Reduce nr of topics .reduce_topics(docs, nr_topics=30) Reduce outliers .reduce_outliers(docs, topics) Find topics .find_topics(\"vehicle\") Save model .save(\"my_model\") Load model BERTopic.load(\"my_model\") Get parameters .get_params() Attributes \u00b6 After having trained your BERTopic model, several are saved within your model. These attributes, in part, refer to how model information is stored on an estimator during fitting. The attributes that you see below all end in _ and are public attributes that can be used to access model information. Attribute Description topics_ The topics that are generated for each document after training or updating the topic model. probabilities_ The probabilities that are generated for each document if HDBSCAN is used. topic_sizes_ The size of each topic topic_mapper_ A class for tracking topics and their mappings anytime they are merged/reduced. topic_representations_ The top n terms per topic and their respective c-TF-IDF values. c_tf_idf_ The topic-term matrix as calculated through c-TF-IDF. topic_labels_ The default labels for each topic. custom_labels_ Custom labels for each topic as generated through .set_topic_labels . topic_embeddings_ The embeddings for each topic if embedding_model was used. representative_docs_ The representative documents for each topic if HDBSCAN is used. Variations \u00b6 There are many different use cases in which topic modeling can be used. As such, several variations of BERTopic have been developed such that one package can be used across many use cases. Method Code Topic Distribution Approximation .approximate_distribution(docs) Online Topic Modeling .partial_fit(doc) Semi-supervised Topic Modeling .fit(docs, y=y) Supervised Topic Modeling .fit(docs, y=y) Manual Topic Modeling .fit(docs, y=y) Topic Modeling per Class .topics_per_class(docs, classes) Dynamic Topic Modeling .topics_over_time(docs, timestamps) Hierarchical Topic Modeling .hierarchical_topics(docs) Guided Topic Modeling BERTopic(seed_topic_list=seed_topic_list) Visualizations \u00b6 Evaluating topic models can be rather difficult due to the somewhat subjective nature of evaluation. Visualizing different aspects of the topic model helps in understanding the model and makes it easier to tweak the model to your liking. Method Code Visualize Topics .visualize_topics() Visualize Documents .visualize_documents() Visualize Document Hierarchy .visualize_hierarchical_documents() Visualize Topic Hierarchy .visualize_hierarchy() Visualize Topic Tree .get_topic_tree(hierarchical_topics) Visualize Topic Terms .visualize_barchart() Visualize Topic Similarity .visualize_heatmap() Visualize Term Score Decline .visualize_term_rank() Visualize Topic Probability Distribution .visualize_distribution(probs[0]) Visualize Topics over Time .visualize_topics_over_time(topics_over_time) Visualize Topics per Class .visualize_topics_per_class(topics_per_class) Citation \u00b6 To cite the BERTopic paper , please use the following bibtex reference: @article{grootendorst2022bertopic, title={BERTopic: Neural topic modeling with a class-based TF-IDF procedure}, author={Grootendorst, Maarten}, journal={arXiv preprint arXiv:2203.05794}, year={2022} }","title":"Home"},{"location":"index.html#bertopic","text":"BERTopic is a topic modeling technique that leverages \ud83e\udd17 transformers and c-TF-IDF to create dense clusters allowing for easily interpretable topics whilst keeping important words in the topic descriptions. BERTopic supports guided , supervised , semi-supervised , manual , long-document , hierarchical , class-based , dynamic , and online topic modeling. It even supports visualizations similar to LDAvis! Corresponding medium posts can be found here , here and here . For a more detailed overview, you can read the paper or see a brief overview .","title":"BERTopic"},{"location":"index.html#installation","text":"Installation, with sentence-transformers, can be done using pypi : pip install bertopic You may want to install more depending on the transformers and language backends that you will be using. The possible installations are: pip install bertopic [ flair ] pip install bertopic [ gensim ] pip install bertopic [ spacy ] pip install bertopic [ use ]","title":"Installation"},{"location":"index.html#quick-start","text":"We start by extracting topics from the well-known 20 newsgroups dataset containing English documents: from bertopic import BERTopic from sklearn.datasets import fetch_20newsgroups docs = fetch_20newsgroups ( subset = 'all' , remove = ( 'headers' , 'footers' , 'quotes' ))[ 'data' ] topic_model = BERTopic () topics , probs = topic_model . fit_transform ( docs ) After generating topics and their probabilities, we can access the frequent topics that were generated: >>> topic_model . get_topic_info () Topic Count Name - 1 4630 - 1 _can_your_will_any 0 693 49 _windows_drive_dos_file 1 466 32 _jesus_bible_christian_faith 2 441 2 _space_launch_orbit_lunar 3 381 22 _key_encryption_keys_encrypted -1 refers to all outliers and should typically be ignored. Next, let's take a look at the most frequent topic that was generated, topic 0: >>> topic_model . get_topic ( 0 ) [( 'windows' , 0.006152228076250982 ), ( 'drive' , 0.004982897610645755 ), ( 'dos' , 0.004845038866360651 ), ( 'file' , 0.004140142872194834 ), ( 'disk' , 0.004131678774810884 ), ( 'mac' , 0.003624848635985097 ), ( 'memory' , 0.0034840976976789903 ), ( 'software' , 0.0034415334250699077 ), ( 'email' , 0.0034239554442333257 ), ( 'pc' , 0.003047105930670237 )] Using .get_document_info , we can also extract information on a document level, such as their corresponding topics, probabilities, whether they are representative documents for a topic, etc.: >>> topic_model . get_document_info ( docs ) Document Topic Name Top_n_words Probability ... I am sure some bashers of Pens ... 0 0 _game_team_games_season game - team - games ... 0.200010 ... My brother is in the market for ... - 1 - 1 _can_your_will_any can - your - will ... 0.420668 ... Finally you said what you dream ... - 1 - 1 _can_your_will_any can - your - will ... 0.807259 ... Think ! It is the SCSI card doing ... 49 49 _windows_drive_dos_file windows - drive - docs ... 0.071746 ... 1 ) I have an old Jasmine drive ... 49 49 _windows_drive_dos_file windows - drive - docs ... 0.038983 ... NOTE : Use BERTopic(language=\"multilingual\") to select a model that supports 50+ languages.","title":"Quick Start"},{"location":"index.html#modularity","text":"By default, the main steps for topic modeling with BERTopic are sentence-transformers, UMAP, HDBSCAN, and c-TF-IDF run in sequence. However, it assumes some independence between these steps which makes BERTopic quite modular. In other words, BERTopic not only allows you to build your own topic model but to explore several topic modeling techniques on top of your customized topic model: You can swap out any of these models or even remove them entirely. Starting with the embedding step, you can find out how to do this here and more about the underlying algorithm and assumptions here .","title":"Modularity"},{"location":"index.html#overview","text":"BERTopic has many functions that quickly can become overwhelming. To alleviate this issue, you will find an overview of all methods and a short description of its purpose.","title":"Overview"},{"location":"index.html#common","text":"Below, you will find an overview of common functions in BERTopic. Method Code Fit the model .fit(docs) Fit the model and predict documents .fit_transform(docs) Predict new documents .transform([new_doc]) Access single topic .get_topic(topic=12) Access all topics .get_topics() Get topic freq .get_topic_freq() Get all topic information .get_topic_info() Get all document information .get_document_info(docs) Get representative docs per topic .get_representative_docs() Update topic representation .update_topics(docs, n_gram_range=(1, 3)) Generate topic labels .generate_topic_labels() Set topic labels .set_topic_labels(my_custom_labels) Merge topics .merge_topics(docs, topics_to_merge) Reduce nr of topics .reduce_topics(docs, nr_topics=30) Reduce outliers .reduce_outliers(docs, topics) Find topics .find_topics(\"vehicle\") Save model .save(\"my_model\") Load model BERTopic.load(\"my_model\") Get parameters .get_params()","title":"Common"},{"location":"index.html#attributes","text":"After having trained your BERTopic model, several are saved within your model. These attributes, in part, refer to how model information is stored on an estimator during fitting. The attributes that you see below all end in _ and are public attributes that can be used to access model information. Attribute Description topics_ The topics that are generated for each document after training or updating the topic model. probabilities_ The probabilities that are generated for each document if HDBSCAN is used. topic_sizes_ The size of each topic topic_mapper_ A class for tracking topics and their mappings anytime they are merged/reduced. topic_representations_ The top n terms per topic and their respective c-TF-IDF values. c_tf_idf_ The topic-term matrix as calculated through c-TF-IDF. topic_labels_ The default labels for each topic. custom_labels_ Custom labels for each topic as generated through .set_topic_labels . topic_embeddings_ The embeddings for each topic if embedding_model was used. representative_docs_ The representative documents for each topic if HDBSCAN is used.","title":"Attributes"},{"location":"index.html#variations","text":"There are many different use cases in which topic modeling can be used. As such, several variations of BERTopic have been developed such that one package can be used across many use cases. Method Code Topic Distribution Approximation .approximate_distribution(docs) Online Topic Modeling .partial_fit(doc) Semi-supervised Topic Modeling .fit(docs, y=y) Supervised Topic Modeling .fit(docs, y=y) Manual Topic Modeling .fit(docs, y=y) Topic Modeling per Class .topics_per_class(docs, classes) Dynamic Topic Modeling .topics_over_time(docs, timestamps) Hierarchical Topic Modeling .hierarchical_topics(docs) Guided Topic Modeling BERTopic(seed_topic_list=seed_topic_list)","title":"Variations"},{"location":"index.html#visualizations","text":"Evaluating topic models can be rather difficult due to the somewhat subjective nature of evaluation. Visualizing different aspects of the topic model helps in understanding the model and makes it easier to tweak the model to your liking. Method Code Visualize Topics .visualize_topics() Visualize Documents .visualize_documents() Visualize Document Hierarchy .visualize_hierarchical_documents() Visualize Topic Hierarchy .visualize_hierarchy() Visualize Topic Tree .get_topic_tree(hierarchical_topics) Visualize Topic Terms .visualize_barchart() Visualize Topic Similarity .visualize_heatmap() Visualize Term Score Decline .visualize_term_rank() Visualize Topic Probability Distribution .visualize_distribution(probs[0]) Visualize Topics over Time .visualize_topics_over_time(topics_over_time) Visualize Topics per Class .visualize_topics_per_class(topics_per_class)","title":"Visualizations"},{"location":"index.html#citation","text":"To cite the BERTopic paper , please use the following bibtex reference: @article{grootendorst2022bertopic, title={BERTopic: Neural topic modeling with a class-based TF-IDF procedure}, author={Grootendorst, Maarten}, journal={arXiv preprint arXiv:2203.05794}, year={2022} }","title":"Citation"},{"location":"changelog.html","text":"Changelog \u00b6 Version 0.14.1 \u00b6 Release date: 2 March, 2023 Highlights: Use ChatGPT to create topic representations!: Added delay_in_seconds parameter to OpenAI and Cohere representation models for throttling the API Setting this between 5 and 10 allows for trial users now to use more easily without hitting RateLimitErrors Fixed missing title param to visualization methods Fixed probabilities not correctly aligning ( #1024 ) Fix typo in textgenerator @dkopljar27 in #1002 ChatGPT Within OpenAI's API, the ChatGPT models use a different API structure compared to the GPT-3 models. In order to use ChatGPT with BERTopic, we need to define the model and make sure to set chat=True : import openai from bertopic import BERTopic from bertopic.representation import OpenAI # Create your representation model openai . api_key = MY_API_KEY representation_model = OpenAI ( model = \"gpt-3.5-turbo\" , delay_in_seconds = 10 , chat = True ) # Use the representation model in BERTopic on top of the default pipeline topic_model = BERTopic ( representation_model = representation_model ) Prompting with ChatGPT is very satisfying and can be customized in BERTopic by using certain tags. There are currently two tags, namely \"[KEYWORDS]\" and \"[DOCUMENTS]\" . These tags indicate where in the prompt they are to be replaced with a topics keywords and top 4 most representative documents respectively. For example, if we have the following prompt: prompt = \"\"\" I have topic that contains the following documents: \\n [DOCUMENTS] The topic is described by the following keywords: [KEYWORDS] Based on the information above, extract a short topic label in the following format: topic: <topic label> \"\"\" then that will be rendered as follows and passed to OpenAI's API: \"\"\" I have a topic that contains the following documents: - Our videos are also made possible by your support on patreon.co. - If you want to help us make more videos, you can do so on patreon.com or get one of our posters from our shop. - If you want to help us make more videos, you can do so there. - And if you want to support us in our endeavor to survive in the world of online video, and make more videos, you can do so on patreon.com. The topic is described by the following keywords: videos video you our support want this us channel patreon make on we if facebook to patreoncom can for and more watch Based on the information above, extract a short topic label in the following format: topic: <topic label> \"\"\" Note Whenever you create a custom prompt, it is important to add Based on the information above, extract a short topic label in the following format: topic: <topic label> at the end of your prompt as BERTopic extracts everything that comes after topic: . Having said that, if topic: is not in the output, then it will simply extract the entire response, so feel free to experiment with the prompts. Version 0.14.0 \u00b6 Release date: 14 February, 2023 Highlights: Fine-tune topic representations with bertopic.representation Diverse range of models, including KeyBERT, MMR, POS, Transformers, OpenAI, and more!' Create your own prompts for text generation models, like GPT3: Use \"[KEYWORDS]\" and \"[DOCUMENTS]\" in the prompt to decide where the keywords and and set of representative documents need to be inserted. Chain models to perform fine-grained fine-tuning Create and customize your represention model Improved the topic reduction technique when using nr_topics=int Added title parameters for all graphs ( #800 ) Fixes: Improve documentation ( #837 , #769 , #954 , #912 , #911 ) Bump pyyaml ( #903 ) Fix large number of representative docs ( #965 ) Prevent stochastisch behavior in .visualize_topics ( #952 ) Add custom labels parameter to .visualize_topics ( #976 ) Fix cuML HDBSCAN type checks by @FelSiq in #981 API Changes: The diversity parameter was removed in favor of bertopic.representation.MaximalMarginalRelevance The representation_model parameter was added to bertopic.BERTopic Representation Models Fine-tune the c-TF-IDF representation with a variety of models. Whether that is through a KeyBERT-Inspired model or GPT-3, the choice is up to you! KeyBERTInspired The algorithm follows some principles of KeyBERT but does some optimization in order to speed up inference. Usage is straightforward: from bertopic.representation import KeyBERTInspired from bertopic import BERTopic # Create your representation model representation_model = KeyBERTInspired () # Use the representation model in BERTopic on top of the default pipeline topic_model = BERTopic ( representation_model = representation_model ) PartOfSpeech Our candidate topics, as extracted with c-TF-IDF, do not take into account a keyword's part of speech as extracting noun-phrases from all documents can be computationally quite expensive. Instead, we can leverage c-TF-IDF to perform part of speech on a subset of keywords and documents that best represent a topic. from bertopic.representation import PartOfSpeech from bertopic import BERTopic # Create your representation model representation_model = PartOfSpeech ( \"en_core_web_sm\" ) # Use the representation model in BERTopic on top of the default pipeline topic_model = BERTopic ( representation_model = representation_model ) MaximalMarginalRelevance When we calculate the weights of keywords, we typically do not consider whether we already have similar keywords in our topic. Words like \"car\" and \"cars\" essentially represent the same information and often redundant. We can use MaximalMarginalRelevance to improve diversity of our candidate topics: from bertopic.representation import MaximalMarginalRelevance from bertopic import BERTopic # Create your representation model representation_model = MaximalMarginalRelevance ( diversity = 0.3 ) # Use the representation model in BERTopic on top of the default pipeline topic_model = BERTopic ( representation_model = representation_model ) Zero-Shot Classification To perform zero-shot classification, we feed the model with the keywords as generated through c-TF-IDF and a set of candidate labels. If, for a certain topic, we find a similar enough label, then it is assigned. If not, then we keep the original c-TF-IDF keywords. We use it in BERTopic as follows: from bertopic.representation import ZeroShotClassification from bertopic import BERTopic # Create your representation model candidate_topics = [ \"space and nasa\" , \"bicycles\" , \"sports\" ] representation_model = ZeroShotClassification ( candidate_topics , model = \"facebook/bart-large-mnli\" ) # Use the representation model in BERTopic on top of the default pipeline topic_model = BERTopic ( representation_model = representation_model ) Text Generation: \ud83e\udd17 Transformers Nearly every week, there are new and improved models released on the \ud83e\udd17 Model Hub that, with some creativity, allow for further fine-tuning of our c-TF-IDF based topics. These models range from text generation to zero-classification. In BERTopic, wrappers around these methods are created as a way to support whatever might be released in the future. Using a GPT-like model from the huggingface hub is rather straightforward: from bertopic.representation import TextGeneration from bertopic import BERTopic # Create your representation model representation_model = TextGeneration ( 'gpt2' ) # Use the representation model in BERTopic on top of the default pipeline topic_model = BERTopic ( representation_model = representation_model ) Text Generation: Cohere Instead of using a language model from \ud83e\udd17 transformers, we can use external APIs instead that do the work for you. Here, we can use Cohere to extract our topic labels from the candidate documents and keywords. To use this, you will need to install cohere first: pip install cohere Then, get yourself an API key and use Cohere's API as follows: import cohere from bertopic.representation import Cohere from bertopic import BERTopic # Create your representation model co = cohere . Client ( my_api_key ) representation_model = Cohere ( co ) # Use the representation model in BERTopic on top of the default pipeline topic_model = BERTopic ( representation_model = representation_model ) Text Generation: OpenAI Instead of using a language model from \ud83e\udd17 transformers, we can use external APIs instead that do the work for you. Here, we can use OpenAI to extract our topic labels from the candidate documents and keywords. To use this, you will need to install openai first: pip install openai Then, get yourself an API key and use OpenAI's API as follows: import openai from bertopic.representation import OpenAI from bertopic import BERTopic # Create your representation model openai . api_key = MY_API_KEY representation_model = OpenAI () # Use the representation model in BERTopic on top of the default pipeline topic_model = BERTopic ( representation_model = representation_model ) Text Generation: LangChain Langchain is a package that helps users with chaining large language models. In BERTopic, we can leverage this package in order to more efficiently combine external knowledge. Here, this external knowledge are the most representative documents in each topic. To use langchain, you will need to install the langchain package first. Additionally, you will need an underlying LLM to support langchain, like openai: pip install langchain, openai Then, you can create your chain as follows: from langchain.chains.question_answering import load_qa_chain from langchain.llms import OpenAI chain = load_qa_chain ( OpenAI ( temperature = 0 , openai_api_key = MY_API_KEY ), chain_type = \"stuff\" ) Finally, you can pass the chain to BERTopic as follows: from bertopic.representation import LangChain # Create your representation model representation_model = LangChain ( chain ) # Use the representation model in BERTopic on top of the default pipeline topic_model = BERTopic ( representation_model = representation_model ) Version 0.13.0 \u00b6 Release date: 4 January, 2023 Highlights: Calculate topic distributions with .approximate_distribution regardless of the cluster model used Generates topic distributions on a document- and token-levels Can be used for any document regardless of its size! Fully supervised BERTopic You can now use a classification model for the clustering step instead to create a fully supervised topic model Manual topic modeling Generate topic representations from labels directly Allows for skipping the embedding and clustering steps in order to go directly to the topic representation step Reduce outliers with 4 different strategies using .reduce_outliers Install BERTopic without SentenceTransformers for a lightweight package : pip install --no-deps bertopic pip install --upgrade numpy hdbscan umap-learn pandas scikit-learn tqdm plotly pyyaml Get meta data of trained documents such as topics and probabilities using .get_document_info(docs) Added more support for cuML's HDBSCAN Calculate and predict probabilities during fit_transform and transform respectively This should give a major speed-up when setting calculate_probabilities=True More images to the documentation and a lot of changes/updates/clarifications Get representative documents for non-HDBSCAN models by comparing document and topic c-TF-IDF representations Sklearn Pipeline Embedder by @koaning in #791 Fixes: Improve .partial_fit documentation ( #837 ) Fixed scipy linkage usage ( #807 ) Fixed shifted heatmap ( #782 ) Fixed SpaCy backend ( #744 ) Fixed representative docs with small clusters (<3) ( #703 ) Typo fixed by @timpal0l in #734 Typo fixed by @srulikbd in #842 Correcting iframe urls by @Mustapha-AJEGHRIR in #798 Refactor embedding methods by @zachschillaci27 in #855 Added diversity parameter to update_topics() function by @anubhabdaserrr in #887 Documentation Personally, I believe that documentation can be seen as a feature and is an often underestimated aspect of open-source. So I went a bit overboard\ud83d\ude05... and created an animation about the three pillars of BERTopic using Manim. There are many other visualizations added, one of each variation of BERTopic, and many smaller changes. Topic Distributions The difficulty with a cluster-based topic modeling technique is that it does not directly consider that documents may contain multiple topics. With the new release, we can now model the distributions of topics! We even consider that a single word might be related to multiple topics. If a document is a mixture of topics, what is preventing a single word to be the same? To do so, we approximate the distribution of topics in a document by calculating and summing the similarities of tokensets (achieved by applying a sliding window) with the topics: # After fitting your model run the following for either your trained documents or even unseen documents topic_distr , _ = topic_model . approximate_distribution ( docs ) To calculate and visualize the topic distributions in a document on a token-level, we can run the following: # We need to calculate the topic distributions on a token level topic_distr , topic_token_distr = topic_model . approximate_distribution ( docs , calculate_tokens = True ) # Create a visualization using a styled dataframe if Jinja2 is installed df = topic_model . visualize_approximate_distribution ( docs [ 0 ], topic_token_distr [ 0 ]); df Supervised Topic Modeling BERTopic now supports fully-supervised classification! Instead of using a clustering algorithm, like HDBSCAN, we can replace it with a classifier, like Logistic Regression: from bertopic import BERTopic from bertopic.dimensionality import BaseDimensionalityReduction from sklearn.datasets import fetch_20newsgroups from sklearn.linear_model import LogisticRegression # Get labeled data data = fetch_20newsgroups ( subset = 'all' , remove = ( 'headers' , 'footers' , 'quotes' )) docs = data [ 'data' ] y = data [ 'target' ] # Allows us to skip over the dimensionality reduction step empty_dimensionality_model = BaseDimensionalityReduction () # Create a classifier to be used instead of the cluster model clf = LogisticRegression () # Create a fully supervised BERTopic instance topic_model = BERTopic ( umap_model = empty_dimensionality_model , hdbscan_model = clf ) topics , probs = topic_model . fit_transform ( docs , y = y ) Manual Topic Modeling When you already have a bunch of labels and simply want to extract topic representations from them, you might not need to actually learn how those can predicted. We can bypass the embeddings -> dimensionality reduction -> clustering steps and go straight to the c-TF-IDF representation of our labels: from bertopic import BERTopic from bertopic.backend import BaseEmbedder from bertopic.cluster import BaseCluster from bertopic.dimensionality import BaseDimensionalityReduction # Prepare our empty sub-models and reduce frequent words while we are at it. empty_embedding_model = BaseEmbedder () empty_dimensionality_model = BaseDimensionalityReduction () empty_cluster_model = BaseCluster () # Fit BERTopic without actually performing any clustering topic_model = BERTopic ( embedding_model = empty_embedding_model , umap_model = empty_dimensionality_model , hdbscan_model = empty_cluster_model , ) topics , probs = topic_model . fit_transform ( docs , y = y ) Outlier Reduction Outlier reduction is an frequently-discussed topic in BERTopic as its default cluster model, HDBSCAN, has a tendency to generate many outliers. This often helps in the topic representation steps, as we do not consider documents that are less relevant, but you might want to still assign those outliers to actual topics. In the modular philosophy of BERTopic, keeping training times in mind, it is now possible to perform outlier reduction after having trained your topic model. This allows for ease of iteration and prevents having to train BERTopic many times to find the parameters you are searching for. There are 4 different strategies that you can use, so make sure to check out the documentation ! Using it is rather straightforward: new_topics = topic_model . reduce_outliers ( docs , topics ) Lightweight BERTopic The default embedding model in BERTopic is one of the amazing sentence-transformers models, namely \"all-MiniLM-L6-v2\" . Although this model performs well out of the box, it typically needs a GPU to transform the documents into embeddings in a reasonable time. Moreover, the installation requires pytorch which often results in a rather large environment, memory-wise. Fortunately, it is possible to install BERTopic without sentence-transformers and use it as a lightweight solution instead. The installation can be done as follows: pip install --no-deps bertopic pip install --upgrade numpy hdbscan umap-learn pandas scikit-learn tqdm plotly pyyaml Then, we can use BERTopic without sentence-transformers as follows using a CPU-based embedding technique: from sklearn.pipeline import make_pipeline from sklearn.decomposition import TruncatedSVD from sklearn.feature_extraction.text import TfidfVectorizer pipe = make_pipeline ( TfidfVectorizer (), TruncatedSVD ( 100 ) ) topic_model = BERTopic ( embedding_model = pipe ) As a result, the entire package and resulting model can be run quickly on the CPU and no GPU is necessary! Document Information Get information about the documents on which the topic was trained including the documents themselves, their respective topics, the name of each topic, the top n words of each topic, whether it is a representative document, and the probability of the clustering if the cluster model supports it. There are also options to include other metadata, such as the topic distributions or the x and y coordinates of the reduced embeddings that you can learn more about here . To get the document info, you will only need to pass the documents on which the topic model was trained: >>> topic_model . get_document_info ( docs ) Document Topic Name Top_n_words Probability ... I am sure some bashers of Pens ... 0 0 _game_team_games_season game - team - games ... 0.200010 ... My brother is in the market for ... - 1 - 1 _can_your_will_any can - your - will ... 0.420668 ... Finally you said what you dream ... - 1 - 1 _can_your_will_any can - your - will ... 0.807259 ... Think ! It is the SCSI card doing ... 49 49 _windows_drive_dos_file windows - drive - docs ... 0.071746 ... 1 ) I have an old Jasmine drive ... 49 49 _windows_drive_dos_file windows - drive - docs ... 0.038983 ... Version 0.12.0 \u00b6 Release date: 5 September, 2022 Highlights : Perform online/incremental topic modeling with .partial_fit Expose c-TF-IDF model for customization with bertopic.vectorizers.ClassTfidfTransformer The parameters bm25_weighting and reduce_frequent_words were added to potentially improve representations: Expose attributes for easier access to internal data Major changes to the Algorithm page of the documentation, which now contains three overviews of the algorithm: Visualize Overview Code Overview Detailed Overview Added an example of combining BERTopic with KeyBERT Added many tests with the intention of making development a bit more stable Fixes : Fixed iteratively merging topics ( #632 and ( #648 ) Fixed 0th topic not showing up in visualizations ( #667 ) Fixed lowercasing not being optional ( #682 ) Fixed spelling ( #664 and ( #673 ) Fixed 0th topic not shown in .get_topic_info by @oxymor0n in #660 Fixed spelling by @domenicrosati in #674 Add custom labels and title options to barchart @leloykun in #694 Online/incremental topic modeling : Online topic modeling (sometimes called \"incremental topic modeling\") is the ability to learn incrementally from a mini-batch of instances. Essentially, it is a way to update your topic model with data on which it was not trained on before. In Scikit-Learn, this technique is often modeled through a .partial_fit function, which is also used in BERTopic. At a minimum, the cluster model needs to support a .partial_fit function in order to use this feature. The default HDBSCAN model will not work as it does not support online updating. from sklearn.datasets import fetch_20newsgroups from sklearn.cluster import MiniBatchKMeans from sklearn.decomposition import IncrementalPCA from bertopic.vectorizers import OnlineCountVectorizer from bertopic import BERTopic # Prepare documents all_docs = fetch_20newsgroups ( subset = subset , remove = ( 'headers' , 'footers' , 'quotes' ))[ \"data\" ] doc_chunks = [ all_docs [ i : i + 1000 ] for i in range ( 0 , len ( all_docs ), 1000 )] # Prepare sub-models that support online learning umap_model = IncrementalPCA ( n_components = 5 ) cluster_model = MiniBatchKMeans ( n_clusters = 50 , random_state = 0 ) vectorizer_model = OnlineCountVectorizer ( stop_words = \"english\" , decay = .01 ) topic_model = BERTopic ( umap_model = umap_model , hdbscan_model = cluster_model , vectorizer_model = vectorizer_model ) # Incrementally fit the topic model by training on 1000 documents at a time for docs in doc_chunks : topic_model . partial_fit ( docs ) Only the topics for the most recent batch of documents are tracked. If you want to be using online topic modeling, not for a streaming setting but merely for low-memory use cases, then it is advised to also update the .topics_ attribute as variations such as hierarchical topic modeling will not work afterward: # Incrementally fit the topic model by training on 1000 documents at a time and track the topics in each iteration topics = [] for docs in doc_chunks : topic_model . partial_fit ( docs ) topics . extend ( topic_model . topics_ ) topic_model . topics_ = topics c-TF-IDF : Explicitly define, use, and adjust the ClassTfidfTransformer with new parameters, bm25_weighting and reduce_frequent_words , to potentially improve the topic representation: from bertopic import BERTopic from bertopic.vectorizers import ClassTfidfTransformer ctfidf_model = ClassTfidfTransformer ( bm25_weighting = True ) topic_model = BERTopic ( ctfidf_model = ctfidf_model ) Attributes : After having fitted your BERTopic instance, you can use the following attributes to have quick access to certain information, such as the topic assignment for each document in topic_model.topics_ . Attribute Type Description topics_ List[int] The topics that are generated for each document after training or updating the topic model. The most recent topics are tracked. probabilities_ List[float] The probability of the assigned topic per document. These are only calculated if a HDBSCAN model is used for the clustering step. When calculate_probabilities=True , then it is the probabilities of all topics per document. topic_sizes_ Mapping[int, int] The size of each topic. topic_mapper_ TopicMapper A class for tracking topics and their mappings anytime they are merged, reduced, added, or removed. topic_representations_ Mapping[int, Tuple[int, float]] The top n terms per topic and their respective c-TF-IDF values. c_tf_idf_ csr_matrix The topic-term matrix as calculated through c-TF-IDF. To access its respective words, run .vectorizer_model.get_feature_names() or .vectorizer_model.get_feature_names_out() topic_labels_ Mapping[int, str] The default labels for each topic. custom_labels_ List[str] Custom labels for each topic as generated through .set_topic_labels . topic_embeddings_ np.ndarray The embeddings for each topic. It is calculated by taking the weighted average of word embeddings in a topic based on their c-TF-IDF values. representative_docs_ Mapping[int, str] The representative documents for each topic if HDBSCAN is used. Version 0.11.0 \u00b6 Release date: 11 July, 2022 Highlights : Perform hierarchical topic modeling with .hierarchical_topics hierarchical_topics = topic_model . hierarchical_topics ( docs , topics ) Visualize hierarchical topic representations with .visualize_hierarchy topic_model . visualize_hierarchy ( hierarchical_topics = hierarchical_topics ) Extract a text-based hierarchical topic representation with .get_topic_tree tree = topic_model . get_topic_tree ( hierarchical_topics ) Visualize 2D documents with .visualize_documents() # Use input embeddings topic_model . visualize_documents ( docs , embeddings = embeddings ) # or use 2D reduced embeddings through a method of your own (e.g., PCA, t-SNE, UMAP, etc.) reduced_embeddings = UMAP ( n_neighbors = 10 , n_components = 2 , min_dist = 0.0 , metric = 'cosine' ) . fit_transform ( embeddings ) topic_model . visualize_documents ( docs , reduced_embeddings = reduced_embeddings ) Visualize 2D hierarchical documents with .visualize_hierarchical_documents() # Run the visualization with the original embeddings topic_model . visualize_hierarchical_documents ( docs , hierarchical_topics , embeddings = embeddings ) # Or, if you have reduced the original embeddings already which speed things up quite a bit: reduced_embeddings = UMAP ( n_neighbors = 10 , n_components = 2 , min_dist = 0.0 , metric = 'cosine' ) . fit_transform ( embeddings ) topic_model . visualize_hierarchical_documents ( docs , hierarchical_topics , reduced_embeddings = reduced_embeddings ) Create custom labels to the topics throughout most visualizations # Generate topic labels topic_labels = topic_model . generate_topic_labels ( nr_words = 3 , topic_prefix = False , word_length = 10 , separator = \", \" ) # Set them internally in BERTopic topic_model . set_topic_labels ( topics_labels ) Manually merge topics with .merge_topics() # Merge topics 1, 2, and 3 topics_to_merge = [ 1 , 2 , 3 ] topic_model . merge_topics ( docs , topics , topics_to_merge ) # Merge topics 1 and 2, and separately merge topics 3 and 4 topics_to_merge = [[ 1 , 2 ], [ 3 , 4 ]] topic_model . merge_topics ( docs , topics , topics_to_merge ) Added example for finding similar topics between two models in the tips & tricks page Add multi-modal example in the tips & tricks page Added native Hugging Face transformers support Fixes : Fix support for k-Means in .visualize_heatmap ( #532 ) Fix missing topic 0 in .visualize_topics ( #533 ) Fix inconsistencies in .get_topic_info ( #572 ) and ( #581 ) Add optimal_ordering parameter to .visualize_hierarchy by @rafaelvalero in #390 Fix RuntimeError when used as sklearn estimator by @simonfelding in #448 Fix typo in visualization documentation by @dwhdai in #475 Fix typo in docstrings by @xwwwwww in #549 Support higher Flair versions Version 0.10.0 \u00b6 Release date: 30 April, 2022 Highlights : Use any dimensionality reduction technique instead of UMAP: from bertopic import BERTopic from sklearn.decomposition import PCA dim_model = PCA ( n_components = 5 ) topic_model = BERTopic ( umap_model = dim_model ) Use any clustering technique instead of HDBSCAN: from bertopic import BERTopic from sklearn.cluster import KMeans cluster_model = KMeans ( n_clusters = 50 ) topic_model = BERTopic ( hdbscan_model = cluster_model ) Documentation : Add a CountVectorizer page with tips and tricks on how to create topic representations that fit your use case Added pages on how to use other dimensionality reduction and clustering algorithms Additional instructions on how to reduce outliers in the FAQ: import numpy as np probability_threshold = 0.01 new_topics = [ np . argmax ( prob ) if max ( prob ) >= probability_threshold else - 1 for prob in probs ] Fixes : Fixed None being returned for probabilities when transforming unseen documents Replaced all instances of arg: with Arguments: for consistency Before saving a fitted BERTopic instance, we remove the stopwords in the fitted CountVectorizer model as it can get quite large due to the number of words that end in stopwords if min_df is set to a value larger than 1 Set \"hdbscan>=0.8.28\" to prevent numpy issues Although this was already fixed by the new release of HDBSCAN, it is technically still possible to install 0.8.27 with BERTopic which leads to these numpy issues Update gensim dependency to >=4.0.0 ( #371 ) Fix topic 0 not appearing in visualizations ( #472 ) Fix ( #506 ) Fix ( #429 ) Fix typo in DTM documentation by @hp0404 in #386 Version 0.9.4 \u00b6 Release date: 14 December, 2021 A number of fixes, documentation updates, and small features: Expose diversity parameter Use BERTopic(diversity=0.1) to change how diverse the words in a topic representation are (ranges from 0 to 1) Improve stability of topic reduction by only computing the cosine similarity within c-TF-IDF and not the topic embeddings Added property to c-TF-IDF that all IDF values should be positive ( #351 ) Improve stability of .visualize_barchart() and .visualize_hierarchy() Major documentation overhaul (mkdocs, tutorials, FAQ, images, etc. ) ( #330 ) Drop python 3.6 ( #333 ) Relax plotly dependency ( #88 ) Additional logging for .transform ( #356 ) Version 0.9.3 \u00b6 Release date: 17 October, 2021 Fix #282 As it turns out the old implementation of topic mapping was still found in the transform function Fix #285 Fix getting all representative docs Fix #288 A recent issue with the package pyyaml that can be found in Google Colab Version 0.9.2 \u00b6 Release date: 12 October, 2021 A release focused on algorithmic optimization and fixing several issues: Highlights : Update the non-multilingual paraphrase- models to the all- models due to improved performance Reduce necessary RAM in c-TF-IDF top 30 word extraction Fixes : Fix topic mapping When reducing the number of topics, these need to be mapped to the correct input/output which had some issues in the previous version A new class was created as a way to track these mappings regardless of how many times they were executed In other words, you can iteratively reduce the number of topics after training the model without the need to continuously train the model Fix typo in embeddings page ( #200 ) Fix link in README ( #233 ) Fix documentation .visualize_term_rank() ( #253 ) Fix getting correct representative docs ( #258 ) Update memory FAQ with HDBSCAN pr Version 0.9.1 \u00b6 Release date: 1 September, 2021 A release focused on fixing several issues: Fixes : Fix TypeError when auto-reducing topics ( #210 ) Fix mapping representative docs when reducing topics ( #208 ) Fix visualization issues with probabilities ( #205 ) Fix missing normalize_frequency param in plots ( #213 ) Version 0.9.0 \u00b6 Release date: 9 August, 2021 Highlights : Implemented a Guided BERTopic -> Use seeds to steer the Topic Modeling Get the most representative documents per topic: topic_model.get_representative_docs(topic=1) This allows users to see which documents are good representations of a topic and better understand the topics that were created Added normalize_frequency parameter to visualize_topics_per_class and visualize_topics_over_time in order to better compare the relative topic frequencies between topics Return flat probabilities as default, only calculate the probabilities of all topics per document if calculate_probabilities is True Added several FAQs Fixes : Fix loading pre-trained BERTopic model Fix mapping of probabilities Fix #190 Guided BERTopic : Guided BERTopic works in two ways: First, we create embeddings for each seeded topics by joining them and passing them through the document embedder. These embeddings will be compared with the existing document embeddings through cosine similarity and assigned a label. If the document is most similar to a seeded topic, then it will get that topic's label. If it is most similar to the average document embedding, it will get the -1 label. These labels are then passed through UMAP to create a semi-supervised approach that should nudge the topic creation to the seeded topics. Second, we take all words in seed_topic_list and assign them a multiplier larger than 1. Those multipliers will be used to increase the IDF values of the words across all topics thereby increasing the likelihood that a seeded topic word will appear in a topic. This does, however, also increase the chance of an irrelevant topic having unrelated words. In practice, this should not be an issue since the IDF value is likely to remain low regardless of the multiplier. The multiplier is now a fixed value but may change to something more elegant, like taking the distribution of IDF values and its position into account when defining the multiplier. seed_topic_list = [[ \"company\" , \"billion\" , \"quarter\" , \"shrs\" , \"earnings\" ], [ \"acquisition\" , \"procurement\" , \"merge\" ], [ \"exchange\" , \"currency\" , \"trading\" , \"rate\" , \"euro\" ], [ \"grain\" , \"wheat\" , \"corn\" ], [ \"coffee\" , \"cocoa\" ], [ \"natural\" , \"gas\" , \"oil\" , \"fuel\" , \"products\" , \"petrol\" ]] topic_model = BERTopic ( seed_topic_list = seed_topic_list ) topics , probs = topic_model . fit_transform ( docs ) Version 0.8.1 \u00b6 Release date: 8 June, 2021 Highlights : Improved models: For English documents the default is now: \"paraphrase-MiniLM-L6-v2\" For Non-English or multi-lingual documents the default is now: \"paraphrase-multilingual-MiniLM-L12-v2\" Both models show not only great performance but are much faster! Add interactive visualizations to the plotting API documentation For better performance, please use the following models: English: \"paraphrase-mpnet-base-v2\" Non-English or multi-lingual: \"paraphrase-multilingual-mpnet-base-v2\" Fixes : Improved unit testing for more stability Set transformers version for Flair Version 0.8.0 \u00b6 Release date: 31 May, 2021 Highlights : Additional visualizations: Topic Hierarchy: topic_model.visualize_hierarchy() Topic Similarity Heatmap: topic_model.visualize_heatmap() Topic Representation Barchart: topic_model.visualize_barchart() Term Score Decline: topic_model.visualize_term_rank() Created bertopic.plotting library to easily extend visualizations Improved automatic topic reduction by using HDBSCAN to detect similar topics Sort topic ids by their frequency. -1 is the outlier class and contains typically the most documents. After that 0 is the largest topic, 1 the second largest, etc. Fixes : Fix typo #113 , #117 Fix #121 by removing these two lines Fix mapping of topics after reduction (it now excludes 0) ( #103 ) Version 0.7.0 \u00b6 Release date: 26 April, 2021 The two main features are (semi-)supervised topic modeling and several backends to use instead of Flair and SentenceTransformers! Highlights : (semi-)supervised topic modeling by leveraging supervised options in UMAP model.fit(docs, y=target_classes) Backends: Added Spacy, Gensim, USE (TFHub) Use a different backend for document embeddings and word embeddings Create your own backends with bertopic.backend.BaseEmbedder Click here for an overview of all new backends Calculate and visualize topics per class Calculate: topics_per_class = topic_model.topics_per_class(docs, topics, classes) Visualize: topic_model.visualize_topics_per_class(topics_per_class) Several tutorials were updated and added: Name Link Topic Modeling with BERTopic (Custom) Embedding Models in BERTopic Advanced Customization in BERTopic (semi-)Supervised Topic Modeling with BERTopic Dynamic Topic Modeling with Trump's Tweets Fixes : Fixed issues with Torch req Prevent saving term frequency matrix in CTFIDF class Fixed DTM not working when reducing topics ( #96 ) Moved visualization dependencies to base BERTopic pip install bertopic[visualization] becomes pip install bertopic Allow precomputed embeddings in bertopic.find_topics() ( #79 ): model = BERTopic ( embedding_model = my_embedding_model ) model . fit ( docs , my_precomputed_embeddings ) model . find_topics ( search_term ) Version 0.6.0 \u00b6 Release date: 1 March, 2021 Highlights : DTM: Added a basic dynamic topic modeling technique based on the global c-TF-IDF representation model.topics_over_time(docs, timestamps, global_tuning=True) DTM: Option to evolve topics based on t-1 c-TF-IDF representation which results in evolving topics over time Only uses topics at t-1 and skips evolution if there is a gap model.topics_over_time(docs, timestamps, evolution_tuning=True) DTM: Function to visualize topics over time model.visualize_topics_over_time(topics_over_time) DTM: Add binning of timestamps model.topics_over_time(docs, timestamps, nr_bins=10) Add function get general information about topics (id, frequency, name, etc.) get_topic_info() Improved stability of c-TF-IDF by taking the average number of words across all topics instead of the number of documents Fixes : _map_probabilities() does not take into account that there is no probability of the outlier class and the probabilities are mutated instead of copied (#63, #64) Version 0.5.0 \u00b6 Release date: 8 Februari, 2021 Highlights : Add Flair to allow for more (custom) token/document embeddings, including \ud83e\udd17 transformers Option to use custom UMAP, HDBSCAN, and CountVectorizer Added low_memory parameter to reduce memory during computation Improved verbosity (shows progress bar) Return the figure of visualize_topics() Expose all parameters with a single function: get_params() Fixes : To simplify the API, the parameters stop_words and n_neighbors were removed. These can still be used when a custom UMAP or CountVectorizer is used. Set calculate_probabilities to False as a default. Calculating probabilities with HDBSCAN significantly increases computation time and memory usage. Better to remove calculating probabilities or only allow it by manually turning this on. Use the newest version of sentence-transformers as it speeds ups encoding significantly Version 0.4.2 \u00b6 Release date: 10 Januari, 2021 Fixes : Selecting embedding_model did not work when language was also used. This led to the user needing to set language to None before being able to use embedding_model . Fixed by using embedding_model when language is used (as a default parameter). Version 0.4.1 \u00b6 Release date: 07 Januari, 2021 Fixes : Simple fix by lowering the languages variable to match the lowered input language. Version 0.4.0 \u00b6 Release date: 21 December, 2020 Highlights : Visualize Topics similar to LDAvis Added option to reduce topics after training Added option to update topic representation after training Added option to search topics using a search term Significantly improved the stability of generating clusters Finetune the topic words by selecting the most coherent words with the highest c-TF-IDF values More extensive tutorials in the documentation Notable Changes : Option to select language instead of sentence-transformers models to minimize the complexity of using BERTopic Improved logging (remove duplicates) Check if BERTopic is fitted Added TF-IDF as an embedder instead of transformer models (see tutorial) Numpy for Python 3.6 will be dropped and was therefore removed from the workflow. Preprocess text before passing it through c-TF-IDF Merged get_topics_freq() with get_topic_freq() Fixes : Fix error handling topic probabilities Version 0.3.2 \u00b6 Release date: 16 November, 2020 Highlights : Fixed a bug with the topic reduction method that seems to reduce the number of topics but not to the nr_topics as defined in the class. Since this was, to a certain extend, breaking the topic reduction method a new release was necessary. Version 0.3.1 \u00b6 Release date: 4 November, 2020 Highlights : Adding the option to use custom embeddings or embeddings that you generated beforehand with whatever package you'd like to use. This allows users to further customize BERTopic to their liking. Version 0.3.0 \u00b6 Release date: 29 October, 2020 Highlights : transform() and fit_transform() now also return the topic probability distributions Added visualize_distribution() which visualizes the topic probability distribution for a single document Version 0.2.2 \u00b6 Release date: 17 October, 2020 Highlights : Fixed n_gram_range not being used Added option for using stopwords Version 0.2.1 \u00b6 Release date: 11 October, 2020 Highlights : Improved the calculation of the class-based TF-IDF procedure by limiting the calculation to sparse matrices. This prevents out-of-memory problems when faced with large datasets. Version 0.2.0 \u00b6 Release date: 11 October, 2020 Highlights : Changed c-TF-IDF procedure such that it implements a version of scikit-learns procedure. This should also speed up the calculation of the sparse matrix and prevent memory errors. Added automated unit tests Version 0.1.2 \u00b6 Release date: 1 October, 2020 Highlights : When transforming new documents, self.mapped_topics seemed to be missing. Added to the init. Version 0.1.1 \u00b6 Release date: 24 September, 2020 Highlights : Fixed requirements --> Issue with pytorch Update documentation Version 0.1.0 \u00b6 Release date: 24 September, 2020 Highlights : First release of BERTopic Added parameters for UMAP and HDBSCAN Option to choose sentence-transformer model Method for transforming unseen documents Save and load trained models (UMAP and HDBSCAN) Extract topics and their sizes Notable Changes : Optimized c-TF-IDF Improved documentation Improved topic reduction","title":"Changelog"},{"location":"changelog.html#changelog","text":"","title":"Changelog"},{"location":"changelog.html#version-0141","text":"Release date: 2 March, 2023","title":"Version 0.14.1"},{"location":"changelog.html#version-0140","text":"Release date: 14 February, 2023","title":"Version 0.14.0"},{"location":"changelog.html#version-0130","text":"Release date: 4 January, 2023","title":"Version 0.13.0"},{"location":"changelog.html#version-0120","text":"Release date: 5 September, 2022 Highlights : Perform online/incremental topic modeling with .partial_fit Expose c-TF-IDF model for customization with bertopic.vectorizers.ClassTfidfTransformer The parameters bm25_weighting and reduce_frequent_words were added to potentially improve representations: Expose attributes for easier access to internal data Major changes to the Algorithm page of the documentation, which now contains three overviews of the algorithm: Visualize Overview Code Overview Detailed Overview Added an example of combining BERTopic with KeyBERT Added many tests with the intention of making development a bit more stable Fixes : Fixed iteratively merging topics ( #632 and ( #648 ) Fixed 0th topic not showing up in visualizations ( #667 ) Fixed lowercasing not being optional ( #682 ) Fixed spelling ( #664 and ( #673 ) Fixed 0th topic not shown in .get_topic_info by @oxymor0n in #660 Fixed spelling by @domenicrosati in #674 Add custom labels and title options to barchart @leloykun in #694 Online/incremental topic modeling : Online topic modeling (sometimes called \"incremental topic modeling\") is the ability to learn incrementally from a mini-batch of instances. Essentially, it is a way to update your topic model with data on which it was not trained on before. In Scikit-Learn, this technique is often modeled through a .partial_fit function, which is also used in BERTopic. At a minimum, the cluster model needs to support a .partial_fit function in order to use this feature. The default HDBSCAN model will not work as it does not support online updating. from sklearn.datasets import fetch_20newsgroups from sklearn.cluster import MiniBatchKMeans from sklearn.decomposition import IncrementalPCA from bertopic.vectorizers import OnlineCountVectorizer from bertopic import BERTopic # Prepare documents all_docs = fetch_20newsgroups ( subset = subset , remove = ( 'headers' , 'footers' , 'quotes' ))[ \"data\" ] doc_chunks = [ all_docs [ i : i + 1000 ] for i in range ( 0 , len ( all_docs ), 1000 )] # Prepare sub-models that support online learning umap_model = IncrementalPCA ( n_components = 5 ) cluster_model = MiniBatchKMeans ( n_clusters = 50 , random_state = 0 ) vectorizer_model = OnlineCountVectorizer ( stop_words = \"english\" , decay = .01 ) topic_model = BERTopic ( umap_model = umap_model , hdbscan_model = cluster_model , vectorizer_model = vectorizer_model ) # Incrementally fit the topic model by training on 1000 documents at a time for docs in doc_chunks : topic_model . partial_fit ( docs ) Only the topics for the most recent batch of documents are tracked. If you want to be using online topic modeling, not for a streaming setting but merely for low-memory use cases, then it is advised to also update the .topics_ attribute as variations such as hierarchical topic modeling will not work afterward: # Incrementally fit the topic model by training on 1000 documents at a time and track the topics in each iteration topics = [] for docs in doc_chunks : topic_model . partial_fit ( docs ) topics . extend ( topic_model . topics_ ) topic_model . topics_ = topics c-TF-IDF : Explicitly define, use, and adjust the ClassTfidfTransformer with new parameters, bm25_weighting and reduce_frequent_words , to potentially improve the topic representation: from bertopic import BERTopic from bertopic.vectorizers import ClassTfidfTransformer ctfidf_model = ClassTfidfTransformer ( bm25_weighting = True ) topic_model = BERTopic ( ctfidf_model = ctfidf_model ) Attributes : After having fitted your BERTopic instance, you can use the following attributes to have quick access to certain information, such as the topic assignment for each document in topic_model.topics_ . Attribute Type Description topics_ List[int] The topics that are generated for each document after training or updating the topic model. The most recent topics are tracked. probabilities_ List[float] The probability of the assigned topic per document. These are only calculated if a HDBSCAN model is used for the clustering step. When calculate_probabilities=True , then it is the probabilities of all topics per document. topic_sizes_ Mapping[int, int] The size of each topic. topic_mapper_ TopicMapper A class for tracking topics and their mappings anytime they are merged, reduced, added, or removed. topic_representations_ Mapping[int, Tuple[int, float]] The top n terms per topic and their respective c-TF-IDF values. c_tf_idf_ csr_matrix The topic-term matrix as calculated through c-TF-IDF. To access its respective words, run .vectorizer_model.get_feature_names() or .vectorizer_model.get_feature_names_out() topic_labels_ Mapping[int, str] The default labels for each topic. custom_labels_ List[str] Custom labels for each topic as generated through .set_topic_labels . topic_embeddings_ np.ndarray The embeddings for each topic. It is calculated by taking the weighted average of word embeddings in a topic based on their c-TF-IDF values. representative_docs_ Mapping[int, str] The representative documents for each topic if HDBSCAN is used.","title":"Version 0.12.0"},{"location":"changelog.html#version-0110","text":"Release date: 11 July, 2022 Highlights : Perform hierarchical topic modeling with .hierarchical_topics hierarchical_topics = topic_model . hierarchical_topics ( docs , topics ) Visualize hierarchical topic representations with .visualize_hierarchy topic_model . visualize_hierarchy ( hierarchical_topics = hierarchical_topics ) Extract a text-based hierarchical topic representation with .get_topic_tree tree = topic_model . get_topic_tree ( hierarchical_topics ) Visualize 2D documents with .visualize_documents() # Use input embeddings topic_model . visualize_documents ( docs , embeddings = embeddings ) # or use 2D reduced embeddings through a method of your own (e.g., PCA, t-SNE, UMAP, etc.) reduced_embeddings = UMAP ( n_neighbors = 10 , n_components = 2 , min_dist = 0.0 , metric = 'cosine' ) . fit_transform ( embeddings ) topic_model . visualize_documents ( docs , reduced_embeddings = reduced_embeddings ) Visualize 2D hierarchical documents with .visualize_hierarchical_documents() # Run the visualization with the original embeddings topic_model . visualize_hierarchical_documents ( docs , hierarchical_topics , embeddings = embeddings ) # Or, if you have reduced the original embeddings already which speed things up quite a bit: reduced_embeddings = UMAP ( n_neighbors = 10 , n_components = 2 , min_dist = 0.0 , metric = 'cosine' ) . fit_transform ( embeddings ) topic_model . visualize_hierarchical_documents ( docs , hierarchical_topics , reduced_embeddings = reduced_embeddings ) Create custom labels to the topics throughout most visualizations # Generate topic labels topic_labels = topic_model . generate_topic_labels ( nr_words = 3 , topic_prefix = False , word_length = 10 , separator = \", \" ) # Set them internally in BERTopic topic_model . set_topic_labels ( topics_labels ) Manually merge topics with .merge_topics() # Merge topics 1, 2, and 3 topics_to_merge = [ 1 , 2 , 3 ] topic_model . merge_topics ( docs , topics , topics_to_merge ) # Merge topics 1 and 2, and separately merge topics 3 and 4 topics_to_merge = [[ 1 , 2 ], [ 3 , 4 ]] topic_model . merge_topics ( docs , topics , topics_to_merge ) Added example for finding similar topics between two models in the tips & tricks page Add multi-modal example in the tips & tricks page Added native Hugging Face transformers support Fixes : Fix support for k-Means in .visualize_heatmap ( #532 ) Fix missing topic 0 in .visualize_topics ( #533 ) Fix inconsistencies in .get_topic_info ( #572 ) and ( #581 ) Add optimal_ordering parameter to .visualize_hierarchy by @rafaelvalero in #390 Fix RuntimeError when used as sklearn estimator by @simonfelding in #448 Fix typo in visualization documentation by @dwhdai in #475 Fix typo in docstrings by @xwwwwww in #549 Support higher Flair versions","title":"Version 0.11.0"},{"location":"changelog.html#version-0100","text":"Release date: 30 April, 2022 Highlights : Use any dimensionality reduction technique instead of UMAP: from bertopic import BERTopic from sklearn.decomposition import PCA dim_model = PCA ( n_components = 5 ) topic_model = BERTopic ( umap_model = dim_model ) Use any clustering technique instead of HDBSCAN: from bertopic import BERTopic from sklearn.cluster import KMeans cluster_model = KMeans ( n_clusters = 50 ) topic_model = BERTopic ( hdbscan_model = cluster_model ) Documentation : Add a CountVectorizer page with tips and tricks on how to create topic representations that fit your use case Added pages on how to use other dimensionality reduction and clustering algorithms Additional instructions on how to reduce outliers in the FAQ: import numpy as np probability_threshold = 0.01 new_topics = [ np . argmax ( prob ) if max ( prob ) >= probability_threshold else - 1 for prob in probs ] Fixes : Fixed None being returned for probabilities when transforming unseen documents Replaced all instances of arg: with Arguments: for consistency Before saving a fitted BERTopic instance, we remove the stopwords in the fitted CountVectorizer model as it can get quite large due to the number of words that end in stopwords if min_df is set to a value larger than 1 Set \"hdbscan>=0.8.28\" to prevent numpy issues Although this was already fixed by the new release of HDBSCAN, it is technically still possible to install 0.8.27 with BERTopic which leads to these numpy issues Update gensim dependency to >=4.0.0 ( #371 ) Fix topic 0 not appearing in visualizations ( #472 ) Fix ( #506 ) Fix ( #429 ) Fix typo in DTM documentation by @hp0404 in #386","title":"Version 0.10.0"},{"location":"changelog.html#version-094","text":"Release date: 14 December, 2021 A number of fixes, documentation updates, and small features: Expose diversity parameter Use BERTopic(diversity=0.1) to change how diverse the words in a topic representation are (ranges from 0 to 1) Improve stability of topic reduction by only computing the cosine similarity within c-TF-IDF and not the topic embeddings Added property to c-TF-IDF that all IDF values should be positive ( #351 ) Improve stability of .visualize_barchart() and .visualize_hierarchy() Major documentation overhaul (mkdocs, tutorials, FAQ, images, etc. ) ( #330 ) Drop python 3.6 ( #333 ) Relax plotly dependency ( #88 ) Additional logging for .transform ( #356 )","title":"Version 0.9.4"},{"location":"changelog.html#version-093","text":"Release date: 17 October, 2021 Fix #282 As it turns out the old implementation of topic mapping was still found in the transform function Fix #285 Fix getting all representative docs Fix #288 A recent issue with the package pyyaml that can be found in Google Colab","title":"Version 0.9.3"},{"location":"changelog.html#version-092","text":"Release date: 12 October, 2021 A release focused on algorithmic optimization and fixing several issues: Highlights : Update the non-multilingual paraphrase- models to the all- models due to improved performance Reduce necessary RAM in c-TF-IDF top 30 word extraction Fixes : Fix topic mapping When reducing the number of topics, these need to be mapped to the correct input/output which had some issues in the previous version A new class was created as a way to track these mappings regardless of how many times they were executed In other words, you can iteratively reduce the number of topics after training the model without the need to continuously train the model Fix typo in embeddings page ( #200 ) Fix link in README ( #233 ) Fix documentation .visualize_term_rank() ( #253 ) Fix getting correct representative docs ( #258 ) Update memory FAQ with HDBSCAN pr","title":"Version 0.9.2"},{"location":"changelog.html#version-091","text":"Release date: 1 September, 2021 A release focused on fixing several issues: Fixes : Fix TypeError when auto-reducing topics ( #210 ) Fix mapping representative docs when reducing topics ( #208 ) Fix visualization issues with probabilities ( #205 ) Fix missing normalize_frequency param in plots ( #213 )","title":"Version 0.9.1"},{"location":"changelog.html#version-090","text":"Release date: 9 August, 2021 Highlights : Implemented a Guided BERTopic -> Use seeds to steer the Topic Modeling Get the most representative documents per topic: topic_model.get_representative_docs(topic=1) This allows users to see which documents are good representations of a topic and better understand the topics that were created Added normalize_frequency parameter to visualize_topics_per_class and visualize_topics_over_time in order to better compare the relative topic frequencies between topics Return flat probabilities as default, only calculate the probabilities of all topics per document if calculate_probabilities is True Added several FAQs Fixes : Fix loading pre-trained BERTopic model Fix mapping of probabilities Fix #190 Guided BERTopic : Guided BERTopic works in two ways: First, we create embeddings for each seeded topics by joining them and passing them through the document embedder. These embeddings will be compared with the existing document embeddings through cosine similarity and assigned a label. If the document is most similar to a seeded topic, then it will get that topic's label. If it is most similar to the average document embedding, it will get the -1 label. These labels are then passed through UMAP to create a semi-supervised approach that should nudge the topic creation to the seeded topics. Second, we take all words in seed_topic_list and assign them a multiplier larger than 1. Those multipliers will be used to increase the IDF values of the words across all topics thereby increasing the likelihood that a seeded topic word will appear in a topic. This does, however, also increase the chance of an irrelevant topic having unrelated words. In practice, this should not be an issue since the IDF value is likely to remain low regardless of the multiplier. The multiplier is now a fixed value but may change to something more elegant, like taking the distribution of IDF values and its position into account when defining the multiplier. seed_topic_list = [[ \"company\" , \"billion\" , \"quarter\" , \"shrs\" , \"earnings\" ], [ \"acquisition\" , \"procurement\" , \"merge\" ], [ \"exchange\" , \"currency\" , \"trading\" , \"rate\" , \"euro\" ], [ \"grain\" , \"wheat\" , \"corn\" ], [ \"coffee\" , \"cocoa\" ], [ \"natural\" , \"gas\" , \"oil\" , \"fuel\" , \"products\" , \"petrol\" ]] topic_model = BERTopic ( seed_topic_list = seed_topic_list ) topics , probs = topic_model . fit_transform ( docs )","title":"Version 0.9.0"},{"location":"changelog.html#version-081","text":"Release date: 8 June, 2021 Highlights : Improved models: For English documents the default is now: \"paraphrase-MiniLM-L6-v2\" For Non-English or multi-lingual documents the default is now: \"paraphrase-multilingual-MiniLM-L12-v2\" Both models show not only great performance but are much faster! Add interactive visualizations to the plotting API documentation For better performance, please use the following models: English: \"paraphrase-mpnet-base-v2\" Non-English or multi-lingual: \"paraphrase-multilingual-mpnet-base-v2\" Fixes : Improved unit testing for more stability Set transformers version for Flair","title":"Version 0.8.1"},{"location":"changelog.html#version-080","text":"Release date: 31 May, 2021 Highlights : Additional visualizations: Topic Hierarchy: topic_model.visualize_hierarchy() Topic Similarity Heatmap: topic_model.visualize_heatmap() Topic Representation Barchart: topic_model.visualize_barchart() Term Score Decline: topic_model.visualize_term_rank() Created bertopic.plotting library to easily extend visualizations Improved automatic topic reduction by using HDBSCAN to detect similar topics Sort topic ids by their frequency. -1 is the outlier class and contains typically the most documents. After that 0 is the largest topic, 1 the second largest, etc. Fixes : Fix typo #113 , #117 Fix #121 by removing these two lines Fix mapping of topics after reduction (it now excludes 0) ( #103 )","title":"Version 0.8.0"},{"location":"changelog.html#version-070","text":"Release date: 26 April, 2021 The two main features are (semi-)supervised topic modeling and several backends to use instead of Flair and SentenceTransformers! Highlights : (semi-)supervised topic modeling by leveraging supervised options in UMAP model.fit(docs, y=target_classes) Backends: Added Spacy, Gensim, USE (TFHub) Use a different backend for document embeddings and word embeddings Create your own backends with bertopic.backend.BaseEmbedder Click here for an overview of all new backends Calculate and visualize topics per class Calculate: topics_per_class = topic_model.topics_per_class(docs, topics, classes) Visualize: topic_model.visualize_topics_per_class(topics_per_class) Several tutorials were updated and added: Name Link Topic Modeling with BERTopic (Custom) Embedding Models in BERTopic Advanced Customization in BERTopic (semi-)Supervised Topic Modeling with BERTopic Dynamic Topic Modeling with Trump's Tweets Fixes : Fixed issues with Torch req Prevent saving term frequency matrix in CTFIDF class Fixed DTM not working when reducing topics ( #96 ) Moved visualization dependencies to base BERTopic pip install bertopic[visualization] becomes pip install bertopic Allow precomputed embeddings in bertopic.find_topics() ( #79 ): model = BERTopic ( embedding_model = my_embedding_model ) model . fit ( docs , my_precomputed_embeddings ) model . find_topics ( search_term )","title":"Version 0.7.0"},{"location":"changelog.html#version-060","text":"Release date: 1 March, 2021 Highlights : DTM: Added a basic dynamic topic modeling technique based on the global c-TF-IDF representation model.topics_over_time(docs, timestamps, global_tuning=True) DTM: Option to evolve topics based on t-1 c-TF-IDF representation which results in evolving topics over time Only uses topics at t-1 and skips evolution if there is a gap model.topics_over_time(docs, timestamps, evolution_tuning=True) DTM: Function to visualize topics over time model.visualize_topics_over_time(topics_over_time) DTM: Add binning of timestamps model.topics_over_time(docs, timestamps, nr_bins=10) Add function get general information about topics (id, frequency, name, etc.) get_topic_info() Improved stability of c-TF-IDF by taking the average number of words across all topics instead of the number of documents Fixes : _map_probabilities() does not take into account that there is no probability of the outlier class and the probabilities are mutated instead of copied (#63, #64)","title":"Version 0.6.0"},{"location":"changelog.html#version-050","text":"Release date: 8 Februari, 2021 Highlights : Add Flair to allow for more (custom) token/document embeddings, including \ud83e\udd17 transformers Option to use custom UMAP, HDBSCAN, and CountVectorizer Added low_memory parameter to reduce memory during computation Improved verbosity (shows progress bar) Return the figure of visualize_topics() Expose all parameters with a single function: get_params() Fixes : To simplify the API, the parameters stop_words and n_neighbors were removed. These can still be used when a custom UMAP or CountVectorizer is used. Set calculate_probabilities to False as a default. Calculating probabilities with HDBSCAN significantly increases computation time and memory usage. Better to remove calculating probabilities or only allow it by manually turning this on. Use the newest version of sentence-transformers as it speeds ups encoding significantly","title":"Version 0.5.0"},{"location":"changelog.html#version-042","text":"Release date: 10 Januari, 2021 Fixes : Selecting embedding_model did not work when language was also used. This led to the user needing to set language to None before being able to use embedding_model . Fixed by using embedding_model when language is used (as a default parameter).","title":"Version 0.4.2"},{"location":"changelog.html#version-041","text":"Release date: 07 Januari, 2021 Fixes : Simple fix by lowering the languages variable to match the lowered input language.","title":"Version 0.4.1"},{"location":"changelog.html#version-040","text":"Release date: 21 December, 2020 Highlights : Visualize Topics similar to LDAvis Added option to reduce topics after training Added option to update topic representation after training Added option to search topics using a search term Significantly improved the stability of generating clusters Finetune the topic words by selecting the most coherent words with the highest c-TF-IDF values More extensive tutorials in the documentation Notable Changes : Option to select language instead of sentence-transformers models to minimize the complexity of using BERTopic Improved logging (remove duplicates) Check if BERTopic is fitted Added TF-IDF as an embedder instead of transformer models (see tutorial) Numpy for Python 3.6 will be dropped and was therefore removed from the workflow. Preprocess text before passing it through c-TF-IDF Merged get_topics_freq() with get_topic_freq() Fixes : Fix error handling topic probabilities","title":"Version 0.4.0"},{"location":"changelog.html#version-032","text":"Release date: 16 November, 2020 Highlights : Fixed a bug with the topic reduction method that seems to reduce the number of topics but not to the nr_topics as defined in the class. Since this was, to a certain extend, breaking the topic reduction method a new release was necessary.","title":"Version 0.3.2"},{"location":"changelog.html#version-031","text":"Release date: 4 November, 2020 Highlights : Adding the option to use custom embeddings or embeddings that you generated beforehand with whatever package you'd like to use. This allows users to further customize BERTopic to their liking.","title":"Version 0.3.1"},{"location":"changelog.html#version-030","text":"Release date: 29 October, 2020 Highlights : transform() and fit_transform() now also return the topic probability distributions Added visualize_distribution() which visualizes the topic probability distribution for a single document","title":"Version 0.3.0"},{"location":"changelog.html#version-022","text":"Release date: 17 October, 2020 Highlights : Fixed n_gram_range not being used Added option for using stopwords","title":"Version 0.2.2"},{"location":"changelog.html#version-021","text":"Release date: 11 October, 2020 Highlights : Improved the calculation of the class-based TF-IDF procedure by limiting the calculation to sparse matrices. This prevents out-of-memory problems when faced with large datasets.","title":"Version 0.2.1"},{"location":"changelog.html#version-020","text":"Release date: 11 October, 2020 Highlights : Changed c-TF-IDF procedure such that it implements a version of scikit-learns procedure. This should also speed up the calculation of the sparse matrix and prevent memory errors. Added automated unit tests","title":"Version 0.2.0"},{"location":"changelog.html#version-012","text":"Release date: 1 October, 2020 Highlights : When transforming new documents, self.mapped_topics seemed to be missing. Added to the init.","title":"Version 0.1.2"},{"location":"changelog.html#version-011","text":"Release date: 24 September, 2020 Highlights : Fixed requirements --> Issue with pytorch Update documentation","title":"Version 0.1.1"},{"location":"changelog.html#version-010","text":"Release date: 24 September, 2020 Highlights : First release of BERTopic Added parameters for UMAP and HDBSCAN Option to choose sentence-transformer model Method for transforming unseen documents Save and load trained models (UMAP and HDBSCAN) Extract topics and their sizes Notable Changes : Optimized c-TF-IDF Improved documentation Improved topic reduction","title":"Version 0.1.0"},{"location":"faq.html","text":"Frequently Asked Questions \u00b6 Why are the results not consistent between runs? \u00b6 Due to the stochastic nature of UMAP, the results from BERTopic might differ even if you run the same code multiple times. Using custom embeddings allows you to try out BERTopic several times until you find the topics that suit you best. You only need to generate the embeddings themselves once and run BERTopic several times with different parameters. If you want to reproduce the results, at the expense of performance , you can set a random_state in UMAP to prevent any stochastic behavior: from bertopic import BERTopic from umap import UMAP umap_model = UMAP ( n_neighbors = 15 , n_components = 5 , min_dist = 0.0 , metric = 'cosine' , random_state = 42 ) topic_model = BERTopic ( umap_model = umap_model ) Which embedding model should I choose? \u00b6 Unfortunately, there is not a definitive list of the best models for each language, this highly depends on your data, the model, and your specific use case. However, the default model in BERTopic ( \"all-MiniLM-L6-v2\" ) works great for English documents. In contrast, for multi-lingual documents or any other language, \"paraphrase-multilingual-MiniLM-L12-v2\" has shown great performance. If you want to use a model that provides a higher quality, but takes more computing time, then I would advise using all-mpnet-base-v2 and paraphrase-multilingual-mpnet-base-v2 instead. SentenceTransformers SentenceTransformers work typically quite well and are the preferred models to use. They are great at generating document embeddings and have several multi-lingual versions available. \ud83e\udd17 transformers BERTopic allows you to use any \ud83e\udd17 transformers model. These models are typically embeddings created on a word/sentence level but can easily be pooled using Flair (see Guides/Embeddings). If you have a specific language for which you want to generate embeddings, you can choose the model here . How do I reduce topic outliers? \u00b6 There are several ways we can reduce outliers. First, the amount of datapoint classified as outliers is handled by the min_samples parameters in HDBSCAN. This value is automatically set to the same value of min_cluster_size . However, you can set it independently if you want to reduce the number of generated outliers. Lowering this value will result in less noise being generated. from bertopic import BERTopic from hdbscan import HDBSCAN hdbscan_model = HDBSCAN ( min_cluster_size = 10 , metric = 'euclidean' , cluster_selection_method = 'eom' , prediction_data = True , min_samples = 5 ) topic_model = BERTopic ( hdbscan_model = hdbscan_model ) topics , probs = topic_model . fit_transform ( docs ) Note Although this will lower outliers found in the data, this might force outliers to be put into topics where they do not belong. So make sure to strike a balance between keeping noise and reducing outliers. Second, after training our BERTopic model, we can assign outliers to topics by making use of the .reduce_outliers function in BERTopic. An advantage of using this approach is that there are four built in strategies one can choose for reducing outliers. Moreover, this technique allows the user to experiment with reducing outliers across a number of strategies and parameters without actually having to re-train the topic model each time. You can learn more about the .reduce_outlier function here . The following is a minimal example of how to use this function: from bertopic import BERTopic # Train your BERTopic model topic_model = BERTopic () topics , probs = topic_model . fit_transform ( docs ) # Reduce outliers new_topics = topic_model . reduce_outliers ( docs , topics ) Third, we can replace HDBSCAN with any other clustering algorithm that we want. So we can choose a clustering algorithm, like k-Means, that does not produce any outliers at all. Using k-Means instead of HDBSCAN is straightforward: from bertopic import BERTopic from sklearn.cluster import KMeans cluster_model = KMeans ( n_clusters = 50 ) topic_model = BERTopic ( hdbscan_model = cluster_model ) How do I remove stop words? \u00b6 At times, stop words might end up in our topic representations. This is something we typically want to avoid as they contribute little to the interpretation of the topics. However, removing stop words as a preprocessing step is not advised as the transformer-based embedding models that we use need the full context to create accurate embeddings. Instead, we can use the CountVectorizer to preprocess our documents after having generated embeddings and clustered our documents. I have found almost no disadvantages to using the CountVectorizer to remove stop words and it is something I would strongly advise to try out: from bertopic import BERTopic from sklearn.feature_extraction.text import CountVectorizer vectorizer_model = CountVectorizer ( stop_words = \"english\" ) topic_model = BERTopic ( vectorizer_model = vectorizer_model ) We can also use the ClassTfidfTransformer to reduce the impact of frequent words. The result is very similar to explicitly removing stop words but this process does this automatically: from bertopic import BERTopic from bertopic.vectorizers import ClassTfidfTransformer ctfidf_model = ClassTfidfTransformer ( reduce_frequent_words = True ) topic_model = BERTopic ( ctfidf_model = ctfidf_model ) How can I speed up BERTopic? \u00b6 You can speed up BERTopic by either generating your embeddings beforehand or by setting calculate_probabilities to False. Calculating the probabilities is quite expensive and can significantly increase the computation time. Thus, only use it if you do not mind waiting a bit before the model is done running or if you have less than a couple of hundred thousand documents. Also, make sure to use a GPU when extracting the sentence/document embeddings. Transformer models typically require a GPU and using only a CPU can slow down computation time quite a lot. However, if you do not have access to a GPU, looking into quantization might help. Lastly, it is also possible to speed up BERTopic with cuML's GPU acceleration of UMAP and HDBSCAN: from bertopic import BERTopic from cuml.cluster import HDBSCAN from cuml.manifold import UMAP # Create instances of GPU-accelerated UMAP and HDBSCAN umap_model = UMAP ( n_components = 5 , n_neighbors = 15 , min_dist = 0.0 ) hdbscan_model = HDBSCAN ( min_samples = 10 , gen_min_span_tree = True , prediction_data = True ) # Pass the above models to be used in BERTopic topic_model = BERTopic ( umap_model = umap_model , hdbscan_model = hdbscan_model ) I am facing memory issues. Help! \u00b6 There are several ways to perform computation with large datasets: First, you can set low_memory to True when instantiating BERTopic. This may prevent blowing up the memory in UMAP. Second, setting calculate_probabilities to False when instantiating BERTopic prevents a huge document-topic probability matrix from being created. Moreover, HDBSCAN is quite slow when it tries to calculate probabilities on large datasets. Third, you can set the minimum frequency of words in the CountVectorizer class to reduce the size of the resulting sparse c-TF-IDF matrix. You can do this as follows: from bertopic import BERTopic from sklearn.feature_extraction.text import CountVectorizer vectorizer_model = CountVectorizer ( ngram_range = ( 1 , 2 ), stop_words = \"english\" , min_df = 10 ) topic_model = BERTopic ( vectorizer_model = vectorizer_model ) The min_df parameter is used to indicate the minimum frequency of words. Setting this value larger than 1 can significantly reduce memory. Fourth, you can use online topic modeling instead to use BERTopic on big data by training the model in chunks If the problem persists, then this could be an issue related to your available memory. The processing of millions of documents is quite computationally expensive and sufficient RAM is necessary. I have only a few topics, how do I increase them? \u00b6 There are several reasons why your topic model may result in only a few topics: First, you might only have a few documents (~1000). This makes it very difficult to properly extract topics due to the little amount of data available. Increasing the number of documents might solve your issues. Second, min_topic_size might be simply too large for your number of documents. If you decrease the minimum size of topics, then you are much more likely to increase the number of topics generated. You could also decrease the n_neighbors parameter used in UMAP if this does not work. Third, although this does not happen very often, there simply aren't that many topics to be found in your documents. You can often see this when you have many -1 topics, which is not a topic but a category of outliers. I have too many topics, how do I decrease them? \u00b6 If you have a large dataset, then it is possible to generate thousands of topics. Especially with large datasets, there is a good chance they contain many small topics. In practice, you might want a few hundred topics at most to interpret them nicely. There are a few ways of increasing the number of generated topics: First, we can set the min_topic_size in the BERTopic initialization much higher (e.g., 300) to make sure that those small clusters will not be generated. This is an HDBSCAN parameter that specifies the minimum number of documents needed in a cluster. More documents in a cluster mean fewer topics will be generated. Second, you can create a custom UMAP model and set n_neighbors much higher than the default 15 (e.g., 200). This also prevents those micro clusters to be generated as it will need many neighboring documents to create a cluster. Third, we can set nr_topics to a value that seems logical to the user. Do note that topics are forced to merge which might result in a lower quality of topics. In practice, I would advise using nr_topic=\"auto\" as that will merge topics that are very similar. Dissimilar topics will therefore remain separated. How do I calculate the probabilities of all topics in a document? \u00b6 Although it is possible to calculate all the probabilities, the process of doing so is quite computationally inefficient and might significantly increase the computation time. To prevent this, the probabilities are not calculated as a default. To calculate them, you will have to set calculate_probabilities to True: from bertopic import BERTopic topic_model = BERTopic ( calculate_probabilities = True ) topics , probs = topic_model . fit_transform ( docs ) Note The calculate_probabilties parameter is only used when using HDBSCAN or cuML's HDBSCAN model. In other words, this will not work when using a model other than HDBSCAN. Instead, we can approximate the topic distributions across all documents with .approximate_distribution . Numpy gives me an error when running BERTopic \u00b6 With the release of Numpy 1.20.0, there have been significant issues with using that version (and previous ones) due to compilation issues and pypi. This is a known issue with the order of installation using pypi. You can find more details about this issue here and here . I would suggest doing one of the following: Install the newest version from BERTopic (>= v0.5). You can install hdbscan with pip install hdbscan --no-cache-dir --no-binary :all: --no-build-isolation which might resolve the issue Install BERTopic in a fresh environment using these steps. How can I run BERTopic without an internet connection? \u00b6 The great thing about using sentence-transformers is that it searches automatically for an embedding model locally. If it cannot find one, it will download the pre-trained model from its servers. Make sure that you set the correct path for sentence-transformers to work. You can find a bit more about that here . You can download the corresponding model here and unzip it. Then, simply use the following to create your embedding model: from sentence_transformers import SentenceTransformer embedding_model = SentenceTransformer ( 'path/to/unzipped/model' ) Then, pass it to BERTopic: from bertopic import BERTopic topic_model = BERTopic ( embedding_model = embedding_model ) Can I use the GPU to speed up the model? \u00b6 Yes. The GPU is automatically used when you use a SentenceTransformer or Flair embedding model. Using a CPU would then definitely slow things down. However, you can use other embeddings like TF-IDF or Doc2Vec embeddings in BERTopic which do not depend on GPU acceleration. You can use cuML to speed up both UMAP and HDBSCAN through GPU acceleration: from bertopic import BERTopic from cuml.cluster import HDBSCAN from cuml.manifold import UMAP # Create instances of GPU-accelerated UMAP and HDBSCAN umap_model = UMAP ( n_components = 5 , n_neighbors = 15 , min_dist = 0.0 ) hdbscan_model = HDBSCAN ( min_samples = 10 , gen_min_span_tree = True , prediction_data = True ) # Pass the above models to be used in BERTopic topic_model = BERTopic ( umap_model = umap_model , hdbscan_model = hdbscan_model ) topics , probs = topic_model . fit_transform ( docs ) Depending on the embeddings you are using, you might want to normalize them first to force a cosine-related distance metric in UMAP: from cuml.preprocessing import normalize embeddings = normalize ( embeddings ) How can I use BERTopic with Chinese documents? \u00b6 Currently, CountVectorizer tokenizes text by splitting whitespace which does not work for Chinese. To get it to work, you will have to create a custom CountVectorizer with jieba : from sklearn.feature_extraction.text import CountVectorizer import jieba def tokenize_zh ( text ): words = jieba . lcut ( text ) return words vectorizer = CountVectorizer ( tokenizer = tokenize_zh ) Next, we pass our custom vectorizer to BERTopic and create our topic model: from bertopic import BERTopic topic_model = BERTopic ( embedding_model = model , verbose = True , vectorizer_model = vectorizer ) topics , _ = topic_model . fit_transform ( docs , embeddings = embeddings ) Why does it take so long to import BERTopic? \u00b6 The main culprit here seems to be UMAP. After running tests with Tuna we can see that most of the resources when importing BERTopic can be dedicated to UMAP: Unfortunately, there currently is no fix for this issue. The most recent ticket regarding this issue can be found here . Should I preprocess the data? \u00b6 No. By using document embeddings there is typically no need to preprocess the data as all parts of a document are important in understanding the general topic of the document. Although this holds in 99% of cases, if you have data that contains a lot of noise, for example, HTML-tags, then it would be best to remove them. HTML-tags typically do not contribute to the meaning of a document and should therefore be removed. However, if you apply topic modeling to HTML-code to extract topics of code, then it becomes important.","title":"FAQ"},{"location":"faq.html#frequently-asked-questions","text":"","title":"Frequently Asked Questions"},{"location":"faq.html#why-are-the-results-not-consistent-between-runs","text":"Due to the stochastic nature of UMAP, the results from BERTopic might differ even if you run the same code multiple times. Using custom embeddings allows you to try out BERTopic several times until you find the topics that suit you best. You only need to generate the embeddings themselves once and run BERTopic several times with different parameters. If you want to reproduce the results, at the expense of performance , you can set a random_state in UMAP to prevent any stochastic behavior: from bertopic import BERTopic from umap import UMAP umap_model = UMAP ( n_neighbors = 15 , n_components = 5 , min_dist = 0.0 , metric = 'cosine' , random_state = 42 ) topic_model = BERTopic ( umap_model = umap_model )","title":"Why are the results not consistent between runs?"},{"location":"faq.html#which-embedding-model-should-i-choose","text":"Unfortunately, there is not a definitive list of the best models for each language, this highly depends on your data, the model, and your specific use case. However, the default model in BERTopic ( \"all-MiniLM-L6-v2\" ) works great for English documents. In contrast, for multi-lingual documents or any other language, \"paraphrase-multilingual-MiniLM-L12-v2\" has shown great performance. If you want to use a model that provides a higher quality, but takes more computing time, then I would advise using all-mpnet-base-v2 and paraphrase-multilingual-mpnet-base-v2 instead. SentenceTransformers SentenceTransformers work typically quite well and are the preferred models to use. They are great at generating document embeddings and have several multi-lingual versions available. \ud83e\udd17 transformers BERTopic allows you to use any \ud83e\udd17 transformers model. These models are typically embeddings created on a word/sentence level but can easily be pooled using Flair (see Guides/Embeddings). If you have a specific language for which you want to generate embeddings, you can choose the model here .","title":"Which embedding model should I choose?"},{"location":"faq.html#how-do-i-reduce-topic-outliers","text":"There are several ways we can reduce outliers. First, the amount of datapoint classified as outliers is handled by the min_samples parameters in HDBSCAN. This value is automatically set to the same value of min_cluster_size . However, you can set it independently if you want to reduce the number of generated outliers. Lowering this value will result in less noise being generated. from bertopic import BERTopic from hdbscan import HDBSCAN hdbscan_model = HDBSCAN ( min_cluster_size = 10 , metric = 'euclidean' , cluster_selection_method = 'eom' , prediction_data = True , min_samples = 5 ) topic_model = BERTopic ( hdbscan_model = hdbscan_model ) topics , probs = topic_model . fit_transform ( docs ) Note Although this will lower outliers found in the data, this might force outliers to be put into topics where they do not belong. So make sure to strike a balance between keeping noise and reducing outliers. Second, after training our BERTopic model, we can assign outliers to topics by making use of the .reduce_outliers function in BERTopic. An advantage of using this approach is that there are four built in strategies one can choose for reducing outliers. Moreover, this technique allows the user to experiment with reducing outliers across a number of strategies and parameters without actually having to re-train the topic model each time. You can learn more about the .reduce_outlier function here . The following is a minimal example of how to use this function: from bertopic import BERTopic # Train your BERTopic model topic_model = BERTopic () topics , probs = topic_model . fit_transform ( docs ) # Reduce outliers new_topics = topic_model . reduce_outliers ( docs , topics ) Third, we can replace HDBSCAN with any other clustering algorithm that we want. So we can choose a clustering algorithm, like k-Means, that does not produce any outliers at all. Using k-Means instead of HDBSCAN is straightforward: from bertopic import BERTopic from sklearn.cluster import KMeans cluster_model = KMeans ( n_clusters = 50 ) topic_model = BERTopic ( hdbscan_model = cluster_model )","title":"How do I reduce topic outliers?"},{"location":"faq.html#how-do-i-remove-stop-words","text":"At times, stop words might end up in our topic representations. This is something we typically want to avoid as they contribute little to the interpretation of the topics. However, removing stop words as a preprocessing step is not advised as the transformer-based embedding models that we use need the full context to create accurate embeddings. Instead, we can use the CountVectorizer to preprocess our documents after having generated embeddings and clustered our documents. I have found almost no disadvantages to using the CountVectorizer to remove stop words and it is something I would strongly advise to try out: from bertopic import BERTopic from sklearn.feature_extraction.text import CountVectorizer vectorizer_model = CountVectorizer ( stop_words = \"english\" ) topic_model = BERTopic ( vectorizer_model = vectorizer_model ) We can also use the ClassTfidfTransformer to reduce the impact of frequent words. The result is very similar to explicitly removing stop words but this process does this automatically: from bertopic import BERTopic from bertopic.vectorizers import ClassTfidfTransformer ctfidf_model = ClassTfidfTransformer ( reduce_frequent_words = True ) topic_model = BERTopic ( ctfidf_model = ctfidf_model )","title":"How do I remove stop words?"},{"location":"faq.html#how-can-i-speed-up-bertopic","text":"You can speed up BERTopic by either generating your embeddings beforehand or by setting calculate_probabilities to False. Calculating the probabilities is quite expensive and can significantly increase the computation time. Thus, only use it if you do not mind waiting a bit before the model is done running or if you have less than a couple of hundred thousand documents. Also, make sure to use a GPU when extracting the sentence/document embeddings. Transformer models typically require a GPU and using only a CPU can slow down computation time quite a lot. However, if you do not have access to a GPU, looking into quantization might help. Lastly, it is also possible to speed up BERTopic with cuML's GPU acceleration of UMAP and HDBSCAN: from bertopic import BERTopic from cuml.cluster import HDBSCAN from cuml.manifold import UMAP # Create instances of GPU-accelerated UMAP and HDBSCAN umap_model = UMAP ( n_components = 5 , n_neighbors = 15 , min_dist = 0.0 ) hdbscan_model = HDBSCAN ( min_samples = 10 , gen_min_span_tree = True , prediction_data = True ) # Pass the above models to be used in BERTopic topic_model = BERTopic ( umap_model = umap_model , hdbscan_model = hdbscan_model )","title":"How can I speed up BERTopic?"},{"location":"faq.html#i-am-facing-memory-issues-help","text":"There are several ways to perform computation with large datasets: First, you can set low_memory to True when instantiating BERTopic. This may prevent blowing up the memory in UMAP. Second, setting calculate_probabilities to False when instantiating BERTopic prevents a huge document-topic probability matrix from being created. Moreover, HDBSCAN is quite slow when it tries to calculate probabilities on large datasets. Third, you can set the minimum frequency of words in the CountVectorizer class to reduce the size of the resulting sparse c-TF-IDF matrix. You can do this as follows: from bertopic import BERTopic from sklearn.feature_extraction.text import CountVectorizer vectorizer_model = CountVectorizer ( ngram_range = ( 1 , 2 ), stop_words = \"english\" , min_df = 10 ) topic_model = BERTopic ( vectorizer_model = vectorizer_model ) The min_df parameter is used to indicate the minimum frequency of words. Setting this value larger than 1 can significantly reduce memory. Fourth, you can use online topic modeling instead to use BERTopic on big data by training the model in chunks If the problem persists, then this could be an issue related to your available memory. The processing of millions of documents is quite computationally expensive and sufficient RAM is necessary.","title":"I am facing memory issues. Help!"},{"location":"faq.html#i-have-only-a-few-topics-how-do-i-increase-them","text":"There are several reasons why your topic model may result in only a few topics: First, you might only have a few documents (~1000). This makes it very difficult to properly extract topics due to the little amount of data available. Increasing the number of documents might solve your issues. Second, min_topic_size might be simply too large for your number of documents. If you decrease the minimum size of topics, then you are much more likely to increase the number of topics generated. You could also decrease the n_neighbors parameter used in UMAP if this does not work. Third, although this does not happen very often, there simply aren't that many topics to be found in your documents. You can often see this when you have many -1 topics, which is not a topic but a category of outliers.","title":"I have only a few topics, how do I increase them?"},{"location":"faq.html#i-have-too-many-topics-how-do-i-decrease-them","text":"If you have a large dataset, then it is possible to generate thousands of topics. Especially with large datasets, there is a good chance they contain many small topics. In practice, you might want a few hundred topics at most to interpret them nicely. There are a few ways of increasing the number of generated topics: First, we can set the min_topic_size in the BERTopic initialization much higher (e.g., 300) to make sure that those small clusters will not be generated. This is an HDBSCAN parameter that specifies the minimum number of documents needed in a cluster. More documents in a cluster mean fewer topics will be generated. Second, you can create a custom UMAP model and set n_neighbors much higher than the default 15 (e.g., 200). This also prevents those micro clusters to be generated as it will need many neighboring documents to create a cluster. Third, we can set nr_topics to a value that seems logical to the user. Do note that topics are forced to merge which might result in a lower quality of topics. In practice, I would advise using nr_topic=\"auto\" as that will merge topics that are very similar. Dissimilar topics will therefore remain separated.","title":"I have too many topics, how do I decrease them?"},{"location":"faq.html#how-do-i-calculate-the-probabilities-of-all-topics-in-a-document","text":"Although it is possible to calculate all the probabilities, the process of doing so is quite computationally inefficient and might significantly increase the computation time. To prevent this, the probabilities are not calculated as a default. To calculate them, you will have to set calculate_probabilities to True: from bertopic import BERTopic topic_model = BERTopic ( calculate_probabilities = True ) topics , probs = topic_model . fit_transform ( docs ) Note The calculate_probabilties parameter is only used when using HDBSCAN or cuML's HDBSCAN model. In other words, this will not work when using a model other than HDBSCAN. Instead, we can approximate the topic distributions across all documents with .approximate_distribution .","title":"How do I calculate the probabilities of all topics in a document?"},{"location":"faq.html#numpy-gives-me-an-error-when-running-bertopic","text":"With the release of Numpy 1.20.0, there have been significant issues with using that version (and previous ones) due to compilation issues and pypi. This is a known issue with the order of installation using pypi. You can find more details about this issue here and here . I would suggest doing one of the following: Install the newest version from BERTopic (>= v0.5). You can install hdbscan with pip install hdbscan --no-cache-dir --no-binary :all: --no-build-isolation which might resolve the issue Install BERTopic in a fresh environment using these steps.","title":"Numpy gives me an error when running BERTopic"},{"location":"faq.html#how-can-i-run-bertopic-without-an-internet-connection","text":"The great thing about using sentence-transformers is that it searches automatically for an embedding model locally. If it cannot find one, it will download the pre-trained model from its servers. Make sure that you set the correct path for sentence-transformers to work. You can find a bit more about that here . You can download the corresponding model here and unzip it. Then, simply use the following to create your embedding model: from sentence_transformers import SentenceTransformer embedding_model = SentenceTransformer ( 'path/to/unzipped/model' ) Then, pass it to BERTopic: from bertopic import BERTopic topic_model = BERTopic ( embedding_model = embedding_model )","title":"How can I run BERTopic without an internet connection?"},{"location":"faq.html#can-i-use-the-gpu-to-speed-up-the-model","text":"Yes. The GPU is automatically used when you use a SentenceTransformer or Flair embedding model. Using a CPU would then definitely slow things down. However, you can use other embeddings like TF-IDF or Doc2Vec embeddings in BERTopic which do not depend on GPU acceleration. You can use cuML to speed up both UMAP and HDBSCAN through GPU acceleration: from bertopic import BERTopic from cuml.cluster import HDBSCAN from cuml.manifold import UMAP # Create instances of GPU-accelerated UMAP and HDBSCAN umap_model = UMAP ( n_components = 5 , n_neighbors = 15 , min_dist = 0.0 ) hdbscan_model = HDBSCAN ( min_samples = 10 , gen_min_span_tree = True , prediction_data = True ) # Pass the above models to be used in BERTopic topic_model = BERTopic ( umap_model = umap_model , hdbscan_model = hdbscan_model ) topics , probs = topic_model . fit_transform ( docs ) Depending on the embeddings you are using, you might want to normalize them first to force a cosine-related distance metric in UMAP: from cuml.preprocessing import normalize embeddings = normalize ( embeddings )","title":"Can I use the GPU to speed up the model?"},{"location":"faq.html#how-can-i-use-bertopic-with-chinese-documents","text":"Currently, CountVectorizer tokenizes text by splitting whitespace which does not work for Chinese. To get it to work, you will have to create a custom CountVectorizer with jieba : from sklearn.feature_extraction.text import CountVectorizer import jieba def tokenize_zh ( text ): words = jieba . lcut ( text ) return words vectorizer = CountVectorizer ( tokenizer = tokenize_zh ) Next, we pass our custom vectorizer to BERTopic and create our topic model: from bertopic import BERTopic topic_model = BERTopic ( embedding_model = model , verbose = True , vectorizer_model = vectorizer ) topics , _ = topic_model . fit_transform ( docs , embeddings = embeddings )","title":"How can I use BERTopic with Chinese documents?"},{"location":"faq.html#why-does-it-take-so-long-to-import-bertopic","text":"The main culprit here seems to be UMAP. After running tests with Tuna we can see that most of the resources when importing BERTopic can be dedicated to UMAP: Unfortunately, there currently is no fix for this issue. The most recent ticket regarding this issue can be found here .","title":"Why does it take so long to import BERTopic?"},{"location":"faq.html#should-i-preprocess-the-data","text":"No. By using document embeddings there is typically no need to preprocess the data as all parts of a document are important in understanding the general topic of the document. Although this holds in 99% of cases, if you have data that contains a lot of noise, for example, HTML-tags, then it would be best to remove them. HTML-tags typically do not contribute to the meaning of a document and should therefore be removed. However, if you apply topic modeling to HTML-code to extract topics of code, then it becomes important.","title":"Should I preprocess the data?"},{"location":"algorithm/algorithm.html","text":"The Algorithm \u00b6 Below, you will find different types of overviews of each step in BERTopic's main algorithm. Each successive overview will be more in-depth than the previous overview. This approach aims to make the underlying algorithm as intuitive as possible for a wide range of users. Visual Overview \u00b6 BERTopic can be viewed as a sequence of steps to create its topic representations. There are five steps to this process: Although these steps are the default, there is some modularity to BERTopic. Each step in this process was carefully selected such that they are all somewhat independent from one another. For example, the tokenization step is not directly influenced by the embedding model that was used to convert the documents which allow us to be creative in how we perform the tokenization step. This effect is especially strong in the clustering step. Models like HDBSCAN assume that clusters can have different shapes and forms. As a result, using a centroid-based technique to model the topic representations would not be beneficial since the centroid is not always representative of these types of clusters. A bag-of-words representation, however, makes very few assumptions concerning the shape and form of a cluster. As a result, BERTopic is quite modular and can maintain its quality of topic generation throughout a variety of sub-models. In other words, BERTopic essentially allows you to build your own topic model : Code Overview \u00b6 After going through the visual overview, this code overview demonstrates the algorithm using BERTopic. An advantage of using BERTopic is each major step in its algorithm can be explicitly defined, thereby making the process not only transparent but also more intuitive. from umap import UMAP from hdbscan import HDBSCAN from sentence_transformers import SentenceTransformer from sklearn.feature_extraction.text import CountVectorizer from bertopic import BERTopic from bertopic.representation import KeyBERTInspired from bertopic.vectorizers import ClassTfidfTransformer # Step 1 - Extract embeddings embedding_model = SentenceTransformer ( \"all-MiniLM-L6-v2\" ) # Step 2 - Reduce dimensionality umap_model = UMAP ( n_neighbors = 15 , n_components = 5 , min_dist = 0.0 , metric = 'cosine' ) # Step 3 - Cluster reduced embeddings hdbscan_model = HDBSCAN ( min_cluster_size = 15 , metric = 'euclidean' , cluster_selection_method = 'eom' , prediction_data = True ) # Step 4 - Tokenize topics vectorizer_model = CountVectorizer ( stop_words = \"english\" ) # Step 5 - Create topic representation ctfidf_model = ClassTfidfTransformer () # Step 6 - (Optional) Fine-tune topic representations with # a `bertopic.representation` model representation_model = KeyBERTInspired () # All steps together topic_model = BERTopic ( embedding_model = embedding_model , # Step 1 - Extract embeddings umap_model = umap_model , # Step 2 - Reduce dimensionality hdbscan_model = hdbscan_model , # Step 3 - Cluster reduced embeddings vectorizer_model = vectorizer_model , # Step 4 - Tokenize topics ctfidf_model = ctfidf_model , # Step 5 - Extract topic words representation_model = representation_model # Step 6 - (Optional) Fine-tune topic represenations ) Detailed Overview \u00b6 This overview describes each step in more detail such that you can get an intuitive feeling as to what models might fit best at each step in your use case. 1. Embed documents \u00b6 We start by converting our documents to numerical representations. Although there are many methods for doing so the default in BERTopic is sentence-transformers . These models are often optimized for semantic similarity which helps tremendously in our clustering task. Moreover, they are great for creating either document- or sentence-embeddings. In BERTopic, you can choose any sentence-transformers model but two models are set as defaults: \"all-MiniLM-L6-v2\" \"paraphrase-multilingual-MiniLM-L12-v2\" The first is an English language model trained specifically for semantic similarity tasks which works quite well for most use cases. The second model is very similar to the first with one major difference being that the multilingual models work for 50+ languages. This model is quite a bit larger than the first and is only selected if you select any language other than English. Tip Although BERTopic uses sentence-transformers models as a default, you can choose any embedding model that fits your use case. Follow the guide here for selecting and customizing your model. 2. Dimensionality reduction \u00b6 After having created our numerical representations of the documents we have to reduce the dimensionality of these representations. Cluster models typically have difficulty handling high dimensional data due to the curse of dimensionality. There are great approaches that can reduce dimensionality, such as PCA, but as a default UMAP is selected in BERTopic. It is a technique that can keep some of a dataset's local and global structure when reducing its dimensionality. This structure is important to keep as it contains the information necessary to create clusters of semantically similar documents. Tip Although BERTopic uses UMAP as a default, you can choose any dimensionality reduction model that fits your use case. Follow the guide here for selecting and customizing your model. 3. Cluster Documents \u00b6 After having reduced our embeddings, we can start clustering our data. For that, we leverage a density-based clustering technique, HDBSCAN. It can find clusters of different shapes and has the nice feature of identifying outliers where possible. As a result, we do not force documents into a cluster where they might not belong. This will improve the resulting topic representation as there is less noise to draw from. Tip Although BERTopic uses HDBSCAN as a default, you can choose any cluster model that fits your use case. Follow the guide here for selecting and customizing your model. 4. Bag-of-words \u00b6 Before we can start creating the topic representation we first need to select a technique that allows for modularity in BERTopic's algorithm. When we use HDBSCAN as a cluster model, we may assume that our clusters have different degrees of density and different shapes. This means that a centroid-based topic representation technique might not be the best-fitting model. In other words, we want a topic representation technique that makes little to no assumption on the expected structure of the clusters. To do this, we first combine all documents in a cluster into a single document. That, very long, document then represents the cluster. Then, we can count how often each word appears in each cluster. This generates something called a bag-of-words representation in which the frequency of each word in each cluster can be found. This bag-of-words representation is therefore on a cluster level and not on a document level. This distinction is important as we are interested in words on a topic level (i.e., cluster level). By using a bag-of-words representation, no assumption is made concerning the structure of the clusters. Moreover, the bag-of-words representation is L1-normalized to account for clusters that have different sizes. Tip There are many ways you can tune or change the bag-of-words step. This step allows for processing the documents however you want without affecting the first step, embedding the documents. You can follow the guide here for more information about tokenization options in BERTopic. 5. Topic representation \u00b6 From the generated bag-of-words representation, we want to know what makes one cluster different from another. Which words are typical for cluster 1 and not so much for all other clusters? To solve this, we need to modify TF-IDF such that it considers topics (i.e., clusters) instead of documents. When you apply TF-IDF as usual on a set of documents, what you are doing is comparing the importance of words between documents. Now, what if, we instead treat all documents in a single category (e.g., a cluster) as a single document and then apply TF-IDF? The result would be importance scores for words within a cluster. The more important words are within a cluster, the more it is representative of that topic. In other words, if we extract the most important words per cluster, we get descriptions of topics ! This model is called class-based TF-IDF : Each cluster is converted to a single document instead of a set of documents. Then, we extract the frequency of word x in class c , where c refers to the cluster we created before. This results in our class-based tf representation. This representation is L1-normalized to account for the differences in topic sizes. Then, we take the logarithm of one plus the average number of words per class A divided by the frequency of word x across all classes. We add plus one within the logarithm to force values to be positive. This results in our class-based idf representation. Like with the classic TF-IDF, we then multiply tf with idf to get the importance score per word in each class. In other words, the classical TF-IDF procedure is not used here but a modified version of the algorithm that allows for a much better representation. Tip In the ClassTfidfTransformer , there are a few parameters that might be worth exploring, including an option to perform additional BM-25 weighting. You can find more information about that here . 6. (Optional) Fine-tune Topic representation \u00b6 After having generated the c-TF-IDF representations, we have a set of words that describe a collection of documents. c-TF-IDF is a method that can quickly generate accurate topic representations. However, with the fast developments in NLP-world, new and exciting methods are released weekly. In order to keep up with what is happening, there is the possibility to further fine-tune these c-TF-IDF topics using GPT, T5, KeyBERT, Spacy, and other techniques. Many are implemented in BERTopic for you to use and play around with. More specifically, we can consider the c-TF-IDF generated topics to be candidate topics. They each contain a set of keywords and representative documents that we can use to further fine-tune the topic representations. Having a set of representative documents for each topic is huge advantage as it allows for fine-tuning on a reduced number of documents. This reduces computation for large models as they only need to operate on that small set of representative documents for each topic. As a result, large language models like GPT and T5 becomes feasible in production settings and typically take less wall time than the dimensionality reduction and clustering steps. The following models are implemented in bertopic.representation : MaximalMarginalRelevance PartOfSpeech KeyBERTInspired ZeroShotClassification TextGeneration Cohere OpenAI LangChain","title":"The Algorithm"},{"location":"algorithm/algorithm.html#the-algorithm","text":"Below, you will find different types of overviews of each step in BERTopic's main algorithm. Each successive overview will be more in-depth than the previous overview. This approach aims to make the underlying algorithm as intuitive as possible for a wide range of users.","title":"The Algorithm"},{"location":"algorithm/algorithm.html#visual-overview","text":"BERTopic can be viewed as a sequence of steps to create its topic representations. There are five steps to this process: Although these steps are the default, there is some modularity to BERTopic. Each step in this process was carefully selected such that they are all somewhat independent from one another. For example, the tokenization step is not directly influenced by the embedding model that was used to convert the documents which allow us to be creative in how we perform the tokenization step. This effect is especially strong in the clustering step. Models like HDBSCAN assume that clusters can have different shapes and forms. As a result, using a centroid-based technique to model the topic representations would not be beneficial since the centroid is not always representative of these types of clusters. A bag-of-words representation, however, makes very few assumptions concerning the shape and form of a cluster. As a result, BERTopic is quite modular and can maintain its quality of topic generation throughout a variety of sub-models. In other words, BERTopic essentially allows you to build your own topic model :","title":"Visual Overview"},{"location":"algorithm/algorithm.html#code-overview","text":"After going through the visual overview, this code overview demonstrates the algorithm using BERTopic. An advantage of using BERTopic is each major step in its algorithm can be explicitly defined, thereby making the process not only transparent but also more intuitive. from umap import UMAP from hdbscan import HDBSCAN from sentence_transformers import SentenceTransformer from sklearn.feature_extraction.text import CountVectorizer from bertopic import BERTopic from bertopic.representation import KeyBERTInspired from bertopic.vectorizers import ClassTfidfTransformer # Step 1 - Extract embeddings embedding_model = SentenceTransformer ( \"all-MiniLM-L6-v2\" ) # Step 2 - Reduce dimensionality umap_model = UMAP ( n_neighbors = 15 , n_components = 5 , min_dist = 0.0 , metric = 'cosine' ) # Step 3 - Cluster reduced embeddings hdbscan_model = HDBSCAN ( min_cluster_size = 15 , metric = 'euclidean' , cluster_selection_method = 'eom' , prediction_data = True ) # Step 4 - Tokenize topics vectorizer_model = CountVectorizer ( stop_words = \"english\" ) # Step 5 - Create topic representation ctfidf_model = ClassTfidfTransformer () # Step 6 - (Optional) Fine-tune topic representations with # a `bertopic.representation` model representation_model = KeyBERTInspired () # All steps together topic_model = BERTopic ( embedding_model = embedding_model , # Step 1 - Extract embeddings umap_model = umap_model , # Step 2 - Reduce dimensionality hdbscan_model = hdbscan_model , # Step 3 - Cluster reduced embeddings vectorizer_model = vectorizer_model , # Step 4 - Tokenize topics ctfidf_model = ctfidf_model , # Step 5 - Extract topic words representation_model = representation_model # Step 6 - (Optional) Fine-tune topic represenations )","title":"Code Overview"},{"location":"algorithm/algorithm.html#detailed-overview","text":"This overview describes each step in more detail such that you can get an intuitive feeling as to what models might fit best at each step in your use case.","title":"Detailed Overview"},{"location":"algorithm/algorithm.html#1-embed-documents","text":"We start by converting our documents to numerical representations. Although there are many methods for doing so the default in BERTopic is sentence-transformers . These models are often optimized for semantic similarity which helps tremendously in our clustering task. Moreover, they are great for creating either document- or sentence-embeddings. In BERTopic, you can choose any sentence-transformers model but two models are set as defaults: \"all-MiniLM-L6-v2\" \"paraphrase-multilingual-MiniLM-L12-v2\" The first is an English language model trained specifically for semantic similarity tasks which works quite well for most use cases. The second model is very similar to the first with one major difference being that the multilingual models work for 50+ languages. This model is quite a bit larger than the first and is only selected if you select any language other than English. Tip Although BERTopic uses sentence-transformers models as a default, you can choose any embedding model that fits your use case. Follow the guide here for selecting and customizing your model.","title":"1. Embed documents"},{"location":"algorithm/algorithm.html#2-dimensionality-reduction","text":"After having created our numerical representations of the documents we have to reduce the dimensionality of these representations. Cluster models typically have difficulty handling high dimensional data due to the curse of dimensionality. There are great approaches that can reduce dimensionality, such as PCA, but as a default UMAP is selected in BERTopic. It is a technique that can keep some of a dataset's local and global structure when reducing its dimensionality. This structure is important to keep as it contains the information necessary to create clusters of semantically similar documents. Tip Although BERTopic uses UMAP as a default, you can choose any dimensionality reduction model that fits your use case. Follow the guide here for selecting and customizing your model.","title":"2. Dimensionality reduction"},{"location":"algorithm/algorithm.html#3-cluster-documents","text":"After having reduced our embeddings, we can start clustering our data. For that, we leverage a density-based clustering technique, HDBSCAN. It can find clusters of different shapes and has the nice feature of identifying outliers where possible. As a result, we do not force documents into a cluster where they might not belong. This will improve the resulting topic representation as there is less noise to draw from. Tip Although BERTopic uses HDBSCAN as a default, you can choose any cluster model that fits your use case. Follow the guide here for selecting and customizing your model.","title":"3. Cluster Documents"},{"location":"algorithm/algorithm.html#4-bag-of-words","text":"Before we can start creating the topic representation we first need to select a technique that allows for modularity in BERTopic's algorithm. When we use HDBSCAN as a cluster model, we may assume that our clusters have different degrees of density and different shapes. This means that a centroid-based topic representation technique might not be the best-fitting model. In other words, we want a topic representation technique that makes little to no assumption on the expected structure of the clusters. To do this, we first combine all documents in a cluster into a single document. That, very long, document then represents the cluster. Then, we can count how often each word appears in each cluster. This generates something called a bag-of-words representation in which the frequency of each word in each cluster can be found. This bag-of-words representation is therefore on a cluster level and not on a document level. This distinction is important as we are interested in words on a topic level (i.e., cluster level). By using a bag-of-words representation, no assumption is made concerning the structure of the clusters. Moreover, the bag-of-words representation is L1-normalized to account for clusters that have different sizes. Tip There are many ways you can tune or change the bag-of-words step. This step allows for processing the documents however you want without affecting the first step, embedding the documents. You can follow the guide here for more information about tokenization options in BERTopic.","title":"4. Bag-of-words"},{"location":"algorithm/algorithm.html#5-topic-representation","text":"From the generated bag-of-words representation, we want to know what makes one cluster different from another. Which words are typical for cluster 1 and not so much for all other clusters? To solve this, we need to modify TF-IDF such that it considers topics (i.e., clusters) instead of documents. When you apply TF-IDF as usual on a set of documents, what you are doing is comparing the importance of words between documents. Now, what if, we instead treat all documents in a single category (e.g., a cluster) as a single document and then apply TF-IDF? The result would be importance scores for words within a cluster. The more important words are within a cluster, the more it is representative of that topic. In other words, if we extract the most important words per cluster, we get descriptions of topics ! This model is called class-based TF-IDF : Each cluster is converted to a single document instead of a set of documents. Then, we extract the frequency of word x in class c , where c refers to the cluster we created before. This results in our class-based tf representation. This representation is L1-normalized to account for the differences in topic sizes. Then, we take the logarithm of one plus the average number of words per class A divided by the frequency of word x across all classes. We add plus one within the logarithm to force values to be positive. This results in our class-based idf representation. Like with the classic TF-IDF, we then multiply tf with idf to get the importance score per word in each class. In other words, the classical TF-IDF procedure is not used here but a modified version of the algorithm that allows for a much better representation. Tip In the ClassTfidfTransformer , there are a few parameters that might be worth exploring, including an option to perform additional BM-25 weighting. You can find more information about that here .","title":"5. Topic representation"},{"location":"algorithm/algorithm.html#6-optional-fine-tune-topic-representation","text":"After having generated the c-TF-IDF representations, we have a set of words that describe a collection of documents. c-TF-IDF is a method that can quickly generate accurate topic representations. However, with the fast developments in NLP-world, new and exciting methods are released weekly. In order to keep up with what is happening, there is the possibility to further fine-tune these c-TF-IDF topics using GPT, T5, KeyBERT, Spacy, and other techniques. Many are implemented in BERTopic for you to use and play around with. More specifically, we can consider the c-TF-IDF generated topics to be candidate topics. They each contain a set of keywords and representative documents that we can use to further fine-tune the topic representations. Having a set of representative documents for each topic is huge advantage as it allows for fine-tuning on a reduced number of documents. This reduces computation for large models as they only need to operate on that small set of representative documents for each topic. As a result, large language models like GPT and T5 becomes feasible in production settings and typically take less wall time than the dimensionality reduction and clustering steps. The following models are implemented in bertopic.representation : MaximalMarginalRelevance PartOfSpeech KeyBERTInspired ZeroShotClassification TextGeneration Cohere OpenAI LangChain","title":"6. (Optional) Fine-tune Topic representation"},{"location":"api/bertopic.html","text":"BERTopic \u00b6 BERTopic is a topic modeling technique that leverages BERT embeddings and c-TF-IDF to create dense clusters allowing for easily interpretable topics whilst keeping important words in the topic descriptions. The default embedding model is all-MiniLM-L6-v2 when selecting language=\"english\" and paraphrase-multilingual-MiniLM-L12-v2 when selecting language=\"multilingual\" . Attributes: Name Type Description topics_ List[int]) The topics that are generated for each document after training or updating the topic model. The most recent topics are tracked. probabilities_ List[float] The probability of the assigned topic per document. These are only calculated if a HDBSCAN model is used for the clustering step. When calculate_probabilities=True , then it is the probabilities of all topics per document. topic_sizes_ Mapping[int, int]) The size of each topic topic_mapper_ TopicMapper) A class for tracking topics and their mappings anytime they are merged, reduced, added, or removed. topic_representations_ Mapping[int, Tuple[int, float]]) The top n terms per topic and their respective c-TF-IDF values. c_tf_idf_ csr_matrix) The topic-term matrix as calculated through c-TF-IDF. To access its respective words, run .vectorizer_model.get_feature_names() or .vectorizer_model.get_feature_names_out() topic_labels_ Mapping[int, str]) The default labels for each topic. custom_labels_ List[str]) Custom labels for each topic. topic_embeddings_ np.ndarray) The embeddings for each topic. It is calculated by taking the weighted average of word embeddings in a topic based on their c-TF-IDF values. representative_docs_ Mapping[int, str]) The representative documents for each topic. Examples: from bertopic import BERTopic from sklearn.datasets import fetch_20newsgroups docs = fetch_20newsgroups ( subset = 'all' )[ 'data' ] topic_model = BERTopic () topics , probabilities = topic_model . fit_transform ( docs ) If you want to use your own embedding model, use it as follows: from bertopic import BERTopic from sklearn.datasets import fetch_20newsgroups from sentence_transformers import SentenceTransformer docs = fetch_20newsgroups ( subset = 'all' )[ 'data' ] sentence_model = SentenceTransformer ( \"all-MiniLM-L6-v2\" ) topic_model = BERTopic ( embedding_model = sentence_model ) Due to the stochastisch nature of UMAP, the results from BERTopic might differ and the quality can degrade. Using your own embeddings allows you to try out BERTopic several times until you find the topics that suit you best. Source code in bertopic\\_bertopic.py class BERTopic : \"\"\"BERTopic is a topic modeling technique that leverages BERT embeddings and c-TF-IDF to create dense clusters allowing for easily interpretable topics whilst keeping important words in the topic descriptions. The default embedding model is `all-MiniLM-L6-v2` when selecting `language=\"english\"` and `paraphrase-multilingual-MiniLM-L12-v2` when selecting `language=\"multilingual\"`. Attributes: topics_ (List[int]) : The topics that are generated for each document after training or updating the topic model. The most recent topics are tracked. probabilities_ (List[float]): The probability of the assigned topic per document. These are only calculated if a HDBSCAN model is used for the clustering step. When `calculate_probabilities=True`, then it is the probabilities of all topics per document. topic_sizes_ (Mapping[int, int]) : The size of each topic topic_mapper_ (TopicMapper) : A class for tracking topics and their mappings anytime they are merged, reduced, added, or removed. topic_representations_ (Mapping[int, Tuple[int, float]]) : The top n terms per topic and their respective c-TF-IDF values. c_tf_idf_ (csr_matrix) : The topic-term matrix as calculated through c-TF-IDF. To access its respective words, run `.vectorizer_model.get_feature_names()` or `.vectorizer_model.get_feature_names_out()` topic_labels_ (Mapping[int, str]) : The default labels for each topic. custom_labels_ (List[str]) : Custom labels for each topic. topic_embeddings_ (np.ndarray) : The embeddings for each topic. It is calculated by taking the weighted average of word embeddings in a topic based on their c-TF-IDF values. representative_docs_ (Mapping[int, str]) : The representative documents for each topic. Examples: ```python from bertopic import BERTopic from sklearn.datasets import fetch_20newsgroups docs = fetch_20newsgroups(subset='all')['data'] topic_model = BERTopic() topics, probabilities = topic_model.fit_transform(docs) ``` If you want to use your own embedding model, use it as follows: ```python from bertopic import BERTopic from sklearn.datasets import fetch_20newsgroups from sentence_transformers import SentenceTransformer docs = fetch_20newsgroups(subset='all')['data'] sentence_model = SentenceTransformer(\"all-MiniLM-L6-v2\") topic_model = BERTopic(embedding_model=sentence_model) ``` Due to the stochastisch nature of UMAP, the results from BERTopic might differ and the quality can degrade. Using your own embeddings allows you to try out BERTopic several times until you find the topics that suit you best. \"\"\" def __init__ ( self , language : str = \"english\" , top_n_words : int = 10 , n_gram_range : Tuple [ int , int ] = ( 1 , 1 ), min_topic_size : int = 10 , nr_topics : Union [ int , str ] = None , low_memory : bool = False , calculate_probabilities : bool = False , seed_topic_list : List [ List [ str ]] = None , embedding_model = None , umap_model : UMAP = None , hdbscan_model : hdbscan . HDBSCAN = None , vectorizer_model : CountVectorizer = None , ctfidf_model : TfidfTransformer = None , representation_model : BaseRepresentation = None , verbose : bool = False , ): \"\"\"BERTopic initialization Arguments: language: The main language used in your documents. The default sentence-transformers model for \"english\" is `all-MiniLM-L6-v2`. For a full overview of supported languages see bertopic.backend.languages. Select \"multilingual\" to load in the `paraphrase-multilingual-MiniLM-L12-v2` sentence-tranformers model that supports 50+ languages. NOTE: This is not used if `embedding_model` is used. top_n_words: The number of words per topic to extract. Setting this too high can negatively impact topic embeddings as topics are typically best represented by at most 10 words. n_gram_range: The n-gram range for the CountVectorizer. Advised to keep high values between 1 and 3. More would likely lead to memory issues. NOTE: This param will not be used if you pass in your own CountVectorizer. min_topic_size: The minimum size of the topic. Increasing this value will lead to a lower number of clusters/topics. NOTE: This param will not be used if you are not using HDBSCAN. nr_topics: Specifying the number of topics will reduce the initial number of topics to the value specified. This reduction can take a while as each reduction in topics (-1) activates a c-TF-IDF calculation. If this is set to None, no reduction is applied. Use \"auto\" to automatically reduce topics using HDBSCAN. low_memory: Sets UMAP low memory to True to make sure less memory is used. NOTE: This is only used in UMAP. For example, if you use PCA instead of UMAP this parameter will not be used. calculate_probabilities: Calculate the probabilities of all topics per document instead of the probability of the assigned topic per document. This could slow down the extraction of topics if you have many documents (> 100_000). NOTE: If false you cannot use the corresponding visualization method `visualize_probabilities`. NOTE: This is an approximation of topic probabilities as used in HDBSCAN and not an exact representation. seed_topic_list: A list of seed words per topic to converge around verbose: Changes the verbosity of the model, Set to True if you want to track the stages of the model. embedding_model: Use a custom embedding model. The following backends are currently supported * SentenceTransformers * Flair * Spacy * Gensim * USE (TF-Hub) You can also pass in a string that points to one of the following sentence-transformers models: * https://www.sbert.net/docs/pretrained_models.html umap_model: Pass in a UMAP model to be used instead of the default. NOTE: You can also pass in any dimensionality reduction algorithm as long as it has `.fit` and `.transform` functions. hdbscan_model: Pass in a hdbscan.HDBSCAN model to be used instead of the default NOTE: You can also pass in any clustering algorithm as long as it has `.fit` and `.predict` functions along with the `.labels_` variable. vectorizer_model: Pass in a custom `CountVectorizer` instead of the default model. ctfidf_model: Pass in a custom ClassTfidfTransformer instead of the default model. representation_model: Pass in a model that fine-tunes the topic representations calculated through c-TF-IDF. Models from `bertopic.representation` are supported. \"\"\" # Topic-based parameters if top_n_words > 100 : warnings . warn ( \"Note that extracting more than 100 words from a sparse \" \"can slow down computation quite a bit.\" ) self . top_n_words = top_n_words self . min_topic_size = min_topic_size self . nr_topics = nr_topics self . low_memory = low_memory self . calculate_probabilities = calculate_probabilities self . verbose = verbose self . seed_topic_list = seed_topic_list # Embedding model self . language = language if not embedding_model else None self . embedding_model = embedding_model # Vectorizer self . n_gram_range = n_gram_range self . vectorizer_model = vectorizer_model or CountVectorizer ( ngram_range = self . n_gram_range ) self . ctfidf_model = ctfidf_model or ClassTfidfTransformer () # Representation model self . representation_model = representation_model # UMAP or another algorithm that has .fit and .transform functions self . umap_model = umap_model or UMAP ( n_neighbors = 15 , n_components = 5 , min_dist = 0.0 , metric = 'cosine' , low_memory = self . low_memory ) # HDBSCAN or another clustering algorithm that has .fit and .predict functions and # the .labels_ variable to extract the labels self . hdbscan_model = hdbscan_model or hdbscan . HDBSCAN ( min_cluster_size = self . min_topic_size , metric = 'euclidean' , cluster_selection_method = 'eom' , prediction_data = True ) # Public attributes self . topics_ = None self . probabilities_ = None self . topic_sizes_ = None self . topic_mapper_ = None self . topic_representations_ = None self . topic_embeddings_ = None self . topic_labels_ = None self . custom_labels_ = None self . representative_docs_ = {} self . c_tf_idf_ = None # Private attributes for internal tracking purposes self . _outliers = 1 self . _merged_topics = None if verbose : logger . set_level ( \"DEBUG\" ) def fit ( self , documents : List [ str ], embeddings : np . ndarray = None , y : Union [ List [ int ], np . ndarray ] = None ): \"\"\" Fit the models (Bert, UMAP, and, HDBSCAN) on a collection of documents and generate topics Arguments: documents: A list of documents to fit on embeddings: Pre-trained document embeddings. These can be used instead of the sentence-transformer model y: The target class for (semi)-supervised modeling. Use -1 if no class for a specific instance is specified. Examples: ```python from bertopic import BERTopic from sklearn.datasets import fetch_20newsgroups docs = fetch_20newsgroups(subset='all')['data'] topic_model = BERTopic().fit(docs) ``` If you want to use your own embeddings, use it as follows: ```python from bertopic import BERTopic from sklearn.datasets import fetch_20newsgroups from sentence_transformers import SentenceTransformer # Create embeddings docs = fetch_20newsgroups(subset='all')['data'] sentence_model = SentenceTransformer(\"all-MiniLM-L6-v2\") embeddings = sentence_model.encode(docs, show_progress_bar=True) # Create topic model topic_model = BERTopic().fit(docs, embeddings) ``` \"\"\" self . fit_transform ( documents , embeddings , y ) return self def fit_transform ( self , documents : List [ str ], embeddings : np . ndarray = None , y : Union [ List [ int ], np . ndarray ] = None ) -> Tuple [ List [ int ], Union [ np . ndarray , None ]]: \"\"\" Fit the models on a collection of documents, generate topics, and return the docs with topics Arguments: documents: A list of documents to fit on embeddings: Pre-trained document embeddings. These can be used instead of the sentence-transformer model y: The target class for (semi)-supervised modeling. Use -1 if no class for a specific instance is specified. Returns: predictions: Topic predictions for each documents probabilities: The probability of the assigned topic per document. If `calculate_probabilities` in BERTopic is set to True, then it calculates the probabilities of all topics across all documents instead of only the assigned topic. This, however, slows down computation and may increase memory usage. Examples: ```python from bertopic import BERTopic from sklearn.datasets import fetch_20newsgroups docs = fetch_20newsgroups(subset='all')['data'] topic_model = BERTopic() topics, probs = topic_model.fit_transform(docs) ``` If you want to use your own embeddings, use it as follows: ```python from bertopic import BERTopic from sklearn.datasets import fetch_20newsgroups from sentence_transformers import SentenceTransformer # Create embeddings docs = fetch_20newsgroups(subset='all')['data'] sentence_model = SentenceTransformer(\"all-MiniLM-L6-v2\") embeddings = sentence_model.encode(docs, show_progress_bar=True) # Create topic model topic_model = BERTopic() topics, probs = topic_model.fit_transform(docs, embeddings) ``` \"\"\" check_documents_type ( documents ) check_embeddings_shape ( embeddings , documents ) documents = pd . DataFrame ({ \"Document\" : documents , \"ID\" : range ( len ( documents )), \"Topic\" : None }) # Extract embeddings if embeddings is None : self . embedding_model = select_backend ( self . embedding_model , language = self . language ) embeddings = self . _extract_embeddings ( documents . Document , method = \"document\" , verbose = self . verbose ) logger . info ( \"Transformed documents to Embeddings\" ) else : if self . embedding_model is not None : self . embedding_model = select_backend ( self . embedding_model , language = self . language ) # Reduce dimensionality if self . seed_topic_list is not None and self . embedding_model is not None : y , embeddings = self . _guided_topic_modeling ( embeddings ) umap_embeddings = self . _reduce_dimensionality ( embeddings , y ) # Cluster reduced embeddings documents , probabilities = self . _cluster_embeddings ( umap_embeddings , documents , y = y ) # Sort and Map Topic IDs by their frequency if not self . nr_topics : documents = self . _sort_mappings_by_frequency ( documents ) # Extract topics by calculating c-TF-IDF self . _extract_topics ( documents ) # Reduce topics if self . nr_topics : documents = self . _reduce_topics ( documents ) # Save the top 3 most representative documents per topic self . _save_representative_docs ( documents ) # Resulting output self . probabilities_ = self . _map_probabilities ( probabilities , original_topics = True ) predictions = documents . Topic . to_list () return predictions , self . probabilities_ def transform ( self , documents : Union [ str , List [ str ]], embeddings : np . ndarray = None ) -> Tuple [ List [ int ], np . ndarray ]: \"\"\" After having fit a model, use transform to predict new instances Arguments: documents: A single document or a list of documents to fit on embeddings: Pre-trained document embeddings. These can be used instead of the sentence-transformer model. Returns: predictions: Topic predictions for each documents probabilities: The topic probability distribution which is returned by default. If `calculate_probabilities` in BERTopic is set to False, then the probabilities are not calculated to speed up computation and decrease memory usage. Examples: ```python from bertopic import BERTopic from sklearn.datasets import fetch_20newsgroups docs = fetch_20newsgroups(subset='all')['data'] topic_model = BERTopic().fit(docs) topics, probs = topic_model.transform(docs) ``` If you want to use your own embeddings: ```python from bertopic import BERTopic from sklearn.datasets import fetch_20newsgroups from sentence_transformers import SentenceTransformer # Create embeddings docs = fetch_20newsgroups(subset='all')['data'] sentence_model = SentenceTransformer(\"all-MiniLM-L6-v2\") embeddings = sentence_model.encode(docs, show_progress_bar=True) # Create topic model topic_model = BERTopic().fit(docs, embeddings) topics, probs = topic_model.transform(docs, embeddings) ``` \"\"\" check_is_fitted ( self ) check_embeddings_shape ( embeddings , documents ) if isinstance ( documents , str ): documents = [ documents ] if embeddings is None : embeddings = self . _extract_embeddings ( documents , method = \"document\" , verbose = self . verbose ) umap_embeddings = self . umap_model . transform ( embeddings ) logger . info ( \"Reduced dimensionality\" ) # Extract predictions and probabilities if it is a HDBSCAN-like model if is_supported_hdbscan ( self . hdbscan_model ): predictions , probabilities = hdbscan_delegator ( self . hdbscan_model , \"approximate_predict\" , umap_embeddings ) # Calculate probabilities if self . calculate_probabilities and isinstance ( self . hdbscan_model , hdbscan . HDBSCAN ): probabilities = hdbscan . membership_vector ( self . hdbscan_model , umap_embeddings ) logger . info ( \"Calculated probabilities with HDBSCAN\" ) else : predictions = self . hdbscan_model . predict ( umap_embeddings ) probabilities = None logger . info ( \"Predicted clusters\" ) # Map probabilities and predictions probabilities = self . _map_probabilities ( probabilities , original_topics = True ) predictions = self . _map_predictions ( predictions ) return predictions , probabilities def partial_fit ( self , documents : List [ str ], embeddings : np . ndarray = None , y : Union [ List [ int ], np . ndarray ] = None ): \"\"\" Fit BERTopic on a subset of the data and perform online learning with batch-like data. Online topic modeling in BERTopic is performed by using dimensionality reduction and cluster algorithms that support a `partial_fit` method in order to incrementally train the topic model. Likewise, the `bertopic.vectorizers.OnlineCountVectorizer` is used to dynamically update its vocabulary when presented with new data. It has several parameters for modeling decay and updating the representations. In other words, although the main algorithm stays the same, the training procedure now works as follows: For each subset of the data: 1. Generate embeddings with a pre-traing language model 2. Incrementally update the dimensionality reduction algorithm with `partial_fit` 3. Incrementally update the cluster algorithm with `partial_fit` 4. Incrementally update the OnlineCountVectorizer and apply some form of decay Note that it is advised to use `partial_fit` with batches and not single documents for the best performance. Arguments: documents: A list of documents to fit on embeddings: Pre-trained document embeddings. These can be used instead of the sentence-transformer model y: The target class for (semi)-supervised modeling. Use -1 if no class for a specific instance is specified. Examples: ```python from sklearn.datasets import fetch_20newsgroups from sklearn.cluster import MiniBatchKMeans from sklearn.decomposition import IncrementalPCA from bertopic.vectorizers import OnlineCountVectorizer from bertopic import BERTopic # Prepare documents docs = fetch_20newsgroups(subset=subset, remove=('headers', 'footers', 'quotes'))[\"data\"] # Prepare sub-models that support online learning umap_model = IncrementalPCA(n_components=5) cluster_model = MiniBatchKMeans(n_clusters=50, random_state=0) vectorizer_model = OnlineCountVectorizer(stop_words=\"english\", decay=.01) topic_model = BERTopic(umap_model=umap_model, hdbscan_model=cluster_model, vectorizer_model=vectorizer_model) # Incrementally fit the topic model by training on 1000 documents at a time for index in range(0, len(docs), 1000): topic_model.partial_fit(docs[index: index+1000]) ``` \"\"\" # Checks check_embeddings_shape ( embeddings , documents ) if not hasattr ( self . hdbscan_model , \"partial_fit\" ): raise ValueError ( \"In order to use `.partial_fit`, the cluster model should have \" \"a `.partial_fit` function.\" ) # Prepare documents if isinstance ( documents , str ): documents = [ documents ] documents = pd . DataFrame ({ \"Document\" : documents , \"ID\" : range ( len ( documents )), \"Topic\" : None }) # Extract embeddings if embeddings is None : if self . topic_representations_ is None : self . embedding_model = select_backend ( self . embedding_model , language = self . language ) embeddings = self . _extract_embeddings ( documents . Document , method = \"document\" , verbose = self . verbose ) else : if self . embedding_model is not None and self . topic_representations_ is None : self . embedding_model = select_backend ( self . embedding_model , language = self . language ) # Reduce dimensionality if self . seed_topic_list is not None and self . embedding_model is not None : y , embeddings = self . _guided_topic_modeling ( embeddings ) umap_embeddings = self . _reduce_dimensionality ( embeddings , y , partial_fit = True ) # Cluster reduced embeddings documents , self . probabilities_ = self . _cluster_embeddings ( umap_embeddings , documents , partial_fit = True ) topics = documents . Topic . to_list () # Map and find new topics if not self . topic_mapper_ : self . topic_mapper_ = TopicMapper ( topics ) mappings = self . topic_mapper_ . get_mappings () new_topics = set ( topics ) . difference ( set ( mappings . keys ())) new_topic_ids = { topic : max ( mappings . values ()) + index + 1 for index , topic in enumerate ( new_topics )} self . topic_mapper_ . add_new_topics ( new_topic_ids ) updated_mappings = self . topic_mapper_ . get_mappings () updated_topics = [ updated_mappings [ topic ] for topic in topics ] documents [ \"Topic\" ] = updated_topics # Add missing topics (topics that were originally created but are now missing) if self . topic_representations_ : missing_topics = set ( self . topic_representations_ . keys ()) . difference ( set ( updated_topics )) for missing_topic in missing_topics : documents . loc [ len ( documents ), :] = [ \" \" , len ( documents ), missing_topic ] else : missing_topics = {} # Prepare documents documents_per_topic = documents . sort_values ( \"Topic\" ) . groupby ([ 'Topic' ], as_index = False ) updated_topics = documents_per_topic . first () . Topic . astype ( int ) documents_per_topic = documents_per_topic . agg ({ 'Document' : ' ' . join }) # Update topic representations self . c_tf_idf_ , updated_words = self . _c_tf_idf ( documents_per_topic , partial_fit = True ) self . topic_representations_ = self . _extract_words_per_topic ( updated_words , documents , self . c_tf_idf_ ) self . _create_topic_vectors () self . topic_labels_ = { key : f \" { key } _\" + \"_\" . join ([ word [ 0 ] for word in values [: 4 ]]) for key , values in self . topic_representations_ . items ()} # Update topic sizes if len ( missing_topics ) > 0 : documents = documents . iloc [: - len ( missing_topics )] if self . topic_sizes_ is None : self . _update_topic_size ( documents ) else : sizes = documents . groupby ([ 'Topic' ], as_index = False ) . count () for _ , row in sizes . iterrows (): topic = int ( row . Topic ) if self . topic_sizes_ . get ( topic ) is not None and topic not in missing_topics : self . topic_sizes_ [ topic ] += int ( row . Document ) elif self . topic_sizes_ . get ( topic ) is None : self . topic_sizes_ [ topic ] = int ( row . Document ) self . topics_ = documents . Topic . astype ( int ) . tolist () return self def topics_over_time ( self , docs : List [ str ], timestamps : Union [ List [ str ], List [ int ]], nr_bins : int = None , datetime_format : str = None , evolution_tuning : bool = True , global_tuning : bool = True ) -> pd . DataFrame : \"\"\" Create topics over time To create the topics over time, BERTopic needs to be already fitted once. From the fitted models, the c-TF-IDF representations are calculate at each timestamp t. Then, the c-TF-IDF representations at timestamp t are averaged with the global c-TF-IDF representations in order to fine-tune the local representations. NOTE: Make sure to use a limited number of unique timestamps (<100) as the c-TF-IDF representation will be calculated at each single unique timestamp. Having a large number of unique timestamps can take some time to be calculated. Moreover, there aren't many use-cased where you would like to see the difference in topic representations over more than 100 different timestamps. Arguments: docs: The documents you used when calling either `fit` or `fit_transform` timestamps: The timestamp of each document. This can be either a list of strings or ints. If it is a list of strings, then the datetime format will be automatically inferred. If it is a list of ints, then the documents will be ordered by ascending order. nr_bins: The number of bins you want to create for the timestamps. The left interval will be chosen as the timestamp. An additional column will be created with the entire interval. datetime_format: The datetime format of the timestamps if they are strings, eg \u201c%d/%m/%Y\u201d. Set this to None if you want to have it automatically detect the format. See strftime documentation for more information on choices: https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior. evolution_tuning: Fine-tune each topic representation at timestamp *t* by averaging its c-TF-IDF matrix with the c-TF-IDF matrix at timestamp *t-1*. This creates evolutionary topic representations. global_tuning: Fine-tune each topic representation at timestamp *t* by averaging its c-TF-IDF matrix with the global c-TF-IDF matrix. Turn this off if you want to prevent words in topic representations that could not be found in the documents at timestamp *t*. Returns: topics_over_time: A dataframe that contains the topic, words, and frequency of topic at timestamp *t*. Examples: The timestamps variable represent the timestamp of each document. If you have over 100 unique timestamps, it is advised to bin the timestamps as shown below: ```python from bertopic import BERTopic topic_model = BERTopic() topics, probs = topic_model.fit_transform(docs) topics_over_time = topic_model.topics_over_time(docs, timestamps, nr_bins=20) ``` \"\"\" check_is_fitted ( self ) check_documents_type ( docs ) documents = pd . DataFrame ({ \"Document\" : docs , \"Topic\" : self . topics_ , \"Timestamps\" : timestamps }) global_c_tf_idf = normalize ( self . c_tf_idf_ , axis = 1 , norm = 'l1' , copy = False ) all_topics = sorted ( list ( documents . Topic . unique ())) all_topics_indices = { topic : index for index , topic in enumerate ( all_topics )} if isinstance ( timestamps [ 0 ], str ): infer_datetime_format = True if not datetime_format else False documents [ \"Timestamps\" ] = pd . to_datetime ( documents [ \"Timestamps\" ], infer_datetime_format = infer_datetime_format , format = datetime_format ) if nr_bins : documents [ \"Bins\" ] = pd . cut ( documents . Timestamps , bins = nr_bins ) documents [ \"Timestamps\" ] = documents . apply ( lambda row : row . Bins . left , 1 ) # Sort documents in chronological order documents = documents . sort_values ( \"Timestamps\" ) timestamps = documents . Timestamps . unique () if len ( timestamps ) > 100 : warnings . warn ( f \"There are more than 100 unique timestamps (i.e., { len ( timestamps ) } ) \" \"which significantly slows down the application. Consider setting `nr_bins` \" \"to a value lower than 100 to speed up calculation. \" ) # For each unique timestamp, create topic representations topics_over_time = [] for index , timestamp in tqdm ( enumerate ( timestamps ), disable = not self . verbose ): # Calculate c-TF-IDF representation for a specific timestamp selection = documents . loc [ documents . Timestamps == timestamp , :] documents_per_topic = selection . groupby ([ 'Topic' ], as_index = False ) . agg ({ 'Document' : ' ' . join , \"Timestamps\" : \"count\" }) c_tf_idf , words = self . _c_tf_idf ( documents_per_topic , fit = False ) if global_tuning or evolution_tuning : c_tf_idf = normalize ( c_tf_idf , axis = 1 , norm = 'l1' , copy = False ) # Fine-tune the c-TF-IDF matrix at timestamp t by averaging it with the c-TF-IDF # matrix at timestamp t-1 if evolution_tuning and index != 0 : current_topics = sorted ( list ( documents_per_topic . Topic . values )) overlapping_topics = sorted ( list ( set ( previous_topics ) . intersection ( set ( current_topics )))) current_overlap_idx = [ current_topics . index ( topic ) for topic in overlapping_topics ] previous_overlap_idx = [ previous_topics . index ( topic ) for topic in overlapping_topics ] c_tf_idf . tolil ()[ current_overlap_idx ] = (( c_tf_idf [ current_overlap_idx ] + previous_c_tf_idf [ previous_overlap_idx ]) / 2.0 ) . tolil () # Fine-tune the timestamp c-TF-IDF representation based on the global c-TF-IDF representation # by simply taking the average of the two if global_tuning : selected_topics = [ all_topics_indices [ topic ] for topic in documents_per_topic . Topic . values ] c_tf_idf = ( global_c_tf_idf [ selected_topics ] + c_tf_idf ) / 2.0 # Extract the words per topic words_per_topic = self . _extract_words_per_topic ( words , selection , c_tf_idf ) topic_frequency = pd . Series ( documents_per_topic . Timestamps . values , index = documents_per_topic . Topic ) . to_dict () # Fill dataframe with results topics_at_timestamp = [( topic , \", \" . join ([ words [ 0 ] for words in values ][: 5 ]), topic_frequency [ topic ], timestamp ) for topic , values in words_per_topic . items ()] topics_over_time . extend ( topics_at_timestamp ) if evolution_tuning : previous_topics = sorted ( list ( documents_per_topic . Topic . values )) previous_c_tf_idf = c_tf_idf . copy () return pd . DataFrame ( topics_over_time , columns = [ \"Topic\" , \"Words\" , \"Frequency\" , \"Timestamp\" ]) def topics_per_class ( self , docs : List [ str ], classes : Union [ List [ int ], List [ str ]], global_tuning : bool = True ) -> pd . DataFrame : \"\"\" Create topics per class To create the topics per class, BERTopic needs to be already fitted once. From the fitted models, the c-TF-IDF representations are calculate at each class c. Then, the c-TF-IDF representations at class c are averaged with the global c-TF-IDF representations in order to fine-tune the local representations. This can be turned off if the pure representation is needed. NOTE: Make sure to use a limited number of unique classes (<100) as the c-TF-IDF representation will be calculated at each single unique class. Having a large number of unique classes can take some time to be calculated. Arguments: docs: The documents you used when calling either `fit` or `fit_transform` classes: The class of each document. This can be either a list of strings or ints. global_tuning: Fine-tune each topic representation for class c t by averaging its c-TF-IDF matrix with the global c-TF-IDF matrix. Turn this off if you want to prevent words in topic representations that could not be found in the documents for class c. Returns: topics_per_class: A dataframe that contains the topic, words, and frequency of topics for each class. Examples: ```python from bertopic import BERTopic topic_model = BERTopic() topics, probs = topic_model.fit_transform(docs) topics_per_class = topic_model.topics_per_class(docs, classes) ``` \"\"\" documents = pd . DataFrame ({ \"Document\" : docs , \"Topic\" : self . topics_ , \"Class\" : classes }) global_c_tf_idf = normalize ( self . c_tf_idf_ , axis = 1 , norm = 'l1' , copy = False ) # For each unique timestamp, create topic representations topics_per_class = [] for _ , class_ in tqdm ( enumerate ( set ( classes )), disable = not self . verbose ): # Calculate c-TF-IDF representation for a specific timestamp selection = documents . loc [ documents . Class == class_ , :] documents_per_topic = selection . groupby ([ 'Topic' ], as_index = False ) . agg ({ 'Document' : ' ' . join , \"Class\" : \"count\" }) c_tf_idf , words = self . _c_tf_idf ( documents_per_topic , fit = False ) # Fine-tune the timestamp c-TF-IDF representation based on the global c-TF-IDF representation # by simply taking the average of the two if global_tuning : c_tf_idf = normalize ( c_tf_idf , axis = 1 , norm = 'l1' , copy = False ) c_tf_idf = ( global_c_tf_idf [ documents_per_topic . Topic . values + self . _outliers ] + c_tf_idf ) / 2.0 # Extract the words per topic words_per_topic = self . _extract_words_per_topic ( words , selection , c_tf_idf ) topic_frequency = pd . Series ( documents_per_topic . Class . values , index = documents_per_topic . Topic ) . to_dict () # Fill dataframe with results topics_at_class = [( topic , \", \" . join ([ words [ 0 ] for words in values ][: 5 ]), topic_frequency [ topic ], class_ ) for topic , values in words_per_topic . items ()] topics_per_class . extend ( topics_at_class ) topics_per_class = pd . DataFrame ( topics_per_class , columns = [ \"Topic\" , \"Words\" , \"Frequency\" , \"Class\" ]) return topics_per_class def hierarchical_topics ( self , docs : List [ int ], linkage_function : Callable [[ csr_matrix ], np . ndarray ] = None , distance_function : Callable [[ csr_matrix ], csr_matrix ] = None ) -> pd . DataFrame : \"\"\" Create a hierarchy of topics To create this hierarchy, BERTopic needs to be already fitted once. Then, a hierarchy is calculated on the distance matrix of the c-TF-IDF representation using `scipy.cluster.hierarchy.linkage`. Based on that hierarchy, we calculate the topic representation at each merged step. This is a local representation, as we only assume that the chosen step is merged and not all others which typically improves the topic representation. Arguments: docs: The documents you used when calling either `fit` or `fit_transform` linkage_function: The linkage function to use. Default is: `lambda x: sch.linkage(x, 'ward', optimal_ordering=True)` distance_function: The distance function to use on the c-TF-IDF matrix. Default is: `lambda x: 1 - cosine_similarity(x)` Returns: hierarchical_topics: A dataframe that contains a hierarchy of topics represented by their parents and their children Examples: ```python from bertopic import BERTopic topic_model = BERTopic() topics, probs = topic_model.fit_transform(docs) hierarchical_topics = topic_model.hierarchical_topics(docs) ``` A custom linkage function can be used as follows: ```python from scipy.cluster import hierarchy as sch from bertopic import BERTopic topic_model = BERTopic() topics, probs = topic_model.fit_transform(docs) # Hierarchical topics linkage_function = lambda x: sch.linkage(x, 'ward', optimal_ordering=True) hierarchical_topics = topic_model.hierarchical_topics(docs, linkage_function=linkage_function) ``` \"\"\" if distance_function is None : distance_function = lambda x : 1 - cosine_similarity ( x ) if linkage_function is None : linkage_function = lambda x : sch . linkage ( x , 'ward' , optimal_ordering = True ) # Calculate distance embeddings = self . c_tf_idf_ [ self . _outliers :] X = distance_function ( embeddings ) # Make sure it is the 1-D condensed distance matrix with zeros on the diagonal np . fill_diagonal ( X , 0 ) X = squareform ( X ) # Use the 1-D condensed distance matrix as an input instead of the raw distance matrix Z = linkage_function ( X ) # Calculate basic bag-of-words to be iteratively merged later documents = pd . DataFrame ({ \"Document\" : docs , \"ID\" : range ( len ( docs )), \"Topic\" : self . topics_ }) documents_per_topic = documents . groupby ([ 'Topic' ], as_index = False ) . agg ({ 'Document' : ' ' . join }) documents_per_topic = documents_per_topic . loc [ documents_per_topic . Topic != - 1 , :] clean_documents = self . _preprocess_text ( documents_per_topic . Document . values ) # Scikit-Learn Deprecation: get_feature_names is deprecated in 1.0 # and will be removed in 1.2. Please use get_feature_names_out instead. if version . parse ( sklearn_version ) >= version . parse ( \"1.0.0\" ): words = self . vectorizer_model . get_feature_names_out () else : words = self . vectorizer_model . get_feature_names () bow = self . vectorizer_model . transform ( clean_documents ) # Extract clusters hier_topics = pd . DataFrame ( columns = [ \"Parent_ID\" , \"Parent_Name\" , \"Topics\" , \"Child_Left_ID\" , \"Child_Left_Name\" , \"Child_Right_ID\" , \"Child_Right_Name\" ]) for index in tqdm ( range ( len ( Z ))): # Find clustered documents clusters = sch . fcluster ( Z , t = Z [ index ][ 2 ], criterion = 'distance' ) - self . _outliers cluster_df = pd . DataFrame ({ \"Topic\" : range ( len ( clusters )), \"Cluster\" : clusters }) cluster_df = cluster_df . groupby ( \"Cluster\" ) . agg ({ 'Topic' : lambda x : list ( x )}) . reset_index () nr_clusters = len ( clusters ) # Extract first topic we find to get the set of topics in a merged topic topic = None val = Z [ index ][ 0 ] while topic is None : if val - len ( clusters ) < 0 : topic = int ( val ) else : val = Z [ int ( val - len ( clusters ))][ 0 ] clustered_topics = [ i for i , x in enumerate ( clusters ) if x == clusters [ topic ]] # Group bow per cluster, calculate c-TF-IDF and extract words grouped = csr_matrix ( bow [ clustered_topics ] . sum ( axis = 0 )) c_tf_idf = self . ctfidf_model . transform ( grouped ) selection = documents . loc [ documents . Topic . isin ( clustered_topics ), :] selection . Topic = 0 words_per_topic = self . _extract_words_per_topic ( words , selection , c_tf_idf ) # Extract parent's name and ID parent_id = index + len ( clusters ) parent_name = \"_\" . join ([ x [ 0 ] for x in words_per_topic [ 0 ]][: 5 ]) # Extract child's name and ID Z_id = Z [ index ][ 0 ] child_left_id = Z_id if Z_id - nr_clusters < 0 else Z_id - nr_clusters if Z_id - nr_clusters < 0 : child_left_name = \"_\" . join ([ x [ 0 ] for x in self . get_topic ( Z_id )][: 5 ]) else : child_left_name = hier_topics . iloc [ int ( child_left_id )] . Parent_Name # Extract child's name and ID Z_id = Z [ index ][ 1 ] child_right_id = Z_id if Z_id - nr_clusters < 0 else Z_id - nr_clusters if Z_id - nr_clusters < 0 : child_right_name = \"_\" . join ([ x [ 0 ] for x in self . get_topic ( Z_id )][: 5 ]) else : child_right_name = hier_topics . iloc [ int ( child_right_id )] . Parent_Name # Save results hier_topics . loc [ len ( hier_topics ), :] = [ parent_id , parent_name , clustered_topics , int ( Z [ index ][ 0 ]), child_left_name , int ( Z [ index ][ 1 ]), child_right_name ] hier_topics [ \"Distance\" ] = Z [:, 2 ] hier_topics = hier_topics . sort_values ( \"Parent_ID\" , ascending = False ) hier_topics [[ \"Parent_ID\" , \"Child_Left_ID\" , \"Child_Right_ID\" ]] = hier_topics [[ \"Parent_ID\" , \"Child_Left_ID\" , \"Child_Right_ID\" ]] . astype ( str ) return hier_topics def approximate_distribution ( self , documents : Union [ str , List [ str ]], window : int = 4 , stride : int = 1 , min_similarity : float = 0.1 , batch_size : int = 1000 , padding : bool = False , use_embedding_model : bool = False , calculate_tokens : bool = False , separator : str = \" \" ) -> Tuple [ np . ndarray , Union [ List [ np . ndarray ], None ]]: \"\"\" A post-hoc approximation of topic distributions across documents. In order to perform this approximation, each document is split into tokens according to the provided tokenizer in the `CountVectorizer`. Then, a sliding window is applied on each document creating subsets of the document. For example, with a window size of 3 and stride of 1, the sentence: `Solving the right problem is difficult.` can be split up into `solving the right`, `the right problem`, `right problem is`, and `problem is difficult`. These are called tokensets. For each of these tokensets, we calculate their c-TF-IDF representation and find out how similar they are to the previously generated topics. Then, the similarities to the topics for each tokenset are summed in order to create a topic distribution for the entire document. We can also dive into this a bit deeper by then splitting these tokensets up into individual tokens and calculate how much a word, in a specific sentence, contributes to the topics found in that document. This can be enabled by setting `calculate_tokens=True` which can be used for visualization purposes in `topic_model.visualize_approximate_distribution`. The main output, `topic_distributions`, can also be used directly in `.visualize_distribution(topic_distributions[index])` by simply selecting a single distribution. Arguments: documents: A single document or a list of documents for which we approximate their topic distributions window: Size of the moving window which indicates the number of tokens being considered. stride: How far the window should move at each step. min_similarity: The minimum similarity of a document's tokenset with respect to the topics. batch_size: The number of documents to process at a time. If None, then all documents are processed at once. NOTE: With a large number of documents, it is not advised to process all documents at once. padding: Whether to pad the beginning and ending of a document with empty tokens. use_embedding_model: Whether to use the topic model's embedding model to calculate the similarity between tokensets and topics instead of using c-TF-IDF. calculate_tokens: Calculate the similarity of tokens with all topics. NOTE: This is computation-wise more expensive and can require more memory. Using this over batches of documents might be preferred. separator: The separator used to merge tokens into tokensets. Returns: topic_distributions: A `n` x `m` matrix containing the topic distributions for all input documents with `n` being the documents and `m` the topics. topic_token_distributions: A list of `t` x `m` arrays with `t` being the number of tokens for the respective document and `m` the topics. Examples: After fitting the model, the topic distributions can be calculated regardless of the clustering model and regardless of whether the documents were previously seen or not: ```python topic_distr, _ = topic_model.approximate_distribution(docs) ``` As a result, the topic distributions are calculated in `topic_distr` for the entire document based on token set with a specific window size and stride. If you want to calculate the topic distributions on a token-level: ```python topic_distr, topic_token_distr = topic_model.approximate_distribution(docs, calculate_tokens=True) ``` The `topic_token_distr` then contains, for each token, the best fitting topics. As with `topic_distr`, it can contain multiple topics for a single token. \"\"\" if isinstance ( documents , str ): documents = [ documents ] if batch_size is None : batch_size = len ( documents ) batches = 1 else : batches = math . ceil ( len ( documents ) / batch_size ) topic_distributions = [] topic_token_distributions = [] for i in tqdm ( range ( batches ), disable = not self . verbose ): doc_set = documents [ i * batch_size : ( i + 1 ) * batch_size ] # Extract tokens analyzer = self . vectorizer_model . build_tokenizer () tokens = [ analyzer ( document ) for document in doc_set ] # Extract token sets all_sentences = [] all_indices = [ 0 ] all_token_sets_ids = [] for tokenset in tokens : if len ( tokenset ) < window : token_sets = [ tokenset ] token_sets_ids = [ list ( range ( len ( tokenset )))] else : # Extract tokensets using window and stride parameters stride_indices = list ( range ( len ( tokenset )))[:: stride ] token_sets = [] token_sets_ids = [] for stride_index in stride_indices : selected_tokens = tokenset [ stride_index : stride_index + window ] if padding or len ( selected_tokens ) == window : token_sets . append ( selected_tokens ) token_sets_ids . append ( list ( range ( stride_index , stride_index + len ( selected_tokens )))) # Add empty tokens at the beginning and end of a document if padding : padded = [] padded_ids = [] t = math . ceil ( window / stride ) - 1 for i in range ( math . ceil ( window / stride ) - 1 ): padded . append ( tokenset [: window - (( t - i ) * stride )]) padded_ids . append ( list ( range ( 0 , window - (( t - i ) * stride )))) token_sets = padded + token_sets token_sets_ids = padded_ids + token_sets_ids # Join the tokens sentences = [ separator . join ( token ) for token in token_sets ] all_sentences . extend ( sentences ) all_token_sets_ids . extend ( token_sets_ids ) all_indices . append ( all_indices [ - 1 ] + len ( sentences )) # Calculate similarity between embeddings of token sets and the topics if use_embedding_model : embeddings = self . _extract_embeddings ( all_sentences , method = \"document\" , verbose = True ) similarity = cosine_similarity ( embeddings , self . topic_embeddings_ [ self . _outliers :]) # Calculate similarity between c-TF-IDF of token sets and the topics else : bow_doc = self . vectorizer_model . transform ( all_sentences ) c_tf_idf_doc = self . ctfidf_model . transform ( bow_doc ) similarity = cosine_similarity ( c_tf_idf_doc , self . c_tf_idf_ [ self . _outliers :]) # Only keep similarities that exceed the minimum similarity [ similarity < min_similarity ] = 0 # Aggregate results on an individual token level if calculate_tokens : topic_distribution = [] topic_token_distribution = [] for index , token in enumerate ( tokens ): start = all_indices [ index ] end = all_indices [ index + 1 ] if start == end : end = end + 1 # Assign topics to individual tokens token_id = [ i for i in range ( len ( token ))] token_val = { index : [] for index in token_id } for sim , token_set in zip ( similarity [ start : end ], all_token_sets_ids [ start : end ]): for token in token_set : if token in token_val : token_val [ token ] . append ( sim ) matrix = [] for _ , value in token_val . items (): matrix . append ( np . add . reduce ( value )) # Take empty documents into account matrix = np . array ( matrix ) if len ( matrix . shape ) == 1 : matrix = np . zeros (( 1 , len ( self . topic_labels_ ) - self . _outliers )) topic_token_distribution . append ( np . array ( matrix )) topic_distribution . append ( np . add . reduce ( matrix )) topic_distribution = normalize ( topic_distribution , norm = 'l1' , axis = 1 ) # Aggregate on a tokenset level indicated by the window and stride else : topic_distribution = [] for index in range ( len ( all_indices ) - 1 ): start = all_indices [ index ] end = all_indices [ index + 1 ] if start == end : end = end + 1 group = similarity [ start : end ] . sum ( axis = 0 ) topic_distribution . append ( group ) topic_distribution = normalize ( np . array ( topic_distribution ), norm = 'l1' , axis = 1 ) topic_token_distribution = None # Combine results topic_distributions . append ( topic_distribution ) if topic_token_distribution is None : topic_token_distributions = None else : topic_token_distributions . extend ( topic_token_distribution ) topic_distributions = np . vstack ( topic_distributions ) return topic_distributions , topic_token_distributions def find_topics ( self , search_term : str , top_n : int = 5 ) -> Tuple [ List [ int ], List [ float ]]: \"\"\" Find topics most similar to a search_term Creates an embedding for search_term and compares that with the topic embeddings. The most similar topics are returned along with their similarity values. The search_term can be of any size but since it compares with the topic representation it is advised to keep it below 5 words. Arguments: search_term: the term you want to use to search for topics top_n: the number of topics to return Returns: similar_topics: the most similar topics from high to low similarity: the similarity scores from high to low Examples: You can use the underlying embedding model to find topics that best represent the search term: ```python topics, similarity = topic_model.find_topics(\"sports\", top_n=5) ``` Note that the search query is typically more accurate if the search_term consists of a phrase or multiple words. \"\"\" if self . embedding_model is None : raise Exception ( \"This method can only be used if you did not use custom embeddings.\" ) topic_list = list ( self . topic_representations_ . keys ()) topic_list . sort () # Extract search_term embeddings and compare with topic embeddings search_embedding = self . _extract_embeddings ([ search_term ], method = \"word\" , verbose = False ) . flatten () sims = cosine_similarity ( search_embedding . reshape ( 1 , - 1 ), self . topic_embeddings_ ) . flatten () # Extract topics most similar to search_term ids = np . argsort ( sims )[ - top_n :] similarity = [ sims [ i ] for i in ids ][:: - 1 ] similar_topics = [ topic_list [ index ] for index in ids ][:: - 1 ] return similar_topics , similarity def update_topics ( self , docs : List [ str ], topics : List [ int ] = None , top_n_words : int = 10 , n_gram_range : Tuple [ int , int ] = None , vectorizer_model : CountVectorizer = None , ctfidf_model : ClassTfidfTransformer = None , representation_model : BaseRepresentation = None ): \"\"\" Updates the topic representation by recalculating c-TF-IDF with the new parameters as defined in this function. When you have trained a model and viewed the topics and the words that represent them, you might not be satisfied with the representation. Perhaps you forgot to remove stop_words or you want to try out a different n_gram_range. This function allows you to update the topic representation after they have been formed. Arguments: docs: The documents you used when calling either `fit` or `fit_transform` topics: A list of topics where each topic is related to a document in `docs`. Use this variable to change or map the topics. NOTE: Using a custom list of topic assignments may lead to errors if topic reduction techniques are used afterwards. Make sure that manually assigning topics is the last step in the pipeline top_n_words: The number of words per topic to extract. Setting this too high can negatively impact topic embeddings as topics are typically best represented by at most 10 words. n_gram_range: The n-gram range for the CountVectorizer. vectorizer_model: Pass in your own CountVectorizer from scikit-learn ctfidf_model: Pass in your own c-TF-IDF model to update the representations representation_model: Pass in a model that fine-tunes the topic representations calculated through c-TF-IDF. Models from `bertopic.representation` are supported. Examples: In order to update the topic representation, you will need to first fit the topic model and extract topics from them. Based on these, you can update the representation: ```python topic_model.update_topics(docs, n_gram_range=(2, 3)) ``` You can also use a custom vectorizer to update the representation: ```python from sklearn.feature_extraction.text import CountVectorizer vectorizer_model = CountVectorizer(ngram_range=(1, 2), stop_words=\"english\") topic_model.update_topics(docs, vectorizer_model=vectorizer_model) ``` You can also use this function to change or map the topics to something else. You can update them as follows: ```python topic_model.update_topics(docs, my_updated_topics) ``` \"\"\" check_is_fitted ( self ) if not n_gram_range : n_gram_range = self . n_gram_range if top_n_words > 100 : warnings . warn ( \"Note that extracting more than 100 words from a sparse \" \"can slow down computation quite a bit.\" ) self . top_n_words = top_n_words self . vectorizer_model = vectorizer_model or CountVectorizer ( ngram_range = n_gram_range ) self . ctfidf_model = ctfidf_model or ClassTfidfTransformer () self . representation_model = representation_model if topics is None : topics = self . topics_ else : warnings . warn ( \"Using a custom list of topic assignments may lead to errors if \" \"topic reduction techniques are used afterwards. Make sure that \" \"manually assigning topics is the last step in the pipeline.\" ) # Extract words documents = pd . DataFrame ({ \"Document\" : docs , \"Topic\" : topics }) documents_per_topic = documents . groupby ([ 'Topic' ], as_index = False ) . agg ({ 'Document' : ' ' . join }) self . c_tf_idf_ , words = self . _c_tf_idf ( documents_per_topic ) self . topic_representations_ = self . _extract_words_per_topic ( words , documents ) self . _create_topic_vectors () self . topic_labels_ = { key : f \" { key } _\" + \"_\" . join ([ word [ 0 ] for word in values [: 4 ]]) for key , values in self . topic_representations_ . items ()} self . _update_topic_size ( documents ) def get_topics ( self ) -> Mapping [ str , Tuple [ str , float ]]: \"\"\" Return topics with top n words and their c-TF-IDF score Returns: self.topic_representations_: The top n words per topic and the corresponding c-TF-IDF score Examples: ```python all_topics = topic_model.get_topics() ``` \"\"\" check_is_fitted ( self ) return self . topic_representations_ def get_topic ( self , topic : int ) -> Union [ Mapping [ str , Tuple [ str , float ]], bool ]: \"\"\" Return top n words for a specific topic and their c-TF-IDF scores Arguments: topic: A specific topic for which you want its representation Returns: The top n words for a specific word and its respective c-TF-IDF scores Examples: ```python topic = topic_model.get_topic(12) ``` \"\"\" check_is_fitted ( self ) if topic in self . topic_representations_ : return self . topic_representations_ [ topic ] else : return False def get_topic_info ( self , topic : int = None ) -> pd . DataFrame : \"\"\" Get information about each topic including its ID, frequency, and name. Arguments: topic: A specific topic for which you want the frequency Returns: info: The information relating to either a single topic or all topics Examples: ```python info_df = topic_model.get_topic_info() ``` \"\"\" check_is_fitted ( self ) info = pd . DataFrame ( self . topic_sizes_ . items (), columns = [ \"Topic\" , \"Count\" ]) . sort_values ( \"Topic\" ) info [ \"Name\" ] = info . Topic . map ( self . topic_labels_ ) if self . custom_labels_ is not None : if len ( self . custom_labels_ ) == len ( info ): labels = { topic - self . _outliers : label for topic , label in enumerate ( self . custom_labels_ )} info [ \"CustomName\" ] = info [ \"Topic\" ] . map ( labels ) if topic is not None : info = info . loc [ info . Topic == topic , :] return info . reset_index ( drop = True ) def get_topic_freq ( self , topic : int = None ) -> Union [ pd . DataFrame , int ]: \"\"\" Return the the size of topics (descending order) Arguments: topic: A specific topic for which you want the frequency Returns: Either the frequency of a single topic or dataframe with the frequencies of all topics Examples: To extract the frequency of all topics: ```python frequency = topic_model.get_topic_freq() ``` To get the frequency of a single topic: ```python frequency = topic_model.get_topic_freq(12) ``` \"\"\" check_is_fitted ( self ) if isinstance ( topic , int ): return self . topic_sizes_ [ topic ] else : return pd . DataFrame ( self . topic_sizes_ . items (), columns = [ 'Topic' , 'Count' ]) . sort_values ( \"Count\" , ascending = False ) def get_document_info ( self , docs : List [ str ], df : pd . DataFrame = None , metadata : Mapping [ str , Any ] = None ) -> pd . DataFrame : \"\"\" Get information about the documents on which the topic was trained including the documents themselves, their respective topics, the name of each topic, the top n words of each topic, whether it is a representative document, and probability of the clustering if the cluster model supports it. There are also options to include other meta data, such as the topic distributions or the x and y coordinates of the reduced embeddings. Arguments: docs: The documents on which the topic model was trained. df: A dataframe containing the metadata and the documents on which the topic model was originally trained on. metadata: A dictionary with meta data for each document in the form of column name (key) and the respective values (value). Returns: document_info: A dataframe with several statistics regarding the documents on which the topic model was trained. Usage: To get the document info, you will only need to pass the documents on which the topic model was trained: ```python document_info = topic_model.get_document_info(docs) ``` There are additionally options to include meta data, such as the topic distributions. Moreover, we can pass the original dataframe that contains the documents and extend it with the information retrieved from BERTopic: ```python from sklearn.datasets import fetch_20newsgroups # The original data in a dataframe format to include the target variable data= fetch_20newsgroups(subset='all', remove=('headers', 'footers', 'quotes')) df = pd.DataFrame({\"Document\": data['data'], \"Class\": data['target']}) # Add information about the percentage of the document that relates to the topic topic_distr, _ = topic_model.approximate_distribution(docs, batch_size=1000) distributions = [distr[topic] if topic != -1 else 0 for topic, distr in zip(topics, topic_distr)] # Create our documents dataframe using the original dataframe and meta data about # the topic distributions document_info = topic_model.get_document_info(docs, df=df, metadata={\"Topic_distribution\": distributions}) ``` \"\"\" if df is not None : document_info = df . copy () document_info [ \"Document\" ] = docs document_info [ \"Topic\" ] = self . topics_ else : document_info = pd . DataFrame ({ \"Document\" : docs , \"Topic\" : self . topics_ }) # Add topic info through `.get_topic_info()` topic_info = self . get_topic_info () . drop ( \"Count\" , axis = 1 ) document_info = pd . merge ( document_info , topic_info , on = \"Topic\" , how = \"left\" ) # Add top n words top_n_words = { topic : \" - \" . join ( list ( zip ( * self . get_topic ( topic )))[ 0 ]) for topic in set ( self . topics_ )} document_info [ \"Top_n_words\" ] = document_info . Topic . map ( top_n_words ) # Add flat probabilities if self . probabilities_ is not None : if len ( self . probabilities_ . shape ) == 1 : document_info [ \"Probability\" ] = self . probabilities_ else : document_info [ \"Probability\" ] = [ max ( probs ) if topic != - 1 else 1 - sum ( probs ) for topic , probs in zip ( self . topics_ , self . probabilities_ )] # Add representative document labels repr_docs = [ repr_doc for repr_docs in self . representative_docs_ . values () for repr_doc in repr_docs ] document_info [ \"Representative_document\" ] = False document_info . loc [ document_info . Document . isin ( repr_docs ), \"Representative_document\" ] = True # Add custom meta data provided by the user if metadata is not None : for column , values in metadata . items (): document_info [ column ] = values return document_info def get_representative_docs ( self , topic : int = None ) -> List [ str ]: \"\"\" Extract the best representing documents per topic. NOTE: This does not extract all documents per topic as all documents are not saved within BERTopic. To get all documents, please run the following: ```python # When you used `.fit_transform`: df = pd.DataFrame({\"Document\": docs, \"Topic\": topic}) # When you used `.fit`: df = pd.DataFrame({\"Document\": docs, \"Topic\": topic_model.topics_}) ``` Arguments: topic: A specific topic for which you want the representative documents Returns: Representative documents of the chosen topic Examples: To extract the representative docs of all topics: ```python representative_docs = topic_model.get_representative_docs() ``` To get the representative docs of a single topic: ```python representative_docs = topic_model.get_representative_docs(12) ``` \"\"\" check_is_fitted ( self ) if isinstance ( topic , int ): if self . representative_docs_ . get ( topic ): return self . representative_docs_ [ topic ] else : return None else : return self . representative_docs_ @staticmethod def get_topic_tree ( hier_topics : pd . DataFrame , max_distance : float = None , tight_layout : bool = False ) -> str : \"\"\" Extract the topic tree such that it can be printed Arguments: hier_topics: A dataframe containing the structure of the topic tree. This is the output of `topic_model.hierachical_topics()` max_distance: The maximum distance between two topics. This value is based on the Distance column in `hier_topics`. tight_layout: Whether to use a tight layout (narrow width) for easier readability if you have hundreds of topics. Returns: A tree that has the following structure when printed: . . \u2514\u2500health_medical_disease_patients_hiv \u251c\u2500patients_medical_disease_candida_health \u2502 \u251c\u2500\u25a0\u2500\u2500candida_yeast_infection_gonorrhea_infections \u2500\u2500 Topic: 48 \u2502 \u2514\u2500patients_disease_cancer_medical_doctor \u2502 \u251c\u2500\u25a0\u2500\u2500hiv_medical_cancer_patients_doctor \u2500\u2500 Topic: 34 \u2502 \u2514\u2500\u25a0\u2500\u2500pain_drug_patients_disease_diet \u2500\u2500 Topic: 26 \u2514\u2500\u25a0\u2500\u2500health_newsgroup_tobacco_vote_votes \u2500\u2500 Topic: 9 The blocks (\u25a0) indicate that the topic is one you can directly access from `topic_model.get_topic`. In other words, they are the original un-grouped topics. Examples: ```python # Train model from bertopic import BERTopic topic_model = BERTopic() topics, probs = topic_model.fit_transform(docs) hierarchical_topics = topic_model.hierarchical_topics(docs) # Print topic tree tree = topic_model.get_topic_tree(hierarchical_topics) print(tree) ``` \"\"\" width = 1 if tight_layout else 4 if max_distance is None : max_distance = hier_topics . Distance . max () + 1 max_original_topic = hier_topics . Parent_ID . astype ( int ) . min () - 1 # Extract mapping from ID to name topic_to_name = dict ( zip ( hier_topics . Child_Left_ID , hier_topics . Child_Left_Name )) topic_to_name . update ( dict ( zip ( hier_topics . Child_Right_ID , hier_topics . Child_Right_Name ))) topic_to_name = { topic : name [: 100 ] for topic , name in topic_to_name . items ()} # Create tree tree = { str ( row [ 1 ] . Parent_ID ): [ str ( row [ 1 ] . Child_Left_ID ), str ( row [ 1 ] . Child_Right_ID )] for row in hier_topics . iterrows ()} def get_tree ( start , tree ): \"\"\" Based on: https://stackoverflow.com/a/51920869/10532563 \"\"\" def _tree ( to_print , start , parent , tree , grandpa = None , indent = \"\" ): # Get distance between merged topics distance = hier_topics . loc [( hier_topics . Child_Left_ID == parent ) | ( hier_topics . Child_Right_ID == parent ), \"Distance\" ] distance = distance . values [ 0 ] if len ( distance ) > 0 else 10 if parent != start : if grandpa is None : to_print += topic_to_name [ parent ] else : if int ( parent ) <= max_original_topic : # Do not append topic ID if they are not merged if distance < max_distance : to_print += \"\u25a0\u2500\u2500\" + topic_to_name [ parent ] + f \" \u2500\u2500 Topic: { parent } \" + \" \\n \" else : to_print += \"O \\n \" else : to_print += topic_to_name [ parent ] + \" \\n \" if parent not in tree : return to_print for child in tree [ parent ][: - 1 ]: to_print += indent + \"\u251c\" + \"\u2500\" to_print = _tree ( to_print , start , child , tree , parent , indent + \"\u2502\" + \" \" * width ) child = tree [ parent ][ - 1 ] to_print += indent + \"\u2514\" + \"\u2500\" to_print = _tree ( to_print , start , child , tree , parent , indent + \" \" * ( width + 1 )) return to_print to_print = \".\" + \" \\n \" to_print = _tree ( to_print , start , start , tree ) return to_print start = str ( hier_topics . Parent_ID . astype ( int ) . max ()) return get_tree ( start , tree ) def set_topic_labels ( self , topic_labels : Union [ List [ str ], Mapping [ int , str ]]) -> None : \"\"\" Set custom topic labels in your fitted BERTopic model Arguments: topic_labels: If a list of topic labels, it should contain the same number of labels as there are topics. This must be ordered from the topic with the lowest ID to the highest ID, including topic -1 if it exists. If a dictionary of `topic ID`: `topic_label`, it can have any number of topics as it will only map the topics found in the dictionary. Examples: First, we define our topic labels with `.get_topic_labels` in which we can customize our topic labels: ```python topic_labels = topic_model.get_topic_labels(nr_words=2, topic_prefix=True, word_length=10, separator=\", \") ``` Then, we pass these `topic_labels` to our topic model which can be accessed at any time with `.custom_labels_`: ```python topic_model.set_topic_labels(topic_labels) topic_model.custom_labels_ ``` You might want to change only a few topic labels instead of all of them. To do so, you can pass a dictionary where the keys are the topic IDs and its keys the topic labels: ```python topic_model.set_topic_labels({0: \"Space\", 1: \"Sports\", 2: \"Medicine\"}) topic_model.custom_labels_ ``` \"\"\" unique_topics = sorted ( set ( self . topics_ )) if isinstance ( topic_labels , dict ): if self . custom_labels_ is not None : original_labels = { topic : label for topic , label in zip ( unique_topics , self . custom_labels_ )} else : info = self . get_topic_info () original_labels = dict ( zip ( info . Topic , info . Name )) custom_labels = [ topic_labels . get ( topic ) if topic_labels . get ( topic ) else original_labels [ topic ] for topic in unique_topics ] elif isinstance ( topic_labels , list ): if len ( topic_labels ) == len ( unique_topics ): custom_labels = topic_labels else : raise ValueError ( \"Make sure that `topic_labels` contains the same number \" \"of labels as that there are topics.\" ) self . custom_labels_ = custom_labels def generate_topic_labels ( self , nr_words : int = 3 , topic_prefix : bool = True , word_length : int = None , separator : str = \"_\" ) -> List [ str ]: \"\"\" Get labels for each topic in a user-defined format Arguments: original_labels: nr_words: Top `n` words per topic to use topic_prefix: Whether to use the topic ID as a prefix. If set to True, the topic ID will be separated using the `separator` word_length: The maximum length of each word in the topic label. Some words might be relatively long and setting this value helps to make sure that all labels have relatively similar lengths. separator: The string with which the words and topic prefix will be separated. Underscores are the default but a nice alternative is `\", \"`. Returns: topic_labels: A list of topic labels sorted from the lowest topic ID to the highest. If the topic model was trained using HDBSCAN, the lowest topic ID is -1, otherwise it is 0. Examples: To create our custom topic labels, usage is rather straightforward: ```python topic_labels = topic_model.get_topic_labels(nr_words=2, separator=\", \") ``` \"\"\" unique_topics = sorted ( set ( self . topics_ )) topic_labels = [] for topic in unique_topics : words , _ = zip ( * self . get_topic ( topic )) if word_length : words = [ word [: word_length ] for word in words ][: nr_words ] else : words = list ( words )[: nr_words ] if topic_prefix : topic_label = f \" { topic }{ separator } \" + separator . join ( words ) else : topic_label = separator . join ( words ) topic_labels . append ( topic_label ) return topic_labels def merge_topics ( self , docs : List [ str ], topics_to_merge : List [ Union [ Iterable [ int ], int ]]) -> None : \"\"\" Arguments: docs: The documents you used when calling either `fit` or `fit_transform` topics_to_merge: Either a list of topics or a list of list of topics to merge. For example: [1, 2, 3] will merge topics 1, 2 and 3 [[1, 2], [3, 4]] will merge topics 1 and 2, and separately merge topics 3 and 4. Examples: If you want to merge topics 1, 2, and 3: ```python topics_to_merge = [1, 2, 3] topic_model.merge_topics(docs, topics_to_merge) ``` or if you want to merge topics 1 and 2, and separately merge topics 3 and 4: ```python topics_to_merge = [[1, 2] [3, 4]] topic_model.merge_topics(docs, topics_to_merge) ``` \"\"\" check_is_fitted ( self ) documents = pd . DataFrame ({ \"Document\" : docs , \"Topic\" : self . topics_ }) mapping = { topic : topic for topic in set ( self . topics_ )} if isinstance ( topics_to_merge [ 0 ], int ): for topic in sorted ( topics_to_merge ): mapping [ topic ] = topics_to_merge [ 0 ] elif isinstance ( topics_to_merge [ 0 ], Iterable ): for topic_group in sorted ( topics_to_merge ): for topic in topic_group : mapping [ topic ] = topic_group [ 0 ] else : raise ValueError ( \"Make sure that `topics_to_merge` is either\" \"a list of topics or a list of list of topics.\" ) documents . Topic = documents . Topic . map ( mapping ) self . topic_mapper_ . add_mappings ( mapping ) documents = self . _sort_mappings_by_frequency ( documents ) self . _extract_topics ( documents ) self . _update_topic_size ( documents ) self . _save_representative_docs ( documents ) self . probabilities_ = self . _map_probabilities ( self . probabilities_ ) def reduce_topics ( self , docs : List [ str ], nr_topics : Union [ int , str ] = 20 ) -> None : \"\"\" Reduce the number of topics to a fixed number of topics or automatically. If nr_topics is a integer, then the number of topics is reduced to nr_topics using `AgglomerativeClustering` on the cosine distance matrix of the topic embeddings. If nr_topics is `\"auto\"`, then HDBSCAN is used to automatically reduce the number of topics by running it on the topic embeddings. The topics, their sizes, and representations are updated. Arguments: docs: The docs you used when calling either `fit` or `fit_transform` nr_topics: The number of topics you want reduced to Updates: topics_ : Assigns topics to their merged representations. probabilities_ : Assigns probabilities to their merged representations. Examples: You can further reduce the topics by passing the documents with its topics and probabilities (if they were calculated): ```python topic_model.reduce_topics(docs, nr_topics=30) ``` You can then access the updated topics and probabilities with: ```python topics = topic_model.topics_ probabilities = topic_model.probabilities_ ``` \"\"\" check_is_fitted ( self ) self . nr_topics = nr_topics documents = pd . DataFrame ({ \"Document\" : docs , \"Topic\" : self . topics_ }) # Reduce number of topics documents = self . _reduce_topics ( documents ) self . _merged_topics = None self . _save_representative_docs ( documents ) self . probabilities_ = self . _map_probabilities ( self . probabilities_ ) return self def reduce_outliers ( self , documents : List [ str ], topics : List [ int ], strategy : str = \"distributions\" , probabilities : np . ndarray = None , threshold : int = 0 , embeddings : np . ndarray = None , distributions_params : Mapping [ str , Any ] = {}) -> List [ int ]: \"\"\" Reduce outliers by merging them with their nearest topic according to one of several strategies. When using HDBSCAN, DBSCAN, or OPTICS, a number of outlier documents might be created that do not fall within any of the created topics. These are labeled as -1. This function allows the user to match outlier documents with their nearest topic using one of the following strategies using the `strategy` parameter: * \"probabilities\" This uses the soft-clustering as performed by HDBSCAN to find the best matching topic for each outlier document. To use this, make sure to calculate the `probabilities` beforehand by instantiating BERTopic with `calculate_probabilities=True`. * \"distributions\" Use the topic distributions, as calculated with `.approximate_distribution` to find the most frequent topic in each outlier document. You can use the `distributions_params` variable to tweak the parameters of `.approximate_distribution`. * \"c-tf-idf\" Calculate the c-TF-IDF representation for each outlier document and find the best matching c-TF-IDF topic representation using cosine similarity. * \"embeddings\" Using the embeddings of each outlier documents, find the best matching topic embedding using cosine similarity. Arguments: documents: A list of documents for which we reduce or remove the outliers. topics: The topics that correspond to the documents strategy: The strategy used for reducing outliers. Options: * \"probabilities\" This uses the soft-clustering as performed by HDBSCAN to find the best matching topic for each outlier document. * \"distributions\" Use the topic distributions, as calculated with `.approximate_distribution` to find the most frequent topic in each outlier document. * \"c-tf-idf\" Calculate the c-TF-IDF representation for outlier documents and find the best matching c-TF-IDF topic representation. * \"embeddings\" Calculate the embeddings for outlier documents and find the best matching topic embedding. threshold: The threshold for assigning topics to outlier documents. This value represents the minimum probability when `strategy=\"probabilities\"`. For all other strategies, it represents the minimum similarity. embeddings: The pre-computed embeddings to be used when `strategy=\"embeddings\"`. If this is None, then it will compute the embeddings for the outlier documents. distributions_params: The parameters used in `.approximate_distribution` when using the strategy `\"distributions\"`. Returns: new_topics: The updated topics Usage: The default settings uses the `\"distributions\"` strategy: ```python new_topics = topic_model.reduce_outliers(docs, topics) ``` When you use the `\"probabilities\"` strategy, make sure to also pass the probabilities as generated through HDBSCAN: ```python from bertopic import BERTopic topic_model = BERTopic(calculate_probabilities=True) topics, probs = topic_model.fit_transform(docs) new_topics = topic_model.reduce_outliers(docs, topics, probabilities=probs, strategy=\"probabilities\") ``` \"\"\" # Check correct use of parameters if strategy . lower () == \"probabilities\" and probabilities is None : raise ValueError ( \"Make sure to pass in `probabilities` in order to use the probabilities strategy\" ) # Reduce outliers by extracting most likely topics through the topic-term probability matrix if strategy . lower () == \"probabilities\" : new_topics = [ np . argmax ( prob ) if max ( prob ) >= threshold and topic == - 1 else topic for topic , prob in zip ( topics , probabilities )] # Reduce outliers by extracting most frequent topics through calculating of Topic Distributions elif strategy . lower () == \"distributions\" : outlier_ids = [ index for index , topic in enumerate ( topics ) if topic == - 1 ] outlier_docs = [ documents [ index ] for index in outlier_ids ] topic_distr , _ = self . approximate_distribution ( outlier_docs , min_similarity = threshold , ** distributions_params ) outlier_topics = iter ([ np . argmax ( prob ) if sum ( prob ) > 0 else - 1 for prob in topic_distr ]) new_topics = [ topic if topic != - 1 else next ( outlier_topics ) for topic in topics ] # Reduce outliers by finding the most similar c-TF-IDF representations elif strategy . lower () == \"c-tf-idf\" : outlier_ids = [ index for index , topic in enumerate ( topics ) if topic == - 1 ] outlier_docs = [ documents [ index ] for index in outlier_ids ] # Calculate c-TF-IDF of outlier documents with all topics bow_doc = self . vectorizer_model . transform ( outlier_docs ) c_tf_idf_doc = self . ctfidf_model . transform ( bow_doc ) similarity = cosine_similarity ( c_tf_idf_doc , self . c_tf_idf_ [ self . _outliers :]) # Update topics similarity [ similarity < threshold ] = 0 outlier_topics = iter ([ np . argmax ( sim ) if sum ( sim ) > 0 else - 1 for sim in similarity ]) new_topics = [ topic if topic != - 1 else next ( outlier_topics ) for topic in topics ] # Reduce outliers by finding the most similar topic embeddings elif strategy . lower () == \"embeddings\" : if self . embedding_model is None : raise ValueError ( \"To use this strategy, you will need to pass a model to `embedding_model`\" \"when instantiating BERTopic.\" ) outlier_ids = [ index for index , topic in enumerate ( topics ) if topic == - 1 ] outlier_docs = [ documents [ index ] for index in outlier_ids ] # Extract or calculate embeddings for outlier documents if embeddings is not None : outlier_embeddings = np . array ([ embeddings [ index ] for index in outlier_ids ]) else : outlier_embeddings = self . embedding_model . embed_documents ( outlier_docs ) similarity = cosine_similarity ( outlier_embeddings , self . topic_embeddings_ [ self . _outliers :]) # Update topics similarity [ similarity < threshold ] = 0 outlier_topics = iter ([ np . argmax ( sim ) if sum ( sim ) > 0 else - 1 for sim in similarity ]) new_topics = [ topic if topic != - 1 else next ( outlier_topics ) for topic in topics ] return new_topics def visualize_topics ( self , topics : List [ int ] = None , top_n_topics : int = None , custom_labels : bool = False , title : str = \"<b>Intertopic Distance Map</b>\" , width : int = 650 , height : int = 650 ) -> go . Figure : \"\"\" Visualize topics, their sizes, and their corresponding words This visualization is highly inspired by LDAvis, a great visualization technique typically reserved for LDA. Arguments: topics: A selection of topics to visualize top_n_topics: Only select the top n most frequent topics custom_labels: Whether to use custom topic labels that were defined using `topic_model.set_topic_labels`. title: Title of the plot. width: The width of the figure. height: The height of the figure. Examples: To visualize the topics simply run: ```python topic_model.visualize_topics() ``` Or if you want to save the resulting figure: ```python fig = topic_model.visualize_topics() fig.write_html(\"path/to/file.html\") ``` \"\"\" check_is_fitted ( self ) return plotting . visualize_topics ( self , topics = topics , top_n_topics = top_n_topics , custom_labels = custom_labels , title = title , width = width , height = height ) def visualize_documents ( self , docs : List [ str ], topics : List [ int ] = None , embeddings : np . ndarray = None , reduced_embeddings : np . ndarray = None , sample : float = None , hide_annotations : bool = False , hide_document_hover : bool = False , custom_labels : bool = False , title : str = \"<b>Documents and Topics</b>\" , width : int = 1200 , height : int = 750 ) -> go . Figure : \"\"\" Visualize documents and their topics in 2D Arguments: topic_model: A fitted BERTopic instance. docs: The documents you used when calling either `fit` or `fit_transform` topics: A selection of topics to visualize. Not to be confused with the topics that you get from `.fit_transform`. For example, if you want to visualize only topics 1 through 5: `topics = [1, 2, 3, 4, 5]`. embeddings: The embeddings of all documents in `docs`. reduced_embeddings: The 2D reduced embeddings of all documents in `docs`. sample: The percentage of documents in each topic that you would like to keep. Value can be between 0 and 1. Setting this value to, for example, 0.1 (10% of documents in each topic) makes it easier to visualize millions of documents as a subset is chosen. hide_annotations: Hide the names of the traces on top of each cluster. hide_document_hover: Hide the content of the documents when hovering over specific points. Helps to speed up generation of visualization. custom_labels: Whether to use custom topic labels that were defined using `topic_model.set_topic_labels`. title: Title of the plot. width: The width of the figure. height: The height of the figure. Examples: To visualize the topics simply run: ```python topic_model.visualize_documents(docs) ``` Do note that this re-calculates the embeddings and reduces them to 2D. The advised and prefered pipeline for using this function is as follows: ```python from sklearn.datasets import fetch_20newsgroups from sentence_transformers import SentenceTransformer from bertopic import BERTopic from umap import UMAP # Prepare embeddings docs = fetch_20newsgroups(subset='all', remove=('headers', 'footers', 'quotes'))['data'] sentence_model = SentenceTransformer(\"all-MiniLM-L6-v2\") embeddings = sentence_model.encode(docs, show_progress_bar=False) # Train BERTopic topic_model = BERTopic().fit(docs, embeddings) # Reduce dimensionality of embeddings, this step is optional # reduced_embeddings = UMAP(n_neighbors=10, n_components=2, min_dist=0.0, metric='cosine').fit_transform(embeddings) # Run the visualization with the original embeddings topic_model.visualize_documents(docs, embeddings=embeddings) # Or, if you have reduced the original embeddings already: topic_model.visualize_documents(docs, reduced_embeddings=reduced_embeddings) ``` Or if you want to save the resulting figure: ```python fig = topic_model.visualize_documents(docs, reduced_embeddings=reduced_embeddings) fig.write_html(\"path/to/file.html\") ``` <iframe src=\"../getting_started/visualization/documents.html\" style=\"width:1000px; height: 800px; border: 0px;\"\"></iframe> \"\"\" check_is_fitted ( self ) return plotting . visualize_documents ( self , docs = docs , topics = topics , embeddings = embeddings , reduced_embeddings = reduced_embeddings , sample = sample , hide_annotations = hide_annotations , hide_document_hover = hide_document_hover , custom_labels = custom_labels , title = title , width = width , height = height ) def visualize_hierarchical_documents ( self , docs : List [ str ], hierarchical_topics : pd . DataFrame , topics : List [ int ] = None , embeddings : np . ndarray = None , reduced_embeddings : np . ndarray = None , sample : Union [ float , int ] = None , hide_annotations : bool = False , hide_document_hover : bool = True , nr_levels : int = 10 , custom_labels : bool = False , title : str = \"<b>Hierarchical Documents and Topics</b>\" , width : int = 1200 , height : int = 750 ) -> go . Figure : \"\"\" Visualize documents and their topics in 2D at different levels of hierarchy Arguments: docs: The documents you used when calling either `fit` or `fit_transform` hierarchical_topics: A dataframe that contains a hierarchy of topics represented by their parents and their children topics: A selection of topics to visualize. Not to be confused with the topics that you get from `.fit_transform`. For example, if you want to visualize only topics 1 through 5: `topics = [1, 2, 3, 4, 5]`. embeddings: The embeddings of all documents in `docs`. reduced_embeddings: The 2D reduced embeddings of all documents in `docs`. sample: The percentage of documents in each topic that you would like to keep. Value can be between 0 and 1. Setting this value to, for example, 0.1 (10% of documents in each topic) makes it easier to visualize millions of documents as a subset is chosen. hide_annotations: Hide the names of the traces on top of each cluster. hide_document_hover: Hide the content of the documents when hovering over specific points. Helps to speed up generation of visualizations. nr_levels: The number of levels to be visualized in the hierarchy. First, the distances in `hierarchical_topics.Distance` are split in `nr_levels` lists of distances with equal length. Then, for each list of distances, the merged topics are selected that have a distance less or equal to the maximum distance of the selected list of distances. NOTE: To get all possible merged steps, make sure that `nr_levels` is equal to the length of `hierarchical_topics`. custom_labels: Whether to use custom topic labels that were defined using `topic_model.set_topic_labels`. NOTE: Custom labels are only generated for the original un-merged topics. title: Title of the plot. width: The width of the figure. height: The height of the figure. Examples: To visualize the topics simply run: ```python topic_model.visualize_hierarchical_documents(docs, hierarchical_topics) ``` Do note that this re-calculates the embeddings and reduces them to 2D. The advised and prefered pipeline for using this function is as follows: ```python from sklearn.datasets import fetch_20newsgroups from sentence_transformers import SentenceTransformer from bertopic import BERTopic from umap import UMAP # Prepare embeddings docs = fetch_20newsgroups(subset='all', remove=('headers', 'footers', 'quotes'))['data'] sentence_model = SentenceTransformer(\"all-MiniLM-L6-v2\") embeddings = sentence_model.encode(docs, show_progress_bar=False) # Train BERTopic and extract hierarchical topics topic_model = BERTopic().fit(docs, embeddings) hierarchical_topics = topic_model.hierarchical_topics(docs) # Reduce dimensionality of embeddings, this step is optional # reduced_embeddings = UMAP(n_neighbors=10, n_components=2, min_dist=0.0, metric='cosine').fit_transform(embeddings) # Run the visualization with the original embeddings topic_model.visualize_hierarchical_documents(docs, hierarchical_topics, embeddings=embeddings) # Or, if you have reduced the original embeddings already: topic_model.visualize_hierarchical_documents(docs, hierarchical_topics, reduced_embeddings=reduced_embeddings) ``` Or if you want to save the resulting figure: ```python fig = topic_model.visualize_hierarchical_documents(docs, hierarchical_topics, reduced_embeddings=reduced_embeddings) fig.write_html(\"path/to/file.html\") ``` <iframe src=\"../getting_started/visualization/hierarchical_documents.html\" style=\"width:1000px; height: 770px; border: 0px;\"\"></iframe> \"\"\" check_is_fitted ( self ) return plotting . visualize_hierarchical_documents ( self , docs = docs , hierarchical_topics = hierarchical_topics , topics = topics , embeddings = embeddings , reduced_embeddings = reduced_embeddings , sample = sample , hide_annotations = hide_annotations , hide_document_hover = hide_document_hover , nr_levels = nr_levels , custom_labels = custom_labels , title = title , width = width , height = height ) def visualize_term_rank ( self , topics : List [ int ] = None , log_scale : bool = False , custom_labels : bool = False , title : str = \"<b>Term score decline per Topic</b>\" , width : int = 800 , height : int = 500 ) -> go . Figure : \"\"\" Visualize the ranks of all terms across all topics Each topic is represented by a set of words. These words, however, do not all equally represent the topic. This visualization shows how many words are needed to represent a topic and at which point the beneficial effect of adding words starts to decline. Arguments: topics: A selection of topics to visualize. These will be colored red where all others will be colored black. log_scale: Whether to represent the ranking on a log scale custom_labels: Whether to use custom topic labels that were defined using `topic_model.set_topic_labels`. title: Title of the plot. width: The width of the figure. height: The height of the figure. Returns: fig: A plotly figure Examples: To visualize the ranks of all words across all topics simply run: ```python topic_model.visualize_term_rank() ``` Or if you want to save the resulting figure: ```python fig = topic_model.visualize_term_rank() fig.write_html(\"path/to/file.html\") ``` Reference: This visualization was heavily inspired by the \"Term Probability Decline\" visualization found in an analysis by the amazing [tmtoolkit](https://tmtoolkit.readthedocs.io/). Reference to that specific analysis can be found [here](https://wzbsocialsciencecenter.github.io/tm_corona/tm_analysis.html). \"\"\" check_is_fitted ( self ) return plotting . visualize_term_rank ( self , topics = topics , log_scale = log_scale , custom_labels = custom_labels , title = title , width = width , height = height ) def visualize_topics_over_time ( self , topics_over_time : pd . DataFrame , top_n_topics : int = None , topics : List [ int ] = None , normalize_frequency : bool = False , custom_labels : bool = False , title : str = \"<b>Topics over Time</b>\" , width : int = 1250 , height : int = 450 ) -> go . Figure : \"\"\" Visualize topics over time Arguments: topics_over_time: The topics you would like to be visualized with the corresponding topic representation top_n_topics: To visualize the most frequent topics instead of all topics: Select which topics you would like to be visualized normalize_frequency: Whether to normalize each topic's frequency individually custom_labels: Whether to use custom topic labels that were defined using `topic_model.set_topic_labels`. title: Title of the plot. width: The width of the figure. height: The height of the figure. Returns: A plotly.graph_objects.Figure including all traces Examples: To visualize the topics over time, simply run: ```python topics_over_time = topic_model.topics_over_time(docs, timestamps) topic_model.visualize_topics_over_time(topics_over_time) ``` Or if you want to save the resulting figure: ```python fig = topic_model.visualize_topics_over_time(topics_over_time) fig.write_html(\"path/to/file.html\") ``` \"\"\" check_is_fitted ( self ) return plotting . visualize_topics_over_time ( self , topics_over_time = topics_over_time , top_n_topics = top_n_topics , topics = topics , normalize_frequency = normalize_frequency , custom_labels = custom_labels , title = title , width = width , height = height ) def visualize_topics_per_class ( self , topics_per_class : pd . DataFrame , top_n_topics : int = 10 , topics : List [ int ] = None , normalize_frequency : bool = False , custom_labels : bool = False , title : str = \"<b>Topics per Class</b>\" , width : int = 1250 , height : int = 900 ) -> go . Figure : \"\"\" Visualize topics per class Arguments: topics_per_class: The topics you would like to be visualized with the corresponding topic representation top_n_topics: To visualize the most frequent topics instead of all topics: Select which topics you would like to be visualized normalize_frequency: Whether to normalize each topic's frequency individually custom_labels: Whether to use custom topic labels that were defined using `topic_model.set_topic_labels`. title: Title of the plot. width: The width of the figure. height: The height of the figure. Returns: A plotly.graph_objects.Figure including all traces Examples: To visualize the topics per class, simply run: ```python topics_per_class = topic_model.topics_per_class(docs, classes) topic_model.visualize_topics_per_class(topics_per_class) ``` Or if you want to save the resulting figure: ```python fig = topic_model.visualize_topics_per_class(topics_per_class) fig.write_html(\"path/to/file.html\") ``` \"\"\" check_is_fitted ( self ) return plotting . visualize_topics_per_class ( self , topics_per_class = topics_per_class , top_n_topics = top_n_topics , topics = topics , normalize_frequency = normalize_frequency , custom_labels = custom_labels , title = title , width = width , height = height ) def visualize_distribution ( self , probabilities : np . ndarray , min_probability : float = 0.015 , custom_labels : bool = False , title : str = \"<b>Topic Probability Distribution</b>\" , width : int = 800 , height : int = 600 ) -> go . Figure : \"\"\" Visualize the distribution of topic probabilities Arguments: probabilities: An array of probability scores min_probability: The minimum probability score to visualize. All others are ignored. custom_labels: Whether to use custom topic labels that were defined using `topic_model.set_topic_labels`. title: Title of the plot. width: The width of the figure. height: The height of the figure. Examples: Make sure to fit the model before and only input the probabilities of a single document: ```python topic_model.visualize_distribution(topic_model.probabilities_[0]) ``` Or if you want to save the resulting figure: ```python fig = topic_model.visualize_distribution(topic_model.probabilities_[0]) fig.write_html(\"path/to/file.html\") ``` \"\"\" check_is_fitted ( self ) return plotting . visualize_distribution ( self , probabilities = probabilities , min_probability = min_probability , custom_labels = custom_labels , title = title , width = width , height = height ) def visualize_approximate_distribution ( self , document : str , topic_token_distribution : np . ndarray , normalize : bool = False ): \"\"\" Visualize the topic distribution calculated by `.approximate_topic_distribution` on a token level. Thereby indicating the extend to which a certain word or phrases belong to a specific topic. The assumption here is that a single word can belong to multiple similar topics and as such give information about the broader set of topics within a single document. Arguments: topic_model: A fitted BERTopic instance. document: The document for which you want to visualize the approximated topic distribution. topic_token_distribution: The topic-token distribution of the document as extracted by `.approximate_topic_distribution` normalize: Whether to normalize, between 0 and 1 (summing to 1), the topic distribution values. Returns: df: A stylized dataframe indicating the best fitting topics for each token. Examples: ```python # Calculate the topic distributions on a token level # Note that we need to have `calculate_token_level=True` topic_distr, topic_token_distr = topic_model.approximate_distribution( docs, calculate_token_level=True ) # Visualize the approximated topic distributions df = topic_model.visualize_approximate_distribution(docs[0], topic_token_distr[0]) df ``` To revert this stylized dataframe back to a regular dataframe, you can run the following: ```python df.data.columns = [column.strip() for column in df.data.columns] df = df.data ``` \"\"\" check_is_fitted ( self ) return plotting . visualize_approximate_distribution ( self , document = document , topic_token_distribution = topic_token_distribution , normalize = normalize ) def visualize_hierarchy ( self , orientation : str = \"left\" , topics : List [ int ] = None , top_n_topics : int = None , custom_labels : bool = False , title : str = \"<b>Hierarchical Clustering</b>\" , width : int = 1000 , height : int = 600 , hierarchical_topics : pd . DataFrame = None , linkage_function : Callable [[ csr_matrix ], np . ndarray ] = None , distance_function : Callable [[ csr_matrix ], csr_matrix ] = None , color_threshold : int = 1 ) -> go . Figure : \"\"\" Visualize a hierarchical structure of the topics A ward linkage function is used to perform the hierarchical clustering based on the cosine distance matrix between topic embeddings. Arguments: topic_model: A fitted BERTopic instance. orientation: The orientation of the figure. Either 'left' or 'bottom' topics: A selection of topics to visualize top_n_topics: Only select the top n most frequent topics custom_labels: Whether to use custom topic labels that were defined using `topic_model.set_topic_labels`. NOTE: Custom labels are only generated for the original un-merged topics. title: Title of the plot. width: The width of the figure. Only works if orientation is set to 'left' height: The height of the figure. Only works if orientation is set to 'bottom' hierarchical_topics: A dataframe that contains a hierarchy of topics represented by their parents and their children. NOTE: The hierarchical topic names are only visualized if both `topics` and `top_n_topics` are not set. linkage_function: The linkage function to use. Default is: `lambda x: sch.linkage(x, 'ward', optimal_ordering=True)` NOTE: Make sure to use the same `linkage_function` as used in `topic_model.hierarchical_topics`. distance_function: The distance function to use on the c-TF-IDF matrix. Default is: `lambda x: 1 - cosine_similarity(x)` NOTE: Make sure to use the same `distance_function` as used in `topic_model.hierarchical_topics`. color_threshold: Value at which the separation of clusters will be made which will result in different colors for different clusters. A higher value will typically lead in less colored clusters. Returns: fig: A plotly figure Examples: To visualize the hierarchical structure of topics simply run: ```python topic_model.visualize_hierarchy() ``` If you also want the labels visualized of hierarchical topics, run the following: ```python # Extract hierarchical topics and their representations hierarchical_topics = topic_model.hierarchical_topics(docs) # Visualize these representations topic_model.visualize_hierarchy(hierarchical_topics=hierarchical_topics) ``` If you want to save the resulting figure: ```python fig = topic_model.visualize_hierarchy() fig.write_html(\"path/to/file.html\") ``` <iframe src=\"../getting_started/visualization/hierarchy.html\" style=\"width:1000px; height: 680px; border: 0px;\"\"></iframe> \"\"\" check_is_fitted ( self ) return plotting . visualize_hierarchy ( self , orientation = orientation , topics = topics , top_n_topics = top_n_topics , custom_labels = custom_labels , title = title , width = width , height = height , hierarchical_topics = hierarchical_topics , linkage_function = linkage_function , distance_function = distance_function , color_threshold = color_threshold ) def visualize_heatmap ( self , topics : List [ int ] = None , top_n_topics : int = None , n_clusters : int = None , custom_labels : bool = False , title : str = \"<b>Similarity Matrix</b>\" , width : int = 800 , height : int = 800 ) -> go . Figure : \"\"\" Visualize a heatmap of the topic's similarity matrix Based on the cosine similarity matrix between topic embeddings, a heatmap is created showing the similarity between topics. Arguments: topics: A selection of topics to visualize. top_n_topics: Only select the top n most frequent topics. n_clusters: Create n clusters and order the similarity matrix by those clusters. custom_labels: Whether to use custom topic labels that were defined using `topic_model.set_topic_labels`. title: Title of the plot. width: The width of the figure. height: The height of the figure. Returns: fig: A plotly figure Examples: To visualize the similarity matrix of topics simply run: ```python topic_model.visualize_heatmap() ``` Or if you want to save the resulting figure: ```python fig = topic_model.visualize_heatmap() fig.write_html(\"path/to/file.html\") ``` \"\"\" check_is_fitted ( self ) return plotting . visualize_heatmap ( self , topics = topics , top_n_topics = top_n_topics , n_clusters = n_clusters , custom_labels = custom_labels , title = title , width = width , height = height ) def visualize_barchart ( self , topics : List [ int ] = None , top_n_topics : int = 8 , n_words : int = 5 , custom_labels : bool = False , title : str = \"Topic Word Scores\" , width : int = 250 , height : int = 250 ) -> go . Figure : \"\"\" Visualize a barchart of selected topics Arguments: topics: A selection of topics to visualize. top_n_topics: Only select the top n most frequent topics. n_words: Number of words to show in a topic custom_labels: Whether to use custom topic labels that were defined using `topic_model.set_topic_labels`. title: Title of the plot. width: The width of each figure. height: The height of each figure. Returns: fig: A plotly figure Examples: To visualize the barchart of selected topics simply run: ```python topic_model.visualize_barchart() ``` Or if you want to save the resulting figure: ```python fig = topic_model.visualize_barchart() fig.write_html(\"path/to/file.html\") ``` \"\"\" check_is_fitted ( self ) return plotting . visualize_barchart ( self , topics = topics , top_n_topics = top_n_topics , n_words = n_words , custom_labels = custom_labels , title = title , width = width , height = height ) def save ( self , path : str , save_embedding_model : bool = True ) -> None : \"\"\" Saves the model to the specified path When saving the model, make sure to also keep track of the versions of dependencies and Python used. Loading and saving the model should be done using the same dependencies and Python. Moreover, models saved in one version of BERTopic should not be loaded in other versions. Arguments: path: the location and name of the file you want to save save_embedding_model: Whether to save the embedding model in this class as you might have selected a local model or one that is downloaded automatically from the cloud. Examples: ```python topic_model.save(\"my_model\") ``` or if you do not want the embedding_model to be saved locally: ```python topic_model.save(\"my_model\", save_embedding_model=False) ``` \"\"\" with open ( path , 'wb' ) as file : # This prevents the vectorizer from being too large in size if `min_df` was # set to a value higher than 1 self . vectorizer_model . stop_words_ = None if not save_embedding_model : embedding_model = self . embedding_model self . embedding_model = None joblib . dump ( self , file ) self . embedding_model = embedding_model else : joblib . dump ( self , file ) @classmethod def load ( cls , path : str , embedding_model = None ): \"\"\" Loads the model from the specified path Arguments: path: the location and name of the BERTopic file you want to load embedding_model: If the embedding_model was not saved to save space or to load it in from the cloud, you can load it in by specifying it here. Examples: ```python BERTopic.load(\"my_model\") ``` or if you did not save the embedding model: ```python BERTopic.load(\"my_model\", embedding_model=\"all-MiniLM-L6-v2\") ``` \"\"\" with open ( path , 'rb' ) as file : if embedding_model : topic_model = joblib . load ( file ) topic_model . embedding_model = select_backend ( embedding_model ) else : topic_model = joblib . load ( file ) return topic_model def get_params ( self , deep : bool = False ) -> Mapping [ str , Any ]: \"\"\" Get parameters for this estimator. Adapted from: https://github.com/scikit-learn/scikit-learn/blob/b3ea3ed6a/sklearn/base.py#L178 Arguments: deep: bool, default=True If True, will return the parameters for this estimator and contained subobjects that are estimators. Returns: out: Parameter names mapped to their values. \"\"\" out = dict () for key in self . _get_param_names (): value = getattr ( self , key ) if deep and hasattr ( value , 'get_params' ): deep_items = value . get_params () . items () out . update (( key + '__' + k , val ) for k , val in deep_items ) out [ key ] = value return out def _extract_embeddings ( self , documents : Union [ List [ str ], str ], method : str = \"document\" , verbose : bool = None ) -> np . ndarray : \"\"\" Extract sentence/document embeddings through pre-trained embeddings For an overview of pre-trained models: https://www.sbert.net/docs/pretrained_models.html Arguments: documents: Dataframe with documents and their corresponding IDs method: Whether to extract document or word-embeddings, options are \"document\" and \"word\" verbose: Whether to show a progressbar demonstrating the time to extract embeddings Returns: embeddings: The extracted embeddings. \"\"\" if isinstance ( documents , str ): documents = [ documents ] if method == \"word\" : embeddings = self . embedding_model . embed_words ( documents , verbose ) elif method == \"document\" : embeddings = self . embedding_model . embed_documents ( documents , verbose ) else : raise ValueError ( \"Wrong method for extracting document/word embeddings. \" \"Either choose 'word' or 'document' as the method. \" ) return embeddings def _map_predictions ( self , predictions : List [ int ]) -> List [ int ]: \"\"\" Map predictions to the correct topics if topics were reduced \"\"\" mappings = self . topic_mapper_ . get_mappings ( original_topics = True ) mapped_predictions = [ mappings [ prediction ] if prediction in mappings else - 1 for prediction in predictions ] return mapped_predictions def _reduce_dimensionality ( self , embeddings : Union [ np . ndarray , csr_matrix ], y : Union [ List [ int ], np . ndarray ] = None , partial_fit : bool = False ) -> np . ndarray : \"\"\" Reduce dimensionality of embeddings using UMAP and train a UMAP model Arguments: embeddings: The extracted embeddings using the sentence transformer module. y: The target class for (semi)-supervised dimensionality reduction partial_fit: Whether to run `partial_fit` for online learning Returns: umap_embeddings: The reduced embeddings \"\"\" # Partial fit if partial_fit : if hasattr ( self . umap_model , \"partial_fit\" ): self . umap_model = self . umap_model . partial_fit ( embeddings ) elif self . topic_representations_ is None : self . umap_model . fit ( embeddings ) # Regular fit else : try : self . umap_model . fit ( embeddings , y = y ) except TypeError : logger . info ( \"The dimensionality reduction algorithm did not contain the `y` parameter and\" \" therefore the `y` parameter was not used\" ) self . umap_model . fit ( embeddings ) umap_embeddings = self . umap_model . transform ( embeddings ) logger . info ( \"Reduced dimensionality\" ) return np . nan_to_num ( umap_embeddings ) def _cluster_embeddings ( self , umap_embeddings : np . ndarray , documents : pd . DataFrame , partial_fit : bool = False , y : np . ndarray = None ) -> Tuple [ pd . DataFrame , np . ndarray ]: \"\"\" Cluster UMAP embeddings with HDBSCAN Arguments: umap_embeddings: The reduced sentence embeddings with UMAP documents: Dataframe with documents and their corresponding IDs partial_fit: Whether to run `partial_fit` for online learning Returns: documents: Updated dataframe with documents and their corresponding IDs and newly added Topics probabilities: The distribution of probabilities \"\"\" if partial_fit : self . hdbscan_model = self . hdbscan_model . partial_fit ( umap_embeddings ) labels = self . hdbscan_model . labels_ documents [ 'Topic' ] = labels self . topics_ = labels else : try : self . hdbscan_model . fit ( umap_embeddings , y = y ) except TypeError : self . hdbscan_model . fit ( umap_embeddings ) try : labels = self . hdbscan_model . labels_ except AttributeError : labels = y documents [ 'Topic' ] = labels self . _update_topic_size ( documents ) # Some algorithms have outlier labels (-1) that can be tricky to work # with if you are slicing data based on that labels. Therefore, we # track if there are outlier labels and act accordingly when slicing. self . _outliers = 1 if - 1 in set ( labels ) else 0 # Extract probabilities probabilities = None if hasattr ( self . hdbscan_model , \"probabilities_\" ): probabilities = self . hdbscan_model . probabilities_ if self . calculate_probabilities and is_supported_hdbscan ( self . hdbscan_model ): probabilities = hdbscan_delegator ( self . hdbscan_model , \"all_points_membership_vectors\" ) if not partial_fit : self . topic_mapper_ = TopicMapper ( self . topics_ ) logger . info ( \"Clustered reduced embeddings\" ) return documents , probabilities def _guided_topic_modeling ( self , embeddings : np . ndarray ) -> Tuple [ List [ int ], np . array ]: \"\"\" Apply Guided Topic Modeling We transform the seeded topics to embeddings using the same embedder as used for generating document embeddings. Then, we apply cosine similarity between the embeddings and set labels for documents that are more similar to one of the topics, then the average document. If a document is more similar to the average document than any of the topics, it gets the -1 label and is thereby not included in UMAP. Arguments: embeddings: The document embeddings Returns y: The labels for each seeded topic embeddings: Updated embeddings \"\"\" # Create embeddings from the seeded topics seed_topic_list = [ \" \" . join ( seed_topic ) for seed_topic in self . seed_topic_list ] seed_topic_embeddings = self . _extract_embeddings ( seed_topic_list , verbose = self . verbose ) seed_topic_embeddings = np . vstack ([ seed_topic_embeddings , embeddings . mean ( axis = 0 )]) # Label documents that are most similar to one of the seeded topics sim_matrix = cosine_similarity ( embeddings , seed_topic_embeddings ) y = [ np . argmax ( sim_matrix [ index ]) for index in range ( sim_matrix . shape [ 0 ])] y = [ val if val != len ( seed_topic_list ) else - 1 for val in y ] # Average the document embeddings related to the seeded topics with the # embedding of the seeded topic to force the documents in a cluster for seed_topic in range ( len ( seed_topic_list )): indices = [ index for index , topic in enumerate ( y ) if topic == seed_topic ] embeddings [ indices ] = np . average ([ embeddings [ indices ], seed_topic_embeddings [ seed_topic ]], weights = [ 3 , 1 ]) return y , embeddings def _extract_topics ( self , documents : pd . DataFrame ): \"\"\" Extract topics from the clusters using a class-based TF-IDF Arguments: documents: Dataframe with documents and their corresponding IDs Returns: c_tf_idf: The resulting matrix giving a value (importance score) for each word per topic \"\"\" documents_per_topic = documents . groupby ([ 'Topic' ], as_index = False ) . agg ({ 'Document' : ' ' . join }) self . c_tf_idf_ , words = self . _c_tf_idf ( documents_per_topic ) self . topic_representations_ = self . _extract_words_per_topic ( words , documents ) self . _create_topic_vectors () self . topic_labels_ = { key : f \" { key } _\" + \"_\" . join ([ word [ 0 ] for word in values [: 4 ]]) for key , values in self . topic_representations_ . items ()} def _save_representative_docs ( self , documents : pd . DataFrame ): \"\"\" Save the 3 most representative docs per topic Arguments: documents: Dataframe with documents and their corresponding IDs Updates: self.representative_docs_: Populate each topic with 3 representative docs \"\"\" repr_docs , _ , _ = self . _extract_representative_docs ( self . c_tf_idf_ , documents , self . topic_representations_ , nr_samples = 500 , nr_repr_docs = 3 ) self . representative_docs_ = repr_docs def _extract_representative_docs ( self , c_tf_idf : csr_matrix , documents : pd . DataFrame , topics : Mapping [ str , List [ Tuple [ str , float ]]], nr_samples : int = 500 , nr_repr_docs : int = 5 , ) -> Union [ List [ str ], List [ List [ int ]]]: \"\"\" Approximate most representative documents per topic by sampling a subset of the documents in each topic and calculating which are most represenative to their topic based on the cosine similarity between c-TF-IDF representations. Arguments: c_tf_idf: The topic c-TF-IDF representation documents: All input documents topics: The candidate topics as calculated with c-TF-IDF nr_samples: The number of candidate documents to extract per topic nr_repr_docs: The number of representative documents to extract per topic Returns: repr_docs_mappings: A dictionary from topic to representative documents representative_docs: A flat list of representative documents repr_doc_indices: The indices of representative documents that belong to each topic \"\"\" # Sample documents per topic documents_per_topic = ( documents . groupby ( 'Topic' ) . sample ( n = nr_samples , replace = True , random_state = 42 ) . drop_duplicates () ) # Find and extract documents that are most similar to the topic repr_docs = [] repr_docs_indices = [] repr_docs_mappings = {} labels = sorted ( list ( topics . keys ())) for index , topic in enumerate ( labels ): # Calculate similarity selected_docs = documents_per_topic . loc [ documents_per_topic . Topic == topic , \"Document\" ] . values bow = self . vectorizer_model . transform ( selected_docs ) ctfidf = self . ctfidf_model . transform ( bow ) sim_matrix = cosine_similarity ( ctfidf , c_tf_idf [ index ]) # Extract top n most representative documents nr_docs = nr_repr_docs if len ( selected_docs ) > nr_repr_docs else len ( selected_docs ) indices = np . argpartition ( sim_matrix . reshape ( 1 , - 1 )[ 0 ], - nr_docs )[ - nr_docs :] repr_docs . extend ([ selected_docs [ index ] for index in indices ]) repr_docs_indices . append ([ repr_docs_indices [ - 1 ][ - 1 ] + i + 1 if index != 0 else i for i in range ( nr_docs )]) repr_docs_mappings = { topic : repr_docs [ i [ 0 ]: i [ - 1 ] + 1 ] for topic , i in zip ( topics . keys (), repr_docs_indices )} return repr_docs_mappings , repr_docs , repr_docs_indices def _create_topic_vectors ( self ): \"\"\" Creates embeddings per topics based on their topic representation We start by creating embeddings out of the topic representation. This results in a number of embeddings per topic. Then, we take the weighted average of embeddings in a topic by their c-TF-IDF score. This will put more emphasis to words that represent a topic best. Only allow topic vectors to be created if there are no custom embeddings and therefore a sentence-transformer model to be used or there are custom embeddings but it is allowed to use a different multi-lingual sentence-transformer model \"\"\" if self . embedding_model is not None and type ( self . embedding_model ) is not BaseEmbedder : topic_list = list ( self . topic_representations_ . keys ()) topic_list . sort () # Only extract top n words n = len ( self . topic_representations_ [ topic_list [ 0 ]]) if self . top_n_words < n : n = self . top_n_words # Extract embeddings for all words in all topics topic_words = [ self . get_topic ( topic ) for topic in topic_list ] topic_words = [ word [ 0 ] for topic in topic_words for word in topic ] embeddings = self . _extract_embeddings ( topic_words , method = \"word\" , verbose = False ) # Take the weighted average of word embeddings in a topic based on their c-TF-IDF value # The embeddings var is a single numpy matrix and therefore slicing is necessary to # access the words per topic topic_embeddings = [] for i , topic in enumerate ( topic_list ): word_importance = [ val [ 1 ] for val in self . get_topic ( topic )] if sum ( word_importance ) == 0 : word_importance = [ 1 for _ in range ( len ( self . get_topic ( topic )))] topic_embedding = np . average ( embeddings [ i * n : n + ( i * n )], weights = word_importance , axis = 0 ) topic_embeddings . append ( topic_embedding ) self . topic_embeddings_ = topic_embeddings def _c_tf_idf ( self , documents_per_topic : pd . DataFrame , fit : bool = True , partial_fit : bool = False ) -> Tuple [ csr_matrix , List [ str ]]: \"\"\" Calculate a class-based TF-IDF where m is the number of total documents. Arguments: documents_per_topic: The joined documents per topic such that each topic has a single string made out of multiple documents m: The total number of documents (unjoined) fit: Whether to fit a new vectorizer or use the fitted self.vectorizer_model partial_fit: Whether to run `partial_fit` for online learning Returns: tf_idf: The resulting matrix giving a value (importance score) for each word per topic words: The names of the words to which values were given \"\"\" documents = self . _preprocess_text ( documents_per_topic . Document . values ) if partial_fit : X = self . vectorizer_model . partial_fit ( documents ) . update_bow ( documents ) elif fit : self . vectorizer_model . fit ( documents ) X = self . vectorizer_model . transform ( documents ) else : X = self . vectorizer_model . transform ( documents ) # Scikit-Learn Deprecation: get_feature_names is deprecated in 1.0 # and will be removed in 1.2. Please use get_feature_names_out instead. if version . parse ( sklearn_version ) >= version . parse ( \"1.0.0\" ): words = self . vectorizer_model . get_feature_names_out () else : words = self . vectorizer_model . get_feature_names () if self . seed_topic_list : seed_topic_list = [ seed for seeds in self . seed_topic_list for seed in seeds ] multiplier = np . array ([ 1.2 if word in seed_topic_list else 1 for word in words ]) else : multiplier = None if fit : self . ctfidf_model = self . ctfidf_model . fit ( X , multiplier = multiplier ) c_tf_idf = self . ctfidf_model . transform ( X ) return c_tf_idf , words def _update_topic_size ( self , documents : pd . DataFrame ): \"\"\" Calculate the topic sizes Arguments: documents: Updated dataframe with documents and their corresponding IDs and newly added Topics \"\"\" sizes = documents . groupby ([ 'Topic' ]) . count () . sort_values ( \"Document\" , ascending = False ) . reset_index () self . topic_sizes_ = dict ( zip ( sizes . Topic , sizes . Document )) self . topics_ = documents . Topic . astype ( int ) . tolist () def _extract_words_per_topic ( self , words : List [ str ], documents : pd . DataFrame , c_tf_idf : csr_matrix = None ) -> Mapping [ str , List [ Tuple [ str , float ]]]: \"\"\" Based on tf_idf scores per topic, extract the top n words per topic If the top words per topic need to be extracted, then only the `words` parameter needs to be passed. If the top words per topic in a specific timestamp, then it is important to pass the timestamp-based c-TF-IDF matrix and its corresponding labels. Arguments: words: List of all words (sorted according to tf_idf matrix position) documents: DataFrame with documents and their topic IDs c_tf_idf: A c-TF-IDF matrix from which to calculate the top words Returns: topics: The top words per topic \"\"\" if c_tf_idf is None : c_tf_idf = self . c_tf_idf_ labels = sorted ( list ( documents . Topic . unique ())) labels = [ int ( label ) for label in labels ] # Get at least the top 30 indices and values per row in a sparse c-TF-IDF matrix top_n_words = max ( self . top_n_words , 30 ) indices = self . _top_n_idx_sparse ( c_tf_idf , top_n_words ) scores = self . _top_n_values_sparse ( c_tf_idf , indices ) sorted_indices = np . argsort ( scores , 1 ) indices = np . take_along_axis ( indices , sorted_indices , axis = 1 ) scores = np . take_along_axis ( scores , sorted_indices , axis = 1 ) # Get top 30 words per topic based on c-TF-IDF score topics = { label : [( words [ word_index ], score ) if word_index is not None and score > 0 else ( \"\" , 0.00001 ) for word_index , score in zip ( indices [ index ][:: - 1 ], scores [ index ][:: - 1 ]) ] for index , label in enumerate ( labels )} # Fine-tune the topic representations if isinstance ( self . representation_model , list ): for tuner in self . representation_model : topics = tuner . extract_topics ( self , documents , c_tf_idf , topics ) elif isinstance ( self . representation_model , BaseRepresentation ): topics = self . representation_model . extract_topics ( self , documents , c_tf_idf , topics ) topics = { label : values [: self . top_n_words ] for label , values in topics . items ()} return topics def _reduce_topics ( self , documents : pd . DataFrame ) -> pd . DataFrame : \"\"\" Reduce topics to self.nr_topics Arguments: documents: Dataframe with documents and their corresponding IDs and Topics Returns: documents: Updated dataframe with documents and the reduced number of Topics \"\"\" initial_nr_topics = len ( self . get_topics ()) if isinstance ( self . nr_topics , int ): if self . nr_topics < initial_nr_topics : documents = self . _reduce_to_n_topics ( documents ) elif isinstance ( self . nr_topics , str ): documents = self . _auto_reduce_topics ( documents ) else : raise ValueError ( \"nr_topics needs to be an int or 'auto'! \" ) logger . info ( f \"Reduced number of topics from { initial_nr_topics } to { len ( self . get_topic_freq ()) } \" ) return documents def _reduce_to_n_topics ( self , documents : pd . DataFrame ) -> pd . DataFrame : \"\"\" Reduce topics to self.nr_topics Arguments: documents: Dataframe with documents and their corresponding IDs and Topics Returns: documents: Updated dataframe with documents and the reduced number of Topics \"\"\" topics = documents . Topic . tolist () . copy () # Create topic distance matrix if self . topic_embeddings_ is not None : topic_embeddings = np . array ( self . topic_embeddings_ )[ self . _outliers :, ] else : topic_embeddings = self . c_tf_idf_ [ self . _outliers :, ] . toarray () distance_matrix = 1 - cosine_similarity ( topic_embeddings ) np . fill_diagonal ( distance_matrix , 0 ) # Cluster the topic embeddings using AgglomerativeClustering if version . parse ( sklearn_version ) >= version . parse ( \"1.4.0\" ): cluster = AgglomerativeClustering ( self . nr_topics - self . _outliers , metric = \"precomputed\" , linkage = \"average\" ) else : cluster = AgglomerativeClustering ( self . nr_topics - self . _outliers , affinity = \"precomputed\" , linkage = \"average\" ) cluster . fit ( distance_matrix ) new_topics = [ cluster . labels_ [ topic ] if topic != - 1 else - 1 for topic in topics ] # Map topics documents . Topic = new_topics self . _update_topic_size ( documents ) mapped_topics = { from_topic : to_topic for from_topic , to_topic in zip ( topics , new_topics )} self . topic_mapper_ . add_mappings ( mapped_topics ) # Update representations documents = self . _sort_mappings_by_frequency ( documents ) self . _extract_topics ( documents ) self . _update_topic_size ( documents ) return documents def _auto_reduce_topics ( self , documents : pd . DataFrame ) -> pd . DataFrame : \"\"\" Reduce the number of topics automatically using HDBSCAN Arguments: documents: Dataframe with documents and their corresponding IDs and Topics Returns: documents: Updated dataframe with documents and the reduced number of Topics \"\"\" topics = documents . Topic . tolist () . copy () unique_topics = sorted ( list ( documents . Topic . unique ()))[ self . _outliers :] max_topic = unique_topics [ - 1 ] # Find similar topics if self . topic_embeddings_ is not None : embeddings = np . array ( self . topic_embeddings_ ) else : embeddings = self . c_tf_idf_ . toarray () norm_data = normalize ( embeddings , norm = 'l2' ) predictions = hdbscan . HDBSCAN ( min_cluster_size = 2 , metric = 'euclidean' , cluster_selection_method = 'eom' , prediction_data = True ) . fit_predict ( norm_data [ self . _outliers :]) # Map similar topics mapped_topics = { unique_topics [ index ]: prediction + max_topic for index , prediction in enumerate ( predictions ) if prediction != - 1 } documents . Topic = documents . Topic . map ( mapped_topics ) . fillna ( documents . Topic ) . astype ( int ) mapped_topics = { from_topic : to_topic for from_topic , to_topic in zip ( topics , documents . Topic . tolist ())} # Update documents and topics self . topic_mapper_ . add_mappings ( mapped_topics ) documents = self . _sort_mappings_by_frequency ( documents ) self . _extract_topics ( documents ) self . _update_topic_size ( documents ) return documents def _sort_mappings_by_frequency ( self , documents : pd . DataFrame ) -> pd . DataFrame : \"\"\" Reorder mappings by their frequency. For example, if topic 88 was mapped to topic 5 and topic 5 turns out to be the largest topic, then topic 5 will be topic 0. The second largest, will be topic 1, etc. If there are no mappings since no reduction of topics took place, then the topics will simply be ordered by their frequency and will get the topic ids based on that order. This means that -1 will remain the outlier class, and that the rest of the topics will be in descending order of ids and frequency. Arguments: documents: Dataframe with documents and their corresponding IDs and Topics Returns: documents: Updated dataframe with documents and the mapped and re-ordered topic ids \"\"\" self . _update_topic_size ( documents ) # Map topics based on frequency df = pd . DataFrame ( self . topic_sizes_ . items (), columns = [ \"Old_Topic\" , \"Size\" ]) . sort_values ( \"Size\" , ascending = False ) df = df [ df . Old_Topic != - 1 ] sorted_topics = { ** { - 1 : - 1 }, ** dict ( zip ( df . Old_Topic , range ( len ( df ))))} self . topic_mapper_ . add_mappings ( sorted_topics ) # Map documents documents . Topic = documents . Topic . map ( sorted_topics ) . fillna ( documents . Topic ) . astype ( int ) self . _update_topic_size ( documents ) return documents def _map_probabilities ( self , probabilities : Union [ np . ndarray , None ], original_topics : bool = False ) -> Union [ np . ndarray , None ]: \"\"\" Map the probabilities to the reduced topics. This is achieved by adding the probabilities together of all topics that were mapped to the same topic. Then, the topics that were mapped from were set to 0 as they were reduced. Arguments: probabilities: An array containing probabilities original_topics: Whether we want to map from the original topics to the most recent topics or from the second-most recent topics. Returns: mapped_probabilities: Updated probabilities \"\"\" mappings = self . topic_mapper_ . get_mappings ( original_topics ) # Map array of probabilities (probability for assigned topic per document) if probabilities is not None : if len ( probabilities . shape ) == 2 : mapped_probabilities = np . zeros (( probabilities . shape [ 0 ], len ( set ( mappings . values ())) - self . _outliers )) for from_topic , to_topic in mappings . items (): if to_topic != - 1 and from_topic != - 1 : mapped_probabilities [:, to_topic ] += probabilities [:, from_topic ] return mapped_probabilities return probabilities def _preprocess_text ( self , documents : np . ndarray ) -> List [ str ]: \"\"\" Basic preprocessing of text Steps: * Replace \\n and \\t with whitespace * Only keep alpha-numerical characters \"\"\" cleaned_documents = [ doc . replace ( \" \\n \" , \" \" ) for doc in documents ] cleaned_documents = [ doc . replace ( \" \\t \" , \" \" ) for doc in cleaned_documents ] if self . language == \"english\" : cleaned_documents = [ re . sub ( r '[^A-Za-z0-9 ]+' , '' , doc ) for doc in cleaned_documents ] cleaned_documents = [ doc if doc != \"\" else \"emptydoc\" for doc in cleaned_documents ] return cleaned_documents @staticmethod def _top_n_idx_sparse ( matrix : csr_matrix , n : int ) -> np . ndarray : \"\"\" Return indices of top n values in each row of a sparse matrix Retrieved from: https://stackoverflow.com/questions/49207275/finding-the-top-n-values-in-a-row-of-a-scipy-sparse-matrix Arguments: matrix: The sparse matrix from which to get the top n indices per row n: The number of highest values to extract from each row Returns: indices: The top n indices per row \"\"\" indices = [] for le , ri in zip ( matrix . indptr [: - 1 ], matrix . indptr [ 1 :]): n_row_pick = min ( n , ri - le ) values = matrix . indices [ le + np . argpartition ( matrix . data [ le : ri ], - n_row_pick )[ - n_row_pick :]] values = [ values [ index ] if len ( values ) >= index + 1 else None for index in range ( n )] indices . append ( values ) return np . array ( indices ) @staticmethod def _top_n_values_sparse ( matrix : csr_matrix , indices : np . ndarray ) -> np . ndarray : \"\"\" Return the top n values for each row in a sparse matrix Arguments: matrix: The sparse matrix from which to get the top n indices per row indices: The top n indices per row Returns: top_values: The top n scores per row \"\"\" top_values = [] for row , values in enumerate ( indices ): scores = np . array ([ matrix [ row , value ] if value is not None else 0 for value in values ]) top_values . append ( scores ) return np . array ( top_values ) @classmethod def _get_param_names ( cls ): \"\"\"Get parameter names for the estimator Adapted from: https://github.com/scikit-learn/scikit-learn/blob/b3ea3ed6a/sklearn/base.py#L178 \"\"\" init_signature = inspect . signature ( cls . __init__ ) parameters = sorted ([ p . name for p in init_signature . parameters . values () if p . name != 'self' and p . kind != p . VAR_KEYWORD ]) return parameters def __str__ ( self ): \"\"\"Get a string representation of the current object. Returns: str: Human readable representation of the most important model parameters. The parameters that represent models are ignored due to their length. \"\"\" parameters = \"\" for parameter , value in self . get_params () . items (): value = str ( value ) if \"(\" in value and value [ 0 ] != \"(\" : value = value . split ( \"(\" )[ 0 ] + \"(...)\" parameters += f \" { parameter } = { value } , \" return f \"BERTopic( { parameters [: - 2 ] } )\" __init__ ( self , language = 'english' , top_n_words = 10 , n_gram_range = ( 1 , 1 ), min_topic_size = 10 , nr_topics = None , low_memory = False , calculate_probabilities = False , seed_topic_list = None , embedding_model = None , umap_model = None , hdbscan_model = None , vectorizer_model = None , ctfidf_model = None , representation_model = None , verbose = False ) special \u00b6 BERTopic initialization Parameters: Name Type Description Default language str The main language used in your documents. The default sentence-transformers model for \"english\" is all-MiniLM-L6-v2 . For a full overview of supported languages see bertopic.backend.languages. Select \"multilingual\" to load in the paraphrase-multilingual-MiniLM-L12-v2 sentence-tranformers model that supports 50+ languages. NOTE: This is not used if embedding_model is used. 'english' top_n_words int The number of words per topic to extract. Setting this too high can negatively impact topic embeddings as topics are typically best represented by at most 10 words. 10 n_gram_range Tuple[int, int] The n-gram range for the CountVectorizer. Advised to keep high values between 1 and 3. More would likely lead to memory issues. NOTE: This param will not be used if you pass in your own CountVectorizer. (1, 1) min_topic_size int The minimum size of the topic. Increasing this value will lead to a lower number of clusters/topics. NOTE: This param will not be used if you are not using HDBSCAN. 10 nr_topics Union[int, str] Specifying the number of topics will reduce the initial number of topics to the value specified. This reduction can take a while as each reduction in topics (-1) activates a c-TF-IDF calculation. If this is set to None, no reduction is applied. Use \"auto\" to automatically reduce topics using HDBSCAN. None low_memory bool Sets UMAP low memory to True to make sure less memory is used. NOTE: This is only used in UMAP. For example, if you use PCA instead of UMAP this parameter will not be used. False calculate_probabilities bool Calculate the probabilities of all topics per document instead of the probability of the assigned topic per document. This could slow down the extraction of topics if you have many documents (> 100_000). NOTE: If false you cannot use the corresponding visualization method visualize_probabilities . NOTE: This is an approximation of topic probabilities as used in HDBSCAN and not an exact representation. False seed_topic_list List[List[str]] A list of seed words per topic to converge around None verbose bool Changes the verbosity of the model, Set to True if you want to track the stages of the model. False embedding_model Use a custom embedding model. The following backends are currently supported * SentenceTransformers * Flair * Spacy * Gensim * USE (TF-Hub) You can also pass in a string that points to one of the following sentence-transformers models: * https://www.sbert.net/docs/pretrained_models.html None umap_model UMAP Pass in a UMAP model to be used instead of the default. NOTE: You can also pass in any dimensionality reduction algorithm as long as it has .fit and .transform functions. None hdbscan_model HDBSCAN Pass in a hdbscan.HDBSCAN model to be used instead of the default NOTE: You can also pass in any clustering algorithm as long as it has .fit and .predict functions along with the .labels_ variable. None vectorizer_model CountVectorizer Pass in a custom CountVectorizer instead of the default model. None ctfidf_model TfidfTransformer Pass in a custom ClassTfidfTransformer instead of the default model. None representation_model BaseRepresentation Pass in a model that fine-tunes the topic representations calculated through c-TF-IDF. Models from bertopic.representation are supported. None Source code in bertopic\\_bertopic.py def __init__ ( self , language : str = \"english\" , top_n_words : int = 10 , n_gram_range : Tuple [ int , int ] = ( 1 , 1 ), min_topic_size : int = 10 , nr_topics : Union [ int , str ] = None , low_memory : bool = False , calculate_probabilities : bool = False , seed_topic_list : List [ List [ str ]] = None , embedding_model = None , umap_model : UMAP = None , hdbscan_model : hdbscan . HDBSCAN = None , vectorizer_model : CountVectorizer = None , ctfidf_model : TfidfTransformer = None , representation_model : BaseRepresentation = None , verbose : bool = False , ): \"\"\"BERTopic initialization Arguments: language: The main language used in your documents. The default sentence-transformers model for \"english\" is `all-MiniLM-L6-v2`. For a full overview of supported languages see bertopic.backend.languages. Select \"multilingual\" to load in the `paraphrase-multilingual-MiniLM-L12-v2` sentence-tranformers model that supports 50+ languages. NOTE: This is not used if `embedding_model` is used. top_n_words: The number of words per topic to extract. Setting this too high can negatively impact topic embeddings as topics are typically best represented by at most 10 words. n_gram_range: The n-gram range for the CountVectorizer. Advised to keep high values between 1 and 3. More would likely lead to memory issues. NOTE: This param will not be used if you pass in your own CountVectorizer. min_topic_size: The minimum size of the topic. Increasing this value will lead to a lower number of clusters/topics. NOTE: This param will not be used if you are not using HDBSCAN. nr_topics: Specifying the number of topics will reduce the initial number of topics to the value specified. This reduction can take a while as each reduction in topics (-1) activates a c-TF-IDF calculation. If this is set to None, no reduction is applied. Use \"auto\" to automatically reduce topics using HDBSCAN. low_memory: Sets UMAP low memory to True to make sure less memory is used. NOTE: This is only used in UMAP. For example, if you use PCA instead of UMAP this parameter will not be used. calculate_probabilities: Calculate the probabilities of all topics per document instead of the probability of the assigned topic per document. This could slow down the extraction of topics if you have many documents (> 100_000). NOTE: If false you cannot use the corresponding visualization method `visualize_probabilities`. NOTE: This is an approximation of topic probabilities as used in HDBSCAN and not an exact representation. seed_topic_list: A list of seed words per topic to converge around verbose: Changes the verbosity of the model, Set to True if you want to track the stages of the model. embedding_model: Use a custom embedding model. The following backends are currently supported * SentenceTransformers * Flair * Spacy * Gensim * USE (TF-Hub) You can also pass in a string that points to one of the following sentence-transformers models: * https://www.sbert.net/docs/pretrained_models.html umap_model: Pass in a UMAP model to be used instead of the default. NOTE: You can also pass in any dimensionality reduction algorithm as long as it has `.fit` and `.transform` functions. hdbscan_model: Pass in a hdbscan.HDBSCAN model to be used instead of the default NOTE: You can also pass in any clustering algorithm as long as it has `.fit` and `.predict` functions along with the `.labels_` variable. vectorizer_model: Pass in a custom `CountVectorizer` instead of the default model. ctfidf_model: Pass in a custom ClassTfidfTransformer instead of the default model. representation_model: Pass in a model that fine-tunes the topic representations calculated through c-TF-IDF. Models from `bertopic.representation` are supported. \"\"\" # Topic-based parameters if top_n_words > 100 : warnings . warn ( \"Note that extracting more than 100 words from a sparse \" \"can slow down computation quite a bit.\" ) self . top_n_words = top_n_words self . min_topic_size = min_topic_size self . nr_topics = nr_topics self . low_memory = low_memory self . calculate_probabilities = calculate_probabilities self . verbose = verbose self . seed_topic_list = seed_topic_list # Embedding model self . language = language if not embedding_model else None self . embedding_model = embedding_model # Vectorizer self . n_gram_range = n_gram_range self . vectorizer_model = vectorizer_model or CountVectorizer ( ngram_range = self . n_gram_range ) self . ctfidf_model = ctfidf_model or ClassTfidfTransformer () # Representation model self . representation_model = representation_model # UMAP or another algorithm that has .fit and .transform functions self . umap_model = umap_model or UMAP ( n_neighbors = 15 , n_components = 5 , min_dist = 0.0 , metric = 'cosine' , low_memory = self . low_memory ) # HDBSCAN or another clustering algorithm that has .fit and .predict functions and # the .labels_ variable to extract the labels self . hdbscan_model = hdbscan_model or hdbscan . HDBSCAN ( min_cluster_size = self . min_topic_size , metric = 'euclidean' , cluster_selection_method = 'eom' , prediction_data = True ) # Public attributes self . topics_ = None self . probabilities_ = None self . topic_sizes_ = None self . topic_mapper_ = None self . topic_representations_ = None self . topic_embeddings_ = None self . topic_labels_ = None self . custom_labels_ = None self . representative_docs_ = {} self . c_tf_idf_ = None # Private attributes for internal tracking purposes self . _outliers = 1 self . _merged_topics = None if verbose : logger . set_level ( \"DEBUG\" ) __str__ ( self ) special \u00b6 Get a string representation of the current object. Returns: Type Description str Human readable representation of the most important model parameters. The parameters that represent models are ignored due to their length. Source code in bertopic\\_bertopic.py def __str__ ( self ): \"\"\"Get a string representation of the current object. Returns: str: Human readable representation of the most important model parameters. The parameters that represent models are ignored due to their length. \"\"\" parameters = \"\" for parameter , value in self . get_params () . items (): value = str ( value ) if \"(\" in value and value [ 0 ] != \"(\" : value = value . split ( \"(\" )[ 0 ] + \"(...)\" parameters += f \" { parameter } = { value } , \" return f \"BERTopic( { parameters [: - 2 ] } )\" approximate_distribution ( self , documents , window = 4 , stride = 1 , min_similarity = 0.1 , batch_size = 1000 , padding = False , use_embedding_model = False , calculate_tokens = False , separator = ' ' ) \u00b6 A post-hoc approximation of topic distributions across documents. In order to perform this approximation, each document is split into tokens according to the provided tokenizer in the CountVectorizer . Then, a sliding window is applied on each document creating subsets of the document. For example, with a window size of 3 and stride of 1, the sentence: Solving the right problem is difficult. can be split up into solving the right , the right problem , right problem is , and problem is difficult . These are called tokensets. For each of these tokensets, we calculate their c-TF-IDF representation and find out how similar they are to the previously generated topics. Then, the similarities to the topics for each tokenset are summed in order to create a topic distribution for the entire document. We can also dive into this a bit deeper by then splitting these tokensets up into individual tokens and calculate how much a word, in a specific sentence, contributes to the topics found in that document. This can be enabled by setting calculate_tokens=True which can be used for visualization purposes in topic_model.visualize_approximate_distribution . The main output, topic_distributions , can also be used directly in .visualize_distribution(topic_distributions[index]) by simply selecting a single distribution. Parameters: Name Type Description Default documents Union[str, List[str]] A single document or a list of documents for which we approximate their topic distributions required window int Size of the moving window which indicates the number of tokens being considered. 4 stride int How far the window should move at each step. 1 min_similarity float The minimum similarity of a document's tokenset with respect to the topics. 0.1 batch_size int The number of documents to process at a time. If None, then all documents are processed at once. NOTE: With a large number of documents, it is not advised to process all documents at once. 1000 padding bool Whether to pad the beginning and ending of a document with empty tokens. False use_embedding_model bool Whether to use the topic model's embedding model to calculate the similarity between tokensets and topics instead of using c-TF-IDF. False calculate_tokens bool Calculate the similarity of tokens with all topics. NOTE: This is computation-wise more expensive and can require more memory. Using this over batches of documents might be preferred. False separator str The separator used to merge tokens into tokensets. ' ' Returns: Type Description topic_distributions A n x m matrix containing the topic distributions for all input documents with n being the documents and m the topics. topic_token_distributions: A list of t x m arrays with t being the number of tokens for the respective document and m the topics. Examples: After fitting the model, the topic distributions can be calculated regardless of the clustering model and regardless of whether the documents were previously seen or not: topic_distr , _ = topic_model . approximate_distribution ( docs ) As a result, the topic distributions are calculated in topic_distr for the entire document based on token set with a specific window size and stride. If you want to calculate the topic distributions on a token-level: topic_distr , topic_token_distr = topic_model . approximate_distribution ( docs , calculate_tokens = True ) The topic_token_distr then contains, for each token, the best fitting topics. As with topic_distr , it can contain multiple topics for a single token. Source code in bertopic\\_bertopic.py def approximate_distribution ( self , documents : Union [ str , List [ str ]], window : int = 4 , stride : int = 1 , min_similarity : float = 0.1 , batch_size : int = 1000 , padding : bool = False , use_embedding_model : bool = False , calculate_tokens : bool = False , separator : str = \" \" ) -> Tuple [ np . ndarray , Union [ List [ np . ndarray ], None ]]: \"\"\" A post-hoc approximation of topic distributions across documents. In order to perform this approximation, each document is split into tokens according to the provided tokenizer in the `CountVectorizer`. Then, a sliding window is applied on each document creating subsets of the document. For example, with a window size of 3 and stride of 1, the sentence: `Solving the right problem is difficult.` can be split up into `solving the right`, `the right problem`, `right problem is`, and `problem is difficult`. These are called tokensets. For each of these tokensets, we calculate their c-TF-IDF representation and find out how similar they are to the previously generated topics. Then, the similarities to the topics for each tokenset are summed in order to create a topic distribution for the entire document. We can also dive into this a bit deeper by then splitting these tokensets up into individual tokens and calculate how much a word, in a specific sentence, contributes to the topics found in that document. This can be enabled by setting `calculate_tokens=True` which can be used for visualization purposes in `topic_model.visualize_approximate_distribution`. The main output, `topic_distributions`, can also be used directly in `.visualize_distribution(topic_distributions[index])` by simply selecting a single distribution. Arguments: documents: A single document or a list of documents for which we approximate their topic distributions window: Size of the moving window which indicates the number of tokens being considered. stride: How far the window should move at each step. min_similarity: The minimum similarity of a document's tokenset with respect to the topics. batch_size: The number of documents to process at a time. If None, then all documents are processed at once. NOTE: With a large number of documents, it is not advised to process all documents at once. padding: Whether to pad the beginning and ending of a document with empty tokens. use_embedding_model: Whether to use the topic model's embedding model to calculate the similarity between tokensets and topics instead of using c-TF-IDF. calculate_tokens: Calculate the similarity of tokens with all topics. NOTE: This is computation-wise more expensive and can require more memory. Using this over batches of documents might be preferred. separator: The separator used to merge tokens into tokensets. Returns: topic_distributions: A `n` x `m` matrix containing the topic distributions for all input documents with `n` being the documents and `m` the topics. topic_token_distributions: A list of `t` x `m` arrays with `t` being the number of tokens for the respective document and `m` the topics. Examples: After fitting the model, the topic distributions can be calculated regardless of the clustering model and regardless of whether the documents were previously seen or not: ```python topic_distr, _ = topic_model.approximate_distribution(docs) ``` As a result, the topic distributions are calculated in `topic_distr` for the entire document based on token set with a specific window size and stride. If you want to calculate the topic distributions on a token-level: ```python topic_distr, topic_token_distr = topic_model.approximate_distribution(docs, calculate_tokens=True) ``` The `topic_token_distr` then contains, for each token, the best fitting topics. As with `topic_distr`, it can contain multiple topics for a single token. \"\"\" if isinstance ( documents , str ): documents = [ documents ] if batch_size is None : batch_size = len ( documents ) batches = 1 else : batches = math . ceil ( len ( documents ) / batch_size ) topic_distributions = [] topic_token_distributions = [] for i in tqdm ( range ( batches ), disable = not self . verbose ): doc_set = documents [ i * batch_size : ( i + 1 ) * batch_size ] # Extract tokens analyzer = self . vectorizer_model . build_tokenizer () tokens = [ analyzer ( document ) for document in doc_set ] # Extract token sets all_sentences = [] all_indices = [ 0 ] all_token_sets_ids = [] for tokenset in tokens : if len ( tokenset ) < window : token_sets = [ tokenset ] token_sets_ids = [ list ( range ( len ( tokenset )))] else : # Extract tokensets using window and stride parameters stride_indices = list ( range ( len ( tokenset )))[:: stride ] token_sets = [] token_sets_ids = [] for stride_index in stride_indices : selected_tokens = tokenset [ stride_index : stride_index + window ] if padding or len ( selected_tokens ) == window : token_sets . append ( selected_tokens ) token_sets_ids . append ( list ( range ( stride_index , stride_index + len ( selected_tokens )))) # Add empty tokens at the beginning and end of a document if padding : padded = [] padded_ids = [] t = math . ceil ( window / stride ) - 1 for i in range ( math . ceil ( window / stride ) - 1 ): padded . append ( tokenset [: window - (( t - i ) * stride )]) padded_ids . append ( list ( range ( 0 , window - (( t - i ) * stride )))) token_sets = padded + token_sets token_sets_ids = padded_ids + token_sets_ids # Join the tokens sentences = [ separator . join ( token ) for token in token_sets ] all_sentences . extend ( sentences ) all_token_sets_ids . extend ( token_sets_ids ) all_indices . append ( all_indices [ - 1 ] + len ( sentences )) # Calculate similarity between embeddings of token sets and the topics if use_embedding_model : embeddings = self . _extract_embeddings ( all_sentences , method = \"document\" , verbose = True ) similarity = cosine_similarity ( embeddings , self . topic_embeddings_ [ self . _outliers :]) # Calculate similarity between c-TF-IDF of token sets and the topics else : bow_doc = self . vectorizer_model . transform ( all_sentences ) c_tf_idf_doc = self . ctfidf_model . transform ( bow_doc ) similarity = cosine_similarity ( c_tf_idf_doc , self . c_tf_idf_ [ self . _outliers :]) # Only keep similarities that exceed the minimum similarity [ similarity < min_similarity ] = 0 # Aggregate results on an individual token level if calculate_tokens : topic_distribution = [] topic_token_distribution = [] for index , token in enumerate ( tokens ): start = all_indices [ index ] end = all_indices [ index + 1 ] if start == end : end = end + 1 # Assign topics to individual tokens token_id = [ i for i in range ( len ( token ))] token_val = { index : [] for index in token_id } for sim , token_set in zip ( similarity [ start : end ], all_token_sets_ids [ start : end ]): for token in token_set : if token in token_val : token_val [ token ] . append ( sim ) matrix = [] for _ , value in token_val . items (): matrix . append ( np . add . reduce ( value )) # Take empty documents into account matrix = np . array ( matrix ) if len ( matrix . shape ) == 1 : matrix = np . zeros (( 1 , len ( self . topic_labels_ ) - self . _outliers )) topic_token_distribution . append ( np . array ( matrix )) topic_distribution . append ( np . add . reduce ( matrix )) topic_distribution = normalize ( topic_distribution , norm = 'l1' , axis = 1 ) # Aggregate on a tokenset level indicated by the window and stride else : topic_distribution = [] for index in range ( len ( all_indices ) - 1 ): start = all_indices [ index ] end = all_indices [ index + 1 ] if start == end : end = end + 1 group = similarity [ start : end ] . sum ( axis = 0 ) topic_distribution . append ( group ) topic_distribution = normalize ( np . array ( topic_distribution ), norm = 'l1' , axis = 1 ) topic_token_distribution = None # Combine results topic_distributions . append ( topic_distribution ) if topic_token_distribution is None : topic_token_distributions = None else : topic_token_distributions . extend ( topic_token_distribution ) topic_distributions = np . vstack ( topic_distributions ) return topic_distributions , topic_token_distributions find_topics ( self , search_term , top_n = 5 ) \u00b6 Find topics most similar to a search_term Creates an embedding for search_term and compares that with the topic embeddings. The most similar topics are returned along with their similarity values. The search_term can be of any size but since it compares with the topic representation it is advised to keep it below 5 words. Parameters: Name Type Description Default search_term str the term you want to use to search for topics required top_n int the number of topics to return 5 Returns: Type Description similar_topics the most similar topics from high to low similarity: the similarity scores from high to low Examples: You can use the underlying embedding model to find topics that best represent the search term: topics , similarity = topic_model . find_topics ( \"sports\" , top_n = 5 ) Note that the search query is typically more accurate if the search_term consists of a phrase or multiple words. Source code in bertopic\\_bertopic.py def find_topics ( self , search_term : str , top_n : int = 5 ) -> Tuple [ List [ int ], List [ float ]]: \"\"\" Find topics most similar to a search_term Creates an embedding for search_term and compares that with the topic embeddings. The most similar topics are returned along with their similarity values. The search_term can be of any size but since it compares with the topic representation it is advised to keep it below 5 words. Arguments: search_term: the term you want to use to search for topics top_n: the number of topics to return Returns: similar_topics: the most similar topics from high to low similarity: the similarity scores from high to low Examples: You can use the underlying embedding model to find topics that best represent the search term: ```python topics, similarity = topic_model.find_topics(\"sports\", top_n=5) ``` Note that the search query is typically more accurate if the search_term consists of a phrase or multiple words. \"\"\" if self . embedding_model is None : raise Exception ( \"This method can only be used if you did not use custom embeddings.\" ) topic_list = list ( self . topic_representations_ . keys ()) topic_list . sort () # Extract search_term embeddings and compare with topic embeddings search_embedding = self . _extract_embeddings ([ search_term ], method = \"word\" , verbose = False ) . flatten () sims = cosine_similarity ( search_embedding . reshape ( 1 , - 1 ), self . topic_embeddings_ ) . flatten () # Extract topics most similar to search_term ids = np . argsort ( sims )[ - top_n :] similarity = [ sims [ i ] for i in ids ][:: - 1 ] similar_topics = [ topic_list [ index ] for index in ids ][:: - 1 ] return similar_topics , similarity fit ( self , documents , embeddings = None , y = None ) \u00b6 Fit the models (Bert, UMAP, and, HDBSCAN) on a collection of documents and generate topics Parameters: Name Type Description Default documents List[str] A list of documents to fit on required embeddings ndarray Pre-trained document embeddings. These can be used instead of the sentence-transformer model None y Union[List[int], numpy.ndarray] The target class for (semi)-supervised modeling. Use -1 if no class for a specific instance is specified. None Examples: from bertopic import BERTopic from sklearn.datasets import fetch_20newsgroups docs = fetch_20newsgroups ( subset = 'all' )[ 'data' ] topic_model = BERTopic () . fit ( docs ) If you want to use your own embeddings, use it as follows: from bertopic import BERTopic from sklearn.datasets import fetch_20newsgroups from sentence_transformers import SentenceTransformer # Create embeddings docs = fetch_20newsgroups ( subset = 'all' )[ 'data' ] sentence_model = SentenceTransformer ( \"all-MiniLM-L6-v2\" ) embeddings = sentence_model . encode ( docs , show_progress_bar = True ) # Create topic model topic_model = BERTopic () . fit ( docs , embeddings ) Source code in bertopic\\_bertopic.py def fit ( self , documents : List [ str ], embeddings : np . ndarray = None , y : Union [ List [ int ], np . ndarray ] = None ): \"\"\" Fit the models (Bert, UMAP, and, HDBSCAN) on a collection of documents and generate topics Arguments: documents: A list of documents to fit on embeddings: Pre-trained document embeddings. These can be used instead of the sentence-transformer model y: The target class for (semi)-supervised modeling. Use -1 if no class for a specific instance is specified. Examples: ```python from bertopic import BERTopic from sklearn.datasets import fetch_20newsgroups docs = fetch_20newsgroups(subset='all')['data'] topic_model = BERTopic().fit(docs) ``` If you want to use your own embeddings, use it as follows: ```python from bertopic import BERTopic from sklearn.datasets import fetch_20newsgroups from sentence_transformers import SentenceTransformer # Create embeddings docs = fetch_20newsgroups(subset='all')['data'] sentence_model = SentenceTransformer(\"all-MiniLM-L6-v2\") embeddings = sentence_model.encode(docs, show_progress_bar=True) # Create topic model topic_model = BERTopic().fit(docs, embeddings) ``` \"\"\" self . fit_transform ( documents , embeddings , y ) return self fit_transform ( self , documents , embeddings = None , y = None ) \u00b6 Fit the models on a collection of documents, generate topics, and return the docs with topics Parameters: Name Type Description Default documents List[str] A list of documents to fit on required embeddings ndarray Pre-trained document embeddings. These can be used instead of the sentence-transformer model None y Union[List[int], numpy.ndarray] The target class for (semi)-supervised modeling. Use -1 if no class for a specific instance is specified. None Returns: Type Description predictions Topic predictions for each documents probabilities: The probability of the assigned topic per document. If calculate_probabilities in BERTopic is set to True, then it calculates the probabilities of all topics across all documents instead of only the assigned topic. This, however, slows down computation and may increase memory usage. Examples: from bertopic import BERTopic from sklearn.datasets import fetch_20newsgroups docs = fetch_20newsgroups ( subset = 'all' )[ 'data' ] topic_model = BERTopic () topics , probs = topic_model . fit_transform ( docs ) If you want to use your own embeddings, use it as follows: from bertopic import BERTopic from sklearn.datasets import fetch_20newsgroups from sentence_transformers import SentenceTransformer # Create embeddings docs = fetch_20newsgroups ( subset = 'all' )[ 'data' ] sentence_model = SentenceTransformer ( \"all-MiniLM-L6-v2\" ) embeddings = sentence_model . encode ( docs , show_progress_bar = True ) # Create topic model topic_model = BERTopic () topics , probs = topic_model . fit_transform ( docs , embeddings ) Source code in bertopic\\_bertopic.py def fit_transform ( self , documents : List [ str ], embeddings : np . ndarray = None , y : Union [ List [ int ], np . ndarray ] = None ) -> Tuple [ List [ int ], Union [ np . ndarray , None ]]: \"\"\" Fit the models on a collection of documents, generate topics, and return the docs with topics Arguments: documents: A list of documents to fit on embeddings: Pre-trained document embeddings. These can be used instead of the sentence-transformer model y: The target class for (semi)-supervised modeling. Use -1 if no class for a specific instance is specified. Returns: predictions: Topic predictions for each documents probabilities: The probability of the assigned topic per document. If `calculate_probabilities` in BERTopic is set to True, then it calculates the probabilities of all topics across all documents instead of only the assigned topic. This, however, slows down computation and may increase memory usage. Examples: ```python from bertopic import BERTopic from sklearn.datasets import fetch_20newsgroups docs = fetch_20newsgroups(subset='all')['data'] topic_model = BERTopic() topics, probs = topic_model.fit_transform(docs) ``` If you want to use your own embeddings, use it as follows: ```python from bertopic import BERTopic from sklearn.datasets import fetch_20newsgroups from sentence_transformers import SentenceTransformer # Create embeddings docs = fetch_20newsgroups(subset='all')['data'] sentence_model = SentenceTransformer(\"all-MiniLM-L6-v2\") embeddings = sentence_model.encode(docs, show_progress_bar=True) # Create topic model topic_model = BERTopic() topics, probs = topic_model.fit_transform(docs, embeddings) ``` \"\"\" check_documents_type ( documents ) check_embeddings_shape ( embeddings , documents ) documents = pd . DataFrame ({ \"Document\" : documents , \"ID\" : range ( len ( documents )), \"Topic\" : None }) # Extract embeddings if embeddings is None : self . embedding_model = select_backend ( self . embedding_model , language = self . language ) embeddings = self . _extract_embeddings ( documents . Document , method = \"document\" , verbose = self . verbose ) logger . info ( \"Transformed documents to Embeddings\" ) else : if self . embedding_model is not None : self . embedding_model = select_backend ( self . embedding_model , language = self . language ) # Reduce dimensionality if self . seed_topic_list is not None and self . embedding_model is not None : y , embeddings = self . _guided_topic_modeling ( embeddings ) umap_embeddings = self . _reduce_dimensionality ( embeddings , y ) # Cluster reduced embeddings documents , probabilities = self . _cluster_embeddings ( umap_embeddings , documents , y = y ) # Sort and Map Topic IDs by their frequency if not self . nr_topics : documents = self . _sort_mappings_by_frequency ( documents ) # Extract topics by calculating c-TF-IDF self . _extract_topics ( documents ) # Reduce topics if self . nr_topics : documents = self . _reduce_topics ( documents ) # Save the top 3 most representative documents per topic self . _save_representative_docs ( documents ) # Resulting output self . probabilities_ = self . _map_probabilities ( probabilities , original_topics = True ) predictions = documents . Topic . to_list () return predictions , self . probabilities_ generate_topic_labels ( self , nr_words = 3 , topic_prefix = True , word_length = None , separator = '_' ) \u00b6 Get labels for each topic in a user-defined format Parameters: Name Type Description Default original_labels required nr_words int Top n words per topic to use 3 topic_prefix bool Whether to use the topic ID as a prefix. If set to True, the topic ID will be separated using the separator True word_length int The maximum length of each word in the topic label. Some words might be relatively long and setting this value helps to make sure that all labels have relatively similar lengths. None separator str The string with which the words and topic prefix will be separated. Underscores are the default but a nice alternative is \", \" . '_' Returns: Type Description topic_labels A list of topic labels sorted from the lowest topic ID to the highest. If the topic model was trained using HDBSCAN, the lowest topic ID is -1, otherwise it is 0. Examples: To create our custom topic labels, usage is rather straightforward: topic_labels = topic_model . get_topic_labels ( nr_words = 2 , separator = \", \" ) Source code in bertopic\\_bertopic.py def generate_topic_labels ( self , nr_words : int = 3 , topic_prefix : bool = True , word_length : int = None , separator : str = \"_\" ) -> List [ str ]: \"\"\" Get labels for each topic in a user-defined format Arguments: original_labels: nr_words: Top `n` words per topic to use topic_prefix: Whether to use the topic ID as a prefix. If set to True, the topic ID will be separated using the `separator` word_length: The maximum length of each word in the topic label. Some words might be relatively long and setting this value helps to make sure that all labels have relatively similar lengths. separator: The string with which the words and topic prefix will be separated. Underscores are the default but a nice alternative is `\", \"`. Returns: topic_labels: A list of topic labels sorted from the lowest topic ID to the highest. If the topic model was trained using HDBSCAN, the lowest topic ID is -1, otherwise it is 0. Examples: To create our custom topic labels, usage is rather straightforward: ```python topic_labels = topic_model.get_topic_labels(nr_words=2, separator=\", \") ``` \"\"\" unique_topics = sorted ( set ( self . topics_ )) topic_labels = [] for topic in unique_topics : words , _ = zip ( * self . get_topic ( topic )) if word_length : words = [ word [: word_length ] for word in words ][: nr_words ] else : words = list ( words )[: nr_words ] if topic_prefix : topic_label = f \" { topic }{ separator } \" + separator . join ( words ) else : topic_label = separator . join ( words ) topic_labels . append ( topic_label ) return topic_labels get_document_info ( self , docs , df = None , metadata = None ) \u00b6 Get information about the documents on which the topic was trained including the documents themselves, their respective topics, the name of each topic, the top n words of each topic, whether it is a representative document, and probability of the clustering if the cluster model supports it. There are also options to include other meta data, such as the topic distributions or the x and y coordinates of the reduced embeddings. Parameters: Name Type Description Default docs List[str] The documents on which the topic model was trained. required df DataFrame A dataframe containing the metadata and the documents on which the topic model was originally trained on. None metadata Mapping[str, Any] A dictionary with meta data for each document in the form of column name (key) and the respective values (value). None Returns: Type Description document_info A dataframe with several statistics regarding the documents on which the topic model was trained. Usage: To get the document info, you will only need to pass the documents on which the topic model was trained: document_info = topic_model . get_document_info ( docs ) There are additionally options to include meta data, such as the topic distributions. Moreover, we can pass the original dataframe that contains the documents and extend it with the information retrieved from BERTopic: from sklearn.datasets import fetch_20newsgroups # The original data in a dataframe format to include the target variable data = fetch_20newsgroups ( subset = 'all' , remove = ( 'headers' , 'footers' , 'quotes' )) df = pd . DataFrame ({ \"Document\" : data [ 'data' ], \"Class\" : data [ 'target' ]}) # Add information about the percentage of the document that relates to the topic topic_distr , _ = topic_model . approximate_distribution ( docs , batch_size = 1000 ) distributions = [ distr [ topic ] if topic != - 1 else 0 for topic , distr in zip ( topics , topic_distr )] # Create our documents dataframe using the original dataframe and meta data about # the topic distributions document_info = topic_model . get_document_info ( docs , df = df , metadata = { \"Topic_distribution\" : distributions }) Source code in bertopic\\_bertopic.py def get_document_info ( self , docs : List [ str ], df : pd . DataFrame = None , metadata : Mapping [ str , Any ] = None ) -> pd . DataFrame : \"\"\" Get information about the documents on which the topic was trained including the documents themselves, their respective topics, the name of each topic, the top n words of each topic, whether it is a representative document, and probability of the clustering if the cluster model supports it. There are also options to include other meta data, such as the topic distributions or the x and y coordinates of the reduced embeddings. Arguments: docs: The documents on which the topic model was trained. df: A dataframe containing the metadata and the documents on which the topic model was originally trained on. metadata: A dictionary with meta data for each document in the form of column name (key) and the respective values (value). Returns: document_info: A dataframe with several statistics regarding the documents on which the topic model was trained. Usage: To get the document info, you will only need to pass the documents on which the topic model was trained: ```python document_info = topic_model.get_document_info(docs) ``` There are additionally options to include meta data, such as the topic distributions. Moreover, we can pass the original dataframe that contains the documents and extend it with the information retrieved from BERTopic: ```python from sklearn.datasets import fetch_20newsgroups # The original data in a dataframe format to include the target variable data= fetch_20newsgroups(subset='all', remove=('headers', 'footers', 'quotes')) df = pd.DataFrame({\"Document\": data['data'], \"Class\": data['target']}) # Add information about the percentage of the document that relates to the topic topic_distr, _ = topic_model.approximate_distribution(docs, batch_size=1000) distributions = [distr[topic] if topic != -1 else 0 for topic, distr in zip(topics, topic_distr)] # Create our documents dataframe using the original dataframe and meta data about # the topic distributions document_info = topic_model.get_document_info(docs, df=df, metadata={\"Topic_distribution\": distributions}) ``` \"\"\" if df is not None : document_info = df . copy () document_info [ \"Document\" ] = docs document_info [ \"Topic\" ] = self . topics_ else : document_info = pd . DataFrame ({ \"Document\" : docs , \"Topic\" : self . topics_ }) # Add topic info through `.get_topic_info()` topic_info = self . get_topic_info () . drop ( \"Count\" , axis = 1 ) document_info = pd . merge ( document_info , topic_info , on = \"Topic\" , how = \"left\" ) # Add top n words top_n_words = { topic : \" - \" . join ( list ( zip ( * self . get_topic ( topic )))[ 0 ]) for topic in set ( self . topics_ )} document_info [ \"Top_n_words\" ] = document_info . Topic . map ( top_n_words ) # Add flat probabilities if self . probabilities_ is not None : if len ( self . probabilities_ . shape ) == 1 : document_info [ \"Probability\" ] = self . probabilities_ else : document_info [ \"Probability\" ] = [ max ( probs ) if topic != - 1 else 1 - sum ( probs ) for topic , probs in zip ( self . topics_ , self . probabilities_ )] # Add representative document labels repr_docs = [ repr_doc for repr_docs in self . representative_docs_ . values () for repr_doc in repr_docs ] document_info [ \"Representative_document\" ] = False document_info . loc [ document_info . Document . isin ( repr_docs ), \"Representative_document\" ] = True # Add custom meta data provided by the user if metadata is not None : for column , values in metadata . items (): document_info [ column ] = values return document_info get_params ( self , deep = False ) \u00b6 Get parameters for this estimator. Adapted from: https://github.com/scikit-learn/scikit-learn/blob/b3ea3ed6a/sklearn/base.py#L178 Parameters: Name Type Description Default deep bool bool, default=True If True, will return the parameters for this estimator and contained subobjects that are estimators. False Returns: Type Description out Parameter names mapped to their values. Source code in bertopic\\_bertopic.py def get_params ( self , deep : bool = False ) -> Mapping [ str , Any ]: \"\"\" Get parameters for this estimator. Adapted from: https://github.com/scikit-learn/scikit-learn/blob/b3ea3ed6a/sklearn/base.py#L178 Arguments: deep: bool, default=True If True, will return the parameters for this estimator and contained subobjects that are estimators. Returns: out: Parameter names mapped to their values. \"\"\" out = dict () for key in self . _get_param_names (): value = getattr ( self , key ) if deep and hasattr ( value , 'get_params' ): deep_items = value . get_params () . items () out . update (( key + '__' + k , val ) for k , val in deep_items ) out [ key ] = value return out get_representative_docs ( self , topic = None ) \u00b6 Extract the best representing documents per topic. Note This does not extract all documents per topic as all documents are not saved within BERTopic. To get all documents, please run the following: # When you used `.fit_transform`: df = pd . DataFrame ({ \"Document\" : docs , \"Topic\" : topic }) # When you used `.fit`: df = pd . DataFrame ({ \"Document\" : docs , \"Topic\" : topic_model . topics_ }) Parameters: Name Type Description Default topic int A specific topic for which you want the representative documents None Returns: Type Description List[str] Representative documents of the chosen topic Examples: To extract the representative docs of all topics: representative_docs = topic_model . get_representative_docs () To get the representative docs of a single topic: representative_docs = topic_model . get_representative_docs ( 12 ) Source code in bertopic\\_bertopic.py def get_representative_docs ( self , topic : int = None ) -> List [ str ]: \"\"\" Extract the best representing documents per topic. NOTE: This does not extract all documents per topic as all documents are not saved within BERTopic. To get all documents, please run the following: ```python # When you used `.fit_transform`: df = pd.DataFrame({\"Document\": docs, \"Topic\": topic}) # When you used `.fit`: df = pd.DataFrame({\"Document\": docs, \"Topic\": topic_model.topics_}) ``` Arguments: topic: A specific topic for which you want the representative documents Returns: Representative documents of the chosen topic Examples: To extract the representative docs of all topics: ```python representative_docs = topic_model.get_representative_docs() ``` To get the representative docs of a single topic: ```python representative_docs = topic_model.get_representative_docs(12) ``` \"\"\" check_is_fitted ( self ) if isinstance ( topic , int ): if self . representative_docs_ . get ( topic ): return self . representative_docs_ [ topic ] else : return None else : return self . representative_docs_ get_topic ( self , topic ) \u00b6 Return top n words for a specific topic and their c-TF-IDF scores Parameters: Name Type Description Default topic int A specific topic for which you want its representation required Returns: Type Description Union[Mapping[str, Tuple[str, float]], bool] The top n words for a specific word and its respective c-TF-IDF scores Examples: topic = topic_model . get_topic ( 12 ) Source code in bertopic\\_bertopic.py def get_topic ( self , topic : int ) -> Union [ Mapping [ str , Tuple [ str , float ]], bool ]: \"\"\" Return top n words for a specific topic and their c-TF-IDF scores Arguments: topic: A specific topic for which you want its representation Returns: The top n words for a specific word and its respective c-TF-IDF scores Examples: ```python topic = topic_model.get_topic(12) ``` \"\"\" check_is_fitted ( self ) if topic in self . topic_representations_ : return self . topic_representations_ [ topic ] else : return False get_topic_freq ( self , topic = None ) \u00b6 Return the the size of topics (descending order) Parameters: Name Type Description Default topic int A specific topic for which you want the frequency None Returns: Type Description Union[pandas.core.frame.DataFrame, int] Either the frequency of a single topic or dataframe with the frequencies of all topics Examples: To extract the frequency of all topics: frequency = topic_model . get_topic_freq () To get the frequency of a single topic: frequency = topic_model . get_topic_freq ( 12 ) Source code in bertopic\\_bertopic.py def get_topic_freq ( self , topic : int = None ) -> Union [ pd . DataFrame , int ]: \"\"\" Return the the size of topics (descending order) Arguments: topic: A specific topic for which you want the frequency Returns: Either the frequency of a single topic or dataframe with the frequencies of all topics Examples: To extract the frequency of all topics: ```python frequency = topic_model.get_topic_freq() ``` To get the frequency of a single topic: ```python frequency = topic_model.get_topic_freq(12) ``` \"\"\" check_is_fitted ( self ) if isinstance ( topic , int ): return self . topic_sizes_ [ topic ] else : return pd . DataFrame ( self . topic_sizes_ . items (), columns = [ 'Topic' , 'Count' ]) . sort_values ( \"Count\" , ascending = False ) get_topic_info ( self , topic = None ) \u00b6 Get information about each topic including its ID, frequency, and name. Parameters: Name Type Description Default topic int A specific topic for which you want the frequency None Returns: Type Description info The information relating to either a single topic or all topics Examples: info_df = topic_model . get_topic_info () Source code in bertopic\\_bertopic.py def get_topic_info ( self , topic : int = None ) -> pd . DataFrame : \"\"\" Get information about each topic including its ID, frequency, and name. Arguments: topic: A specific topic for which you want the frequency Returns: info: The information relating to either a single topic or all topics Examples: ```python info_df = topic_model.get_topic_info() ``` \"\"\" check_is_fitted ( self ) info = pd . DataFrame ( self . topic_sizes_ . items (), columns = [ \"Topic\" , \"Count\" ]) . sort_values ( \"Topic\" ) info [ \"Name\" ] = info . Topic . map ( self . topic_labels_ ) if self . custom_labels_ is not None : if len ( self . custom_labels_ ) == len ( info ): labels = { topic - self . _outliers : label for topic , label in enumerate ( self . custom_labels_ )} info [ \"CustomName\" ] = info [ \"Topic\" ] . map ( labels ) if topic is not None : info = info . loc [ info . Topic == topic , :] return info . reset_index ( drop = True ) get_topic_tree ( hier_topics , max_distance = None , tight_layout = False ) staticmethod \u00b6 Extract the topic tree such that it can be printed Parameters: Name Type Description Default hier_topics DataFrame A dataframe containing the structure of the topic tree. This is the output of topic_model.hierachical_topics() required max_distance float The maximum distance between two topics. This value is based on the Distance column in hier_topics . None tight_layout bool Whether to use a tight layout (narrow width) for easier readability if you have hundreds of topics. False Returns: Type Description A tree that has the following structure when printed . . \u2514\u2500health_medical_disease_patients_hiv \u251c\u2500patients_medical_disease_candida_health \u2502 \u251c\u2500\u25a0\u2500\u2500candida_yeast_infection_gonorrhea_infections \u2500\u2500 Topic: 48 \u2502 \u2514\u2500patients_disease_cancer_medical_doctor \u2502 \u251c\u2500\u25a0\u2500\u2500hiv_medical_cancer_patients_doctor \u2500\u2500 Topic: 34 \u2502 \u2514\u2500\u25a0\u2500\u2500pain_drug_patients_disease_diet \u2500\u2500 Topic: 26 \u2514\u2500\u25a0\u2500\u2500health_newsgroup_tobacco_vote_votes \u2500\u2500 Topic: 9 The blocks (\u25a0) indicate that the topic is one you can directly access from topic_model.get_topic . In other words, they are the original un-grouped topics. Examples: # Train model from bertopic import BERTopic topic_model = BERTopic () topics , probs = topic_model . fit_transform ( docs ) hierarchical_topics = topic_model . hierarchical_topics ( docs ) # Print topic tree tree = topic_model . get_topic_tree ( hierarchical_topics ) print ( tree ) Source code in bertopic\\_bertopic.py @staticmethod def get_topic_tree ( hier_topics : pd . DataFrame , max_distance : float = None , tight_layout : bool = False ) -> str : \"\"\" Extract the topic tree such that it can be printed Arguments: hier_topics: A dataframe containing the structure of the topic tree. This is the output of `topic_model.hierachical_topics()` max_distance: The maximum distance between two topics. This value is based on the Distance column in `hier_topics`. tight_layout: Whether to use a tight layout (narrow width) for easier readability if you have hundreds of topics. Returns: A tree that has the following structure when printed: . . \u2514\u2500health_medical_disease_patients_hiv \u251c\u2500patients_medical_disease_candida_health \u2502 \u251c\u2500\u25a0\u2500\u2500candida_yeast_infection_gonorrhea_infections \u2500\u2500 Topic: 48 \u2502 \u2514\u2500patients_disease_cancer_medical_doctor \u2502 \u251c\u2500\u25a0\u2500\u2500hiv_medical_cancer_patients_doctor \u2500\u2500 Topic: 34 \u2502 \u2514\u2500\u25a0\u2500\u2500pain_drug_patients_disease_diet \u2500\u2500 Topic: 26 \u2514\u2500\u25a0\u2500\u2500health_newsgroup_tobacco_vote_votes \u2500\u2500 Topic: 9 The blocks (\u25a0) indicate that the topic is one you can directly access from `topic_model.get_topic`. In other words, they are the original un-grouped topics. Examples: ```python # Train model from bertopic import BERTopic topic_model = BERTopic() topics, probs = topic_model.fit_transform(docs) hierarchical_topics = topic_model.hierarchical_topics(docs) # Print topic tree tree = topic_model.get_topic_tree(hierarchical_topics) print(tree) ``` \"\"\" width = 1 if tight_layout else 4 if max_distance is None : max_distance = hier_topics . Distance . max () + 1 max_original_topic = hier_topics . Parent_ID . astype ( int ) . min () - 1 # Extract mapping from ID to name topic_to_name = dict ( zip ( hier_topics . Child_Left_ID , hier_topics . Child_Left_Name )) topic_to_name . update ( dict ( zip ( hier_topics . Child_Right_ID , hier_topics . Child_Right_Name ))) topic_to_name = { topic : name [: 100 ] for topic , name in topic_to_name . items ()} # Create tree tree = { str ( row [ 1 ] . Parent_ID ): [ str ( row [ 1 ] . Child_Left_ID ), str ( row [ 1 ] . Child_Right_ID )] for row in hier_topics . iterrows ()} def get_tree ( start , tree ): \"\"\" Based on: https://stackoverflow.com/a/51920869/10532563 \"\"\" def _tree ( to_print , start , parent , tree , grandpa = None , indent = \"\" ): # Get distance between merged topics distance = hier_topics . loc [( hier_topics . Child_Left_ID == parent ) | ( hier_topics . Child_Right_ID == parent ), \"Distance\" ] distance = distance . values [ 0 ] if len ( distance ) > 0 else 10 if parent != start : if grandpa is None : to_print += topic_to_name [ parent ] else : if int ( parent ) <= max_original_topic : # Do not append topic ID if they are not merged if distance < max_distance : to_print += \"\u25a0\u2500\u2500\" + topic_to_name [ parent ] + f \" \u2500\u2500 Topic: { parent } \" + \" \\n \" else : to_print += \"O \\n \" else : to_print += topic_to_name [ parent ] + \" \\n \" if parent not in tree : return to_print for child in tree [ parent ][: - 1 ]: to_print += indent + \"\u251c\" + \"\u2500\" to_print = _tree ( to_print , start , child , tree , parent , indent + \"\u2502\" + \" \" * width ) child = tree [ parent ][ - 1 ] to_print += indent + \"\u2514\" + \"\u2500\" to_print = _tree ( to_print , start , child , tree , parent , indent + \" \" * ( width + 1 )) return to_print to_print = \".\" + \" \\n \" to_print = _tree ( to_print , start , start , tree ) return to_print start = str ( hier_topics . Parent_ID . astype ( int ) . max ()) return get_tree ( start , tree ) get_topics ( self ) \u00b6 Return topics with top n words and their c-TF-IDF score Returns: Type Description self.topic_representations_ The top n words per topic and the corresponding c-TF-IDF score Examples: all_topics = topic_model . get_topics () Source code in bertopic\\_bertopic.py def get_topics ( self ) -> Mapping [ str , Tuple [ str , float ]]: \"\"\" Return topics with top n words and their c-TF-IDF score Returns: self.topic_representations_: The top n words per topic and the corresponding c-TF-IDF score Examples: ```python all_topics = topic_model.get_topics() ``` \"\"\" check_is_fitted ( self ) return self . topic_representations_ hierarchical_topics ( self , docs , linkage_function = None , distance_function = None ) \u00b6 Create a hierarchy of topics To create this hierarchy, BERTopic needs to be already fitted once. Then, a hierarchy is calculated on the distance matrix of the c-TF-IDF representation using scipy.cluster.hierarchy.linkage . Based on that hierarchy, we calculate the topic representation at each merged step. This is a local representation, as we only assume that the chosen step is merged and not all others which typically improves the topic representation. Parameters: Name Type Description Default docs List[int] The documents you used when calling either fit or fit_transform required linkage_function Callable[[scipy.sparse._csr.csr_matrix], numpy.ndarray] The linkage function to use. Default is: lambda x: sch.linkage(x, 'ward', optimal_ordering=True) None distance_function Callable[[scipy.sparse._csr.csr_matrix], scipy.sparse._csr.csr_matrix] The distance function to use on the c-TF-IDF matrix. Default is: lambda x: 1 - cosine_similarity(x) None Returns: Type Description hierarchical_topics A dataframe that contains a hierarchy of topics represented by their parents and their children Examples: from bertopic import BERTopic topic_model = BERTopic () topics , probs = topic_model . fit_transform ( docs ) hierarchical_topics = topic_model . hierarchical_topics ( docs ) A custom linkage function can be used as follows: from scipy.cluster import hierarchy as sch from bertopic import BERTopic topic_model = BERTopic () topics , probs = topic_model . fit_transform ( docs ) # Hierarchical topics linkage_function = lambda x : sch . linkage ( x , 'ward' , optimal_ordering = True ) hierarchical_topics = topic_model . hierarchical_topics ( docs , linkage_function = linkage_function ) Source code in bertopic\\_bertopic.py def hierarchical_topics ( self , docs : List [ int ], linkage_function : Callable [[ csr_matrix ], np . ndarray ] = None , distance_function : Callable [[ csr_matrix ], csr_matrix ] = None ) -> pd . DataFrame : \"\"\" Create a hierarchy of topics To create this hierarchy, BERTopic needs to be already fitted once. Then, a hierarchy is calculated on the distance matrix of the c-TF-IDF representation using `scipy.cluster.hierarchy.linkage`. Based on that hierarchy, we calculate the topic representation at each merged step. This is a local representation, as we only assume that the chosen step is merged and not all others which typically improves the topic representation. Arguments: docs: The documents you used when calling either `fit` or `fit_transform` linkage_function: The linkage function to use. Default is: `lambda x: sch.linkage(x, 'ward', optimal_ordering=True)` distance_function: The distance function to use on the c-TF-IDF matrix. Default is: `lambda x: 1 - cosine_similarity(x)` Returns: hierarchical_topics: A dataframe that contains a hierarchy of topics represented by their parents and their children Examples: ```python from bertopic import BERTopic topic_model = BERTopic() topics, probs = topic_model.fit_transform(docs) hierarchical_topics = topic_model.hierarchical_topics(docs) ``` A custom linkage function can be used as follows: ```python from scipy.cluster import hierarchy as sch from bertopic import BERTopic topic_model = BERTopic() topics, probs = topic_model.fit_transform(docs) # Hierarchical topics linkage_function = lambda x: sch.linkage(x, 'ward', optimal_ordering=True) hierarchical_topics = topic_model.hierarchical_topics(docs, linkage_function=linkage_function) ``` \"\"\" if distance_function is None : distance_function = lambda x : 1 - cosine_similarity ( x ) if linkage_function is None : linkage_function = lambda x : sch . linkage ( x , 'ward' , optimal_ordering = True ) # Calculate distance embeddings = self . c_tf_idf_ [ self . _outliers :] X = distance_function ( embeddings ) # Make sure it is the 1-D condensed distance matrix with zeros on the diagonal np . fill_diagonal ( X , 0 ) X = squareform ( X ) # Use the 1-D condensed distance matrix as an input instead of the raw distance matrix Z = linkage_function ( X ) # Calculate basic bag-of-words to be iteratively merged later documents = pd . DataFrame ({ \"Document\" : docs , \"ID\" : range ( len ( docs )), \"Topic\" : self . topics_ }) documents_per_topic = documents . groupby ([ 'Topic' ], as_index = False ) . agg ({ 'Document' : ' ' . join }) documents_per_topic = documents_per_topic . loc [ documents_per_topic . Topic != - 1 , :] clean_documents = self . _preprocess_text ( documents_per_topic . Document . values ) # Scikit-Learn Deprecation: get_feature_names is deprecated in 1.0 # and will be removed in 1.2. Please use get_feature_names_out instead. if version . parse ( sklearn_version ) >= version . parse ( \"1.0.0\" ): words = self . vectorizer_model . get_feature_names_out () else : words = self . vectorizer_model . get_feature_names () bow = self . vectorizer_model . transform ( clean_documents ) # Extract clusters hier_topics = pd . DataFrame ( columns = [ \"Parent_ID\" , \"Parent_Name\" , \"Topics\" , \"Child_Left_ID\" , \"Child_Left_Name\" , \"Child_Right_ID\" , \"Child_Right_Name\" ]) for index in tqdm ( range ( len ( Z ))): # Find clustered documents clusters = sch . fcluster ( Z , t = Z [ index ][ 2 ], criterion = 'distance' ) - self . _outliers cluster_df = pd . DataFrame ({ \"Topic\" : range ( len ( clusters )), \"Cluster\" : clusters }) cluster_df = cluster_df . groupby ( \"Cluster\" ) . agg ({ 'Topic' : lambda x : list ( x )}) . reset_index () nr_clusters = len ( clusters ) # Extract first topic we find to get the set of topics in a merged topic topic = None val = Z [ index ][ 0 ] while topic is None : if val - len ( clusters ) < 0 : topic = int ( val ) else : val = Z [ int ( val - len ( clusters ))][ 0 ] clustered_topics = [ i for i , x in enumerate ( clusters ) if x == clusters [ topic ]] # Group bow per cluster, calculate c-TF-IDF and extract words grouped = csr_matrix ( bow [ clustered_topics ] . sum ( axis = 0 )) c_tf_idf = self . ctfidf_model . transform ( grouped ) selection = documents . loc [ documents . Topic . isin ( clustered_topics ), :] selection . Topic = 0 words_per_topic = self . _extract_words_per_topic ( words , selection , c_tf_idf ) # Extract parent's name and ID parent_id = index + len ( clusters ) parent_name = \"_\" . join ([ x [ 0 ] for x in words_per_topic [ 0 ]][: 5 ]) # Extract child's name and ID Z_id = Z [ index ][ 0 ] child_left_id = Z_id if Z_id - nr_clusters < 0 else Z_id - nr_clusters if Z_id - nr_clusters < 0 : child_left_name = \"_\" . join ([ x [ 0 ] for x in self . get_topic ( Z_id )][: 5 ]) else : child_left_name = hier_topics . iloc [ int ( child_left_id )] . Parent_Name # Extract child's name and ID Z_id = Z [ index ][ 1 ] child_right_id = Z_id if Z_id - nr_clusters < 0 else Z_id - nr_clusters if Z_id - nr_clusters < 0 : child_right_name = \"_\" . join ([ x [ 0 ] for x in self . get_topic ( Z_id )][: 5 ]) else : child_right_name = hier_topics . iloc [ int ( child_right_id )] . Parent_Name # Save results hier_topics . loc [ len ( hier_topics ), :] = [ parent_id , parent_name , clustered_topics , int ( Z [ index ][ 0 ]), child_left_name , int ( Z [ index ][ 1 ]), child_right_name ] hier_topics [ \"Distance\" ] = Z [:, 2 ] hier_topics = hier_topics . sort_values ( \"Parent_ID\" , ascending = False ) hier_topics [[ \"Parent_ID\" , \"Child_Left_ID\" , \"Child_Right_ID\" ]] = hier_topics [[ \"Parent_ID\" , \"Child_Left_ID\" , \"Child_Right_ID\" ]] . astype ( str ) return hier_topics load ( path , embedding_model = None ) classmethod \u00b6 Loads the model from the specified path Parameters: Name Type Description Default path str the location and name of the BERTopic file you want to load required embedding_model If the embedding_model was not saved to save space or to load it in from the cloud, you can load it in by specifying it here. None Examples: BERTopic . load ( \"my_model\" ) or if you did not save the embedding model: BERTopic . load ( \"my_model\" , embedding_model = \"all-MiniLM-L6-v2\" ) Source code in bertopic\\_bertopic.py @classmethod def load ( cls , path : str , embedding_model = None ): \"\"\" Loads the model from the specified path Arguments: path: the location and name of the BERTopic file you want to load embedding_model: If the embedding_model was not saved to save space or to load it in from the cloud, you can load it in by specifying it here. Examples: ```python BERTopic.load(\"my_model\") ``` or if you did not save the embedding model: ```python BERTopic.load(\"my_model\", embedding_model=\"all-MiniLM-L6-v2\") ``` \"\"\" with open ( path , 'rb' ) as file : if embedding_model : topic_model = joblib . load ( file ) topic_model . embedding_model = select_backend ( embedding_model ) else : topic_model = joblib . load ( file ) return topic_model merge_topics ( self , docs , topics_to_merge ) \u00b6 Parameters: Name Type Description Default docs List[str] The documents you used when calling either fit or fit_transform required topics_to_merge List[Union[Iterable[int], int]] Either a list of topics or a list of list of topics to merge. For example: [1, 2, 3] will merge topics 1, 2 and 3 [[1, 2], [3, 4]] will merge topics 1 and 2, and separately merge topics 3 and 4. required Examples: If you want to merge topics 1, 2, and 3: topics_to_merge = [ 1 , 2 , 3 ] topic_model . merge_topics ( docs , topics_to_merge ) or if you want to merge topics 1 and 2, and separately merge topics 3 and 4: topics_to_merge = [[ 1 , 2 ] [ 3 , 4 ]] topic_model . merge_topics ( docs , topics_to_merge ) Source code in bertopic\\_bertopic.py def merge_topics ( self , docs : List [ str ], topics_to_merge : List [ Union [ Iterable [ int ], int ]]) -> None : \"\"\" Arguments: docs: The documents you used when calling either `fit` or `fit_transform` topics_to_merge: Either a list of topics or a list of list of topics to merge. For example: [1, 2, 3] will merge topics 1, 2 and 3 [[1, 2], [3, 4]] will merge topics 1 and 2, and separately merge topics 3 and 4. Examples: If you want to merge topics 1, 2, and 3: ```python topics_to_merge = [1, 2, 3] topic_model.merge_topics(docs, topics_to_merge) ``` or if you want to merge topics 1 and 2, and separately merge topics 3 and 4: ```python topics_to_merge = [[1, 2] [3, 4]] topic_model.merge_topics(docs, topics_to_merge) ``` \"\"\" check_is_fitted ( self ) documents = pd . DataFrame ({ \"Document\" : docs , \"Topic\" : self . topics_ }) mapping = { topic : topic for topic in set ( self . topics_ )} if isinstance ( topics_to_merge [ 0 ], int ): for topic in sorted ( topics_to_merge ): mapping [ topic ] = topics_to_merge [ 0 ] elif isinstance ( topics_to_merge [ 0 ], Iterable ): for topic_group in sorted ( topics_to_merge ): for topic in topic_group : mapping [ topic ] = topic_group [ 0 ] else : raise ValueError ( \"Make sure that `topics_to_merge` is either\" \"a list of topics or a list of list of topics.\" ) documents . Topic = documents . Topic . map ( mapping ) self . topic_mapper_ . add_mappings ( mapping ) documents = self . _sort_mappings_by_frequency ( documents ) self . _extract_topics ( documents ) self . _update_topic_size ( documents ) self . _save_representative_docs ( documents ) self . probabilities_ = self . _map_probabilities ( self . probabilities_ ) partial_fit ( self , documents , embeddings = None , y = None ) \u00b6 Fit BERTopic on a subset of the data and perform online learning with batch-like data. Online topic modeling in BERTopic is performed by using dimensionality reduction and cluster algorithms that support a partial_fit method in order to incrementally train the topic model. Likewise, the bertopic.vectorizers.OnlineCountVectorizer is used to dynamically update its vocabulary when presented with new data. It has several parameters for modeling decay and updating the representations. In other words, although the main algorithm stays the same, the training procedure now works as follows: For each subset of the data: Generate embeddings with a pre-traing language model Incrementally update the dimensionality reduction algorithm with partial_fit Incrementally update the cluster algorithm with partial_fit Incrementally update the OnlineCountVectorizer and apply some form of decay Note that it is advised to use partial_fit with batches and not single documents for the best performance. Parameters: Name Type Description Default documents List[str] A list of documents to fit on required embeddings ndarray Pre-trained document embeddings. These can be used instead of the sentence-transformer model None y Union[List[int], numpy.ndarray] The target class for (semi)-supervised modeling. Use -1 if no class for a specific instance is specified. None Examples: from sklearn.datasets import fetch_20newsgroups from sklearn.cluster import MiniBatchKMeans from sklearn.decomposition import IncrementalPCA from bertopic.vectorizers import OnlineCountVectorizer from bertopic import BERTopic # Prepare documents docs = fetch_20newsgroups ( subset = subset , remove = ( 'headers' , 'footers' , 'quotes' ))[ \"data\" ] # Prepare sub-models that support online learning umap_model = IncrementalPCA ( n_components = 5 ) cluster_model = MiniBatchKMeans ( n_clusters = 50 , random_state = 0 ) vectorizer_model = OnlineCountVectorizer ( stop_words = \"english\" , decay = .01 ) topic_model = BERTopic ( umap_model = umap_model , hdbscan_model = cluster_model , vectorizer_model = vectorizer_model ) # Incrementally fit the topic model by training on 1000 documents at a time for index in range ( 0 , len ( docs ), 1000 ): topic_model . partial_fit ( docs [ index : index + 1000 ]) Source code in bertopic\\_bertopic.py def partial_fit ( self , documents : List [ str ], embeddings : np . ndarray = None , y : Union [ List [ int ], np . ndarray ] = None ): \"\"\" Fit BERTopic on a subset of the data and perform online learning with batch-like data. Online topic modeling in BERTopic is performed by using dimensionality reduction and cluster algorithms that support a `partial_fit` method in order to incrementally train the topic model. Likewise, the `bertopic.vectorizers.OnlineCountVectorizer` is used to dynamically update its vocabulary when presented with new data. It has several parameters for modeling decay and updating the representations. In other words, although the main algorithm stays the same, the training procedure now works as follows: For each subset of the data: 1. Generate embeddings with a pre-traing language model 2. Incrementally update the dimensionality reduction algorithm with `partial_fit` 3. Incrementally update the cluster algorithm with `partial_fit` 4. Incrementally update the OnlineCountVectorizer and apply some form of decay Note that it is advised to use `partial_fit` with batches and not single documents for the best performance. Arguments: documents: A list of documents to fit on embeddings: Pre-trained document embeddings. These can be used instead of the sentence-transformer model y: The target class for (semi)-supervised modeling. Use -1 if no class for a specific instance is specified. Examples: ```python from sklearn.datasets import fetch_20newsgroups from sklearn.cluster import MiniBatchKMeans from sklearn.decomposition import IncrementalPCA from bertopic.vectorizers import OnlineCountVectorizer from bertopic import BERTopic # Prepare documents docs = fetch_20newsgroups(subset=subset, remove=('headers', 'footers', 'quotes'))[\"data\"] # Prepare sub-models that support online learning umap_model = IncrementalPCA(n_components=5) cluster_model = MiniBatchKMeans(n_clusters=50, random_state=0) vectorizer_model = OnlineCountVectorizer(stop_words=\"english\", decay=.01) topic_model = BERTopic(umap_model=umap_model, hdbscan_model=cluster_model, vectorizer_model=vectorizer_model) # Incrementally fit the topic model by training on 1000 documents at a time for index in range(0, len(docs), 1000): topic_model.partial_fit(docs[index: index+1000]) ``` \"\"\" # Checks check_embeddings_shape ( embeddings , documents ) if not hasattr ( self . hdbscan_model , \"partial_fit\" ): raise ValueError ( \"In order to use `.partial_fit`, the cluster model should have \" \"a `.partial_fit` function.\" ) # Prepare documents if isinstance ( documents , str ): documents = [ documents ] documents = pd . DataFrame ({ \"Document\" : documents , \"ID\" : range ( len ( documents )), \"Topic\" : None }) # Extract embeddings if embeddings is None : if self . topic_representations_ is None : self . embedding_model = select_backend ( self . embedding_model , language = self . language ) embeddings = self . _extract_embeddings ( documents . Document , method = \"document\" , verbose = self . verbose ) else : if self . embedding_model is not None and self . topic_representations_ is None : self . embedding_model = select_backend ( self . embedding_model , language = self . language ) # Reduce dimensionality if self . seed_topic_list is not None and self . embedding_model is not None : y , embeddings = self . _guided_topic_modeling ( embeddings ) umap_embeddings = self . _reduce_dimensionality ( embeddings , y , partial_fit = True ) # Cluster reduced embeddings documents , self . probabilities_ = self . _cluster_embeddings ( umap_embeddings , documents , partial_fit = True ) topics = documents . Topic . to_list () # Map and find new topics if not self . topic_mapper_ : self . topic_mapper_ = TopicMapper ( topics ) mappings = self . topic_mapper_ . get_mappings () new_topics = set ( topics ) . difference ( set ( mappings . keys ())) new_topic_ids = { topic : max ( mappings . values ()) + index + 1 for index , topic in enumerate ( new_topics )} self . topic_mapper_ . add_new_topics ( new_topic_ids ) updated_mappings = self . topic_mapper_ . get_mappings () updated_topics = [ updated_mappings [ topic ] for topic in topics ] documents [ \"Topic\" ] = updated_topics # Add missing topics (topics that were originally created but are now missing) if self . topic_representations_ : missing_topics = set ( self . topic_representations_ . keys ()) . difference ( set ( updated_topics )) for missing_topic in missing_topics : documents . loc [ len ( documents ), :] = [ \" \" , len ( documents ), missing_topic ] else : missing_topics = {} # Prepare documents documents_per_topic = documents . sort_values ( \"Topic\" ) . groupby ([ 'Topic' ], as_index = False ) updated_topics = documents_per_topic . first () . Topic . astype ( int ) documents_per_topic = documents_per_topic . agg ({ 'Document' : ' ' . join }) # Update topic representations self . c_tf_idf_ , updated_words = self . _c_tf_idf ( documents_per_topic , partial_fit = True ) self . topic_representations_ = self . _extract_words_per_topic ( updated_words , documents , self . c_tf_idf_ ) self . _create_topic_vectors () self . topic_labels_ = { key : f \" { key } _\" + \"_\" . join ([ word [ 0 ] for word in values [: 4 ]]) for key , values in self . topic_representations_ . items ()} # Update topic sizes if len ( missing_topics ) > 0 : documents = documents . iloc [: - len ( missing_topics )] if self . topic_sizes_ is None : self . _update_topic_size ( documents ) else : sizes = documents . groupby ([ 'Topic' ], as_index = False ) . count () for _ , row in sizes . iterrows (): topic = int ( row . Topic ) if self . topic_sizes_ . get ( topic ) is not None and topic not in missing_topics : self . topic_sizes_ [ topic ] += int ( row . Document ) elif self . topic_sizes_ . get ( topic ) is None : self . topic_sizes_ [ topic ] = int ( row . Document ) self . topics_ = documents . Topic . astype ( int ) . tolist () return self reduce_outliers ( self , documents , topics , strategy = 'distributions' , probabilities = None , threshold = 0 , embeddings = None , distributions_params = {}) \u00b6 Reduce outliers by merging them with their nearest topic according to one of several strategies. When using HDBSCAN, DBSCAN, or OPTICS, a number of outlier documents might be created that do not fall within any of the created topics. These are labeled as -1. This function allows the user to match outlier documents with their nearest topic using one of the following strategies using the strategy parameter: * \"probabilities\" This uses the soft-clustering as performed by HDBSCAN to find the best matching topic for each outlier document. To use this, make sure to calculate the probabilities beforehand by instantiating BERTopic with calculate_probabilities=True . * \"distributions\" Use the topic distributions, as calculated with .approximate_distribution to find the most frequent topic in each outlier document. You can use the distributions_params variable to tweak the parameters of .approximate_distribution . * \"c-tf-idf\" Calculate the c-TF-IDF representation for each outlier document and find the best matching c-TF-IDF topic representation using cosine similarity. * \"embeddings\" Using the embeddings of each outlier documents, find the best matching topic embedding using cosine similarity. Parameters: Name Type Description Default documents List[str] A list of documents for which we reduce or remove the outliers. required topics List[int] The topics that correspond to the documents required strategy str The strategy used for reducing outliers. Options: * \"probabilities\" This uses the soft-clustering as performed by HDBSCAN to find the best matching topic for each outlier document. * \"distributions\" Use the topic distributions, as calculated with `.approximate_distribution` to find the most frequent topic in each outlier document. * \"c-tf-idf\" Calculate the c-TF-IDF representation for outlier documents and find the best matching c-TF-IDF topic representation. * \"embeddings\" Calculate the embeddings for outlier documents and find the best matching topic embedding. 'distributions' threshold int The threshold for assigning topics to outlier documents. This value represents the minimum probability when strategy=\"probabilities\" . For all other strategies, it represents the minimum similarity. 0 embeddings ndarray The pre-computed embeddings to be used when strategy=\"embeddings\" . If this is None, then it will compute the embeddings for the outlier documents. None distributions_params Mapping[str, Any] The parameters used in .approximate_distribution when using the strategy \"distributions\" . {} Returns: Type Description new_topics The updated topics Usage: The default settings uses the \"distributions\" strategy: new_topics = topic_model . reduce_outliers ( docs , topics ) When you use the \"probabilities\" strategy, make sure to also pass the probabilities as generated through HDBSCAN: from bertopic import BERTopic topic_model = BERTopic ( calculate_probabilities = True ) topics , probs = topic_model . fit_transform ( docs ) new_topics = topic_model . reduce_outliers ( docs , topics , probabilities = probs , strategy = \"probabilities\" ) Source code in bertopic\\_bertopic.py def reduce_outliers ( self , documents : List [ str ], topics : List [ int ], strategy : str = \"distributions\" , probabilities : np . ndarray = None , threshold : int = 0 , embeddings : np . ndarray = None , distributions_params : Mapping [ str , Any ] = {}) -> List [ int ]: \"\"\" Reduce outliers by merging them with their nearest topic according to one of several strategies. When using HDBSCAN, DBSCAN, or OPTICS, a number of outlier documents might be created that do not fall within any of the created topics. These are labeled as -1. This function allows the user to match outlier documents with their nearest topic using one of the following strategies using the `strategy` parameter: * \"probabilities\" This uses the soft-clustering as performed by HDBSCAN to find the best matching topic for each outlier document. To use this, make sure to calculate the `probabilities` beforehand by instantiating BERTopic with `calculate_probabilities=True`. * \"distributions\" Use the topic distributions, as calculated with `.approximate_distribution` to find the most frequent topic in each outlier document. You can use the `distributions_params` variable to tweak the parameters of `.approximate_distribution`. * \"c-tf-idf\" Calculate the c-TF-IDF representation for each outlier document and find the best matching c-TF-IDF topic representation using cosine similarity. * \"embeddings\" Using the embeddings of each outlier documents, find the best matching topic embedding using cosine similarity. Arguments: documents: A list of documents for which we reduce or remove the outliers. topics: The topics that correspond to the documents strategy: The strategy used for reducing outliers. Options: * \"probabilities\" This uses the soft-clustering as performed by HDBSCAN to find the best matching topic for each outlier document. * \"distributions\" Use the topic distributions, as calculated with `.approximate_distribution` to find the most frequent topic in each outlier document. * \"c-tf-idf\" Calculate the c-TF-IDF representation for outlier documents and find the best matching c-TF-IDF topic representation. * \"embeddings\" Calculate the embeddings for outlier documents and find the best matching topic embedding. threshold: The threshold for assigning topics to outlier documents. This value represents the minimum probability when `strategy=\"probabilities\"`. For all other strategies, it represents the minimum similarity. embeddings: The pre-computed embeddings to be used when `strategy=\"embeddings\"`. If this is None, then it will compute the embeddings for the outlier documents. distributions_params: The parameters used in `.approximate_distribution` when using the strategy `\"distributions\"`. Returns: new_topics: The updated topics Usage: The default settings uses the `\"distributions\"` strategy: ```python new_topics = topic_model.reduce_outliers(docs, topics) ``` When you use the `\"probabilities\"` strategy, make sure to also pass the probabilities as generated through HDBSCAN: ```python from bertopic import BERTopic topic_model = BERTopic(calculate_probabilities=True) topics, probs = topic_model.fit_transform(docs) new_topics = topic_model.reduce_outliers(docs, topics, probabilities=probs, strategy=\"probabilities\") ``` \"\"\" # Check correct use of parameters if strategy . lower () == \"probabilities\" and probabilities is None : raise ValueError ( \"Make sure to pass in `probabilities` in order to use the probabilities strategy\" ) # Reduce outliers by extracting most likely topics through the topic-term probability matrix if strategy . lower () == \"probabilities\" : new_topics = [ np . argmax ( prob ) if max ( prob ) >= threshold and topic == - 1 else topic for topic , prob in zip ( topics , probabilities )] # Reduce outliers by extracting most frequent topics through calculating of Topic Distributions elif strategy . lower () == \"distributions\" : outlier_ids = [ index for index , topic in enumerate ( topics ) if topic == - 1 ] outlier_docs = [ documents [ index ] for index in outlier_ids ] topic_distr , _ = self . approximate_distribution ( outlier_docs , min_similarity = threshold , ** distributions_params ) outlier_topics = iter ([ np . argmax ( prob ) if sum ( prob ) > 0 else - 1 for prob in topic_distr ]) new_topics = [ topic if topic != - 1 else next ( outlier_topics ) for topic in topics ] # Reduce outliers by finding the most similar c-TF-IDF representations elif strategy . lower () == \"c-tf-idf\" : outlier_ids = [ index for index , topic in enumerate ( topics ) if topic == - 1 ] outlier_docs = [ documents [ index ] for index in outlier_ids ] # Calculate c-TF-IDF of outlier documents with all topics bow_doc = self . vectorizer_model . transform ( outlier_docs ) c_tf_idf_doc = self . ctfidf_model . transform ( bow_doc ) similarity = cosine_similarity ( c_tf_idf_doc , self . c_tf_idf_ [ self . _outliers :]) # Update topics similarity [ similarity < threshold ] = 0 outlier_topics = iter ([ np . argmax ( sim ) if sum ( sim ) > 0 else - 1 for sim in similarity ]) new_topics = [ topic if topic != - 1 else next ( outlier_topics ) for topic in topics ] # Reduce outliers by finding the most similar topic embeddings elif strategy . lower () == \"embeddings\" : if self . embedding_model is None : raise ValueError ( \"To use this strategy, you will need to pass a model to `embedding_model`\" \"when instantiating BERTopic.\" ) outlier_ids = [ index for index , topic in enumerate ( topics ) if topic == - 1 ] outlier_docs = [ documents [ index ] for index in outlier_ids ] # Extract or calculate embeddings for outlier documents if embeddings is not None : outlier_embeddings = np . array ([ embeddings [ index ] for index in outlier_ids ]) else : outlier_embeddings = self . embedding_model . embed_documents ( outlier_docs ) similarity = cosine_similarity ( outlier_embeddings , self . topic_embeddings_ [ self . _outliers :]) # Update topics similarity [ similarity < threshold ] = 0 outlier_topics = iter ([ np . argmax ( sim ) if sum ( sim ) > 0 else - 1 for sim in similarity ]) new_topics = [ topic if topic != - 1 else next ( outlier_topics ) for topic in topics ] return new_topics reduce_topics ( self , docs , nr_topics = 20 ) \u00b6 Reduce the number of topics to a fixed number of topics or automatically. If nr_topics is a integer, then the number of topics is reduced to nr_topics using AgglomerativeClustering on the cosine distance matrix of the topic embeddings. If nr_topics is \"auto\" , then HDBSCAN is used to automatically reduce the number of topics by running it on the topic embeddings. The topics, their sizes, and representations are updated. Parameters: Name Type Description Default docs List[str] The docs you used when calling either fit or fit_transform required nr_topics Union[int, str] The number of topics you want reduced to 20 Updates topics_ : Assigns topics to their merged representations. probabilities_ : Assigns probabilities to their merged representations. Examples: You can further reduce the topics by passing the documents with its topics and probabilities (if they were calculated): topic_model . reduce_topics ( docs , nr_topics = 30 ) You can then access the updated topics and probabilities with: topics = topic_model . topics_ probabilities = topic_model . probabilities_ Source code in bertopic\\_bertopic.py def reduce_topics ( self , docs : List [ str ], nr_topics : Union [ int , str ] = 20 ) -> None : \"\"\" Reduce the number of topics to a fixed number of topics or automatically. If nr_topics is a integer, then the number of topics is reduced to nr_topics using `AgglomerativeClustering` on the cosine distance matrix of the topic embeddings. If nr_topics is `\"auto\"`, then HDBSCAN is used to automatically reduce the number of topics by running it on the topic embeddings. The topics, their sizes, and representations are updated. Arguments: docs: The docs you used when calling either `fit` or `fit_transform` nr_topics: The number of topics you want reduced to Updates: topics_ : Assigns topics to their merged representations. probabilities_ : Assigns probabilities to their merged representations. Examples: You can further reduce the topics by passing the documents with its topics and probabilities (if they were calculated): ```python topic_model.reduce_topics(docs, nr_topics=30) ``` You can then access the updated topics and probabilities with: ```python topics = topic_model.topics_ probabilities = topic_model.probabilities_ ``` \"\"\" check_is_fitted ( self ) self . nr_topics = nr_topics documents = pd . DataFrame ({ \"Document\" : docs , \"Topic\" : self . topics_ }) # Reduce number of topics documents = self . _reduce_topics ( documents ) self . _merged_topics = None self . _save_representative_docs ( documents ) self . probabilities_ = self . _map_probabilities ( self . probabilities_ ) return self save ( self , path , save_embedding_model = True ) \u00b6 Saves the model to the specified path When saving the model, make sure to also keep track of the versions of dependencies and Python used. Loading and saving the model should be done using the same dependencies and Python. Moreover, models saved in one version of BERTopic should not be loaded in other versions. Parameters: Name Type Description Default path str the location and name of the file you want to save required save_embedding_model bool Whether to save the embedding model in this class as you might have selected a local model or one that is downloaded automatically from the cloud. True Examples: topic_model . save ( \"my_model\" ) or if you do not want the embedding_model to be saved locally: topic_model . save ( \"my_model\" , save_embedding_model = False ) Source code in bertopic\\_bertopic.py def save ( self , path : str , save_embedding_model : bool = True ) -> None : \"\"\" Saves the model to the specified path When saving the model, make sure to also keep track of the versions of dependencies and Python used. Loading and saving the model should be done using the same dependencies and Python. Moreover, models saved in one version of BERTopic should not be loaded in other versions. Arguments: path: the location and name of the file you want to save save_embedding_model: Whether to save the embedding model in this class as you might have selected a local model or one that is downloaded automatically from the cloud. Examples: ```python topic_model.save(\"my_model\") ``` or if you do not want the embedding_model to be saved locally: ```python topic_model.save(\"my_model\", save_embedding_model=False) ``` \"\"\" with open ( path , 'wb' ) as file : # This prevents the vectorizer from being too large in size if `min_df` was # set to a value higher than 1 self . vectorizer_model . stop_words_ = None if not save_embedding_model : embedding_model = self . embedding_model self . embedding_model = None joblib . dump ( self , file ) self . embedding_model = embedding_model else : joblib . dump ( self , file ) set_topic_labels ( self , topic_labels ) \u00b6 Set custom topic labels in your fitted BERTopic model Parameters: Name Type Description Default topic_labels Union[List[str], Mapping[int, str]] If a list of topic labels, it should contain the same number of labels as there are topics. This must be ordered from the topic with the lowest ID to the highest ID, including topic -1 if it exists. If a dictionary of topic ID : topic_label , it can have any number of topics as it will only map the topics found in the dictionary. required Examples: First, we define our topic labels with .get_topic_labels in which we can customize our topic labels: topic_labels = topic_model . get_topic_labels ( nr_words = 2 , topic_prefix = True , word_length = 10 , separator = \", \" ) Then, we pass these topic_labels to our topic model which can be accessed at any time with .custom_labels_ : topic_model . set_topic_labels ( topic_labels ) topic_model . custom_labels_ You might want to change only a few topic labels instead of all of them. To do so, you can pass a dictionary where the keys are the topic IDs and its keys the topic labels: topic_model . set_topic_labels ({ 0 : \"Space\" , 1 : \"Sports\" , 2 : \"Medicine\" }) topic_model . custom_labels_ Source code in bertopic\\_bertopic.py def set_topic_labels ( self , topic_labels : Union [ List [ str ], Mapping [ int , str ]]) -> None : \"\"\" Set custom topic labels in your fitted BERTopic model Arguments: topic_labels: If a list of topic labels, it should contain the same number of labels as there are topics. This must be ordered from the topic with the lowest ID to the highest ID, including topic -1 if it exists. If a dictionary of `topic ID`: `topic_label`, it can have any number of topics as it will only map the topics found in the dictionary. Examples: First, we define our topic labels with `.get_topic_labels` in which we can customize our topic labels: ```python topic_labels = topic_model.get_topic_labels(nr_words=2, topic_prefix=True, word_length=10, separator=\", \") ``` Then, we pass these `topic_labels` to our topic model which can be accessed at any time with `.custom_labels_`: ```python topic_model.set_topic_labels(topic_labels) topic_model.custom_labels_ ``` You might want to change only a few topic labels instead of all of them. To do so, you can pass a dictionary where the keys are the topic IDs and its keys the topic labels: ```python topic_model.set_topic_labels({0: \"Space\", 1: \"Sports\", 2: \"Medicine\"}) topic_model.custom_labels_ ``` \"\"\" unique_topics = sorted ( set ( self . topics_ )) if isinstance ( topic_labels , dict ): if self . custom_labels_ is not None : original_labels = { topic : label for topic , label in zip ( unique_topics , self . custom_labels_ )} else : info = self . get_topic_info () original_labels = dict ( zip ( info . Topic , info . Name )) custom_labels = [ topic_labels . get ( topic ) if topic_labels . get ( topic ) else original_labels [ topic ] for topic in unique_topics ] elif isinstance ( topic_labels , list ): if len ( topic_labels ) == len ( unique_topics ): custom_labels = topic_labels else : raise ValueError ( \"Make sure that `topic_labels` contains the same number \" \"of labels as that there are topics.\" ) self . custom_labels_ = custom_labels topics_over_time ( self , docs , timestamps , nr_bins = None , datetime_format = None , evolution_tuning = True , global_tuning = True ) \u00b6 Create topics over time To create the topics over time, BERTopic needs to be already fitted once. From the fitted models, the c-TF-IDF representations are calculate at each timestamp t. Then, the c-TF-IDF representations at timestamp t are averaged with the global c-TF-IDF representations in order to fine-tune the local representations. Note Make sure to use a limited number of unique timestamps (<100) as the c-TF-IDF representation will be calculated at each single unique timestamp. Having a large number of unique timestamps can take some time to be calculated. Moreover, there aren't many use-cased where you would like to see the difference in topic representations over more than 100 different timestamps. Parameters: Name Type Description Default docs List[str] The documents you used when calling either fit or fit_transform required timestamps Union[List[str], List[int]] The timestamp of each document. This can be either a list of strings or ints. If it is a list of strings, then the datetime format will be automatically inferred. If it is a list of ints, then the documents will be ordered by ascending order. required nr_bins int The number of bins you want to create for the timestamps. The left interval will be chosen as the timestamp. An additional column will be created with the entire interval. None datetime_format str The datetime format of the timestamps if they are strings, eg \u201c%d/%m/%Y\u201d. Set this to None if you want to have it automatically detect the format. See strftime documentation for more information on choices: https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior. None evolution_tuning bool Fine-tune each topic representation at timestamp t by averaging its c-TF-IDF matrix with the c-TF-IDF matrix at timestamp t-1 . This creates evolutionary topic representations. True global_tuning bool Fine-tune each topic representation at timestamp t by averaging its c-TF-IDF matrix with the global c-TF-IDF matrix. Turn this off if you want to prevent words in topic representations that could not be found in the documents at timestamp t . True Returns: Type Description topics_over_time A dataframe that contains the topic, words, and frequency of topic at timestamp t . Examples: The timestamps variable represent the timestamp of each document. If you have over 100 unique timestamps, it is advised to bin the timestamps as shown below: from bertopic import BERTopic topic_model = BERTopic () topics , probs = topic_model . fit_transform ( docs ) topics_over_time = topic_model . topics_over_time ( docs , timestamps , nr_bins = 20 ) Source code in bertopic\\_bertopic.py def topics_over_time ( self , docs : List [ str ], timestamps : Union [ List [ str ], List [ int ]], nr_bins : int = None , datetime_format : str = None , evolution_tuning : bool = True , global_tuning : bool = True ) -> pd . DataFrame : \"\"\" Create topics over time To create the topics over time, BERTopic needs to be already fitted once. From the fitted models, the c-TF-IDF representations are calculate at each timestamp t. Then, the c-TF-IDF representations at timestamp t are averaged with the global c-TF-IDF representations in order to fine-tune the local representations. NOTE: Make sure to use a limited number of unique timestamps (<100) as the c-TF-IDF representation will be calculated at each single unique timestamp. Having a large number of unique timestamps can take some time to be calculated. Moreover, there aren't many use-cased where you would like to see the difference in topic representations over more than 100 different timestamps. Arguments: docs: The documents you used when calling either `fit` or `fit_transform` timestamps: The timestamp of each document. This can be either a list of strings or ints. If it is a list of strings, then the datetime format will be automatically inferred. If it is a list of ints, then the documents will be ordered by ascending order. nr_bins: The number of bins you want to create for the timestamps. The left interval will be chosen as the timestamp. An additional column will be created with the entire interval. datetime_format: The datetime format of the timestamps if they are strings, eg \u201c%d/%m/%Y\u201d. Set this to None if you want to have it automatically detect the format. See strftime documentation for more information on choices: https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior. evolution_tuning: Fine-tune each topic representation at timestamp *t* by averaging its c-TF-IDF matrix with the c-TF-IDF matrix at timestamp *t-1*. This creates evolutionary topic representations. global_tuning: Fine-tune each topic representation at timestamp *t* by averaging its c-TF-IDF matrix with the global c-TF-IDF matrix. Turn this off if you want to prevent words in topic representations that could not be found in the documents at timestamp *t*. Returns: topics_over_time: A dataframe that contains the topic, words, and frequency of topic at timestamp *t*. Examples: The timestamps variable represent the timestamp of each document. If you have over 100 unique timestamps, it is advised to bin the timestamps as shown below: ```python from bertopic import BERTopic topic_model = BERTopic() topics, probs = topic_model.fit_transform(docs) topics_over_time = topic_model.topics_over_time(docs, timestamps, nr_bins=20) ``` \"\"\" check_is_fitted ( self ) check_documents_type ( docs ) documents = pd . DataFrame ({ \"Document\" : docs , \"Topic\" : self . topics_ , \"Timestamps\" : timestamps }) global_c_tf_idf = normalize ( self . c_tf_idf_ , axis = 1 , norm = 'l1' , copy = False ) all_topics = sorted ( list ( documents . Topic . unique ())) all_topics_indices = { topic : index for index , topic in enumerate ( all_topics )} if isinstance ( timestamps [ 0 ], str ): infer_datetime_format = True if not datetime_format else False documents [ \"Timestamps\" ] = pd . to_datetime ( documents [ \"Timestamps\" ], infer_datetime_format = infer_datetime_format , format = datetime_format ) if nr_bins : documents [ \"Bins\" ] = pd . cut ( documents . Timestamps , bins = nr_bins ) documents [ \"Timestamps\" ] = documents . apply ( lambda row : row . Bins . left , 1 ) # Sort documents in chronological order documents = documents . sort_values ( \"Timestamps\" ) timestamps = documents . Timestamps . unique () if len ( timestamps ) > 100 : warnings . warn ( f \"There are more than 100 unique timestamps (i.e., { len ( timestamps ) } ) \" \"which significantly slows down the application. Consider setting `nr_bins` \" \"to a value lower than 100 to speed up calculation. \" ) # For each unique timestamp, create topic representations topics_over_time = [] for index , timestamp in tqdm ( enumerate ( timestamps ), disable = not self . verbose ): # Calculate c-TF-IDF representation for a specific timestamp selection = documents . loc [ documents . Timestamps == timestamp , :] documents_per_topic = selection . groupby ([ 'Topic' ], as_index = False ) . agg ({ 'Document' : ' ' . join , \"Timestamps\" : \"count\" }) c_tf_idf , words = self . _c_tf_idf ( documents_per_topic , fit = False ) if global_tuning or evolution_tuning : c_tf_idf = normalize ( c_tf_idf , axis = 1 , norm = 'l1' , copy = False ) # Fine-tune the c-TF-IDF matrix at timestamp t by averaging it with the c-TF-IDF # matrix at timestamp t-1 if evolution_tuning and index != 0 : current_topics = sorted ( list ( documents_per_topic . Topic . values )) overlapping_topics = sorted ( list ( set ( previous_topics ) . intersection ( set ( current_topics )))) current_overlap_idx = [ current_topics . index ( topic ) for topic in overlapping_topics ] previous_overlap_idx = [ previous_topics . index ( topic ) for topic in overlapping_topics ] c_tf_idf . tolil ()[ current_overlap_idx ] = (( c_tf_idf [ current_overlap_idx ] + previous_c_tf_idf [ previous_overlap_idx ]) / 2.0 ) . tolil () # Fine-tune the timestamp c-TF-IDF representation based on the global c-TF-IDF representation # by simply taking the average of the two if global_tuning : selected_topics = [ all_topics_indices [ topic ] for topic in documents_per_topic . Topic . values ] c_tf_idf = ( global_c_tf_idf [ selected_topics ] + c_tf_idf ) / 2.0 # Extract the words per topic words_per_topic = self . _extract_words_per_topic ( words , selection , c_tf_idf ) topic_frequency = pd . Series ( documents_per_topic . Timestamps . values , index = documents_per_topic . Topic ) . to_dict () # Fill dataframe with results topics_at_timestamp = [( topic , \", \" . join ([ words [ 0 ] for words in values ][: 5 ]), topic_frequency [ topic ], timestamp ) for topic , values in words_per_topic . items ()] topics_over_time . extend ( topics_at_timestamp ) if evolution_tuning : previous_topics = sorted ( list ( documents_per_topic . Topic . values )) previous_c_tf_idf = c_tf_idf . copy () return pd . DataFrame ( topics_over_time , columns = [ \"Topic\" , \"Words\" , \"Frequency\" , \"Timestamp\" ]) topics_per_class ( self , docs , classes , global_tuning = True ) \u00b6 Create topics per class To create the topics per class, BERTopic needs to be already fitted once. From the fitted models, the c-TF-IDF representations are calculate at each class c. Then, the c-TF-IDF representations at class c are averaged with the global c-TF-IDF representations in order to fine-tune the local representations. This can be turned off if the pure representation is needed. Note Make sure to use a limited number of unique classes (<100) as the c-TF-IDF representation will be calculated at each single unique class. Having a large number of unique classes can take some time to be calculated. Parameters: Name Type Description Default docs List[str] The documents you used when calling either fit or fit_transform required classes Union[List[int], List[str]] The class of each document. This can be either a list of strings or ints. required global_tuning bool Fine-tune each topic representation for class c t by averaging its c-TF-IDF matrix with the global c-TF-IDF matrix. Turn this off if you want to prevent words in topic representations that could not be found in the documents for class c. True Returns: Type Description topics_per_class A dataframe that contains the topic, words, and frequency of topics for each class. Examples: from bertopic import BERTopic topic_model = BERTopic () topics , probs = topic_model . fit_transform ( docs ) topics_per_class = topic_model . topics_per_class ( docs , classes ) Source code in bertopic\\_bertopic.py def topics_per_class ( self , docs : List [ str ], classes : Union [ List [ int ], List [ str ]], global_tuning : bool = True ) -> pd . DataFrame : \"\"\" Create topics per class To create the topics per class, BERTopic needs to be already fitted once. From the fitted models, the c-TF-IDF representations are calculate at each class c. Then, the c-TF-IDF representations at class c are averaged with the global c-TF-IDF representations in order to fine-tune the local representations. This can be turned off if the pure representation is needed. NOTE: Make sure to use a limited number of unique classes (<100) as the c-TF-IDF representation will be calculated at each single unique class. Having a large number of unique classes can take some time to be calculated. Arguments: docs: The documents you used when calling either `fit` or `fit_transform` classes: The class of each document. This can be either a list of strings or ints. global_tuning: Fine-tune each topic representation for class c t by averaging its c-TF-IDF matrix with the global c-TF-IDF matrix. Turn this off if you want to prevent words in topic representations that could not be found in the documents for class c. Returns: topics_per_class: A dataframe that contains the topic, words, and frequency of topics for each class. Examples: ```python from bertopic import BERTopic topic_model = BERTopic() topics, probs = topic_model.fit_transform(docs) topics_per_class = topic_model.topics_per_class(docs, classes) ``` \"\"\" documents = pd . DataFrame ({ \"Document\" : docs , \"Topic\" : self . topics_ , \"Class\" : classes }) global_c_tf_idf = normalize ( self . c_tf_idf_ , axis = 1 , norm = 'l1' , copy = False ) # For each unique timestamp, create topic representations topics_per_class = [] for _ , class_ in tqdm ( enumerate ( set ( classes )), disable = not self . verbose ): # Calculate c-TF-IDF representation for a specific timestamp selection = documents . loc [ documents . Class == class_ , :] documents_per_topic = selection . groupby ([ 'Topic' ], as_index = False ) . agg ({ 'Document' : ' ' . join , \"Class\" : \"count\" }) c_tf_idf , words = self . _c_tf_idf ( documents_per_topic , fit = False ) # Fine-tune the timestamp c-TF-IDF representation based on the global c-TF-IDF representation # by simply taking the average of the two if global_tuning : c_tf_idf = normalize ( c_tf_idf , axis = 1 , norm = 'l1' , copy = False ) c_tf_idf = ( global_c_tf_idf [ documents_per_topic . Topic . values + self . _outliers ] + c_tf_idf ) / 2.0 # Extract the words per topic words_per_topic = self . _extract_words_per_topic ( words , selection , c_tf_idf ) topic_frequency = pd . Series ( documents_per_topic . Class . values , index = documents_per_topic . Topic ) . to_dict () # Fill dataframe with results topics_at_class = [( topic , \", \" . join ([ words [ 0 ] for words in values ][: 5 ]), topic_frequency [ topic ], class_ ) for topic , values in words_per_topic . items ()] topics_per_class . extend ( topics_at_class ) topics_per_class = pd . DataFrame ( topics_per_class , columns = [ \"Topic\" , \"Words\" , \"Frequency\" , \"Class\" ]) return topics_per_class transform ( self , documents , embeddings = None ) \u00b6 After having fit a model, use transform to predict new instances Parameters: Name Type Description Default documents Union[str, List[str]] A single document or a list of documents to fit on required embeddings ndarray Pre-trained document embeddings. These can be used instead of the sentence-transformer model. None Returns: Type Description predictions Topic predictions for each documents probabilities: The topic probability distribution which is returned by default. If calculate_probabilities in BERTopic is set to False, then the probabilities are not calculated to speed up computation and decrease memory usage. Examples: from bertopic import BERTopic from sklearn.datasets import fetch_20newsgroups docs = fetch_20newsgroups ( subset = 'all' )[ 'data' ] topic_model = BERTopic () . fit ( docs ) topics , probs = topic_model . transform ( docs ) If you want to use your own embeddings: from bertopic import BERTopic from sklearn.datasets import fetch_20newsgroups from sentence_transformers import SentenceTransformer # Create embeddings docs = fetch_20newsgroups ( subset = 'all' )[ 'data' ] sentence_model = SentenceTransformer ( \"all-MiniLM-L6-v2\" ) embeddings = sentence_model . encode ( docs , show_progress_bar = True ) # Create topic model topic_model = BERTopic () . fit ( docs , embeddings ) topics , probs = topic_model . transform ( docs , embeddings ) Source code in bertopic\\_bertopic.py def transform ( self , documents : Union [ str , List [ str ]], embeddings : np . ndarray = None ) -> Tuple [ List [ int ], np . ndarray ]: \"\"\" After having fit a model, use transform to predict new instances Arguments: documents: A single document or a list of documents to fit on embeddings: Pre-trained document embeddings. These can be used instead of the sentence-transformer model. Returns: predictions: Topic predictions for each documents probabilities: The topic probability distribution which is returned by default. If `calculate_probabilities` in BERTopic is set to False, then the probabilities are not calculated to speed up computation and decrease memory usage. Examples: ```python from bertopic import BERTopic from sklearn.datasets import fetch_20newsgroups docs = fetch_20newsgroups(subset='all')['data'] topic_model = BERTopic().fit(docs) topics, probs = topic_model.transform(docs) ``` If you want to use your own embeddings: ```python from bertopic import BERTopic from sklearn.datasets import fetch_20newsgroups from sentence_transformers import SentenceTransformer # Create embeddings docs = fetch_20newsgroups(subset='all')['data'] sentence_model = SentenceTransformer(\"all-MiniLM-L6-v2\") embeddings = sentence_model.encode(docs, show_progress_bar=True) # Create topic model topic_model = BERTopic().fit(docs, embeddings) topics, probs = topic_model.transform(docs, embeddings) ``` \"\"\" check_is_fitted ( self ) check_embeddings_shape ( embeddings , documents ) if isinstance ( documents , str ): documents = [ documents ] if embeddings is None : embeddings = self . _extract_embeddings ( documents , method = \"document\" , verbose = self . verbose ) umap_embeddings = self . umap_model . transform ( embeddings ) logger . info ( \"Reduced dimensionality\" ) # Extract predictions and probabilities if it is a HDBSCAN-like model if is_supported_hdbscan ( self . hdbscan_model ): predictions , probabilities = hdbscan_delegator ( self . hdbscan_model , \"approximate_predict\" , umap_embeddings ) # Calculate probabilities if self . calculate_probabilities and isinstance ( self . hdbscan_model , hdbscan . HDBSCAN ): probabilities = hdbscan . membership_vector ( self . hdbscan_model , umap_embeddings ) logger . info ( \"Calculated probabilities with HDBSCAN\" ) else : predictions = self . hdbscan_model . predict ( umap_embeddings ) probabilities = None logger . info ( \"Predicted clusters\" ) # Map probabilities and predictions probabilities = self . _map_probabilities ( probabilities , original_topics = True ) predictions = self . _map_predictions ( predictions ) return predictions , probabilities update_topics ( self , docs , topics = None , top_n_words = 10 , n_gram_range = None , vectorizer_model = None , ctfidf_model = None , representation_model = None ) \u00b6 Updates the topic representation by recalculating c-TF-IDF with the new parameters as defined in this function. When you have trained a model and viewed the topics and the words that represent them, you might not be satisfied with the representation. Perhaps you forgot to remove stop_words or you want to try out a different n_gram_range. This function allows you to update the topic representation after they have been formed. Parameters: Name Type Description Default docs List[str] The documents you used when calling either fit or fit_transform required topics List[int] A list of topics where each topic is related to a document in docs . Use this variable to change or map the topics. NOTE: Using a custom list of topic assignments may lead to errors if topic reduction techniques are used afterwards. Make sure that manually assigning topics is the last step in the pipeline None top_n_words int The number of words per topic to extract. Setting this too high can negatively impact topic embeddings as topics are typically best represented by at most 10 words. 10 n_gram_range Tuple[int, int] The n-gram range for the CountVectorizer. None vectorizer_model CountVectorizer Pass in your own CountVectorizer from scikit-learn None ctfidf_model ClassTfidfTransformer Pass in your own c-TF-IDF model to update the representations None representation_model BaseRepresentation Pass in a model that fine-tunes the topic representations calculated through c-TF-IDF. Models from bertopic.representation are supported. None Examples: In order to update the topic representation, you will need to first fit the topic model and extract topics from them. Based on these, you can update the representation: topic_model . update_topics ( docs , n_gram_range = ( 2 , 3 )) You can also use a custom vectorizer to update the representation: from sklearn.feature_extraction.text import CountVectorizer vectorizer_model = CountVectorizer ( ngram_range = ( 1 , 2 ), stop_words = \"english\" ) topic_model . update_topics ( docs , vectorizer_model = vectorizer_model ) You can also use this function to change or map the topics to something else. You can update them as follows: topic_model . update_topics ( docs , my_updated_topics ) Source code in bertopic\\_bertopic.py def update_topics ( self , docs : List [ str ], topics : List [ int ] = None , top_n_words : int = 10 , n_gram_range : Tuple [ int , int ] = None , vectorizer_model : CountVectorizer = None , ctfidf_model : ClassTfidfTransformer = None , representation_model : BaseRepresentation = None ): \"\"\" Updates the topic representation by recalculating c-TF-IDF with the new parameters as defined in this function. When you have trained a model and viewed the topics and the words that represent them, you might not be satisfied with the representation. Perhaps you forgot to remove stop_words or you want to try out a different n_gram_range. This function allows you to update the topic representation after they have been formed. Arguments: docs: The documents you used when calling either `fit` or `fit_transform` topics: A list of topics where each topic is related to a document in `docs`. Use this variable to change or map the topics. NOTE: Using a custom list of topic assignments may lead to errors if topic reduction techniques are used afterwards. Make sure that manually assigning topics is the last step in the pipeline top_n_words: The number of words per topic to extract. Setting this too high can negatively impact topic embeddings as topics are typically best represented by at most 10 words. n_gram_range: The n-gram range for the CountVectorizer. vectorizer_model: Pass in your own CountVectorizer from scikit-learn ctfidf_model: Pass in your own c-TF-IDF model to update the representations representation_model: Pass in a model that fine-tunes the topic representations calculated through c-TF-IDF. Models from `bertopic.representation` are supported. Examples: In order to update the topic representation, you will need to first fit the topic model and extract topics from them. Based on these, you can update the representation: ```python topic_model.update_topics(docs, n_gram_range=(2, 3)) ``` You can also use a custom vectorizer to update the representation: ```python from sklearn.feature_extraction.text import CountVectorizer vectorizer_model = CountVectorizer(ngram_range=(1, 2), stop_words=\"english\") topic_model.update_topics(docs, vectorizer_model=vectorizer_model) ``` You can also use this function to change or map the topics to something else. You can update them as follows: ```python topic_model.update_topics(docs, my_updated_topics) ``` \"\"\" check_is_fitted ( self ) if not n_gram_range : n_gram_range = self . n_gram_range if top_n_words > 100 : warnings . warn ( \"Note that extracting more than 100 words from a sparse \" \"can slow down computation quite a bit.\" ) self . top_n_words = top_n_words self . vectorizer_model = vectorizer_model or CountVectorizer ( ngram_range = n_gram_range ) self . ctfidf_model = ctfidf_model or ClassTfidfTransformer () self . representation_model = representation_model if topics is None : topics = self . topics_ else : warnings . warn ( \"Using a custom list of topic assignments may lead to errors if \" \"topic reduction techniques are used afterwards. Make sure that \" \"manually assigning topics is the last step in the pipeline.\" ) # Extract words documents = pd . DataFrame ({ \"Document\" : docs , \"Topic\" : topics }) documents_per_topic = documents . groupby ([ 'Topic' ], as_index = False ) . agg ({ 'Document' : ' ' . join }) self . c_tf_idf_ , words = self . _c_tf_idf ( documents_per_topic ) self . topic_representations_ = self . _extract_words_per_topic ( words , documents ) self . _create_topic_vectors () self . topic_labels_ = { key : f \" { key } _\" + \"_\" . join ([ word [ 0 ] for word in values [: 4 ]]) for key , values in self . topic_representations_ . items ()} self . _update_topic_size ( documents ) visualize_approximate_distribution ( self , document , topic_token_distribution , normalize = False ) \u00b6 Visualize the topic distribution calculated by .approximate_topic_distribution on a token level. Thereby indicating the extend to which a certain word or phrases belong to a specific topic. The assumption here is that a single word can belong to multiple similar topics and as such give information about the broader set of topics within a single document. Parameters: Name Type Description Default topic_model A fitted BERTopic instance. required document str The document for which you want to visualize the approximated topic distribution. required topic_token_distribution ndarray The topic-token distribution of the document as extracted by .approximate_topic_distribution required normalize bool Whether to normalize, between 0 and 1 (summing to 1), the topic distribution values. False Returns: Type Description df A stylized dataframe indicating the best fitting topics for each token. Examples: # Calculate the topic distributions on a token level # Note that we need to have `calculate_token_level=True` topic_distr , topic_token_distr = topic_model . approximate_distribution ( docs , calculate_token_level = True ) # Visualize the approximated topic distributions df = topic_model . visualize_approximate_distribution ( docs [ 0 ], topic_token_distr [ 0 ]) df To revert this stylized dataframe back to a regular dataframe, you can run the following: df . data . columns = [ column . strip () for column in df . data . columns ] df = df . data Source code in bertopic\\_bertopic.py def visualize_approximate_distribution ( self , document : str , topic_token_distribution : np . ndarray , normalize : bool = False ): \"\"\" Visualize the topic distribution calculated by `.approximate_topic_distribution` on a token level. Thereby indicating the extend to which a certain word or phrases belong to a specific topic. The assumption here is that a single word can belong to multiple similar topics and as such give information about the broader set of topics within a single document. Arguments: topic_model: A fitted BERTopic instance. document: The document for which you want to visualize the approximated topic distribution. topic_token_distribution: The topic-token distribution of the document as extracted by `.approximate_topic_distribution` normalize: Whether to normalize, between 0 and 1 (summing to 1), the topic distribution values. Returns: df: A stylized dataframe indicating the best fitting topics for each token. Examples: ```python # Calculate the topic distributions on a token level # Note that we need to have `calculate_token_level=True` topic_distr, topic_token_distr = topic_model.approximate_distribution( docs, calculate_token_level=True ) # Visualize the approximated topic distributions df = topic_model.visualize_approximate_distribution(docs[0], topic_token_distr[0]) df ``` To revert this stylized dataframe back to a regular dataframe, you can run the following: ```python df.data.columns = [column.strip() for column in df.data.columns] df = df.data ``` \"\"\" check_is_fitted ( self ) return plotting . visualize_approximate_distribution ( self , document = document , topic_token_distribution = topic_token_distribution , normalize = normalize ) visualize_barchart ( self , topics = None , top_n_topics = 8 , n_words = 5 , custom_labels = False , title = 'Topic Word Scores' , width = 250 , height = 250 ) \u00b6 Visualize a barchart of selected topics Parameters: Name Type Description Default topics List[int] A selection of topics to visualize. None top_n_topics int Only select the top n most frequent topics. 8 n_words int Number of words to show in a topic 5 custom_labels bool Whether to use custom topic labels that were defined using topic_model.set_topic_labels . False title str Title of the plot. 'Topic Word Scores' width int The width of each figure. 250 height int The height of each figure. 250 Returns: Type Description fig A plotly figure Examples: To visualize the barchart of selected topics simply run: topic_model . visualize_barchart () Or if you want to save the resulting figure: fig = topic_model . visualize_barchart () fig . write_html ( \"path/to/file.html\" ) Source code in bertopic\\_bertopic.py def visualize_barchart ( self , topics : List [ int ] = None , top_n_topics : int = 8 , n_words : int = 5 , custom_labels : bool = False , title : str = \"Topic Word Scores\" , width : int = 250 , height : int = 250 ) -> go . Figure : \"\"\" Visualize a barchart of selected topics Arguments: topics: A selection of topics to visualize. top_n_topics: Only select the top n most frequent topics. n_words: Number of words to show in a topic custom_labels: Whether to use custom topic labels that were defined using `topic_model.set_topic_labels`. title: Title of the plot. width: The width of each figure. height: The height of each figure. Returns: fig: A plotly figure Examples: To visualize the barchart of selected topics simply run: ```python topic_model.visualize_barchart() ``` Or if you want to save the resulting figure: ```python fig = topic_model.visualize_barchart() fig.write_html(\"path/to/file.html\") ``` \"\"\" check_is_fitted ( self ) return plotting . visualize_barchart ( self , topics = topics , top_n_topics = top_n_topics , n_words = n_words , custom_labels = custom_labels , title = title , width = width , height = height ) visualize_distribution ( self , probabilities , min_probability = 0.015 , custom_labels = False , title = '<b>Topic Probability Distribution</b>' , width = 800 , height = 600 ) \u00b6 Visualize the distribution of topic probabilities Parameters: Name Type Description Default probabilities ndarray An array of probability scores required min_probability float The minimum probability score to visualize. All others are ignored. 0.015 custom_labels bool Whether to use custom topic labels that were defined using topic_model.set_topic_labels . False title str Title of the plot. '<b>Topic Probability Distribution</b>' width int The width of the figure. 800 height int The height of the figure. 600 Examples: Make sure to fit the model before and only input the probabilities of a single document: topic_model . visualize_distribution ( topic_model . probabilities_ [ 0 ]) Or if you want to save the resulting figure: fig = topic_model . visualize_distribution ( topic_model . probabilities_ [ 0 ]) fig . write_html ( \"path/to/file.html\" ) Source code in bertopic\\_bertopic.py def visualize_distribution ( self , probabilities : np . ndarray , min_probability : float = 0.015 , custom_labels : bool = False , title : str = \"<b>Topic Probability Distribution</b>\" , width : int = 800 , height : int = 600 ) -> go . Figure : \"\"\" Visualize the distribution of topic probabilities Arguments: probabilities: An array of probability scores min_probability: The minimum probability score to visualize. All others are ignored. custom_labels: Whether to use custom topic labels that were defined using `topic_model.set_topic_labels`. title: Title of the plot. width: The width of the figure. height: The height of the figure. Examples: Make sure to fit the model before and only input the probabilities of a single document: ```python topic_model.visualize_distribution(topic_model.probabilities_[0]) ``` Or if you want to save the resulting figure: ```python fig = topic_model.visualize_distribution(topic_model.probabilities_[0]) fig.write_html(\"path/to/file.html\") ``` \"\"\" check_is_fitted ( self ) return plotting . visualize_distribution ( self , probabilities = probabilities , min_probability = min_probability , custom_labels = custom_labels , title = title , width = width , height = height ) visualize_documents ( self , docs , topics = None , embeddings = None , reduced_embeddings = None , sample = None , hide_annotations = False , hide_document_hover = False , custom_labels = False , title = '<b>Documents and Topics</b>' , width = 1200 , height = 750 ) \u00b6 Visualize documents and their topics in 2D Parameters: Name Type Description Default topic_model A fitted BERTopic instance. required docs List[str] The documents you used when calling either fit or fit_transform required topics List[int] A selection of topics to visualize. Not to be confused with the topics that you get from .fit_transform . For example, if you want to visualize only topics 1 through 5: topics = [1, 2, 3, 4, 5] . None embeddings ndarray The embeddings of all documents in docs . None reduced_embeddings ndarray The 2D reduced embeddings of all documents in docs . None sample float The percentage of documents in each topic that you would like to keep. Value can be between 0 and 1. Setting this value to, for example, 0.1 (10% of documents in each topic) makes it easier to visualize millions of documents as a subset is chosen. None hide_annotations bool Hide the names of the traces on top of each cluster. False hide_document_hover bool Hide the content of the documents when hovering over specific points. Helps to speed up generation of visualization. False custom_labels bool Whether to use custom topic labels that were defined using topic_model.set_topic_labels . False title str Title of the plot. '<b>Documents and Topics</b>' width int The width of the figure. 1200 height int The height of the figure. 750 Examples: To visualize the topics simply run: topic_model . visualize_documents ( docs ) Do note that this re-calculates the embeddings and reduces them to 2D. The advised and prefered pipeline for using this function is as follows: from sklearn.datasets import fetch_20newsgroups from sentence_transformers import SentenceTransformer from bertopic import BERTopic from umap import UMAP # Prepare embeddings docs = fetch_20newsgroups ( subset = 'all' , remove = ( 'headers' , 'footers' , 'quotes' ))[ 'data' ] sentence_model = SentenceTransformer ( \"all-MiniLM-L6-v2\" ) embeddings = sentence_model . encode ( docs , show_progress_bar = False ) # Train BERTopic topic_model = BERTopic () . fit ( docs , embeddings ) # Reduce dimensionality of embeddings, this step is optional # reduced_embeddings = UMAP(n_neighbors=10, n_components=2, min_dist=0.0, metric='cosine').fit_transform(embeddings) # Run the visualization with the original embeddings topic_model . visualize_documents ( docs , embeddings = embeddings ) # Or, if you have reduced the original embeddings already: topic_model . visualize_documents ( docs , reduced_embeddings = reduced_embeddings ) Or if you want to save the resulting figure: fig = topic_model . visualize_documents ( docs , reduced_embeddings = reduced_embeddings ) fig . write_html ( \"path/to/file.html\" ) Source code in bertopic\\_bertopic.py def visualize_documents ( self , docs : List [ str ], topics : List [ int ] = None , embeddings : np . ndarray = None , reduced_embeddings : np . ndarray = None , sample : float = None , hide_annotations : bool = False , hide_document_hover : bool = False , custom_labels : bool = False , title : str = \"<b>Documents and Topics</b>\" , width : int = 1200 , height : int = 750 ) -> go . Figure : \"\"\" Visualize documents and their topics in 2D Arguments: topic_model: A fitted BERTopic instance. docs: The documents you used when calling either `fit` or `fit_transform` topics: A selection of topics to visualize. Not to be confused with the topics that you get from `.fit_transform`. For example, if you want to visualize only topics 1 through 5: `topics = [1, 2, 3, 4, 5]`. embeddings: The embeddings of all documents in `docs`. reduced_embeddings: The 2D reduced embeddings of all documents in `docs`. sample: The percentage of documents in each topic that you would like to keep. Value can be between 0 and 1. Setting this value to, for example, 0.1 (10% of documents in each topic) makes it easier to visualize millions of documents as a subset is chosen. hide_annotations: Hide the names of the traces on top of each cluster. hide_document_hover: Hide the content of the documents when hovering over specific points. Helps to speed up generation of visualization. custom_labels: Whether to use custom topic labels that were defined using `topic_model.set_topic_labels`. title: Title of the plot. width: The width of the figure. height: The height of the figure. Examples: To visualize the topics simply run: ```python topic_model.visualize_documents(docs) ``` Do note that this re-calculates the embeddings and reduces them to 2D. The advised and prefered pipeline for using this function is as follows: ```python from sklearn.datasets import fetch_20newsgroups from sentence_transformers import SentenceTransformer from bertopic import BERTopic from umap import UMAP # Prepare embeddings docs = fetch_20newsgroups(subset='all', remove=('headers', 'footers', 'quotes'))['data'] sentence_model = SentenceTransformer(\"all-MiniLM-L6-v2\") embeddings = sentence_model.encode(docs, show_progress_bar=False) # Train BERTopic topic_model = BERTopic().fit(docs, embeddings) # Reduce dimensionality of embeddings, this step is optional # reduced_embeddings = UMAP(n_neighbors=10, n_components=2, min_dist=0.0, metric='cosine').fit_transform(embeddings) # Run the visualization with the original embeddings topic_model.visualize_documents(docs, embeddings=embeddings) # Or, if you have reduced the original embeddings already: topic_model.visualize_documents(docs, reduced_embeddings=reduced_embeddings) ``` Or if you want to save the resulting figure: ```python fig = topic_model.visualize_documents(docs, reduced_embeddings=reduced_embeddings) fig.write_html(\"path/to/file.html\") ``` <iframe src=\"../getting_started/visualization/documents.html\" style=\"width:1000px; height: 800px; border: 0px;\"\"></iframe> \"\"\" check_is_fitted ( self ) return plotting . visualize_documents ( self , docs = docs , topics = topics , embeddings = embeddings , reduced_embeddings = reduced_embeddings , sample = sample , hide_annotations = hide_annotations , hide_document_hover = hide_document_hover , custom_labels = custom_labels , title = title , width = width , height = height ) visualize_heatmap ( self , topics = None , top_n_topics = None , n_clusters = None , custom_labels = False , title = '<b>Similarity Matrix</b>' , width = 800 , height = 800 ) \u00b6 Visualize a heatmap of the topic's similarity matrix Based on the cosine similarity matrix between topic embeddings, a heatmap is created showing the similarity between topics. Parameters: Name Type Description Default topics List[int] A selection of topics to visualize. None top_n_topics int Only select the top n most frequent topics. None n_clusters int Create n clusters and order the similarity matrix by those clusters. None custom_labels bool Whether to use custom topic labels that were defined using topic_model.set_topic_labels . False title str Title of the plot. '<b>Similarity Matrix</b>' width int The width of the figure. 800 height int The height of the figure. 800 Returns: Type Description fig A plotly figure Examples: To visualize the similarity matrix of topics simply run: topic_model . visualize_heatmap () Or if you want to save the resulting figure: fig = topic_model . visualize_heatmap () fig . write_html ( \"path/to/file.html\" ) Source code in bertopic\\_bertopic.py def visualize_heatmap ( self , topics : List [ int ] = None , top_n_topics : int = None , n_clusters : int = None , custom_labels : bool = False , title : str = \"<b>Similarity Matrix</b>\" , width : int = 800 , height : int = 800 ) -> go . Figure : \"\"\" Visualize a heatmap of the topic's similarity matrix Based on the cosine similarity matrix between topic embeddings, a heatmap is created showing the similarity between topics. Arguments: topics: A selection of topics to visualize. top_n_topics: Only select the top n most frequent topics. n_clusters: Create n clusters and order the similarity matrix by those clusters. custom_labels: Whether to use custom topic labels that were defined using `topic_model.set_topic_labels`. title: Title of the plot. width: The width of the figure. height: The height of the figure. Returns: fig: A plotly figure Examples: To visualize the similarity matrix of topics simply run: ```python topic_model.visualize_heatmap() ``` Or if you want to save the resulting figure: ```python fig = topic_model.visualize_heatmap() fig.write_html(\"path/to/file.html\") ``` \"\"\" check_is_fitted ( self ) return plotting . visualize_heatmap ( self , topics = topics , top_n_topics = top_n_topics , n_clusters = n_clusters , custom_labels = custom_labels , title = title , width = width , height = height ) visualize_hierarchical_documents ( self , docs , hierarchical_topics , topics = None , embeddings = None , reduced_embeddings = None , sample = None , hide_annotations = False , hide_document_hover = True , nr_levels = 10 , custom_labels = False , title = '<b>Hierarchical Documents and Topics</b>' , width = 1200 , height = 750 ) \u00b6 Visualize documents and their topics in 2D at different levels of hierarchy Parameters: Name Type Description Default docs List[str] The documents you used when calling either fit or fit_transform required hierarchical_topics DataFrame A dataframe that contains a hierarchy of topics represented by their parents and their children required topics List[int] A selection of topics to visualize. Not to be confused with the topics that you get from .fit_transform . For example, if you want to visualize only topics 1 through 5: topics = [1, 2, 3, 4, 5] . None embeddings ndarray The embeddings of all documents in docs . None reduced_embeddings ndarray The 2D reduced embeddings of all documents in docs . None sample Union[float, int] The percentage of documents in each topic that you would like to keep. Value can be between 0 and 1. Setting this value to, for example, 0.1 (10% of documents in each topic) makes it easier to visualize millions of documents as a subset is chosen. None hide_annotations bool Hide the names of the traces on top of each cluster. False hide_document_hover bool Hide the content of the documents when hovering over specific points. Helps to speed up generation of visualizations. True nr_levels int The number of levels to be visualized in the hierarchy. First, the distances in hierarchical_topics.Distance are split in nr_levels lists of distances with equal length. Then, for each list of distances, the merged topics are selected that have a distance less or equal to the maximum distance of the selected list of distances. NOTE: To get all possible merged steps, make sure that nr_levels is equal to the length of hierarchical_topics . 10 custom_labels bool Whether to use custom topic labels that were defined using topic_model.set_topic_labels . NOTE: Custom labels are only generated for the original un-merged topics. False title str Title of the plot. '<b>Hierarchical Documents and Topics</b>' width int The width of the figure. 1200 height int The height of the figure. 750 Examples: To visualize the topics simply run: topic_model . visualize_hierarchical_documents ( docs , hierarchical_topics ) Do note that this re-calculates the embeddings and reduces them to 2D. The advised and prefered pipeline for using this function is as follows: from sklearn.datasets import fetch_20newsgroups from sentence_transformers import SentenceTransformer from bertopic import BERTopic from umap import UMAP # Prepare embeddings docs = fetch_20newsgroups ( subset = 'all' , remove = ( 'headers' , 'footers' , 'quotes' ))[ 'data' ] sentence_model = SentenceTransformer ( \"all-MiniLM-L6-v2\" ) embeddings = sentence_model . encode ( docs , show_progress_bar = False ) # Train BERTopic and extract hierarchical topics topic_model = BERTopic () . fit ( docs , embeddings ) hierarchical_topics = topic_model . hierarchical_topics ( docs ) # Reduce dimensionality of embeddings, this step is optional # reduced_embeddings = UMAP(n_neighbors=10, n_components=2, min_dist=0.0, metric='cosine').fit_transform(embeddings) # Run the visualization with the original embeddings topic_model . visualize_hierarchical_documents ( docs , hierarchical_topics , embeddings = embeddings ) # Or, if you have reduced the original embeddings already: topic_model . visualize_hierarchical_documents ( docs , hierarchical_topics , reduced_embeddings = reduced_embeddings ) Or if you want to save the resulting figure: fig = topic_model . visualize_hierarchical_documents ( docs , hierarchical_topics , reduced_embeddings = reduced_embeddings ) fig . write_html ( \"path/to/file.html\" ) Source code in bertopic\\_bertopic.py def visualize_hierarchical_documents ( self , docs : List [ str ], hierarchical_topics : pd . DataFrame , topics : List [ int ] = None , embeddings : np . ndarray = None , reduced_embeddings : np . ndarray = None , sample : Union [ float , int ] = None , hide_annotations : bool = False , hide_document_hover : bool = True , nr_levels : int = 10 , custom_labels : bool = False , title : str = \"<b>Hierarchical Documents and Topics</b>\" , width : int = 1200 , height : int = 750 ) -> go . Figure : \"\"\" Visualize documents and their topics in 2D at different levels of hierarchy Arguments: docs: The documents you used when calling either `fit` or `fit_transform` hierarchical_topics: A dataframe that contains a hierarchy of topics represented by their parents and their children topics: A selection of topics to visualize. Not to be confused with the topics that you get from `.fit_transform`. For example, if you want to visualize only topics 1 through 5: `topics = [1, 2, 3, 4, 5]`. embeddings: The embeddings of all documents in `docs`. reduced_embeddings: The 2D reduced embeddings of all documents in `docs`. sample: The percentage of documents in each topic that you would like to keep. Value can be between 0 and 1. Setting this value to, for example, 0.1 (10% of documents in each topic) makes it easier to visualize millions of documents as a subset is chosen. hide_annotations: Hide the names of the traces on top of each cluster. hide_document_hover: Hide the content of the documents when hovering over specific points. Helps to speed up generation of visualizations. nr_levels: The number of levels to be visualized in the hierarchy. First, the distances in `hierarchical_topics.Distance` are split in `nr_levels` lists of distances with equal length. Then, for each list of distances, the merged topics are selected that have a distance less or equal to the maximum distance of the selected list of distances. NOTE: To get all possible merged steps, make sure that `nr_levels` is equal to the length of `hierarchical_topics`. custom_labels: Whether to use custom topic labels that were defined using `topic_model.set_topic_labels`. NOTE: Custom labels are only generated for the original un-merged topics. title: Title of the plot. width: The width of the figure. height: The height of the figure. Examples: To visualize the topics simply run: ```python topic_model.visualize_hierarchical_documents(docs, hierarchical_topics) ``` Do note that this re-calculates the embeddings and reduces them to 2D. The advised and prefered pipeline for using this function is as follows: ```python from sklearn.datasets import fetch_20newsgroups from sentence_transformers import SentenceTransformer from bertopic import BERTopic from umap import UMAP # Prepare embeddings docs = fetch_20newsgroups(subset='all', remove=('headers', 'footers', 'quotes'))['data'] sentence_model = SentenceTransformer(\"all-MiniLM-L6-v2\") embeddings = sentence_model.encode(docs, show_progress_bar=False) # Train BERTopic and extract hierarchical topics topic_model = BERTopic().fit(docs, embeddings) hierarchical_topics = topic_model.hierarchical_topics(docs) # Reduce dimensionality of embeddings, this step is optional # reduced_embeddings = UMAP(n_neighbors=10, n_components=2, min_dist=0.0, metric='cosine').fit_transform(embeddings) # Run the visualization with the original embeddings topic_model.visualize_hierarchical_documents(docs, hierarchical_topics, embeddings=embeddings) # Or, if you have reduced the original embeddings already: topic_model.visualize_hierarchical_documents(docs, hierarchical_topics, reduced_embeddings=reduced_embeddings) ``` Or if you want to save the resulting figure: ```python fig = topic_model.visualize_hierarchical_documents(docs, hierarchical_topics, reduced_embeddings=reduced_embeddings) fig.write_html(\"path/to/file.html\") ``` <iframe src=\"../getting_started/visualization/hierarchical_documents.html\" style=\"width:1000px; height: 770px; border: 0px;\"\"></iframe> \"\"\" check_is_fitted ( self ) return plotting . visualize_hierarchical_documents ( self , docs = docs , hierarchical_topics = hierarchical_topics , topics = topics , embeddings = embeddings , reduced_embeddings = reduced_embeddings , sample = sample , hide_annotations = hide_annotations , hide_document_hover = hide_document_hover , nr_levels = nr_levels , custom_labels = custom_labels , title = title , width = width , height = height ) visualize_hierarchy ( self , orientation = 'left' , topics = None , top_n_topics = None , custom_labels = False , title = '<b>Hierarchical Clustering</b>' , width = 1000 , height = 600 , hierarchical_topics = None , linkage_function = None , distance_function = None , color_threshold = 1 ) \u00b6 Visualize a hierarchical structure of the topics A ward linkage function is used to perform the hierarchical clustering based on the cosine distance matrix between topic embeddings. Parameters: Name Type Description Default topic_model A fitted BERTopic instance. required orientation str The orientation of the figure. Either 'left' or 'bottom' 'left' topics List[int] A selection of topics to visualize None top_n_topics int Only select the top n most frequent topics None custom_labels bool Whether to use custom topic labels that were defined using topic_model.set_topic_labels . NOTE: Custom labels are only generated for the original un-merged topics. False title str Title of the plot. '<b>Hierarchical Clustering</b>' width int The width of the figure. Only works if orientation is set to 'left' 1000 height int The height of the figure. Only works if orientation is set to 'bottom' 600 hierarchical_topics DataFrame A dataframe that contains a hierarchy of topics represented by their parents and their children. NOTE: The hierarchical topic names are only visualized if both topics and top_n_topics are not set. None linkage_function Callable[[scipy.sparse._csr.csr_matrix], numpy.ndarray] The linkage function to use. Default is: lambda x: sch.linkage(x, 'ward', optimal_ordering=True) NOTE: Make sure to use the same linkage_function as used in topic_model.hierarchical_topics . None distance_function Callable[[scipy.sparse._csr.csr_matrix], scipy.sparse._csr.csr_matrix] The distance function to use on the c-TF-IDF matrix. Default is: lambda x: 1 - cosine_similarity(x) NOTE: Make sure to use the same distance_function as used in topic_model.hierarchical_topics . None color_threshold int Value at which the separation of clusters will be made which will result in different colors for different clusters. A higher value will typically lead in less colored clusters. 1 Returns: Type Description fig A plotly figure Examples: To visualize the hierarchical structure of topics simply run: topic_model . visualize_hierarchy () If you also want the labels visualized of hierarchical topics, run the following: # Extract hierarchical topics and their representations hierarchical_topics = topic_model . hierarchical_topics ( docs ) # Visualize these representations topic_model . visualize_hierarchy ( hierarchical_topics = hierarchical_topics ) If you want to save the resulting figure: fig = topic_model . visualize_hierarchy () fig . write_html ( \"path/to/file.html\" ) Source code in bertopic\\_bertopic.py def visualize_hierarchy ( self , orientation : str = \"left\" , topics : List [ int ] = None , top_n_topics : int = None , custom_labels : bool = False , title : str = \"<b>Hierarchical Clustering</b>\" , width : int = 1000 , height : int = 600 , hierarchical_topics : pd . DataFrame = None , linkage_function : Callable [[ csr_matrix ], np . ndarray ] = None , distance_function : Callable [[ csr_matrix ], csr_matrix ] = None , color_threshold : int = 1 ) -> go . Figure : \"\"\" Visualize a hierarchical structure of the topics A ward linkage function is used to perform the hierarchical clustering based on the cosine distance matrix between topic embeddings. Arguments: topic_model: A fitted BERTopic instance. orientation: The orientation of the figure. Either 'left' or 'bottom' topics: A selection of topics to visualize top_n_topics: Only select the top n most frequent topics custom_labels: Whether to use custom topic labels that were defined using `topic_model.set_topic_labels`. NOTE: Custom labels are only generated for the original un-merged topics. title: Title of the plot. width: The width of the figure. Only works if orientation is set to 'left' height: The height of the figure. Only works if orientation is set to 'bottom' hierarchical_topics: A dataframe that contains a hierarchy of topics represented by their parents and their children. NOTE: The hierarchical topic names are only visualized if both `topics` and `top_n_topics` are not set. linkage_function: The linkage function to use. Default is: `lambda x: sch.linkage(x, 'ward', optimal_ordering=True)` NOTE: Make sure to use the same `linkage_function` as used in `topic_model.hierarchical_topics`. distance_function: The distance function to use on the c-TF-IDF matrix. Default is: `lambda x: 1 - cosine_similarity(x)` NOTE: Make sure to use the same `distance_function` as used in `topic_model.hierarchical_topics`. color_threshold: Value at which the separation of clusters will be made which will result in different colors for different clusters. A higher value will typically lead in less colored clusters. Returns: fig: A plotly figure Examples: To visualize the hierarchical structure of topics simply run: ```python topic_model.visualize_hierarchy() ``` If you also want the labels visualized of hierarchical topics, run the following: ```python # Extract hierarchical topics and their representations hierarchical_topics = topic_model.hierarchical_topics(docs) # Visualize these representations topic_model.visualize_hierarchy(hierarchical_topics=hierarchical_topics) ``` If you want to save the resulting figure: ```python fig = topic_model.visualize_hierarchy() fig.write_html(\"path/to/file.html\") ``` <iframe src=\"../getting_started/visualization/hierarchy.html\" style=\"width:1000px; height: 680px; border: 0px;\"\"></iframe> \"\"\" check_is_fitted ( self ) return plotting . visualize_hierarchy ( self , orientation = orientation , topics = topics , top_n_topics = top_n_topics , custom_labels = custom_labels , title = title , width = width , height = height , hierarchical_topics = hierarchical_topics , linkage_function = linkage_function , distance_function = distance_function , color_threshold = color_threshold ) visualize_term_rank ( self , topics = None , log_scale = False , custom_labels = False , title = '<b>Term score decline per Topic</b>' , width = 800 , height = 500 ) \u00b6 Visualize the ranks of all terms across all topics Each topic is represented by a set of words. These words, however, do not all equally represent the topic. This visualization shows how many words are needed to represent a topic and at which point the beneficial effect of adding words starts to decline. Parameters: Name Type Description Default topics List[int] A selection of topics to visualize. These will be colored red where all others will be colored black. None log_scale bool Whether to represent the ranking on a log scale False custom_labels bool Whether to use custom topic labels that were defined using topic_model.set_topic_labels . False title str Title of the plot. '<b>Term score decline per Topic</b>' width int The width of the figure. 800 height int The height of the figure. 500 Returns: Type Description fig A plotly figure Examples: To visualize the ranks of all words across all topics simply run: topic_model . visualize_term_rank () Or if you want to save the resulting figure: fig = topic_model . visualize_term_rank () fig . write_html ( \"path/to/file.html\" ) Reference: This visualization was heavily inspired by the \"Term Probability Decline\" visualization found in an analysis by the amazing tmtoolkit . Reference to that specific analysis can be found here . Source code in bertopic\\_bertopic.py def visualize_term_rank ( self , topics : List [ int ] = None , log_scale : bool = False , custom_labels : bool = False , title : str = \"<b>Term score decline per Topic</b>\" , width : int = 800 , height : int = 500 ) -> go . Figure : \"\"\" Visualize the ranks of all terms across all topics Each topic is represented by a set of words. These words, however, do not all equally represent the topic. This visualization shows how many words are needed to represent a topic and at which point the beneficial effect of adding words starts to decline. Arguments: topics: A selection of topics to visualize. These will be colored red where all others will be colored black. log_scale: Whether to represent the ranking on a log scale custom_labels: Whether to use custom topic labels that were defined using `topic_model.set_topic_labels`. title: Title of the plot. width: The width of the figure. height: The height of the figure. Returns: fig: A plotly figure Examples: To visualize the ranks of all words across all topics simply run: ```python topic_model.visualize_term_rank() ``` Or if you want to save the resulting figure: ```python fig = topic_model.visualize_term_rank() fig.write_html(\"path/to/file.html\") ``` Reference: This visualization was heavily inspired by the \"Term Probability Decline\" visualization found in an analysis by the amazing [tmtoolkit](https://tmtoolkit.readthedocs.io/). Reference to that specific analysis can be found [here](https://wzbsocialsciencecenter.github.io/tm_corona/tm_analysis.html). \"\"\" check_is_fitted ( self ) return plotting . visualize_term_rank ( self , topics = topics , log_scale = log_scale , custom_labels = custom_labels , title = title , width = width , height = height ) visualize_topics ( self , topics = None , top_n_topics = None , custom_labels = False , title = '<b>Intertopic Distance Map</b>' , width = 650 , height = 650 ) \u00b6 Visualize topics, their sizes, and their corresponding words This visualization is highly inspired by LDAvis, a great visualization technique typically reserved for LDA. Parameters: Name Type Description Default topics List[int] A selection of topics to visualize None top_n_topics int Only select the top n most frequent topics None custom_labels bool Whether to use custom topic labels that were defined using topic_model.set_topic_labels . False title str Title of the plot. '<b>Intertopic Distance Map</b>' width int The width of the figure. 650 height int The height of the figure. 650 Examples: To visualize the topics simply run: topic_model . visualize_topics () Or if you want to save the resulting figure: fig = topic_model . visualize_topics () fig . write_html ( \"path/to/file.html\" ) Source code in bertopic\\_bertopic.py def visualize_topics ( self , topics : List [ int ] = None , top_n_topics : int = None , custom_labels : bool = False , title : str = \"<b>Intertopic Distance Map</b>\" , width : int = 650 , height : int = 650 ) -> go . Figure : \"\"\" Visualize topics, their sizes, and their corresponding words This visualization is highly inspired by LDAvis, a great visualization technique typically reserved for LDA. Arguments: topics: A selection of topics to visualize top_n_topics: Only select the top n most frequent topics custom_labels: Whether to use custom topic labels that were defined using `topic_model.set_topic_labels`. title: Title of the plot. width: The width of the figure. height: The height of the figure. Examples: To visualize the topics simply run: ```python topic_model.visualize_topics() ``` Or if you want to save the resulting figure: ```python fig = topic_model.visualize_topics() fig.write_html(\"path/to/file.html\") ``` \"\"\" check_is_fitted ( self ) return plotting . visualize_topics ( self , topics = topics , top_n_topics = top_n_topics , custom_labels = custom_labels , title = title , width = width , height = height ) visualize_topics_over_time ( self , topics_over_time , top_n_topics = None , topics = None , normalize_frequency = False , custom_labels = False , title = '<b>Topics over Time</b>' , width = 1250 , height = 450 ) \u00b6 Visualize topics over time Parameters: Name Type Description Default topics_over_time DataFrame The topics you would like to be visualized with the corresponding topic representation required top_n_topics int To visualize the most frequent topics instead of all None topics List[int] Select which topics you would like to be visualized None normalize_frequency bool Whether to normalize each topic's frequency individually False custom_labels bool Whether to use custom topic labels that were defined using topic_model.set_topic_labels . False title str Title of the plot. '<b>Topics over Time</b>' width int The width of the figure. 1250 height int The height of the figure. 450 Returns: Type Description Figure A plotly.graph_objects.Figure including all traces Examples: To visualize the topics over time, simply run: topics_over_time = topic_model . topics_over_time ( docs , timestamps ) topic_model . visualize_topics_over_time ( topics_over_time ) Or if you want to save the resulting figure: fig = topic_model . visualize_topics_over_time ( topics_over_time ) fig . write_html ( \"path/to/file.html\" ) Source code in bertopic\\_bertopic.py def visualize_topics_over_time ( self , topics_over_time : pd . DataFrame , top_n_topics : int = None , topics : List [ int ] = None , normalize_frequency : bool = False , custom_labels : bool = False , title : str = \"<b>Topics over Time</b>\" , width : int = 1250 , height : int = 450 ) -> go . Figure : \"\"\" Visualize topics over time Arguments: topics_over_time: The topics you would like to be visualized with the corresponding topic representation top_n_topics: To visualize the most frequent topics instead of all topics: Select which topics you would like to be visualized normalize_frequency: Whether to normalize each topic's frequency individually custom_labels: Whether to use custom topic labels that were defined using `topic_model.set_topic_labels`. title: Title of the plot. width: The width of the figure. height: The height of the figure. Returns: A plotly.graph_objects.Figure including all traces Examples: To visualize the topics over time, simply run: ```python topics_over_time = topic_model.topics_over_time(docs, timestamps) topic_model.visualize_topics_over_time(topics_over_time) ``` Or if you want to save the resulting figure: ```python fig = topic_model.visualize_topics_over_time(topics_over_time) fig.write_html(\"path/to/file.html\") ``` \"\"\" check_is_fitted ( self ) return plotting . visualize_topics_over_time ( self , topics_over_time = topics_over_time , top_n_topics = top_n_topics , topics = topics , normalize_frequency = normalize_frequency , custom_labels = custom_labels , title = title , width = width , height = height ) visualize_topics_per_class ( self , topics_per_class , top_n_topics = 10 , topics = None , normalize_frequency = False , custom_labels = False , title = '<b>Topics per Class</b>' , width = 1250 , height = 900 ) \u00b6 Visualize topics per class Parameters: Name Type Description Default topics_per_class DataFrame The topics you would like to be visualized with the corresponding topic representation required top_n_topics int To visualize the most frequent topics instead of all 10 topics List[int] Select which topics you would like to be visualized None normalize_frequency bool Whether to normalize each topic's frequency individually False custom_labels bool Whether to use custom topic labels that were defined using topic_model.set_topic_labels . False title str Title of the plot. '<b>Topics per Class</b>' width int The width of the figure. 1250 height int The height of the figure. 900 Returns: Type Description Figure A plotly.graph_objects.Figure including all traces Examples: To visualize the topics per class, simply run: topics_per_class = topic_model . topics_per_class ( docs , classes ) topic_model . visualize_topics_per_class ( topics_per_class ) Or if you want to save the resulting figure: fig = topic_model . visualize_topics_per_class ( topics_per_class ) fig . write_html ( \"path/to/file.html\" ) Source code in bertopic\\_bertopic.py def visualize_topics_per_class ( self , topics_per_class : pd . DataFrame , top_n_topics : int = 10 , topics : List [ int ] = None , normalize_frequency : bool = False , custom_labels : bool = False , title : str = \"<b>Topics per Class</b>\" , width : int = 1250 , height : int = 900 ) -> go . Figure : \"\"\" Visualize topics per class Arguments: topics_per_class: The topics you would like to be visualized with the corresponding topic representation top_n_topics: To visualize the most frequent topics instead of all topics: Select which topics you would like to be visualized normalize_frequency: Whether to normalize each topic's frequency individually custom_labels: Whether to use custom topic labels that were defined using `topic_model.set_topic_labels`. title: Title of the plot. width: The width of the figure. height: The height of the figure. Returns: A plotly.graph_objects.Figure including all traces Examples: To visualize the topics per class, simply run: ```python topics_per_class = topic_model.topics_per_class(docs, classes) topic_model.visualize_topics_per_class(topics_per_class) ``` Or if you want to save the resulting figure: ```python fig = topic_model.visualize_topics_per_class(topics_per_class) fig.write_html(\"path/to/file.html\") ``` \"\"\" check_is_fitted ( self ) return plotting . visualize_topics_per_class ( self , topics_per_class = topics_per_class , top_n_topics = top_n_topics , topics = topics , normalize_frequency = normalize_frequency , custom_labels = custom_labels , title = title , width = width , height = height )","title":"BERTopic"},{"location":"api/bertopic.html#bertopic","text":"BERTopic is a topic modeling technique that leverages BERT embeddings and c-TF-IDF to create dense clusters allowing for easily interpretable topics whilst keeping important words in the topic descriptions. The default embedding model is all-MiniLM-L6-v2 when selecting language=\"english\" and paraphrase-multilingual-MiniLM-L12-v2 when selecting language=\"multilingual\" . Attributes: Name Type Description topics_ List[int]) The topics that are generated for each document after training or updating the topic model. The most recent topics are tracked. probabilities_ List[float] The probability of the assigned topic per document. These are only calculated if a HDBSCAN model is used for the clustering step. When calculate_probabilities=True , then it is the probabilities of all topics per document. topic_sizes_ Mapping[int, int]) The size of each topic topic_mapper_ TopicMapper) A class for tracking topics and their mappings anytime they are merged, reduced, added, or removed. topic_representations_ Mapping[int, Tuple[int, float]]) The top n terms per topic and their respective c-TF-IDF values. c_tf_idf_ csr_matrix) The topic-term matrix as calculated through c-TF-IDF. To access its respective words, run .vectorizer_model.get_feature_names() or .vectorizer_model.get_feature_names_out() topic_labels_ Mapping[int, str]) The default labels for each topic. custom_labels_ List[str]) Custom labels for each topic. topic_embeddings_ np.ndarray) The embeddings for each topic. It is calculated by taking the weighted average of word embeddings in a topic based on their c-TF-IDF values. representative_docs_ Mapping[int, str]) The representative documents for each topic. Examples: from bertopic import BERTopic from sklearn.datasets import fetch_20newsgroups docs = fetch_20newsgroups ( subset = 'all' )[ 'data' ] topic_model = BERTopic () topics , probabilities = topic_model . fit_transform ( docs ) If you want to use your own embedding model, use it as follows: from bertopic import BERTopic from sklearn.datasets import fetch_20newsgroups from sentence_transformers import SentenceTransformer docs = fetch_20newsgroups ( subset = 'all' )[ 'data' ] sentence_model = SentenceTransformer ( \"all-MiniLM-L6-v2\" ) topic_model = BERTopic ( embedding_model = sentence_model ) Due to the stochastisch nature of UMAP, the results from BERTopic might differ and the quality can degrade. Using your own embeddings allows you to try out BERTopic several times until you find the topics that suit you best. Source code in bertopic\\_bertopic.py class BERTopic : \"\"\"BERTopic is a topic modeling technique that leverages BERT embeddings and c-TF-IDF to create dense clusters allowing for easily interpretable topics whilst keeping important words in the topic descriptions. The default embedding model is `all-MiniLM-L6-v2` when selecting `language=\"english\"` and `paraphrase-multilingual-MiniLM-L12-v2` when selecting `language=\"multilingual\"`. Attributes: topics_ (List[int]) : The topics that are generated for each document after training or updating the topic model. The most recent topics are tracked. probabilities_ (List[float]): The probability of the assigned topic per document. These are only calculated if a HDBSCAN model is used for the clustering step. When `calculate_probabilities=True`, then it is the probabilities of all topics per document. topic_sizes_ (Mapping[int, int]) : The size of each topic topic_mapper_ (TopicMapper) : A class for tracking topics and their mappings anytime they are merged, reduced, added, or removed. topic_representations_ (Mapping[int, Tuple[int, float]]) : The top n terms per topic and their respective c-TF-IDF values. c_tf_idf_ (csr_matrix) : The topic-term matrix as calculated through c-TF-IDF. To access its respective words, run `.vectorizer_model.get_feature_names()` or `.vectorizer_model.get_feature_names_out()` topic_labels_ (Mapping[int, str]) : The default labels for each topic. custom_labels_ (List[str]) : Custom labels for each topic. topic_embeddings_ (np.ndarray) : The embeddings for each topic. It is calculated by taking the weighted average of word embeddings in a topic based on their c-TF-IDF values. representative_docs_ (Mapping[int, str]) : The representative documents for each topic. Examples: ```python from bertopic import BERTopic from sklearn.datasets import fetch_20newsgroups docs = fetch_20newsgroups(subset='all')['data'] topic_model = BERTopic() topics, probabilities = topic_model.fit_transform(docs) ``` If you want to use your own embedding model, use it as follows: ```python from bertopic import BERTopic from sklearn.datasets import fetch_20newsgroups from sentence_transformers import SentenceTransformer docs = fetch_20newsgroups(subset='all')['data'] sentence_model = SentenceTransformer(\"all-MiniLM-L6-v2\") topic_model = BERTopic(embedding_model=sentence_model) ``` Due to the stochastisch nature of UMAP, the results from BERTopic might differ and the quality can degrade. Using your own embeddings allows you to try out BERTopic several times until you find the topics that suit you best. \"\"\" def __init__ ( self , language : str = \"english\" , top_n_words : int = 10 , n_gram_range : Tuple [ int , int ] = ( 1 , 1 ), min_topic_size : int = 10 , nr_topics : Union [ int , str ] = None , low_memory : bool = False , calculate_probabilities : bool = False , seed_topic_list : List [ List [ str ]] = None , embedding_model = None , umap_model : UMAP = None , hdbscan_model : hdbscan . HDBSCAN = None , vectorizer_model : CountVectorizer = None , ctfidf_model : TfidfTransformer = None , representation_model : BaseRepresentation = None , verbose : bool = False , ): \"\"\"BERTopic initialization Arguments: language: The main language used in your documents. The default sentence-transformers model for \"english\" is `all-MiniLM-L6-v2`. For a full overview of supported languages see bertopic.backend.languages. Select \"multilingual\" to load in the `paraphrase-multilingual-MiniLM-L12-v2` sentence-tranformers model that supports 50+ languages. NOTE: This is not used if `embedding_model` is used. top_n_words: The number of words per topic to extract. Setting this too high can negatively impact topic embeddings as topics are typically best represented by at most 10 words. n_gram_range: The n-gram range for the CountVectorizer. Advised to keep high values between 1 and 3. More would likely lead to memory issues. NOTE: This param will not be used if you pass in your own CountVectorizer. min_topic_size: The minimum size of the topic. Increasing this value will lead to a lower number of clusters/topics. NOTE: This param will not be used if you are not using HDBSCAN. nr_topics: Specifying the number of topics will reduce the initial number of topics to the value specified. This reduction can take a while as each reduction in topics (-1) activates a c-TF-IDF calculation. If this is set to None, no reduction is applied. Use \"auto\" to automatically reduce topics using HDBSCAN. low_memory: Sets UMAP low memory to True to make sure less memory is used. NOTE: This is only used in UMAP. For example, if you use PCA instead of UMAP this parameter will not be used. calculate_probabilities: Calculate the probabilities of all topics per document instead of the probability of the assigned topic per document. This could slow down the extraction of topics if you have many documents (> 100_000). NOTE: If false you cannot use the corresponding visualization method `visualize_probabilities`. NOTE: This is an approximation of topic probabilities as used in HDBSCAN and not an exact representation. seed_topic_list: A list of seed words per topic to converge around verbose: Changes the verbosity of the model, Set to True if you want to track the stages of the model. embedding_model: Use a custom embedding model. The following backends are currently supported * SentenceTransformers * Flair * Spacy * Gensim * USE (TF-Hub) You can also pass in a string that points to one of the following sentence-transformers models: * https://www.sbert.net/docs/pretrained_models.html umap_model: Pass in a UMAP model to be used instead of the default. NOTE: You can also pass in any dimensionality reduction algorithm as long as it has `.fit` and `.transform` functions. hdbscan_model: Pass in a hdbscan.HDBSCAN model to be used instead of the default NOTE: You can also pass in any clustering algorithm as long as it has `.fit` and `.predict` functions along with the `.labels_` variable. vectorizer_model: Pass in a custom `CountVectorizer` instead of the default model. ctfidf_model: Pass in a custom ClassTfidfTransformer instead of the default model. representation_model: Pass in a model that fine-tunes the topic representations calculated through c-TF-IDF. Models from `bertopic.representation` are supported. \"\"\" # Topic-based parameters if top_n_words > 100 : warnings . warn ( \"Note that extracting more than 100 words from a sparse \" \"can slow down computation quite a bit.\" ) self . top_n_words = top_n_words self . min_topic_size = min_topic_size self . nr_topics = nr_topics self . low_memory = low_memory self . calculate_probabilities = calculate_probabilities self . verbose = verbose self . seed_topic_list = seed_topic_list # Embedding model self . language = language if not embedding_model else None self . embedding_model = embedding_model # Vectorizer self . n_gram_range = n_gram_range self . vectorizer_model = vectorizer_model or CountVectorizer ( ngram_range = self . n_gram_range ) self . ctfidf_model = ctfidf_model or ClassTfidfTransformer () # Representation model self . representation_model = representation_model # UMAP or another algorithm that has .fit and .transform functions self . umap_model = umap_model or UMAP ( n_neighbors = 15 , n_components = 5 , min_dist = 0.0 , metric = 'cosine' , low_memory = self . low_memory ) # HDBSCAN or another clustering algorithm that has .fit and .predict functions and # the .labels_ variable to extract the labels self . hdbscan_model = hdbscan_model or hdbscan . HDBSCAN ( min_cluster_size = self . min_topic_size , metric = 'euclidean' , cluster_selection_method = 'eom' , prediction_data = True ) # Public attributes self . topics_ = None self . probabilities_ = None self . topic_sizes_ = None self . topic_mapper_ = None self . topic_representations_ = None self . topic_embeddings_ = None self . topic_labels_ = None self . custom_labels_ = None self . representative_docs_ = {} self . c_tf_idf_ = None # Private attributes for internal tracking purposes self . _outliers = 1 self . _merged_topics = None if verbose : logger . set_level ( \"DEBUG\" ) def fit ( self , documents : List [ str ], embeddings : np . ndarray = None , y : Union [ List [ int ], np . ndarray ] = None ): \"\"\" Fit the models (Bert, UMAP, and, HDBSCAN) on a collection of documents and generate topics Arguments: documents: A list of documents to fit on embeddings: Pre-trained document embeddings. These can be used instead of the sentence-transformer model y: The target class for (semi)-supervised modeling. Use -1 if no class for a specific instance is specified. Examples: ```python from bertopic import BERTopic from sklearn.datasets import fetch_20newsgroups docs = fetch_20newsgroups(subset='all')['data'] topic_model = BERTopic().fit(docs) ``` If you want to use your own embeddings, use it as follows: ```python from bertopic import BERTopic from sklearn.datasets import fetch_20newsgroups from sentence_transformers import SentenceTransformer # Create embeddings docs = fetch_20newsgroups(subset='all')['data'] sentence_model = SentenceTransformer(\"all-MiniLM-L6-v2\") embeddings = sentence_model.encode(docs, show_progress_bar=True) # Create topic model topic_model = BERTopic().fit(docs, embeddings) ``` \"\"\" self . fit_transform ( documents , embeddings , y ) return self def fit_transform ( self , documents : List [ str ], embeddings : np . ndarray = None , y : Union [ List [ int ], np . ndarray ] = None ) -> Tuple [ List [ int ], Union [ np . ndarray , None ]]: \"\"\" Fit the models on a collection of documents, generate topics, and return the docs with topics Arguments: documents: A list of documents to fit on embeddings: Pre-trained document embeddings. These can be used instead of the sentence-transformer model y: The target class for (semi)-supervised modeling. Use -1 if no class for a specific instance is specified. Returns: predictions: Topic predictions for each documents probabilities: The probability of the assigned topic per document. If `calculate_probabilities` in BERTopic is set to True, then it calculates the probabilities of all topics across all documents instead of only the assigned topic. This, however, slows down computation and may increase memory usage. Examples: ```python from bertopic import BERTopic from sklearn.datasets import fetch_20newsgroups docs = fetch_20newsgroups(subset='all')['data'] topic_model = BERTopic() topics, probs = topic_model.fit_transform(docs) ``` If you want to use your own embeddings, use it as follows: ```python from bertopic import BERTopic from sklearn.datasets import fetch_20newsgroups from sentence_transformers import SentenceTransformer # Create embeddings docs = fetch_20newsgroups(subset='all')['data'] sentence_model = SentenceTransformer(\"all-MiniLM-L6-v2\") embeddings = sentence_model.encode(docs, show_progress_bar=True) # Create topic model topic_model = BERTopic() topics, probs = topic_model.fit_transform(docs, embeddings) ``` \"\"\" check_documents_type ( documents ) check_embeddings_shape ( embeddings , documents ) documents = pd . DataFrame ({ \"Document\" : documents , \"ID\" : range ( len ( documents )), \"Topic\" : None }) # Extract embeddings if embeddings is None : self . embedding_model = select_backend ( self . embedding_model , language = self . language ) embeddings = self . _extract_embeddings ( documents . Document , method = \"document\" , verbose = self . verbose ) logger . info ( \"Transformed documents to Embeddings\" ) else : if self . embedding_model is not None : self . embedding_model = select_backend ( self . embedding_model , language = self . language ) # Reduce dimensionality if self . seed_topic_list is not None and self . embedding_model is not None : y , embeddings = self . _guided_topic_modeling ( embeddings ) umap_embeddings = self . _reduce_dimensionality ( embeddings , y ) # Cluster reduced embeddings documents , probabilities = self . _cluster_embeddings ( umap_embeddings , documents , y = y ) # Sort and Map Topic IDs by their frequency if not self . nr_topics : documents = self . _sort_mappings_by_frequency ( documents ) # Extract topics by calculating c-TF-IDF self . _extract_topics ( documents ) # Reduce topics if self . nr_topics : documents = self . _reduce_topics ( documents ) # Save the top 3 most representative documents per topic self . _save_representative_docs ( documents ) # Resulting output self . probabilities_ = self . _map_probabilities ( probabilities , original_topics = True ) predictions = documents . Topic . to_list () return predictions , self . probabilities_ def transform ( self , documents : Union [ str , List [ str ]], embeddings : np . ndarray = None ) -> Tuple [ List [ int ], np . ndarray ]: \"\"\" After having fit a model, use transform to predict new instances Arguments: documents: A single document or a list of documents to fit on embeddings: Pre-trained document embeddings. These can be used instead of the sentence-transformer model. Returns: predictions: Topic predictions for each documents probabilities: The topic probability distribution which is returned by default. If `calculate_probabilities` in BERTopic is set to False, then the probabilities are not calculated to speed up computation and decrease memory usage. Examples: ```python from bertopic import BERTopic from sklearn.datasets import fetch_20newsgroups docs = fetch_20newsgroups(subset='all')['data'] topic_model = BERTopic().fit(docs) topics, probs = topic_model.transform(docs) ``` If you want to use your own embeddings: ```python from bertopic import BERTopic from sklearn.datasets import fetch_20newsgroups from sentence_transformers import SentenceTransformer # Create embeddings docs = fetch_20newsgroups(subset='all')['data'] sentence_model = SentenceTransformer(\"all-MiniLM-L6-v2\") embeddings = sentence_model.encode(docs, show_progress_bar=True) # Create topic model topic_model = BERTopic().fit(docs, embeddings) topics, probs = topic_model.transform(docs, embeddings) ``` \"\"\" check_is_fitted ( self ) check_embeddings_shape ( embeddings , documents ) if isinstance ( documents , str ): documents = [ documents ] if embeddings is None : embeddings = self . _extract_embeddings ( documents , method = \"document\" , verbose = self . verbose ) umap_embeddings = self . umap_model . transform ( embeddings ) logger . info ( \"Reduced dimensionality\" ) # Extract predictions and probabilities if it is a HDBSCAN-like model if is_supported_hdbscan ( self . hdbscan_model ): predictions , probabilities = hdbscan_delegator ( self . hdbscan_model , \"approximate_predict\" , umap_embeddings ) # Calculate probabilities if self . calculate_probabilities and isinstance ( self . hdbscan_model , hdbscan . HDBSCAN ): probabilities = hdbscan . membership_vector ( self . hdbscan_model , umap_embeddings ) logger . info ( \"Calculated probabilities with HDBSCAN\" ) else : predictions = self . hdbscan_model . predict ( umap_embeddings ) probabilities = None logger . info ( \"Predicted clusters\" ) # Map probabilities and predictions probabilities = self . _map_probabilities ( probabilities , original_topics = True ) predictions = self . _map_predictions ( predictions ) return predictions , probabilities def partial_fit ( self , documents : List [ str ], embeddings : np . ndarray = None , y : Union [ List [ int ], np . ndarray ] = None ): \"\"\" Fit BERTopic on a subset of the data and perform online learning with batch-like data. Online topic modeling in BERTopic is performed by using dimensionality reduction and cluster algorithms that support a `partial_fit` method in order to incrementally train the topic model. Likewise, the `bertopic.vectorizers.OnlineCountVectorizer` is used to dynamically update its vocabulary when presented with new data. It has several parameters for modeling decay and updating the representations. In other words, although the main algorithm stays the same, the training procedure now works as follows: For each subset of the data: 1. Generate embeddings with a pre-traing language model 2. Incrementally update the dimensionality reduction algorithm with `partial_fit` 3. Incrementally update the cluster algorithm with `partial_fit` 4. Incrementally update the OnlineCountVectorizer and apply some form of decay Note that it is advised to use `partial_fit` with batches and not single documents for the best performance. Arguments: documents: A list of documents to fit on embeddings: Pre-trained document embeddings. These can be used instead of the sentence-transformer model y: The target class for (semi)-supervised modeling. Use -1 if no class for a specific instance is specified. Examples: ```python from sklearn.datasets import fetch_20newsgroups from sklearn.cluster import MiniBatchKMeans from sklearn.decomposition import IncrementalPCA from bertopic.vectorizers import OnlineCountVectorizer from bertopic import BERTopic # Prepare documents docs = fetch_20newsgroups(subset=subset, remove=('headers', 'footers', 'quotes'))[\"data\"] # Prepare sub-models that support online learning umap_model = IncrementalPCA(n_components=5) cluster_model = MiniBatchKMeans(n_clusters=50, random_state=0) vectorizer_model = OnlineCountVectorizer(stop_words=\"english\", decay=.01) topic_model = BERTopic(umap_model=umap_model, hdbscan_model=cluster_model, vectorizer_model=vectorizer_model) # Incrementally fit the topic model by training on 1000 documents at a time for index in range(0, len(docs), 1000): topic_model.partial_fit(docs[index: index+1000]) ``` \"\"\" # Checks check_embeddings_shape ( embeddings , documents ) if not hasattr ( self . hdbscan_model , \"partial_fit\" ): raise ValueError ( \"In order to use `.partial_fit`, the cluster model should have \" \"a `.partial_fit` function.\" ) # Prepare documents if isinstance ( documents , str ): documents = [ documents ] documents = pd . DataFrame ({ \"Document\" : documents , \"ID\" : range ( len ( documents )), \"Topic\" : None }) # Extract embeddings if embeddings is None : if self . topic_representations_ is None : self . embedding_model = select_backend ( self . embedding_model , language = self . language ) embeddings = self . _extract_embeddings ( documents . Document , method = \"document\" , verbose = self . verbose ) else : if self . embedding_model is not None and self . topic_representations_ is None : self . embedding_model = select_backend ( self . embedding_model , language = self . language ) # Reduce dimensionality if self . seed_topic_list is not None and self . embedding_model is not None : y , embeddings = self . _guided_topic_modeling ( embeddings ) umap_embeddings = self . _reduce_dimensionality ( embeddings , y , partial_fit = True ) # Cluster reduced embeddings documents , self . probabilities_ = self . _cluster_embeddings ( umap_embeddings , documents , partial_fit = True ) topics = documents . Topic . to_list () # Map and find new topics if not self . topic_mapper_ : self . topic_mapper_ = TopicMapper ( topics ) mappings = self . topic_mapper_ . get_mappings () new_topics = set ( topics ) . difference ( set ( mappings . keys ())) new_topic_ids = { topic : max ( mappings . values ()) + index + 1 for index , topic in enumerate ( new_topics )} self . topic_mapper_ . add_new_topics ( new_topic_ids ) updated_mappings = self . topic_mapper_ . get_mappings () updated_topics = [ updated_mappings [ topic ] for topic in topics ] documents [ \"Topic\" ] = updated_topics # Add missing topics (topics that were originally created but are now missing) if self . topic_representations_ : missing_topics = set ( self . topic_representations_ . keys ()) . difference ( set ( updated_topics )) for missing_topic in missing_topics : documents . loc [ len ( documents ), :] = [ \" \" , len ( documents ), missing_topic ] else : missing_topics = {} # Prepare documents documents_per_topic = documents . sort_values ( \"Topic\" ) . groupby ([ 'Topic' ], as_index = False ) updated_topics = documents_per_topic . first () . Topic . astype ( int ) documents_per_topic = documents_per_topic . agg ({ 'Document' : ' ' . join }) # Update topic representations self . c_tf_idf_ , updated_words = self . _c_tf_idf ( documents_per_topic , partial_fit = True ) self . topic_representations_ = self . _extract_words_per_topic ( updated_words , documents , self . c_tf_idf_ ) self . _create_topic_vectors () self . topic_labels_ = { key : f \" { key } _\" + \"_\" . join ([ word [ 0 ] for word in values [: 4 ]]) for key , values in self . topic_representations_ . items ()} # Update topic sizes if len ( missing_topics ) > 0 : documents = documents . iloc [: - len ( missing_topics )] if self . topic_sizes_ is None : self . _update_topic_size ( documents ) else : sizes = documents . groupby ([ 'Topic' ], as_index = False ) . count () for _ , row in sizes . iterrows (): topic = int ( row . Topic ) if self . topic_sizes_ . get ( topic ) is not None and topic not in missing_topics : self . topic_sizes_ [ topic ] += int ( row . Document ) elif self . topic_sizes_ . get ( topic ) is None : self . topic_sizes_ [ topic ] = int ( row . Document ) self . topics_ = documents . Topic . astype ( int ) . tolist () return self def topics_over_time ( self , docs : List [ str ], timestamps : Union [ List [ str ], List [ int ]], nr_bins : int = None , datetime_format : str = None , evolution_tuning : bool = True , global_tuning : bool = True ) -> pd . DataFrame : \"\"\" Create topics over time To create the topics over time, BERTopic needs to be already fitted once. From the fitted models, the c-TF-IDF representations are calculate at each timestamp t. Then, the c-TF-IDF representations at timestamp t are averaged with the global c-TF-IDF representations in order to fine-tune the local representations. NOTE: Make sure to use a limited number of unique timestamps (<100) as the c-TF-IDF representation will be calculated at each single unique timestamp. Having a large number of unique timestamps can take some time to be calculated. Moreover, there aren't many use-cased where you would like to see the difference in topic representations over more than 100 different timestamps. Arguments: docs: The documents you used when calling either `fit` or `fit_transform` timestamps: The timestamp of each document. This can be either a list of strings or ints. If it is a list of strings, then the datetime format will be automatically inferred. If it is a list of ints, then the documents will be ordered by ascending order. nr_bins: The number of bins you want to create for the timestamps. The left interval will be chosen as the timestamp. An additional column will be created with the entire interval. datetime_format: The datetime format of the timestamps if they are strings, eg \u201c%d/%m/%Y\u201d. Set this to None if you want to have it automatically detect the format. See strftime documentation for more information on choices: https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior. evolution_tuning: Fine-tune each topic representation at timestamp *t* by averaging its c-TF-IDF matrix with the c-TF-IDF matrix at timestamp *t-1*. This creates evolutionary topic representations. global_tuning: Fine-tune each topic representation at timestamp *t* by averaging its c-TF-IDF matrix with the global c-TF-IDF matrix. Turn this off if you want to prevent words in topic representations that could not be found in the documents at timestamp *t*. Returns: topics_over_time: A dataframe that contains the topic, words, and frequency of topic at timestamp *t*. Examples: The timestamps variable represent the timestamp of each document. If you have over 100 unique timestamps, it is advised to bin the timestamps as shown below: ```python from bertopic import BERTopic topic_model = BERTopic() topics, probs = topic_model.fit_transform(docs) topics_over_time = topic_model.topics_over_time(docs, timestamps, nr_bins=20) ``` \"\"\" check_is_fitted ( self ) check_documents_type ( docs ) documents = pd . DataFrame ({ \"Document\" : docs , \"Topic\" : self . topics_ , \"Timestamps\" : timestamps }) global_c_tf_idf = normalize ( self . c_tf_idf_ , axis = 1 , norm = 'l1' , copy = False ) all_topics = sorted ( list ( documents . Topic . unique ())) all_topics_indices = { topic : index for index , topic in enumerate ( all_topics )} if isinstance ( timestamps [ 0 ], str ): infer_datetime_format = True if not datetime_format else False documents [ \"Timestamps\" ] = pd . to_datetime ( documents [ \"Timestamps\" ], infer_datetime_format = infer_datetime_format , format = datetime_format ) if nr_bins : documents [ \"Bins\" ] = pd . cut ( documents . Timestamps , bins = nr_bins ) documents [ \"Timestamps\" ] = documents . apply ( lambda row : row . Bins . left , 1 ) # Sort documents in chronological order documents = documents . sort_values ( \"Timestamps\" ) timestamps = documents . Timestamps . unique () if len ( timestamps ) > 100 : warnings . warn ( f \"There are more than 100 unique timestamps (i.e., { len ( timestamps ) } ) \" \"which significantly slows down the application. Consider setting `nr_bins` \" \"to a value lower than 100 to speed up calculation. \" ) # For each unique timestamp, create topic representations topics_over_time = [] for index , timestamp in tqdm ( enumerate ( timestamps ), disable = not self . verbose ): # Calculate c-TF-IDF representation for a specific timestamp selection = documents . loc [ documents . Timestamps == timestamp , :] documents_per_topic = selection . groupby ([ 'Topic' ], as_index = False ) . agg ({ 'Document' : ' ' . join , \"Timestamps\" : \"count\" }) c_tf_idf , words = self . _c_tf_idf ( documents_per_topic , fit = False ) if global_tuning or evolution_tuning : c_tf_idf = normalize ( c_tf_idf , axis = 1 , norm = 'l1' , copy = False ) # Fine-tune the c-TF-IDF matrix at timestamp t by averaging it with the c-TF-IDF # matrix at timestamp t-1 if evolution_tuning and index != 0 : current_topics = sorted ( list ( documents_per_topic . Topic . values )) overlapping_topics = sorted ( list ( set ( previous_topics ) . intersection ( set ( current_topics )))) current_overlap_idx = [ current_topics . index ( topic ) for topic in overlapping_topics ] previous_overlap_idx = [ previous_topics . index ( topic ) for topic in overlapping_topics ] c_tf_idf . tolil ()[ current_overlap_idx ] = (( c_tf_idf [ current_overlap_idx ] + previous_c_tf_idf [ previous_overlap_idx ]) / 2.0 ) . tolil () # Fine-tune the timestamp c-TF-IDF representation based on the global c-TF-IDF representation # by simply taking the average of the two if global_tuning : selected_topics = [ all_topics_indices [ topic ] for topic in documents_per_topic . Topic . values ] c_tf_idf = ( global_c_tf_idf [ selected_topics ] + c_tf_idf ) / 2.0 # Extract the words per topic words_per_topic = self . _extract_words_per_topic ( words , selection , c_tf_idf ) topic_frequency = pd . Series ( documents_per_topic . Timestamps . values , index = documents_per_topic . Topic ) . to_dict () # Fill dataframe with results topics_at_timestamp = [( topic , \", \" . join ([ words [ 0 ] for words in values ][: 5 ]), topic_frequency [ topic ], timestamp ) for topic , values in words_per_topic . items ()] topics_over_time . extend ( topics_at_timestamp ) if evolution_tuning : previous_topics = sorted ( list ( documents_per_topic . Topic . values )) previous_c_tf_idf = c_tf_idf . copy () return pd . DataFrame ( topics_over_time , columns = [ \"Topic\" , \"Words\" , \"Frequency\" , \"Timestamp\" ]) def topics_per_class ( self , docs : List [ str ], classes : Union [ List [ int ], List [ str ]], global_tuning : bool = True ) -> pd . DataFrame : \"\"\" Create topics per class To create the topics per class, BERTopic needs to be already fitted once. From the fitted models, the c-TF-IDF representations are calculate at each class c. Then, the c-TF-IDF representations at class c are averaged with the global c-TF-IDF representations in order to fine-tune the local representations. This can be turned off if the pure representation is needed. NOTE: Make sure to use a limited number of unique classes (<100) as the c-TF-IDF representation will be calculated at each single unique class. Having a large number of unique classes can take some time to be calculated. Arguments: docs: The documents you used when calling either `fit` or `fit_transform` classes: The class of each document. This can be either a list of strings or ints. global_tuning: Fine-tune each topic representation for class c t by averaging its c-TF-IDF matrix with the global c-TF-IDF matrix. Turn this off if you want to prevent words in topic representations that could not be found in the documents for class c. Returns: topics_per_class: A dataframe that contains the topic, words, and frequency of topics for each class. Examples: ```python from bertopic import BERTopic topic_model = BERTopic() topics, probs = topic_model.fit_transform(docs) topics_per_class = topic_model.topics_per_class(docs, classes) ``` \"\"\" documents = pd . DataFrame ({ \"Document\" : docs , \"Topic\" : self . topics_ , \"Class\" : classes }) global_c_tf_idf = normalize ( self . c_tf_idf_ , axis = 1 , norm = 'l1' , copy = False ) # For each unique timestamp, create topic representations topics_per_class = [] for _ , class_ in tqdm ( enumerate ( set ( classes )), disable = not self . verbose ): # Calculate c-TF-IDF representation for a specific timestamp selection = documents . loc [ documents . Class == class_ , :] documents_per_topic = selection . groupby ([ 'Topic' ], as_index = False ) . agg ({ 'Document' : ' ' . join , \"Class\" : \"count\" }) c_tf_idf , words = self . _c_tf_idf ( documents_per_topic , fit = False ) # Fine-tune the timestamp c-TF-IDF representation based on the global c-TF-IDF representation # by simply taking the average of the two if global_tuning : c_tf_idf = normalize ( c_tf_idf , axis = 1 , norm = 'l1' , copy = False ) c_tf_idf = ( global_c_tf_idf [ documents_per_topic . Topic . values + self . _outliers ] + c_tf_idf ) / 2.0 # Extract the words per topic words_per_topic = self . _extract_words_per_topic ( words , selection , c_tf_idf ) topic_frequency = pd . Series ( documents_per_topic . Class . values , index = documents_per_topic . Topic ) . to_dict () # Fill dataframe with results topics_at_class = [( topic , \", \" . join ([ words [ 0 ] for words in values ][: 5 ]), topic_frequency [ topic ], class_ ) for topic , values in words_per_topic . items ()] topics_per_class . extend ( topics_at_class ) topics_per_class = pd . DataFrame ( topics_per_class , columns = [ \"Topic\" , \"Words\" , \"Frequency\" , \"Class\" ]) return topics_per_class def hierarchical_topics ( self , docs : List [ int ], linkage_function : Callable [[ csr_matrix ], np . ndarray ] = None , distance_function : Callable [[ csr_matrix ], csr_matrix ] = None ) -> pd . DataFrame : \"\"\" Create a hierarchy of topics To create this hierarchy, BERTopic needs to be already fitted once. Then, a hierarchy is calculated on the distance matrix of the c-TF-IDF representation using `scipy.cluster.hierarchy.linkage`. Based on that hierarchy, we calculate the topic representation at each merged step. This is a local representation, as we only assume that the chosen step is merged and not all others which typically improves the topic representation. Arguments: docs: The documents you used when calling either `fit` or `fit_transform` linkage_function: The linkage function to use. Default is: `lambda x: sch.linkage(x, 'ward', optimal_ordering=True)` distance_function: The distance function to use on the c-TF-IDF matrix. Default is: `lambda x: 1 - cosine_similarity(x)` Returns: hierarchical_topics: A dataframe that contains a hierarchy of topics represented by their parents and their children Examples: ```python from bertopic import BERTopic topic_model = BERTopic() topics, probs = topic_model.fit_transform(docs) hierarchical_topics = topic_model.hierarchical_topics(docs) ``` A custom linkage function can be used as follows: ```python from scipy.cluster import hierarchy as sch from bertopic import BERTopic topic_model = BERTopic() topics, probs = topic_model.fit_transform(docs) # Hierarchical topics linkage_function = lambda x: sch.linkage(x, 'ward', optimal_ordering=True) hierarchical_topics = topic_model.hierarchical_topics(docs, linkage_function=linkage_function) ``` \"\"\" if distance_function is None : distance_function = lambda x : 1 - cosine_similarity ( x ) if linkage_function is None : linkage_function = lambda x : sch . linkage ( x , 'ward' , optimal_ordering = True ) # Calculate distance embeddings = self . c_tf_idf_ [ self . _outliers :] X = distance_function ( embeddings ) # Make sure it is the 1-D condensed distance matrix with zeros on the diagonal np . fill_diagonal ( X , 0 ) X = squareform ( X ) # Use the 1-D condensed distance matrix as an input instead of the raw distance matrix Z = linkage_function ( X ) # Calculate basic bag-of-words to be iteratively merged later documents = pd . DataFrame ({ \"Document\" : docs , \"ID\" : range ( len ( docs )), \"Topic\" : self . topics_ }) documents_per_topic = documents . groupby ([ 'Topic' ], as_index = False ) . agg ({ 'Document' : ' ' . join }) documents_per_topic = documents_per_topic . loc [ documents_per_topic . Topic != - 1 , :] clean_documents = self . _preprocess_text ( documents_per_topic . Document . values ) # Scikit-Learn Deprecation: get_feature_names is deprecated in 1.0 # and will be removed in 1.2. Please use get_feature_names_out instead. if version . parse ( sklearn_version ) >= version . parse ( \"1.0.0\" ): words = self . vectorizer_model . get_feature_names_out () else : words = self . vectorizer_model . get_feature_names () bow = self . vectorizer_model . transform ( clean_documents ) # Extract clusters hier_topics = pd . DataFrame ( columns = [ \"Parent_ID\" , \"Parent_Name\" , \"Topics\" , \"Child_Left_ID\" , \"Child_Left_Name\" , \"Child_Right_ID\" , \"Child_Right_Name\" ]) for index in tqdm ( range ( len ( Z ))): # Find clustered documents clusters = sch . fcluster ( Z , t = Z [ index ][ 2 ], criterion = 'distance' ) - self . _outliers cluster_df = pd . DataFrame ({ \"Topic\" : range ( len ( clusters )), \"Cluster\" : clusters }) cluster_df = cluster_df . groupby ( \"Cluster\" ) . agg ({ 'Topic' : lambda x : list ( x )}) . reset_index () nr_clusters = len ( clusters ) # Extract first topic we find to get the set of topics in a merged topic topic = None val = Z [ index ][ 0 ] while topic is None : if val - len ( clusters ) < 0 : topic = int ( val ) else : val = Z [ int ( val - len ( clusters ))][ 0 ] clustered_topics = [ i for i , x in enumerate ( clusters ) if x == clusters [ topic ]] # Group bow per cluster, calculate c-TF-IDF and extract words grouped = csr_matrix ( bow [ clustered_topics ] . sum ( axis = 0 )) c_tf_idf = self . ctfidf_model . transform ( grouped ) selection = documents . loc [ documents . Topic . isin ( clustered_topics ), :] selection . Topic = 0 words_per_topic = self . _extract_words_per_topic ( words , selection , c_tf_idf ) # Extract parent's name and ID parent_id = index + len ( clusters ) parent_name = \"_\" . join ([ x [ 0 ] for x in words_per_topic [ 0 ]][: 5 ]) # Extract child's name and ID Z_id = Z [ index ][ 0 ] child_left_id = Z_id if Z_id - nr_clusters < 0 else Z_id - nr_clusters if Z_id - nr_clusters < 0 : child_left_name = \"_\" . join ([ x [ 0 ] for x in self . get_topic ( Z_id )][: 5 ]) else : child_left_name = hier_topics . iloc [ int ( child_left_id )] . Parent_Name # Extract child's name and ID Z_id = Z [ index ][ 1 ] child_right_id = Z_id if Z_id - nr_clusters < 0 else Z_id - nr_clusters if Z_id - nr_clusters < 0 : child_right_name = \"_\" . join ([ x [ 0 ] for x in self . get_topic ( Z_id )][: 5 ]) else : child_right_name = hier_topics . iloc [ int ( child_right_id )] . Parent_Name # Save results hier_topics . loc [ len ( hier_topics ), :] = [ parent_id , parent_name , clustered_topics , int ( Z [ index ][ 0 ]), child_left_name , int ( Z [ index ][ 1 ]), child_right_name ] hier_topics [ \"Distance\" ] = Z [:, 2 ] hier_topics = hier_topics . sort_values ( \"Parent_ID\" , ascending = False ) hier_topics [[ \"Parent_ID\" , \"Child_Left_ID\" , \"Child_Right_ID\" ]] = hier_topics [[ \"Parent_ID\" , \"Child_Left_ID\" , \"Child_Right_ID\" ]] . astype ( str ) return hier_topics def approximate_distribution ( self , documents : Union [ str , List [ str ]], window : int = 4 , stride : int = 1 , min_similarity : float = 0.1 , batch_size : int = 1000 , padding : bool = False , use_embedding_model : bool = False , calculate_tokens : bool = False , separator : str = \" \" ) -> Tuple [ np . ndarray , Union [ List [ np . ndarray ], None ]]: \"\"\" A post-hoc approximation of topic distributions across documents. In order to perform this approximation, each document is split into tokens according to the provided tokenizer in the `CountVectorizer`. Then, a sliding window is applied on each document creating subsets of the document. For example, with a window size of 3 and stride of 1, the sentence: `Solving the right problem is difficult.` can be split up into `solving the right`, `the right problem`, `right problem is`, and `problem is difficult`. These are called tokensets. For each of these tokensets, we calculate their c-TF-IDF representation and find out how similar they are to the previously generated topics. Then, the similarities to the topics for each tokenset are summed in order to create a topic distribution for the entire document. We can also dive into this a bit deeper by then splitting these tokensets up into individual tokens and calculate how much a word, in a specific sentence, contributes to the topics found in that document. This can be enabled by setting `calculate_tokens=True` which can be used for visualization purposes in `topic_model.visualize_approximate_distribution`. The main output, `topic_distributions`, can also be used directly in `.visualize_distribution(topic_distributions[index])` by simply selecting a single distribution. Arguments: documents: A single document or a list of documents for which we approximate their topic distributions window: Size of the moving window which indicates the number of tokens being considered. stride: How far the window should move at each step. min_similarity: The minimum similarity of a document's tokenset with respect to the topics. batch_size: The number of documents to process at a time. If None, then all documents are processed at once. NOTE: With a large number of documents, it is not advised to process all documents at once. padding: Whether to pad the beginning and ending of a document with empty tokens. use_embedding_model: Whether to use the topic model's embedding model to calculate the similarity between tokensets and topics instead of using c-TF-IDF. calculate_tokens: Calculate the similarity of tokens with all topics. NOTE: This is computation-wise more expensive and can require more memory. Using this over batches of documents might be preferred. separator: The separator used to merge tokens into tokensets. Returns: topic_distributions: A `n` x `m` matrix containing the topic distributions for all input documents with `n` being the documents and `m` the topics. topic_token_distributions: A list of `t` x `m` arrays with `t` being the number of tokens for the respective document and `m` the topics. Examples: After fitting the model, the topic distributions can be calculated regardless of the clustering model and regardless of whether the documents were previously seen or not: ```python topic_distr, _ = topic_model.approximate_distribution(docs) ``` As a result, the topic distributions are calculated in `topic_distr` for the entire document based on token set with a specific window size and stride. If you want to calculate the topic distributions on a token-level: ```python topic_distr, topic_token_distr = topic_model.approximate_distribution(docs, calculate_tokens=True) ``` The `topic_token_distr` then contains, for each token, the best fitting topics. As with `topic_distr`, it can contain multiple topics for a single token. \"\"\" if isinstance ( documents , str ): documents = [ documents ] if batch_size is None : batch_size = len ( documents ) batches = 1 else : batches = math . ceil ( len ( documents ) / batch_size ) topic_distributions = [] topic_token_distributions = [] for i in tqdm ( range ( batches ), disable = not self . verbose ): doc_set = documents [ i * batch_size : ( i + 1 ) * batch_size ] # Extract tokens analyzer = self . vectorizer_model . build_tokenizer () tokens = [ analyzer ( document ) for document in doc_set ] # Extract token sets all_sentences = [] all_indices = [ 0 ] all_token_sets_ids = [] for tokenset in tokens : if len ( tokenset ) < window : token_sets = [ tokenset ] token_sets_ids = [ list ( range ( len ( tokenset )))] else : # Extract tokensets using window and stride parameters stride_indices = list ( range ( len ( tokenset )))[:: stride ] token_sets = [] token_sets_ids = [] for stride_index in stride_indices : selected_tokens = tokenset [ stride_index : stride_index + window ] if padding or len ( selected_tokens ) == window : token_sets . append ( selected_tokens ) token_sets_ids . append ( list ( range ( stride_index , stride_index + len ( selected_tokens )))) # Add empty tokens at the beginning and end of a document if padding : padded = [] padded_ids = [] t = math . ceil ( window / stride ) - 1 for i in range ( math . ceil ( window / stride ) - 1 ): padded . append ( tokenset [: window - (( t - i ) * stride )]) padded_ids . append ( list ( range ( 0 , window - (( t - i ) * stride )))) token_sets = padded + token_sets token_sets_ids = padded_ids + token_sets_ids # Join the tokens sentences = [ separator . join ( token ) for token in token_sets ] all_sentences . extend ( sentences ) all_token_sets_ids . extend ( token_sets_ids ) all_indices . append ( all_indices [ - 1 ] + len ( sentences )) # Calculate similarity between embeddings of token sets and the topics if use_embedding_model : embeddings = self . _extract_embeddings ( all_sentences , method = \"document\" , verbose = True ) similarity = cosine_similarity ( embeddings , self . topic_embeddings_ [ self . _outliers :]) # Calculate similarity between c-TF-IDF of token sets and the topics else : bow_doc = self . vectorizer_model . transform ( all_sentences ) c_tf_idf_doc = self . ctfidf_model . transform ( bow_doc ) similarity = cosine_similarity ( c_tf_idf_doc , self . c_tf_idf_ [ self . _outliers :]) # Only keep similarities that exceed the minimum similarity [ similarity < min_similarity ] = 0 # Aggregate results on an individual token level if calculate_tokens : topic_distribution = [] topic_token_distribution = [] for index , token in enumerate ( tokens ): start = all_indices [ index ] end = all_indices [ index + 1 ] if start == end : end = end + 1 # Assign topics to individual tokens token_id = [ i for i in range ( len ( token ))] token_val = { index : [] for index in token_id } for sim , token_set in zip ( similarity [ start : end ], all_token_sets_ids [ start : end ]): for token in token_set : if token in token_val : token_val [ token ] . append ( sim ) matrix = [] for _ , value in token_val . items (): matrix . append ( np . add . reduce ( value )) # Take empty documents into account matrix = np . array ( matrix ) if len ( matrix . shape ) == 1 : matrix = np . zeros (( 1 , len ( self . topic_labels_ ) - self . _outliers )) topic_token_distribution . append ( np . array ( matrix )) topic_distribution . append ( np . add . reduce ( matrix )) topic_distribution = normalize ( topic_distribution , norm = 'l1' , axis = 1 ) # Aggregate on a tokenset level indicated by the window and stride else : topic_distribution = [] for index in range ( len ( all_indices ) - 1 ): start = all_indices [ index ] end = all_indices [ index + 1 ] if start == end : end = end + 1 group = similarity [ start : end ] . sum ( axis = 0 ) topic_distribution . append ( group ) topic_distribution = normalize ( np . array ( topic_distribution ), norm = 'l1' , axis = 1 ) topic_token_distribution = None # Combine results topic_distributions . append ( topic_distribution ) if topic_token_distribution is None : topic_token_distributions = None else : topic_token_distributions . extend ( topic_token_distribution ) topic_distributions = np . vstack ( topic_distributions ) return topic_distributions , topic_token_distributions def find_topics ( self , search_term : str , top_n : int = 5 ) -> Tuple [ List [ int ], List [ float ]]: \"\"\" Find topics most similar to a search_term Creates an embedding for search_term and compares that with the topic embeddings. The most similar topics are returned along with their similarity values. The search_term can be of any size but since it compares with the topic representation it is advised to keep it below 5 words. Arguments: search_term: the term you want to use to search for topics top_n: the number of topics to return Returns: similar_topics: the most similar topics from high to low similarity: the similarity scores from high to low Examples: You can use the underlying embedding model to find topics that best represent the search term: ```python topics, similarity = topic_model.find_topics(\"sports\", top_n=5) ``` Note that the search query is typically more accurate if the search_term consists of a phrase or multiple words. \"\"\" if self . embedding_model is None : raise Exception ( \"This method can only be used if you did not use custom embeddings.\" ) topic_list = list ( self . topic_representations_ . keys ()) topic_list . sort () # Extract search_term embeddings and compare with topic embeddings search_embedding = self . _extract_embeddings ([ search_term ], method = \"word\" , verbose = False ) . flatten () sims = cosine_similarity ( search_embedding . reshape ( 1 , - 1 ), self . topic_embeddings_ ) . flatten () # Extract topics most similar to search_term ids = np . argsort ( sims )[ - top_n :] similarity = [ sims [ i ] for i in ids ][:: - 1 ] similar_topics = [ topic_list [ index ] for index in ids ][:: - 1 ] return similar_topics , similarity def update_topics ( self , docs : List [ str ], topics : List [ int ] = None , top_n_words : int = 10 , n_gram_range : Tuple [ int , int ] = None , vectorizer_model : CountVectorizer = None , ctfidf_model : ClassTfidfTransformer = None , representation_model : BaseRepresentation = None ): \"\"\" Updates the topic representation by recalculating c-TF-IDF with the new parameters as defined in this function. When you have trained a model and viewed the topics and the words that represent them, you might not be satisfied with the representation. Perhaps you forgot to remove stop_words or you want to try out a different n_gram_range. This function allows you to update the topic representation after they have been formed. Arguments: docs: The documents you used when calling either `fit` or `fit_transform` topics: A list of topics where each topic is related to a document in `docs`. Use this variable to change or map the topics. NOTE: Using a custom list of topic assignments may lead to errors if topic reduction techniques are used afterwards. Make sure that manually assigning topics is the last step in the pipeline top_n_words: The number of words per topic to extract. Setting this too high can negatively impact topic embeddings as topics are typically best represented by at most 10 words. n_gram_range: The n-gram range for the CountVectorizer. vectorizer_model: Pass in your own CountVectorizer from scikit-learn ctfidf_model: Pass in your own c-TF-IDF model to update the representations representation_model: Pass in a model that fine-tunes the topic representations calculated through c-TF-IDF. Models from `bertopic.representation` are supported. Examples: In order to update the topic representation, you will need to first fit the topic model and extract topics from them. Based on these, you can update the representation: ```python topic_model.update_topics(docs, n_gram_range=(2, 3)) ``` You can also use a custom vectorizer to update the representation: ```python from sklearn.feature_extraction.text import CountVectorizer vectorizer_model = CountVectorizer(ngram_range=(1, 2), stop_words=\"english\") topic_model.update_topics(docs, vectorizer_model=vectorizer_model) ``` You can also use this function to change or map the topics to something else. You can update them as follows: ```python topic_model.update_topics(docs, my_updated_topics) ``` \"\"\" check_is_fitted ( self ) if not n_gram_range : n_gram_range = self . n_gram_range if top_n_words > 100 : warnings . warn ( \"Note that extracting more than 100 words from a sparse \" \"can slow down computation quite a bit.\" ) self . top_n_words = top_n_words self . vectorizer_model = vectorizer_model or CountVectorizer ( ngram_range = n_gram_range ) self . ctfidf_model = ctfidf_model or ClassTfidfTransformer () self . representation_model = representation_model if topics is None : topics = self . topics_ else : warnings . warn ( \"Using a custom list of topic assignments may lead to errors if \" \"topic reduction techniques are used afterwards. Make sure that \" \"manually assigning topics is the last step in the pipeline.\" ) # Extract words documents = pd . DataFrame ({ \"Document\" : docs , \"Topic\" : topics }) documents_per_topic = documents . groupby ([ 'Topic' ], as_index = False ) . agg ({ 'Document' : ' ' . join }) self . c_tf_idf_ , words = self . _c_tf_idf ( documents_per_topic ) self . topic_representations_ = self . _extract_words_per_topic ( words , documents ) self . _create_topic_vectors () self . topic_labels_ = { key : f \" { key } _\" + \"_\" . join ([ word [ 0 ] for word in values [: 4 ]]) for key , values in self . topic_representations_ . items ()} self . _update_topic_size ( documents ) def get_topics ( self ) -> Mapping [ str , Tuple [ str , float ]]: \"\"\" Return topics with top n words and their c-TF-IDF score Returns: self.topic_representations_: The top n words per topic and the corresponding c-TF-IDF score Examples: ```python all_topics = topic_model.get_topics() ``` \"\"\" check_is_fitted ( self ) return self . topic_representations_ def get_topic ( self , topic : int ) -> Union [ Mapping [ str , Tuple [ str , float ]], bool ]: \"\"\" Return top n words for a specific topic and their c-TF-IDF scores Arguments: topic: A specific topic for which you want its representation Returns: The top n words for a specific word and its respective c-TF-IDF scores Examples: ```python topic = topic_model.get_topic(12) ``` \"\"\" check_is_fitted ( self ) if topic in self . topic_representations_ : return self . topic_representations_ [ topic ] else : return False def get_topic_info ( self , topic : int = None ) -> pd . DataFrame : \"\"\" Get information about each topic including its ID, frequency, and name. Arguments: topic: A specific topic for which you want the frequency Returns: info: The information relating to either a single topic or all topics Examples: ```python info_df = topic_model.get_topic_info() ``` \"\"\" check_is_fitted ( self ) info = pd . DataFrame ( self . topic_sizes_ . items (), columns = [ \"Topic\" , \"Count\" ]) . sort_values ( \"Topic\" ) info [ \"Name\" ] = info . Topic . map ( self . topic_labels_ ) if self . custom_labels_ is not None : if len ( self . custom_labels_ ) == len ( info ): labels = { topic - self . _outliers : label for topic , label in enumerate ( self . custom_labels_ )} info [ \"CustomName\" ] = info [ \"Topic\" ] . map ( labels ) if topic is not None : info = info . loc [ info . Topic == topic , :] return info . reset_index ( drop = True ) def get_topic_freq ( self , topic : int = None ) -> Union [ pd . DataFrame , int ]: \"\"\" Return the the size of topics (descending order) Arguments: topic: A specific topic for which you want the frequency Returns: Either the frequency of a single topic or dataframe with the frequencies of all topics Examples: To extract the frequency of all topics: ```python frequency = topic_model.get_topic_freq() ``` To get the frequency of a single topic: ```python frequency = topic_model.get_topic_freq(12) ``` \"\"\" check_is_fitted ( self ) if isinstance ( topic , int ): return self . topic_sizes_ [ topic ] else : return pd . DataFrame ( self . topic_sizes_ . items (), columns = [ 'Topic' , 'Count' ]) . sort_values ( \"Count\" , ascending = False ) def get_document_info ( self , docs : List [ str ], df : pd . DataFrame = None , metadata : Mapping [ str , Any ] = None ) -> pd . DataFrame : \"\"\" Get information about the documents on which the topic was trained including the documents themselves, their respective topics, the name of each topic, the top n words of each topic, whether it is a representative document, and probability of the clustering if the cluster model supports it. There are also options to include other meta data, such as the topic distributions or the x and y coordinates of the reduced embeddings. Arguments: docs: The documents on which the topic model was trained. df: A dataframe containing the metadata and the documents on which the topic model was originally trained on. metadata: A dictionary with meta data for each document in the form of column name (key) and the respective values (value). Returns: document_info: A dataframe with several statistics regarding the documents on which the topic model was trained. Usage: To get the document info, you will only need to pass the documents on which the topic model was trained: ```python document_info = topic_model.get_document_info(docs) ``` There are additionally options to include meta data, such as the topic distributions. Moreover, we can pass the original dataframe that contains the documents and extend it with the information retrieved from BERTopic: ```python from sklearn.datasets import fetch_20newsgroups # The original data in a dataframe format to include the target variable data= fetch_20newsgroups(subset='all', remove=('headers', 'footers', 'quotes')) df = pd.DataFrame({\"Document\": data['data'], \"Class\": data['target']}) # Add information about the percentage of the document that relates to the topic topic_distr, _ = topic_model.approximate_distribution(docs, batch_size=1000) distributions = [distr[topic] if topic != -1 else 0 for topic, distr in zip(topics, topic_distr)] # Create our documents dataframe using the original dataframe and meta data about # the topic distributions document_info = topic_model.get_document_info(docs, df=df, metadata={\"Topic_distribution\": distributions}) ``` \"\"\" if df is not None : document_info = df . copy () document_info [ \"Document\" ] = docs document_info [ \"Topic\" ] = self . topics_ else : document_info = pd . DataFrame ({ \"Document\" : docs , \"Topic\" : self . topics_ }) # Add topic info through `.get_topic_info()` topic_info = self . get_topic_info () . drop ( \"Count\" , axis = 1 ) document_info = pd . merge ( document_info , topic_info , on = \"Topic\" , how = \"left\" ) # Add top n words top_n_words = { topic : \" - \" . join ( list ( zip ( * self . get_topic ( topic )))[ 0 ]) for topic in set ( self . topics_ )} document_info [ \"Top_n_words\" ] = document_info . Topic . map ( top_n_words ) # Add flat probabilities if self . probabilities_ is not None : if len ( self . probabilities_ . shape ) == 1 : document_info [ \"Probability\" ] = self . probabilities_ else : document_info [ \"Probability\" ] = [ max ( probs ) if topic != - 1 else 1 - sum ( probs ) for topic , probs in zip ( self . topics_ , self . probabilities_ )] # Add representative document labels repr_docs = [ repr_doc for repr_docs in self . representative_docs_ . values () for repr_doc in repr_docs ] document_info [ \"Representative_document\" ] = False document_info . loc [ document_info . Document . isin ( repr_docs ), \"Representative_document\" ] = True # Add custom meta data provided by the user if metadata is not None : for column , values in metadata . items (): document_info [ column ] = values return document_info def get_representative_docs ( self , topic : int = None ) -> List [ str ]: \"\"\" Extract the best representing documents per topic. NOTE: This does not extract all documents per topic as all documents are not saved within BERTopic. To get all documents, please run the following: ```python # When you used `.fit_transform`: df = pd.DataFrame({\"Document\": docs, \"Topic\": topic}) # When you used `.fit`: df = pd.DataFrame({\"Document\": docs, \"Topic\": topic_model.topics_}) ``` Arguments: topic: A specific topic for which you want the representative documents Returns: Representative documents of the chosen topic Examples: To extract the representative docs of all topics: ```python representative_docs = topic_model.get_representative_docs() ``` To get the representative docs of a single topic: ```python representative_docs = topic_model.get_representative_docs(12) ``` \"\"\" check_is_fitted ( self ) if isinstance ( topic , int ): if self . representative_docs_ . get ( topic ): return self . representative_docs_ [ topic ] else : return None else : return self . representative_docs_ @staticmethod def get_topic_tree ( hier_topics : pd . DataFrame , max_distance : float = None , tight_layout : bool = False ) -> str : \"\"\" Extract the topic tree such that it can be printed Arguments: hier_topics: A dataframe containing the structure of the topic tree. This is the output of `topic_model.hierachical_topics()` max_distance: The maximum distance between two topics. This value is based on the Distance column in `hier_topics`. tight_layout: Whether to use a tight layout (narrow width) for easier readability if you have hundreds of topics. Returns: A tree that has the following structure when printed: . . \u2514\u2500health_medical_disease_patients_hiv \u251c\u2500patients_medical_disease_candida_health \u2502 \u251c\u2500\u25a0\u2500\u2500candida_yeast_infection_gonorrhea_infections \u2500\u2500 Topic: 48 \u2502 \u2514\u2500patients_disease_cancer_medical_doctor \u2502 \u251c\u2500\u25a0\u2500\u2500hiv_medical_cancer_patients_doctor \u2500\u2500 Topic: 34 \u2502 \u2514\u2500\u25a0\u2500\u2500pain_drug_patients_disease_diet \u2500\u2500 Topic: 26 \u2514\u2500\u25a0\u2500\u2500health_newsgroup_tobacco_vote_votes \u2500\u2500 Topic: 9 The blocks (\u25a0) indicate that the topic is one you can directly access from `topic_model.get_topic`. In other words, they are the original un-grouped topics. Examples: ```python # Train model from bertopic import BERTopic topic_model = BERTopic() topics, probs = topic_model.fit_transform(docs) hierarchical_topics = topic_model.hierarchical_topics(docs) # Print topic tree tree = topic_model.get_topic_tree(hierarchical_topics) print(tree) ``` \"\"\" width = 1 if tight_layout else 4 if max_distance is None : max_distance = hier_topics . Distance . max () + 1 max_original_topic = hier_topics . Parent_ID . astype ( int ) . min () - 1 # Extract mapping from ID to name topic_to_name = dict ( zip ( hier_topics . Child_Left_ID , hier_topics . Child_Left_Name )) topic_to_name . update ( dict ( zip ( hier_topics . Child_Right_ID , hier_topics . Child_Right_Name ))) topic_to_name = { topic : name [: 100 ] for topic , name in topic_to_name . items ()} # Create tree tree = { str ( row [ 1 ] . Parent_ID ): [ str ( row [ 1 ] . Child_Left_ID ), str ( row [ 1 ] . Child_Right_ID )] for row in hier_topics . iterrows ()} def get_tree ( start , tree ): \"\"\" Based on: https://stackoverflow.com/a/51920869/10532563 \"\"\" def _tree ( to_print , start , parent , tree , grandpa = None , indent = \"\" ): # Get distance between merged topics distance = hier_topics . loc [( hier_topics . Child_Left_ID == parent ) | ( hier_topics . Child_Right_ID == parent ), \"Distance\" ] distance = distance . values [ 0 ] if len ( distance ) > 0 else 10 if parent != start : if grandpa is None : to_print += topic_to_name [ parent ] else : if int ( parent ) <= max_original_topic : # Do not append topic ID if they are not merged if distance < max_distance : to_print += \"\u25a0\u2500\u2500\" + topic_to_name [ parent ] + f \" \u2500\u2500 Topic: { parent } \" + \" \\n \" else : to_print += \"O \\n \" else : to_print += topic_to_name [ parent ] + \" \\n \" if parent not in tree : return to_print for child in tree [ parent ][: - 1 ]: to_print += indent + \"\u251c\" + \"\u2500\" to_print = _tree ( to_print , start , child , tree , parent , indent + \"\u2502\" + \" \" * width ) child = tree [ parent ][ - 1 ] to_print += indent + \"\u2514\" + \"\u2500\" to_print = _tree ( to_print , start , child , tree , parent , indent + \" \" * ( width + 1 )) return to_print to_print = \".\" + \" \\n \" to_print = _tree ( to_print , start , start , tree ) return to_print start = str ( hier_topics . Parent_ID . astype ( int ) . max ()) return get_tree ( start , tree ) def set_topic_labels ( self , topic_labels : Union [ List [ str ], Mapping [ int , str ]]) -> None : \"\"\" Set custom topic labels in your fitted BERTopic model Arguments: topic_labels: If a list of topic labels, it should contain the same number of labels as there are topics. This must be ordered from the topic with the lowest ID to the highest ID, including topic -1 if it exists. If a dictionary of `topic ID`: `topic_label`, it can have any number of topics as it will only map the topics found in the dictionary. Examples: First, we define our topic labels with `.get_topic_labels` in which we can customize our topic labels: ```python topic_labels = topic_model.get_topic_labels(nr_words=2, topic_prefix=True, word_length=10, separator=\", \") ``` Then, we pass these `topic_labels` to our topic model which can be accessed at any time with `.custom_labels_`: ```python topic_model.set_topic_labels(topic_labels) topic_model.custom_labels_ ``` You might want to change only a few topic labels instead of all of them. To do so, you can pass a dictionary where the keys are the topic IDs and its keys the topic labels: ```python topic_model.set_topic_labels({0: \"Space\", 1: \"Sports\", 2: \"Medicine\"}) topic_model.custom_labels_ ``` \"\"\" unique_topics = sorted ( set ( self . topics_ )) if isinstance ( topic_labels , dict ): if self . custom_labels_ is not None : original_labels = { topic : label for topic , label in zip ( unique_topics , self . custom_labels_ )} else : info = self . get_topic_info () original_labels = dict ( zip ( info . Topic , info . Name )) custom_labels = [ topic_labels . get ( topic ) if topic_labels . get ( topic ) else original_labels [ topic ] for topic in unique_topics ] elif isinstance ( topic_labels , list ): if len ( topic_labels ) == len ( unique_topics ): custom_labels = topic_labels else : raise ValueError ( \"Make sure that `topic_labels` contains the same number \" \"of labels as that there are topics.\" ) self . custom_labels_ = custom_labels def generate_topic_labels ( self , nr_words : int = 3 , topic_prefix : bool = True , word_length : int = None , separator : str = \"_\" ) -> List [ str ]: \"\"\" Get labels for each topic in a user-defined format Arguments: original_labels: nr_words: Top `n` words per topic to use topic_prefix: Whether to use the topic ID as a prefix. If set to True, the topic ID will be separated using the `separator` word_length: The maximum length of each word in the topic label. Some words might be relatively long and setting this value helps to make sure that all labels have relatively similar lengths. separator: The string with which the words and topic prefix will be separated. Underscores are the default but a nice alternative is `\", \"`. Returns: topic_labels: A list of topic labels sorted from the lowest topic ID to the highest. If the topic model was trained using HDBSCAN, the lowest topic ID is -1, otherwise it is 0. Examples: To create our custom topic labels, usage is rather straightforward: ```python topic_labels = topic_model.get_topic_labels(nr_words=2, separator=\", \") ``` \"\"\" unique_topics = sorted ( set ( self . topics_ )) topic_labels = [] for topic in unique_topics : words , _ = zip ( * self . get_topic ( topic )) if word_length : words = [ word [: word_length ] for word in words ][: nr_words ] else : words = list ( words )[: nr_words ] if topic_prefix : topic_label = f \" { topic }{ separator } \" + separator . join ( words ) else : topic_label = separator . join ( words ) topic_labels . append ( topic_label ) return topic_labels def merge_topics ( self , docs : List [ str ], topics_to_merge : List [ Union [ Iterable [ int ], int ]]) -> None : \"\"\" Arguments: docs: The documents you used when calling either `fit` or `fit_transform` topics_to_merge: Either a list of topics or a list of list of topics to merge. For example: [1, 2, 3] will merge topics 1, 2 and 3 [[1, 2], [3, 4]] will merge topics 1 and 2, and separately merge topics 3 and 4. Examples: If you want to merge topics 1, 2, and 3: ```python topics_to_merge = [1, 2, 3] topic_model.merge_topics(docs, topics_to_merge) ``` or if you want to merge topics 1 and 2, and separately merge topics 3 and 4: ```python topics_to_merge = [[1, 2] [3, 4]] topic_model.merge_topics(docs, topics_to_merge) ``` \"\"\" check_is_fitted ( self ) documents = pd . DataFrame ({ \"Document\" : docs , \"Topic\" : self . topics_ }) mapping = { topic : topic for topic in set ( self . topics_ )} if isinstance ( topics_to_merge [ 0 ], int ): for topic in sorted ( topics_to_merge ): mapping [ topic ] = topics_to_merge [ 0 ] elif isinstance ( topics_to_merge [ 0 ], Iterable ): for topic_group in sorted ( topics_to_merge ): for topic in topic_group : mapping [ topic ] = topic_group [ 0 ] else : raise ValueError ( \"Make sure that `topics_to_merge` is either\" \"a list of topics or a list of list of topics.\" ) documents . Topic = documents . Topic . map ( mapping ) self . topic_mapper_ . add_mappings ( mapping ) documents = self . _sort_mappings_by_frequency ( documents ) self . _extract_topics ( documents ) self . _update_topic_size ( documents ) self . _save_representative_docs ( documents ) self . probabilities_ = self . _map_probabilities ( self . probabilities_ ) def reduce_topics ( self , docs : List [ str ], nr_topics : Union [ int , str ] = 20 ) -> None : \"\"\" Reduce the number of topics to a fixed number of topics or automatically. If nr_topics is a integer, then the number of topics is reduced to nr_topics using `AgglomerativeClustering` on the cosine distance matrix of the topic embeddings. If nr_topics is `\"auto\"`, then HDBSCAN is used to automatically reduce the number of topics by running it on the topic embeddings. The topics, their sizes, and representations are updated. Arguments: docs: The docs you used when calling either `fit` or `fit_transform` nr_topics: The number of topics you want reduced to Updates: topics_ : Assigns topics to their merged representations. probabilities_ : Assigns probabilities to their merged representations. Examples: You can further reduce the topics by passing the documents with its topics and probabilities (if they were calculated): ```python topic_model.reduce_topics(docs, nr_topics=30) ``` You can then access the updated topics and probabilities with: ```python topics = topic_model.topics_ probabilities = topic_model.probabilities_ ``` \"\"\" check_is_fitted ( self ) self . nr_topics = nr_topics documents = pd . DataFrame ({ \"Document\" : docs , \"Topic\" : self . topics_ }) # Reduce number of topics documents = self . _reduce_topics ( documents ) self . _merged_topics = None self . _save_representative_docs ( documents ) self . probabilities_ = self . _map_probabilities ( self . probabilities_ ) return self def reduce_outliers ( self , documents : List [ str ], topics : List [ int ], strategy : str = \"distributions\" , probabilities : np . ndarray = None , threshold : int = 0 , embeddings : np . ndarray = None , distributions_params : Mapping [ str , Any ] = {}) -> List [ int ]: \"\"\" Reduce outliers by merging them with their nearest topic according to one of several strategies. When using HDBSCAN, DBSCAN, or OPTICS, a number of outlier documents might be created that do not fall within any of the created topics. These are labeled as -1. This function allows the user to match outlier documents with their nearest topic using one of the following strategies using the `strategy` parameter: * \"probabilities\" This uses the soft-clustering as performed by HDBSCAN to find the best matching topic for each outlier document. To use this, make sure to calculate the `probabilities` beforehand by instantiating BERTopic with `calculate_probabilities=True`. * \"distributions\" Use the topic distributions, as calculated with `.approximate_distribution` to find the most frequent topic in each outlier document. You can use the `distributions_params` variable to tweak the parameters of `.approximate_distribution`. * \"c-tf-idf\" Calculate the c-TF-IDF representation for each outlier document and find the best matching c-TF-IDF topic representation using cosine similarity. * \"embeddings\" Using the embeddings of each outlier documents, find the best matching topic embedding using cosine similarity. Arguments: documents: A list of documents for which we reduce or remove the outliers. topics: The topics that correspond to the documents strategy: The strategy used for reducing outliers. Options: * \"probabilities\" This uses the soft-clustering as performed by HDBSCAN to find the best matching topic for each outlier document. * \"distributions\" Use the topic distributions, as calculated with `.approximate_distribution` to find the most frequent topic in each outlier document. * \"c-tf-idf\" Calculate the c-TF-IDF representation for outlier documents and find the best matching c-TF-IDF topic representation. * \"embeddings\" Calculate the embeddings for outlier documents and find the best matching topic embedding. threshold: The threshold for assigning topics to outlier documents. This value represents the minimum probability when `strategy=\"probabilities\"`. For all other strategies, it represents the minimum similarity. embeddings: The pre-computed embeddings to be used when `strategy=\"embeddings\"`. If this is None, then it will compute the embeddings for the outlier documents. distributions_params: The parameters used in `.approximate_distribution` when using the strategy `\"distributions\"`. Returns: new_topics: The updated topics Usage: The default settings uses the `\"distributions\"` strategy: ```python new_topics = topic_model.reduce_outliers(docs, topics) ``` When you use the `\"probabilities\"` strategy, make sure to also pass the probabilities as generated through HDBSCAN: ```python from bertopic import BERTopic topic_model = BERTopic(calculate_probabilities=True) topics, probs = topic_model.fit_transform(docs) new_topics = topic_model.reduce_outliers(docs, topics, probabilities=probs, strategy=\"probabilities\") ``` \"\"\" # Check correct use of parameters if strategy . lower () == \"probabilities\" and probabilities is None : raise ValueError ( \"Make sure to pass in `probabilities` in order to use the probabilities strategy\" ) # Reduce outliers by extracting most likely topics through the topic-term probability matrix if strategy . lower () == \"probabilities\" : new_topics = [ np . argmax ( prob ) if max ( prob ) >= threshold and topic == - 1 else topic for topic , prob in zip ( topics , probabilities )] # Reduce outliers by extracting most frequent topics through calculating of Topic Distributions elif strategy . lower () == \"distributions\" : outlier_ids = [ index for index , topic in enumerate ( topics ) if topic == - 1 ] outlier_docs = [ documents [ index ] for index in outlier_ids ] topic_distr , _ = self . approximate_distribution ( outlier_docs , min_similarity = threshold , ** distributions_params ) outlier_topics = iter ([ np . argmax ( prob ) if sum ( prob ) > 0 else - 1 for prob in topic_distr ]) new_topics = [ topic if topic != - 1 else next ( outlier_topics ) for topic in topics ] # Reduce outliers by finding the most similar c-TF-IDF representations elif strategy . lower () == \"c-tf-idf\" : outlier_ids = [ index for index , topic in enumerate ( topics ) if topic == - 1 ] outlier_docs = [ documents [ index ] for index in outlier_ids ] # Calculate c-TF-IDF of outlier documents with all topics bow_doc = self . vectorizer_model . transform ( outlier_docs ) c_tf_idf_doc = self . ctfidf_model . transform ( bow_doc ) similarity = cosine_similarity ( c_tf_idf_doc , self . c_tf_idf_ [ self . _outliers :]) # Update topics similarity [ similarity < threshold ] = 0 outlier_topics = iter ([ np . argmax ( sim ) if sum ( sim ) > 0 else - 1 for sim in similarity ]) new_topics = [ topic if topic != - 1 else next ( outlier_topics ) for topic in topics ] # Reduce outliers by finding the most similar topic embeddings elif strategy . lower () == \"embeddings\" : if self . embedding_model is None : raise ValueError ( \"To use this strategy, you will need to pass a model to `embedding_model`\" \"when instantiating BERTopic.\" ) outlier_ids = [ index for index , topic in enumerate ( topics ) if topic == - 1 ] outlier_docs = [ documents [ index ] for index in outlier_ids ] # Extract or calculate embeddings for outlier documents if embeddings is not None : outlier_embeddings = np . array ([ embeddings [ index ] for index in outlier_ids ]) else : outlier_embeddings = self . embedding_model . embed_documents ( outlier_docs ) similarity = cosine_similarity ( outlier_embeddings , self . topic_embeddings_ [ self . _outliers :]) # Update topics similarity [ similarity < threshold ] = 0 outlier_topics = iter ([ np . argmax ( sim ) if sum ( sim ) > 0 else - 1 for sim in similarity ]) new_topics = [ topic if topic != - 1 else next ( outlier_topics ) for topic in topics ] return new_topics def visualize_topics ( self , topics : List [ int ] = None , top_n_topics : int = None , custom_labels : bool = False , title : str = \"<b>Intertopic Distance Map</b>\" , width : int = 650 , height : int = 650 ) -> go . Figure : \"\"\" Visualize topics, their sizes, and their corresponding words This visualization is highly inspired by LDAvis, a great visualization technique typically reserved for LDA. Arguments: topics: A selection of topics to visualize top_n_topics: Only select the top n most frequent topics custom_labels: Whether to use custom topic labels that were defined using `topic_model.set_topic_labels`. title: Title of the plot. width: The width of the figure. height: The height of the figure. Examples: To visualize the topics simply run: ```python topic_model.visualize_topics() ``` Or if you want to save the resulting figure: ```python fig = topic_model.visualize_topics() fig.write_html(\"path/to/file.html\") ``` \"\"\" check_is_fitted ( self ) return plotting . visualize_topics ( self , topics = topics , top_n_topics = top_n_topics , custom_labels = custom_labels , title = title , width = width , height = height ) def visualize_documents ( self , docs : List [ str ], topics : List [ int ] = None , embeddings : np . ndarray = None , reduced_embeddings : np . ndarray = None , sample : float = None , hide_annotations : bool = False , hide_document_hover : bool = False , custom_labels : bool = False , title : str = \"<b>Documents and Topics</b>\" , width : int = 1200 , height : int = 750 ) -> go . Figure : \"\"\" Visualize documents and their topics in 2D Arguments: topic_model: A fitted BERTopic instance. docs: The documents you used when calling either `fit` or `fit_transform` topics: A selection of topics to visualize. Not to be confused with the topics that you get from `.fit_transform`. For example, if you want to visualize only topics 1 through 5: `topics = [1, 2, 3, 4, 5]`. embeddings: The embeddings of all documents in `docs`. reduced_embeddings: The 2D reduced embeddings of all documents in `docs`. sample: The percentage of documents in each topic that you would like to keep. Value can be between 0 and 1. Setting this value to, for example, 0.1 (10% of documents in each topic) makes it easier to visualize millions of documents as a subset is chosen. hide_annotations: Hide the names of the traces on top of each cluster. hide_document_hover: Hide the content of the documents when hovering over specific points. Helps to speed up generation of visualization. custom_labels: Whether to use custom topic labels that were defined using `topic_model.set_topic_labels`. title: Title of the plot. width: The width of the figure. height: The height of the figure. Examples: To visualize the topics simply run: ```python topic_model.visualize_documents(docs) ``` Do note that this re-calculates the embeddings and reduces them to 2D. The advised and prefered pipeline for using this function is as follows: ```python from sklearn.datasets import fetch_20newsgroups from sentence_transformers import SentenceTransformer from bertopic import BERTopic from umap import UMAP # Prepare embeddings docs = fetch_20newsgroups(subset='all', remove=('headers', 'footers', 'quotes'))['data'] sentence_model = SentenceTransformer(\"all-MiniLM-L6-v2\") embeddings = sentence_model.encode(docs, show_progress_bar=False) # Train BERTopic topic_model = BERTopic().fit(docs, embeddings) # Reduce dimensionality of embeddings, this step is optional # reduced_embeddings = UMAP(n_neighbors=10, n_components=2, min_dist=0.0, metric='cosine').fit_transform(embeddings) # Run the visualization with the original embeddings topic_model.visualize_documents(docs, embeddings=embeddings) # Or, if you have reduced the original embeddings already: topic_model.visualize_documents(docs, reduced_embeddings=reduced_embeddings) ``` Or if you want to save the resulting figure: ```python fig = topic_model.visualize_documents(docs, reduced_embeddings=reduced_embeddings) fig.write_html(\"path/to/file.html\") ``` <iframe src=\"../getting_started/visualization/documents.html\" style=\"width:1000px; height: 800px; border: 0px;\"\"></iframe> \"\"\" check_is_fitted ( self ) return plotting . visualize_documents ( self , docs = docs , topics = topics , embeddings = embeddings , reduced_embeddings = reduced_embeddings , sample = sample , hide_annotations = hide_annotations , hide_document_hover = hide_document_hover , custom_labels = custom_labels , title = title , width = width , height = height ) def visualize_hierarchical_documents ( self , docs : List [ str ], hierarchical_topics : pd . DataFrame , topics : List [ int ] = None , embeddings : np . ndarray = None , reduced_embeddings : np . ndarray = None , sample : Union [ float , int ] = None , hide_annotations : bool = False , hide_document_hover : bool = True , nr_levels : int = 10 , custom_labels : bool = False , title : str = \"<b>Hierarchical Documents and Topics</b>\" , width : int = 1200 , height : int = 750 ) -> go . Figure : \"\"\" Visualize documents and their topics in 2D at different levels of hierarchy Arguments: docs: The documents you used when calling either `fit` or `fit_transform` hierarchical_topics: A dataframe that contains a hierarchy of topics represented by their parents and their children topics: A selection of topics to visualize. Not to be confused with the topics that you get from `.fit_transform`. For example, if you want to visualize only topics 1 through 5: `topics = [1, 2, 3, 4, 5]`. embeddings: The embeddings of all documents in `docs`. reduced_embeddings: The 2D reduced embeddings of all documents in `docs`. sample: The percentage of documents in each topic that you would like to keep. Value can be between 0 and 1. Setting this value to, for example, 0.1 (10% of documents in each topic) makes it easier to visualize millions of documents as a subset is chosen. hide_annotations: Hide the names of the traces on top of each cluster. hide_document_hover: Hide the content of the documents when hovering over specific points. Helps to speed up generation of visualizations. nr_levels: The number of levels to be visualized in the hierarchy. First, the distances in `hierarchical_topics.Distance` are split in `nr_levels` lists of distances with equal length. Then, for each list of distances, the merged topics are selected that have a distance less or equal to the maximum distance of the selected list of distances. NOTE: To get all possible merged steps, make sure that `nr_levels` is equal to the length of `hierarchical_topics`. custom_labels: Whether to use custom topic labels that were defined using `topic_model.set_topic_labels`. NOTE: Custom labels are only generated for the original un-merged topics. title: Title of the plot. width: The width of the figure. height: The height of the figure. Examples: To visualize the topics simply run: ```python topic_model.visualize_hierarchical_documents(docs, hierarchical_topics) ``` Do note that this re-calculates the embeddings and reduces them to 2D. The advised and prefered pipeline for using this function is as follows: ```python from sklearn.datasets import fetch_20newsgroups from sentence_transformers import SentenceTransformer from bertopic import BERTopic from umap import UMAP # Prepare embeddings docs = fetch_20newsgroups(subset='all', remove=('headers', 'footers', 'quotes'))['data'] sentence_model = SentenceTransformer(\"all-MiniLM-L6-v2\") embeddings = sentence_model.encode(docs, show_progress_bar=False) # Train BERTopic and extract hierarchical topics topic_model = BERTopic().fit(docs, embeddings) hierarchical_topics = topic_model.hierarchical_topics(docs) # Reduce dimensionality of embeddings, this step is optional # reduced_embeddings = UMAP(n_neighbors=10, n_components=2, min_dist=0.0, metric='cosine').fit_transform(embeddings) # Run the visualization with the original embeddings topic_model.visualize_hierarchical_documents(docs, hierarchical_topics, embeddings=embeddings) # Or, if you have reduced the original embeddings already: topic_model.visualize_hierarchical_documents(docs, hierarchical_topics, reduced_embeddings=reduced_embeddings) ``` Or if you want to save the resulting figure: ```python fig = topic_model.visualize_hierarchical_documents(docs, hierarchical_topics, reduced_embeddings=reduced_embeddings) fig.write_html(\"path/to/file.html\") ``` <iframe src=\"../getting_started/visualization/hierarchical_documents.html\" style=\"width:1000px; height: 770px; border: 0px;\"\"></iframe> \"\"\" check_is_fitted ( self ) return plotting . visualize_hierarchical_documents ( self , docs = docs , hierarchical_topics = hierarchical_topics , topics = topics , embeddings = embeddings , reduced_embeddings = reduced_embeddings , sample = sample , hide_annotations = hide_annotations , hide_document_hover = hide_document_hover , nr_levels = nr_levels , custom_labels = custom_labels , title = title , width = width , height = height ) def visualize_term_rank ( self , topics : List [ int ] = None , log_scale : bool = False , custom_labels : bool = False , title : str = \"<b>Term score decline per Topic</b>\" , width : int = 800 , height : int = 500 ) -> go . Figure : \"\"\" Visualize the ranks of all terms across all topics Each topic is represented by a set of words. These words, however, do not all equally represent the topic. This visualization shows how many words are needed to represent a topic and at which point the beneficial effect of adding words starts to decline. Arguments: topics: A selection of topics to visualize. These will be colored red where all others will be colored black. log_scale: Whether to represent the ranking on a log scale custom_labels: Whether to use custom topic labels that were defined using `topic_model.set_topic_labels`. title: Title of the plot. width: The width of the figure. height: The height of the figure. Returns: fig: A plotly figure Examples: To visualize the ranks of all words across all topics simply run: ```python topic_model.visualize_term_rank() ``` Or if you want to save the resulting figure: ```python fig = topic_model.visualize_term_rank() fig.write_html(\"path/to/file.html\") ``` Reference: This visualization was heavily inspired by the \"Term Probability Decline\" visualization found in an analysis by the amazing [tmtoolkit](https://tmtoolkit.readthedocs.io/). Reference to that specific analysis can be found [here](https://wzbsocialsciencecenter.github.io/tm_corona/tm_analysis.html). \"\"\" check_is_fitted ( self ) return plotting . visualize_term_rank ( self , topics = topics , log_scale = log_scale , custom_labels = custom_labels , title = title , width = width , height = height ) def visualize_topics_over_time ( self , topics_over_time : pd . DataFrame , top_n_topics : int = None , topics : List [ int ] = None , normalize_frequency : bool = False , custom_labels : bool = False , title : str = \"<b>Topics over Time</b>\" , width : int = 1250 , height : int = 450 ) -> go . Figure : \"\"\" Visualize topics over time Arguments: topics_over_time: The topics you would like to be visualized with the corresponding topic representation top_n_topics: To visualize the most frequent topics instead of all topics: Select which topics you would like to be visualized normalize_frequency: Whether to normalize each topic's frequency individually custom_labels: Whether to use custom topic labels that were defined using `topic_model.set_topic_labels`. title: Title of the plot. width: The width of the figure. height: The height of the figure. Returns: A plotly.graph_objects.Figure including all traces Examples: To visualize the topics over time, simply run: ```python topics_over_time = topic_model.topics_over_time(docs, timestamps) topic_model.visualize_topics_over_time(topics_over_time) ``` Or if you want to save the resulting figure: ```python fig = topic_model.visualize_topics_over_time(topics_over_time) fig.write_html(\"path/to/file.html\") ``` \"\"\" check_is_fitted ( self ) return plotting . visualize_topics_over_time ( self , topics_over_time = topics_over_time , top_n_topics = top_n_topics , topics = topics , normalize_frequency = normalize_frequency , custom_labels = custom_labels , title = title , width = width , height = height ) def visualize_topics_per_class ( self , topics_per_class : pd . DataFrame , top_n_topics : int = 10 , topics : List [ int ] = None , normalize_frequency : bool = False , custom_labels : bool = False , title : str = \"<b>Topics per Class</b>\" , width : int = 1250 , height : int = 900 ) -> go . Figure : \"\"\" Visualize topics per class Arguments: topics_per_class: The topics you would like to be visualized with the corresponding topic representation top_n_topics: To visualize the most frequent topics instead of all topics: Select which topics you would like to be visualized normalize_frequency: Whether to normalize each topic's frequency individually custom_labels: Whether to use custom topic labels that were defined using `topic_model.set_topic_labels`. title: Title of the plot. width: The width of the figure. height: The height of the figure. Returns: A plotly.graph_objects.Figure including all traces Examples: To visualize the topics per class, simply run: ```python topics_per_class = topic_model.topics_per_class(docs, classes) topic_model.visualize_topics_per_class(topics_per_class) ``` Or if you want to save the resulting figure: ```python fig = topic_model.visualize_topics_per_class(topics_per_class) fig.write_html(\"path/to/file.html\") ``` \"\"\" check_is_fitted ( self ) return plotting . visualize_topics_per_class ( self , topics_per_class = topics_per_class , top_n_topics = top_n_topics , topics = topics , normalize_frequency = normalize_frequency , custom_labels = custom_labels , title = title , width = width , height = height ) def visualize_distribution ( self , probabilities : np . ndarray , min_probability : float = 0.015 , custom_labels : bool = False , title : str = \"<b>Topic Probability Distribution</b>\" , width : int = 800 , height : int = 600 ) -> go . Figure : \"\"\" Visualize the distribution of topic probabilities Arguments: probabilities: An array of probability scores min_probability: The minimum probability score to visualize. All others are ignored. custom_labels: Whether to use custom topic labels that were defined using `topic_model.set_topic_labels`. title: Title of the plot. width: The width of the figure. height: The height of the figure. Examples: Make sure to fit the model before and only input the probabilities of a single document: ```python topic_model.visualize_distribution(topic_model.probabilities_[0]) ``` Or if you want to save the resulting figure: ```python fig = topic_model.visualize_distribution(topic_model.probabilities_[0]) fig.write_html(\"path/to/file.html\") ``` \"\"\" check_is_fitted ( self ) return plotting . visualize_distribution ( self , probabilities = probabilities , min_probability = min_probability , custom_labels = custom_labels , title = title , width = width , height = height ) def visualize_approximate_distribution ( self , document : str , topic_token_distribution : np . ndarray , normalize : bool = False ): \"\"\" Visualize the topic distribution calculated by `.approximate_topic_distribution` on a token level. Thereby indicating the extend to which a certain word or phrases belong to a specific topic. The assumption here is that a single word can belong to multiple similar topics and as such give information about the broader set of topics within a single document. Arguments: topic_model: A fitted BERTopic instance. document: The document for which you want to visualize the approximated topic distribution. topic_token_distribution: The topic-token distribution of the document as extracted by `.approximate_topic_distribution` normalize: Whether to normalize, between 0 and 1 (summing to 1), the topic distribution values. Returns: df: A stylized dataframe indicating the best fitting topics for each token. Examples: ```python # Calculate the topic distributions on a token level # Note that we need to have `calculate_token_level=True` topic_distr, topic_token_distr = topic_model.approximate_distribution( docs, calculate_token_level=True ) # Visualize the approximated topic distributions df = topic_model.visualize_approximate_distribution(docs[0], topic_token_distr[0]) df ``` To revert this stylized dataframe back to a regular dataframe, you can run the following: ```python df.data.columns = [column.strip() for column in df.data.columns] df = df.data ``` \"\"\" check_is_fitted ( self ) return plotting . visualize_approximate_distribution ( self , document = document , topic_token_distribution = topic_token_distribution , normalize = normalize ) def visualize_hierarchy ( self , orientation : str = \"left\" , topics : List [ int ] = None , top_n_topics : int = None , custom_labels : bool = False , title : str = \"<b>Hierarchical Clustering</b>\" , width : int = 1000 , height : int = 600 , hierarchical_topics : pd . DataFrame = None , linkage_function : Callable [[ csr_matrix ], np . ndarray ] = None , distance_function : Callable [[ csr_matrix ], csr_matrix ] = None , color_threshold : int = 1 ) -> go . Figure : \"\"\" Visualize a hierarchical structure of the topics A ward linkage function is used to perform the hierarchical clustering based on the cosine distance matrix between topic embeddings. Arguments: topic_model: A fitted BERTopic instance. orientation: The orientation of the figure. Either 'left' or 'bottom' topics: A selection of topics to visualize top_n_topics: Only select the top n most frequent topics custom_labels: Whether to use custom topic labels that were defined using `topic_model.set_topic_labels`. NOTE: Custom labels are only generated for the original un-merged topics. title: Title of the plot. width: The width of the figure. Only works if orientation is set to 'left' height: The height of the figure. Only works if orientation is set to 'bottom' hierarchical_topics: A dataframe that contains a hierarchy of topics represented by their parents and their children. NOTE: The hierarchical topic names are only visualized if both `topics` and `top_n_topics` are not set. linkage_function: The linkage function to use. Default is: `lambda x: sch.linkage(x, 'ward', optimal_ordering=True)` NOTE: Make sure to use the same `linkage_function` as used in `topic_model.hierarchical_topics`. distance_function: The distance function to use on the c-TF-IDF matrix. Default is: `lambda x: 1 - cosine_similarity(x)` NOTE: Make sure to use the same `distance_function` as used in `topic_model.hierarchical_topics`. color_threshold: Value at which the separation of clusters will be made which will result in different colors for different clusters. A higher value will typically lead in less colored clusters. Returns: fig: A plotly figure Examples: To visualize the hierarchical structure of topics simply run: ```python topic_model.visualize_hierarchy() ``` If you also want the labels visualized of hierarchical topics, run the following: ```python # Extract hierarchical topics and their representations hierarchical_topics = topic_model.hierarchical_topics(docs) # Visualize these representations topic_model.visualize_hierarchy(hierarchical_topics=hierarchical_topics) ``` If you want to save the resulting figure: ```python fig = topic_model.visualize_hierarchy() fig.write_html(\"path/to/file.html\") ``` <iframe src=\"../getting_started/visualization/hierarchy.html\" style=\"width:1000px; height: 680px; border: 0px;\"\"></iframe> \"\"\" check_is_fitted ( self ) return plotting . visualize_hierarchy ( self , orientation = orientation , topics = topics , top_n_topics = top_n_topics , custom_labels = custom_labels , title = title , width = width , height = height , hierarchical_topics = hierarchical_topics , linkage_function = linkage_function , distance_function = distance_function , color_threshold = color_threshold ) def visualize_heatmap ( self , topics : List [ int ] = None , top_n_topics : int = None , n_clusters : int = None , custom_labels : bool = False , title : str = \"<b>Similarity Matrix</b>\" , width : int = 800 , height : int = 800 ) -> go . Figure : \"\"\" Visualize a heatmap of the topic's similarity matrix Based on the cosine similarity matrix between topic embeddings, a heatmap is created showing the similarity between topics. Arguments: topics: A selection of topics to visualize. top_n_topics: Only select the top n most frequent topics. n_clusters: Create n clusters and order the similarity matrix by those clusters. custom_labels: Whether to use custom topic labels that were defined using `topic_model.set_topic_labels`. title: Title of the plot. width: The width of the figure. height: The height of the figure. Returns: fig: A plotly figure Examples: To visualize the similarity matrix of topics simply run: ```python topic_model.visualize_heatmap() ``` Or if you want to save the resulting figure: ```python fig = topic_model.visualize_heatmap() fig.write_html(\"path/to/file.html\") ``` \"\"\" check_is_fitted ( self ) return plotting . visualize_heatmap ( self , topics = topics , top_n_topics = top_n_topics , n_clusters = n_clusters , custom_labels = custom_labels , title = title , width = width , height = height ) def visualize_barchart ( self , topics : List [ int ] = None , top_n_topics : int = 8 , n_words : int = 5 , custom_labels : bool = False , title : str = \"Topic Word Scores\" , width : int = 250 , height : int = 250 ) -> go . Figure : \"\"\" Visualize a barchart of selected topics Arguments: topics: A selection of topics to visualize. top_n_topics: Only select the top n most frequent topics. n_words: Number of words to show in a topic custom_labels: Whether to use custom topic labels that were defined using `topic_model.set_topic_labels`. title: Title of the plot. width: The width of each figure. height: The height of each figure. Returns: fig: A plotly figure Examples: To visualize the barchart of selected topics simply run: ```python topic_model.visualize_barchart() ``` Or if you want to save the resulting figure: ```python fig = topic_model.visualize_barchart() fig.write_html(\"path/to/file.html\") ``` \"\"\" check_is_fitted ( self ) return plotting . visualize_barchart ( self , topics = topics , top_n_topics = top_n_topics , n_words = n_words , custom_labels = custom_labels , title = title , width = width , height = height ) def save ( self , path : str , save_embedding_model : bool = True ) -> None : \"\"\" Saves the model to the specified path When saving the model, make sure to also keep track of the versions of dependencies and Python used. Loading and saving the model should be done using the same dependencies and Python. Moreover, models saved in one version of BERTopic should not be loaded in other versions. Arguments: path: the location and name of the file you want to save save_embedding_model: Whether to save the embedding model in this class as you might have selected a local model or one that is downloaded automatically from the cloud. Examples: ```python topic_model.save(\"my_model\") ``` or if you do not want the embedding_model to be saved locally: ```python topic_model.save(\"my_model\", save_embedding_model=False) ``` \"\"\" with open ( path , 'wb' ) as file : # This prevents the vectorizer from being too large in size if `min_df` was # set to a value higher than 1 self . vectorizer_model . stop_words_ = None if not save_embedding_model : embedding_model = self . embedding_model self . embedding_model = None joblib . dump ( self , file ) self . embedding_model = embedding_model else : joblib . dump ( self , file ) @classmethod def load ( cls , path : str , embedding_model = None ): \"\"\" Loads the model from the specified path Arguments: path: the location and name of the BERTopic file you want to load embedding_model: If the embedding_model was not saved to save space or to load it in from the cloud, you can load it in by specifying it here. Examples: ```python BERTopic.load(\"my_model\") ``` or if you did not save the embedding model: ```python BERTopic.load(\"my_model\", embedding_model=\"all-MiniLM-L6-v2\") ``` \"\"\" with open ( path , 'rb' ) as file : if embedding_model : topic_model = joblib . load ( file ) topic_model . embedding_model = select_backend ( embedding_model ) else : topic_model = joblib . load ( file ) return topic_model def get_params ( self , deep : bool = False ) -> Mapping [ str , Any ]: \"\"\" Get parameters for this estimator. Adapted from: https://github.com/scikit-learn/scikit-learn/blob/b3ea3ed6a/sklearn/base.py#L178 Arguments: deep: bool, default=True If True, will return the parameters for this estimator and contained subobjects that are estimators. Returns: out: Parameter names mapped to their values. \"\"\" out = dict () for key in self . _get_param_names (): value = getattr ( self , key ) if deep and hasattr ( value , 'get_params' ): deep_items = value . get_params () . items () out . update (( key + '__' + k , val ) for k , val in deep_items ) out [ key ] = value return out def _extract_embeddings ( self , documents : Union [ List [ str ], str ], method : str = \"document\" , verbose : bool = None ) -> np . ndarray : \"\"\" Extract sentence/document embeddings through pre-trained embeddings For an overview of pre-trained models: https://www.sbert.net/docs/pretrained_models.html Arguments: documents: Dataframe with documents and their corresponding IDs method: Whether to extract document or word-embeddings, options are \"document\" and \"word\" verbose: Whether to show a progressbar demonstrating the time to extract embeddings Returns: embeddings: The extracted embeddings. \"\"\" if isinstance ( documents , str ): documents = [ documents ] if method == \"word\" : embeddings = self . embedding_model . embed_words ( documents , verbose ) elif method == \"document\" : embeddings = self . embedding_model . embed_documents ( documents , verbose ) else : raise ValueError ( \"Wrong method for extracting document/word embeddings. \" \"Either choose 'word' or 'document' as the method. \" ) return embeddings def _map_predictions ( self , predictions : List [ int ]) -> List [ int ]: \"\"\" Map predictions to the correct topics if topics were reduced \"\"\" mappings = self . topic_mapper_ . get_mappings ( original_topics = True ) mapped_predictions = [ mappings [ prediction ] if prediction in mappings else - 1 for prediction in predictions ] return mapped_predictions def _reduce_dimensionality ( self , embeddings : Union [ np . ndarray , csr_matrix ], y : Union [ List [ int ], np . ndarray ] = None , partial_fit : bool = False ) -> np . ndarray : \"\"\" Reduce dimensionality of embeddings using UMAP and train a UMAP model Arguments: embeddings: The extracted embeddings using the sentence transformer module. y: The target class for (semi)-supervised dimensionality reduction partial_fit: Whether to run `partial_fit` for online learning Returns: umap_embeddings: The reduced embeddings \"\"\" # Partial fit if partial_fit : if hasattr ( self . umap_model , \"partial_fit\" ): self . umap_model = self . umap_model . partial_fit ( embeddings ) elif self . topic_representations_ is None : self . umap_model . fit ( embeddings ) # Regular fit else : try : self . umap_model . fit ( embeddings , y = y ) except TypeError : logger . info ( \"The dimensionality reduction algorithm did not contain the `y` parameter and\" \" therefore the `y` parameter was not used\" ) self . umap_model . fit ( embeddings ) umap_embeddings = self . umap_model . transform ( embeddings ) logger . info ( \"Reduced dimensionality\" ) return np . nan_to_num ( umap_embeddings ) def _cluster_embeddings ( self , umap_embeddings : np . ndarray , documents : pd . DataFrame , partial_fit : bool = False , y : np . ndarray = None ) -> Tuple [ pd . DataFrame , np . ndarray ]: \"\"\" Cluster UMAP embeddings with HDBSCAN Arguments: umap_embeddings: The reduced sentence embeddings with UMAP documents: Dataframe with documents and their corresponding IDs partial_fit: Whether to run `partial_fit` for online learning Returns: documents: Updated dataframe with documents and their corresponding IDs and newly added Topics probabilities: The distribution of probabilities \"\"\" if partial_fit : self . hdbscan_model = self . hdbscan_model . partial_fit ( umap_embeddings ) labels = self . hdbscan_model . labels_ documents [ 'Topic' ] = labels self . topics_ = labels else : try : self . hdbscan_model . fit ( umap_embeddings , y = y ) except TypeError : self . hdbscan_model . fit ( umap_embeddings ) try : labels = self . hdbscan_model . labels_ except AttributeError : labels = y documents [ 'Topic' ] = labels self . _update_topic_size ( documents ) # Some algorithms have outlier labels (-1) that can be tricky to work # with if you are slicing data based on that labels. Therefore, we # track if there are outlier labels and act accordingly when slicing. self . _outliers = 1 if - 1 in set ( labels ) else 0 # Extract probabilities probabilities = None if hasattr ( self . hdbscan_model , \"probabilities_\" ): probabilities = self . hdbscan_model . probabilities_ if self . calculate_probabilities and is_supported_hdbscan ( self . hdbscan_model ): probabilities = hdbscan_delegator ( self . hdbscan_model , \"all_points_membership_vectors\" ) if not partial_fit : self . topic_mapper_ = TopicMapper ( self . topics_ ) logger . info ( \"Clustered reduced embeddings\" ) return documents , probabilities def _guided_topic_modeling ( self , embeddings : np . ndarray ) -> Tuple [ List [ int ], np . array ]: \"\"\" Apply Guided Topic Modeling We transform the seeded topics to embeddings using the same embedder as used for generating document embeddings. Then, we apply cosine similarity between the embeddings and set labels for documents that are more similar to one of the topics, then the average document. If a document is more similar to the average document than any of the topics, it gets the -1 label and is thereby not included in UMAP. Arguments: embeddings: The document embeddings Returns y: The labels for each seeded topic embeddings: Updated embeddings \"\"\" # Create embeddings from the seeded topics seed_topic_list = [ \" \" . join ( seed_topic ) for seed_topic in self . seed_topic_list ] seed_topic_embeddings = self . _extract_embeddings ( seed_topic_list , verbose = self . verbose ) seed_topic_embeddings = np . vstack ([ seed_topic_embeddings , embeddings . mean ( axis = 0 )]) # Label documents that are most similar to one of the seeded topics sim_matrix = cosine_similarity ( embeddings , seed_topic_embeddings ) y = [ np . argmax ( sim_matrix [ index ]) for index in range ( sim_matrix . shape [ 0 ])] y = [ val if val != len ( seed_topic_list ) else - 1 for val in y ] # Average the document embeddings related to the seeded topics with the # embedding of the seeded topic to force the documents in a cluster for seed_topic in range ( len ( seed_topic_list )): indices = [ index for index , topic in enumerate ( y ) if topic == seed_topic ] embeddings [ indices ] = np . average ([ embeddings [ indices ], seed_topic_embeddings [ seed_topic ]], weights = [ 3 , 1 ]) return y , embeddings def _extract_topics ( self , documents : pd . DataFrame ): \"\"\" Extract topics from the clusters using a class-based TF-IDF Arguments: documents: Dataframe with documents and their corresponding IDs Returns: c_tf_idf: The resulting matrix giving a value (importance score) for each word per topic \"\"\" documents_per_topic = documents . groupby ([ 'Topic' ], as_index = False ) . agg ({ 'Document' : ' ' . join }) self . c_tf_idf_ , words = self . _c_tf_idf ( documents_per_topic ) self . topic_representations_ = self . _extract_words_per_topic ( words , documents ) self . _create_topic_vectors () self . topic_labels_ = { key : f \" { key } _\" + \"_\" . join ([ word [ 0 ] for word in values [: 4 ]]) for key , values in self . topic_representations_ . items ()} def _save_representative_docs ( self , documents : pd . DataFrame ): \"\"\" Save the 3 most representative docs per topic Arguments: documents: Dataframe with documents and their corresponding IDs Updates: self.representative_docs_: Populate each topic with 3 representative docs \"\"\" repr_docs , _ , _ = self . _extract_representative_docs ( self . c_tf_idf_ , documents , self . topic_representations_ , nr_samples = 500 , nr_repr_docs = 3 ) self . representative_docs_ = repr_docs def _extract_representative_docs ( self , c_tf_idf : csr_matrix , documents : pd . DataFrame , topics : Mapping [ str , List [ Tuple [ str , float ]]], nr_samples : int = 500 , nr_repr_docs : int = 5 , ) -> Union [ List [ str ], List [ List [ int ]]]: \"\"\" Approximate most representative documents per topic by sampling a subset of the documents in each topic and calculating which are most represenative to their topic based on the cosine similarity between c-TF-IDF representations. Arguments: c_tf_idf: The topic c-TF-IDF representation documents: All input documents topics: The candidate topics as calculated with c-TF-IDF nr_samples: The number of candidate documents to extract per topic nr_repr_docs: The number of representative documents to extract per topic Returns: repr_docs_mappings: A dictionary from topic to representative documents representative_docs: A flat list of representative documents repr_doc_indices: The indices of representative documents that belong to each topic \"\"\" # Sample documents per topic documents_per_topic = ( documents . groupby ( 'Topic' ) . sample ( n = nr_samples , replace = True , random_state = 42 ) . drop_duplicates () ) # Find and extract documents that are most similar to the topic repr_docs = [] repr_docs_indices = [] repr_docs_mappings = {} labels = sorted ( list ( topics . keys ())) for index , topic in enumerate ( labels ): # Calculate similarity selected_docs = documents_per_topic . loc [ documents_per_topic . Topic == topic , \"Document\" ] . values bow = self . vectorizer_model . transform ( selected_docs ) ctfidf = self . ctfidf_model . transform ( bow ) sim_matrix = cosine_similarity ( ctfidf , c_tf_idf [ index ]) # Extract top n most representative documents nr_docs = nr_repr_docs if len ( selected_docs ) > nr_repr_docs else len ( selected_docs ) indices = np . argpartition ( sim_matrix . reshape ( 1 , - 1 )[ 0 ], - nr_docs )[ - nr_docs :] repr_docs . extend ([ selected_docs [ index ] for index in indices ]) repr_docs_indices . append ([ repr_docs_indices [ - 1 ][ - 1 ] + i + 1 if index != 0 else i for i in range ( nr_docs )]) repr_docs_mappings = { topic : repr_docs [ i [ 0 ]: i [ - 1 ] + 1 ] for topic , i in zip ( topics . keys (), repr_docs_indices )} return repr_docs_mappings , repr_docs , repr_docs_indices def _create_topic_vectors ( self ): \"\"\" Creates embeddings per topics based on their topic representation We start by creating embeddings out of the topic representation. This results in a number of embeddings per topic. Then, we take the weighted average of embeddings in a topic by their c-TF-IDF score. This will put more emphasis to words that represent a topic best. Only allow topic vectors to be created if there are no custom embeddings and therefore a sentence-transformer model to be used or there are custom embeddings but it is allowed to use a different multi-lingual sentence-transformer model \"\"\" if self . embedding_model is not None and type ( self . embedding_model ) is not BaseEmbedder : topic_list = list ( self . topic_representations_ . keys ()) topic_list . sort () # Only extract top n words n = len ( self . topic_representations_ [ topic_list [ 0 ]]) if self . top_n_words < n : n = self . top_n_words # Extract embeddings for all words in all topics topic_words = [ self . get_topic ( topic ) for topic in topic_list ] topic_words = [ word [ 0 ] for topic in topic_words for word in topic ] embeddings = self . _extract_embeddings ( topic_words , method = \"word\" , verbose = False ) # Take the weighted average of word embeddings in a topic based on their c-TF-IDF value # The embeddings var is a single numpy matrix and therefore slicing is necessary to # access the words per topic topic_embeddings = [] for i , topic in enumerate ( topic_list ): word_importance = [ val [ 1 ] for val in self . get_topic ( topic )] if sum ( word_importance ) == 0 : word_importance = [ 1 for _ in range ( len ( self . get_topic ( topic )))] topic_embedding = np . average ( embeddings [ i * n : n + ( i * n )], weights = word_importance , axis = 0 ) topic_embeddings . append ( topic_embedding ) self . topic_embeddings_ = topic_embeddings def _c_tf_idf ( self , documents_per_topic : pd . DataFrame , fit : bool = True , partial_fit : bool = False ) -> Tuple [ csr_matrix , List [ str ]]: \"\"\" Calculate a class-based TF-IDF where m is the number of total documents. Arguments: documents_per_topic: The joined documents per topic such that each topic has a single string made out of multiple documents m: The total number of documents (unjoined) fit: Whether to fit a new vectorizer or use the fitted self.vectorizer_model partial_fit: Whether to run `partial_fit` for online learning Returns: tf_idf: The resulting matrix giving a value (importance score) for each word per topic words: The names of the words to which values were given \"\"\" documents = self . _preprocess_text ( documents_per_topic . Document . values ) if partial_fit : X = self . vectorizer_model . partial_fit ( documents ) . update_bow ( documents ) elif fit : self . vectorizer_model . fit ( documents ) X = self . vectorizer_model . transform ( documents ) else : X = self . vectorizer_model . transform ( documents ) # Scikit-Learn Deprecation: get_feature_names is deprecated in 1.0 # and will be removed in 1.2. Please use get_feature_names_out instead. if version . parse ( sklearn_version ) >= version . parse ( \"1.0.0\" ): words = self . vectorizer_model . get_feature_names_out () else : words = self . vectorizer_model . get_feature_names () if self . seed_topic_list : seed_topic_list = [ seed for seeds in self . seed_topic_list for seed in seeds ] multiplier = np . array ([ 1.2 if word in seed_topic_list else 1 for word in words ]) else : multiplier = None if fit : self . ctfidf_model = self . ctfidf_model . fit ( X , multiplier = multiplier ) c_tf_idf = self . ctfidf_model . transform ( X ) return c_tf_idf , words def _update_topic_size ( self , documents : pd . DataFrame ): \"\"\" Calculate the topic sizes Arguments: documents: Updated dataframe with documents and their corresponding IDs and newly added Topics \"\"\" sizes = documents . groupby ([ 'Topic' ]) . count () . sort_values ( \"Document\" , ascending = False ) . reset_index () self . topic_sizes_ = dict ( zip ( sizes . Topic , sizes . Document )) self . topics_ = documents . Topic . astype ( int ) . tolist () def _extract_words_per_topic ( self , words : List [ str ], documents : pd . DataFrame , c_tf_idf : csr_matrix = None ) -> Mapping [ str , List [ Tuple [ str , float ]]]: \"\"\" Based on tf_idf scores per topic, extract the top n words per topic If the top words per topic need to be extracted, then only the `words` parameter needs to be passed. If the top words per topic in a specific timestamp, then it is important to pass the timestamp-based c-TF-IDF matrix and its corresponding labels. Arguments: words: List of all words (sorted according to tf_idf matrix position) documents: DataFrame with documents and their topic IDs c_tf_idf: A c-TF-IDF matrix from which to calculate the top words Returns: topics: The top words per topic \"\"\" if c_tf_idf is None : c_tf_idf = self . c_tf_idf_ labels = sorted ( list ( documents . Topic . unique ())) labels = [ int ( label ) for label in labels ] # Get at least the top 30 indices and values per row in a sparse c-TF-IDF matrix top_n_words = max ( self . top_n_words , 30 ) indices = self . _top_n_idx_sparse ( c_tf_idf , top_n_words ) scores = self . _top_n_values_sparse ( c_tf_idf , indices ) sorted_indices = np . argsort ( scores , 1 ) indices = np . take_along_axis ( indices , sorted_indices , axis = 1 ) scores = np . take_along_axis ( scores , sorted_indices , axis = 1 ) # Get top 30 words per topic based on c-TF-IDF score topics = { label : [( words [ word_index ], score ) if word_index is not None and score > 0 else ( \"\" , 0.00001 ) for word_index , score in zip ( indices [ index ][:: - 1 ], scores [ index ][:: - 1 ]) ] for index , label in enumerate ( labels )} # Fine-tune the topic representations if isinstance ( self . representation_model , list ): for tuner in self . representation_model : topics = tuner . extract_topics ( self , documents , c_tf_idf , topics ) elif isinstance ( self . representation_model , BaseRepresentation ): topics = self . representation_model . extract_topics ( self , documents , c_tf_idf , topics ) topics = { label : values [: self . top_n_words ] for label , values in topics . items ()} return topics def _reduce_topics ( self , documents : pd . DataFrame ) -> pd . DataFrame : \"\"\" Reduce topics to self.nr_topics Arguments: documents: Dataframe with documents and their corresponding IDs and Topics Returns: documents: Updated dataframe with documents and the reduced number of Topics \"\"\" initial_nr_topics = len ( self . get_topics ()) if isinstance ( self . nr_topics , int ): if self . nr_topics < initial_nr_topics : documents = self . _reduce_to_n_topics ( documents ) elif isinstance ( self . nr_topics , str ): documents = self . _auto_reduce_topics ( documents ) else : raise ValueError ( \"nr_topics needs to be an int or 'auto'! \" ) logger . info ( f \"Reduced number of topics from { initial_nr_topics } to { len ( self . get_topic_freq ()) } \" ) return documents def _reduce_to_n_topics ( self , documents : pd . DataFrame ) -> pd . DataFrame : \"\"\" Reduce topics to self.nr_topics Arguments: documents: Dataframe with documents and their corresponding IDs and Topics Returns: documents: Updated dataframe with documents and the reduced number of Topics \"\"\" topics = documents . Topic . tolist () . copy () # Create topic distance matrix if self . topic_embeddings_ is not None : topic_embeddings = np . array ( self . topic_embeddings_ )[ self . _outliers :, ] else : topic_embeddings = self . c_tf_idf_ [ self . _outliers :, ] . toarray () distance_matrix = 1 - cosine_similarity ( topic_embeddings ) np . fill_diagonal ( distance_matrix , 0 ) # Cluster the topic embeddings using AgglomerativeClustering if version . parse ( sklearn_version ) >= version . parse ( \"1.4.0\" ): cluster = AgglomerativeClustering ( self . nr_topics - self . _outliers , metric = \"precomputed\" , linkage = \"average\" ) else : cluster = AgglomerativeClustering ( self . nr_topics - self . _outliers , affinity = \"precomputed\" , linkage = \"average\" ) cluster . fit ( distance_matrix ) new_topics = [ cluster . labels_ [ topic ] if topic != - 1 else - 1 for topic in topics ] # Map topics documents . Topic = new_topics self . _update_topic_size ( documents ) mapped_topics = { from_topic : to_topic for from_topic , to_topic in zip ( topics , new_topics )} self . topic_mapper_ . add_mappings ( mapped_topics ) # Update representations documents = self . _sort_mappings_by_frequency ( documents ) self . _extract_topics ( documents ) self . _update_topic_size ( documents ) return documents def _auto_reduce_topics ( self , documents : pd . DataFrame ) -> pd . DataFrame : \"\"\" Reduce the number of topics automatically using HDBSCAN Arguments: documents: Dataframe with documents and their corresponding IDs and Topics Returns: documents: Updated dataframe with documents and the reduced number of Topics \"\"\" topics = documents . Topic . tolist () . copy () unique_topics = sorted ( list ( documents . Topic . unique ()))[ self . _outliers :] max_topic = unique_topics [ - 1 ] # Find similar topics if self . topic_embeddings_ is not None : embeddings = np . array ( self . topic_embeddings_ ) else : embeddings = self . c_tf_idf_ . toarray () norm_data = normalize ( embeddings , norm = 'l2' ) predictions = hdbscan . HDBSCAN ( min_cluster_size = 2 , metric = 'euclidean' , cluster_selection_method = 'eom' , prediction_data = True ) . fit_predict ( norm_data [ self . _outliers :]) # Map similar topics mapped_topics = { unique_topics [ index ]: prediction + max_topic for index , prediction in enumerate ( predictions ) if prediction != - 1 } documents . Topic = documents . Topic . map ( mapped_topics ) . fillna ( documents . Topic ) . astype ( int ) mapped_topics = { from_topic : to_topic for from_topic , to_topic in zip ( topics , documents . Topic . tolist ())} # Update documents and topics self . topic_mapper_ . add_mappings ( mapped_topics ) documents = self . _sort_mappings_by_frequency ( documents ) self . _extract_topics ( documents ) self . _update_topic_size ( documents ) return documents def _sort_mappings_by_frequency ( self , documents : pd . DataFrame ) -> pd . DataFrame : \"\"\" Reorder mappings by their frequency. For example, if topic 88 was mapped to topic 5 and topic 5 turns out to be the largest topic, then topic 5 will be topic 0. The second largest, will be topic 1, etc. If there are no mappings since no reduction of topics took place, then the topics will simply be ordered by their frequency and will get the topic ids based on that order. This means that -1 will remain the outlier class, and that the rest of the topics will be in descending order of ids and frequency. Arguments: documents: Dataframe with documents and their corresponding IDs and Topics Returns: documents: Updated dataframe with documents and the mapped and re-ordered topic ids \"\"\" self . _update_topic_size ( documents ) # Map topics based on frequency df = pd . DataFrame ( self . topic_sizes_ . items (), columns = [ \"Old_Topic\" , \"Size\" ]) . sort_values ( \"Size\" , ascending = False ) df = df [ df . Old_Topic != - 1 ] sorted_topics = { ** { - 1 : - 1 }, ** dict ( zip ( df . Old_Topic , range ( len ( df ))))} self . topic_mapper_ . add_mappings ( sorted_topics ) # Map documents documents . Topic = documents . Topic . map ( sorted_topics ) . fillna ( documents . Topic ) . astype ( int ) self . _update_topic_size ( documents ) return documents def _map_probabilities ( self , probabilities : Union [ np . ndarray , None ], original_topics : bool = False ) -> Union [ np . ndarray , None ]: \"\"\" Map the probabilities to the reduced topics. This is achieved by adding the probabilities together of all topics that were mapped to the same topic. Then, the topics that were mapped from were set to 0 as they were reduced. Arguments: probabilities: An array containing probabilities original_topics: Whether we want to map from the original topics to the most recent topics or from the second-most recent topics. Returns: mapped_probabilities: Updated probabilities \"\"\" mappings = self . topic_mapper_ . get_mappings ( original_topics ) # Map array of probabilities (probability for assigned topic per document) if probabilities is not None : if len ( probabilities . shape ) == 2 : mapped_probabilities = np . zeros (( probabilities . shape [ 0 ], len ( set ( mappings . values ())) - self . _outliers )) for from_topic , to_topic in mappings . items (): if to_topic != - 1 and from_topic != - 1 : mapped_probabilities [:, to_topic ] += probabilities [:, from_topic ] return mapped_probabilities return probabilities def _preprocess_text ( self , documents : np . ndarray ) -> List [ str ]: \"\"\" Basic preprocessing of text Steps: * Replace \\n and \\t with whitespace * Only keep alpha-numerical characters \"\"\" cleaned_documents = [ doc . replace ( \" \\n \" , \" \" ) for doc in documents ] cleaned_documents = [ doc . replace ( \" \\t \" , \" \" ) for doc in cleaned_documents ] if self . language == \"english\" : cleaned_documents = [ re . sub ( r '[^A-Za-z0-9 ]+' , '' , doc ) for doc in cleaned_documents ] cleaned_documents = [ doc if doc != \"\" else \"emptydoc\" for doc in cleaned_documents ] return cleaned_documents @staticmethod def _top_n_idx_sparse ( matrix : csr_matrix , n : int ) -> np . ndarray : \"\"\" Return indices of top n values in each row of a sparse matrix Retrieved from: https://stackoverflow.com/questions/49207275/finding-the-top-n-values-in-a-row-of-a-scipy-sparse-matrix Arguments: matrix: The sparse matrix from which to get the top n indices per row n: The number of highest values to extract from each row Returns: indices: The top n indices per row \"\"\" indices = [] for le , ri in zip ( matrix . indptr [: - 1 ], matrix . indptr [ 1 :]): n_row_pick = min ( n , ri - le ) values = matrix . indices [ le + np . argpartition ( matrix . data [ le : ri ], - n_row_pick )[ - n_row_pick :]] values = [ values [ index ] if len ( values ) >= index + 1 else None for index in range ( n )] indices . append ( values ) return np . array ( indices ) @staticmethod def _top_n_values_sparse ( matrix : csr_matrix , indices : np . ndarray ) -> np . ndarray : \"\"\" Return the top n values for each row in a sparse matrix Arguments: matrix: The sparse matrix from which to get the top n indices per row indices: The top n indices per row Returns: top_values: The top n scores per row \"\"\" top_values = [] for row , values in enumerate ( indices ): scores = np . array ([ matrix [ row , value ] if value is not None else 0 for value in values ]) top_values . append ( scores ) return np . array ( top_values ) @classmethod def _get_param_names ( cls ): \"\"\"Get parameter names for the estimator Adapted from: https://github.com/scikit-learn/scikit-learn/blob/b3ea3ed6a/sklearn/base.py#L178 \"\"\" init_signature = inspect . signature ( cls . __init__ ) parameters = sorted ([ p . name for p in init_signature . parameters . values () if p . name != 'self' and p . kind != p . VAR_KEYWORD ]) return parameters def __str__ ( self ): \"\"\"Get a string representation of the current object. Returns: str: Human readable representation of the most important model parameters. The parameters that represent models are ignored due to their length. \"\"\" parameters = \"\" for parameter , value in self . get_params () . items (): value = str ( value ) if \"(\" in value and value [ 0 ] != \"(\" : value = value . split ( \"(\" )[ 0 ] + \"(...)\" parameters += f \" { parameter } = { value } , \" return f \"BERTopic( { parameters [: - 2 ] } )\"","title":"BERTopic"},{"location":"api/bertopic.html#bertopic._bertopic.BERTopic.__init__","text":"BERTopic initialization Parameters: Name Type Description Default language str The main language used in your documents. The default sentence-transformers model for \"english\" is all-MiniLM-L6-v2 . For a full overview of supported languages see bertopic.backend.languages. Select \"multilingual\" to load in the paraphrase-multilingual-MiniLM-L12-v2 sentence-tranformers model that supports 50+ languages. NOTE: This is not used if embedding_model is used. 'english' top_n_words int The number of words per topic to extract. Setting this too high can negatively impact topic embeddings as topics are typically best represented by at most 10 words. 10 n_gram_range Tuple[int, int] The n-gram range for the CountVectorizer. Advised to keep high values between 1 and 3. More would likely lead to memory issues. NOTE: This param will not be used if you pass in your own CountVectorizer. (1, 1) min_topic_size int The minimum size of the topic. Increasing this value will lead to a lower number of clusters/topics. NOTE: This param will not be used if you are not using HDBSCAN. 10 nr_topics Union[int, str] Specifying the number of topics will reduce the initial number of topics to the value specified. This reduction can take a while as each reduction in topics (-1) activates a c-TF-IDF calculation. If this is set to None, no reduction is applied. Use \"auto\" to automatically reduce topics using HDBSCAN. None low_memory bool Sets UMAP low memory to True to make sure less memory is used. NOTE: This is only used in UMAP. For example, if you use PCA instead of UMAP this parameter will not be used. False calculate_probabilities bool Calculate the probabilities of all topics per document instead of the probability of the assigned topic per document. This could slow down the extraction of topics if you have many documents (> 100_000). NOTE: If false you cannot use the corresponding visualization method visualize_probabilities . NOTE: This is an approximation of topic probabilities as used in HDBSCAN and not an exact representation. False seed_topic_list List[List[str]] A list of seed words per topic to converge around None verbose bool Changes the verbosity of the model, Set to True if you want to track the stages of the model. False embedding_model Use a custom embedding model. The following backends are currently supported * SentenceTransformers * Flair * Spacy * Gensim * USE (TF-Hub) You can also pass in a string that points to one of the following sentence-transformers models: * https://www.sbert.net/docs/pretrained_models.html None umap_model UMAP Pass in a UMAP model to be used instead of the default. NOTE: You can also pass in any dimensionality reduction algorithm as long as it has .fit and .transform functions. None hdbscan_model HDBSCAN Pass in a hdbscan.HDBSCAN model to be used instead of the default NOTE: You can also pass in any clustering algorithm as long as it has .fit and .predict functions along with the .labels_ variable. None vectorizer_model CountVectorizer Pass in a custom CountVectorizer instead of the default model. None ctfidf_model TfidfTransformer Pass in a custom ClassTfidfTransformer instead of the default model. None representation_model BaseRepresentation Pass in a model that fine-tunes the topic representations calculated through c-TF-IDF. Models from bertopic.representation are supported. None Source code in bertopic\\_bertopic.py def __init__ ( self , language : str = \"english\" , top_n_words : int = 10 , n_gram_range : Tuple [ int , int ] = ( 1 , 1 ), min_topic_size : int = 10 , nr_topics : Union [ int , str ] = None , low_memory : bool = False , calculate_probabilities : bool = False , seed_topic_list : List [ List [ str ]] = None , embedding_model = None , umap_model : UMAP = None , hdbscan_model : hdbscan . HDBSCAN = None , vectorizer_model : CountVectorizer = None , ctfidf_model : TfidfTransformer = None , representation_model : BaseRepresentation = None , verbose : bool = False , ): \"\"\"BERTopic initialization Arguments: language: The main language used in your documents. The default sentence-transformers model for \"english\" is `all-MiniLM-L6-v2`. For a full overview of supported languages see bertopic.backend.languages. Select \"multilingual\" to load in the `paraphrase-multilingual-MiniLM-L12-v2` sentence-tranformers model that supports 50+ languages. NOTE: This is not used if `embedding_model` is used. top_n_words: The number of words per topic to extract. Setting this too high can negatively impact topic embeddings as topics are typically best represented by at most 10 words. n_gram_range: The n-gram range for the CountVectorizer. Advised to keep high values between 1 and 3. More would likely lead to memory issues. NOTE: This param will not be used if you pass in your own CountVectorizer. min_topic_size: The minimum size of the topic. Increasing this value will lead to a lower number of clusters/topics. NOTE: This param will not be used if you are not using HDBSCAN. nr_topics: Specifying the number of topics will reduce the initial number of topics to the value specified. This reduction can take a while as each reduction in topics (-1) activates a c-TF-IDF calculation. If this is set to None, no reduction is applied. Use \"auto\" to automatically reduce topics using HDBSCAN. low_memory: Sets UMAP low memory to True to make sure less memory is used. NOTE: This is only used in UMAP. For example, if you use PCA instead of UMAP this parameter will not be used. calculate_probabilities: Calculate the probabilities of all topics per document instead of the probability of the assigned topic per document. This could slow down the extraction of topics if you have many documents (> 100_000). NOTE: If false you cannot use the corresponding visualization method `visualize_probabilities`. NOTE: This is an approximation of topic probabilities as used in HDBSCAN and not an exact representation. seed_topic_list: A list of seed words per topic to converge around verbose: Changes the verbosity of the model, Set to True if you want to track the stages of the model. embedding_model: Use a custom embedding model. The following backends are currently supported * SentenceTransformers * Flair * Spacy * Gensim * USE (TF-Hub) You can also pass in a string that points to one of the following sentence-transformers models: * https://www.sbert.net/docs/pretrained_models.html umap_model: Pass in a UMAP model to be used instead of the default. NOTE: You can also pass in any dimensionality reduction algorithm as long as it has `.fit` and `.transform` functions. hdbscan_model: Pass in a hdbscan.HDBSCAN model to be used instead of the default NOTE: You can also pass in any clustering algorithm as long as it has `.fit` and `.predict` functions along with the `.labels_` variable. vectorizer_model: Pass in a custom `CountVectorizer` instead of the default model. ctfidf_model: Pass in a custom ClassTfidfTransformer instead of the default model. representation_model: Pass in a model that fine-tunes the topic representations calculated through c-TF-IDF. Models from `bertopic.representation` are supported. \"\"\" # Topic-based parameters if top_n_words > 100 : warnings . warn ( \"Note that extracting more than 100 words from a sparse \" \"can slow down computation quite a bit.\" ) self . top_n_words = top_n_words self . min_topic_size = min_topic_size self . nr_topics = nr_topics self . low_memory = low_memory self . calculate_probabilities = calculate_probabilities self . verbose = verbose self . seed_topic_list = seed_topic_list # Embedding model self . language = language if not embedding_model else None self . embedding_model = embedding_model # Vectorizer self . n_gram_range = n_gram_range self . vectorizer_model = vectorizer_model or CountVectorizer ( ngram_range = self . n_gram_range ) self . ctfidf_model = ctfidf_model or ClassTfidfTransformer () # Representation model self . representation_model = representation_model # UMAP or another algorithm that has .fit and .transform functions self . umap_model = umap_model or UMAP ( n_neighbors = 15 , n_components = 5 , min_dist = 0.0 , metric = 'cosine' , low_memory = self . low_memory ) # HDBSCAN or another clustering algorithm that has .fit and .predict functions and # the .labels_ variable to extract the labels self . hdbscan_model = hdbscan_model or hdbscan . HDBSCAN ( min_cluster_size = self . min_topic_size , metric = 'euclidean' , cluster_selection_method = 'eom' , prediction_data = True ) # Public attributes self . topics_ = None self . probabilities_ = None self . topic_sizes_ = None self . topic_mapper_ = None self . topic_representations_ = None self . topic_embeddings_ = None self . topic_labels_ = None self . custom_labels_ = None self . representative_docs_ = {} self . c_tf_idf_ = None # Private attributes for internal tracking purposes self . _outliers = 1 self . _merged_topics = None if verbose : logger . set_level ( \"DEBUG\" )","title":"__init__()"},{"location":"api/bertopic.html#bertopic._bertopic.BERTopic.__str__","text":"Get a string representation of the current object. Returns: Type Description str Human readable representation of the most important model parameters. The parameters that represent models are ignored due to their length. Source code in bertopic\\_bertopic.py def __str__ ( self ): \"\"\"Get a string representation of the current object. Returns: str: Human readable representation of the most important model parameters. The parameters that represent models are ignored due to their length. \"\"\" parameters = \"\" for parameter , value in self . get_params () . items (): value = str ( value ) if \"(\" in value and value [ 0 ] != \"(\" : value = value . split ( \"(\" )[ 0 ] + \"(...)\" parameters += f \" { parameter } = { value } , \" return f \"BERTopic( { parameters [: - 2 ] } )\"","title":"__str__()"},{"location":"api/bertopic.html#bertopic._bertopic.BERTopic.approximate_distribution","text":"A post-hoc approximation of topic distributions across documents. In order to perform this approximation, each document is split into tokens according to the provided tokenizer in the CountVectorizer . Then, a sliding window is applied on each document creating subsets of the document. For example, with a window size of 3 and stride of 1, the sentence: Solving the right problem is difficult. can be split up into solving the right , the right problem , right problem is , and problem is difficult . These are called tokensets. For each of these tokensets, we calculate their c-TF-IDF representation and find out how similar they are to the previously generated topics. Then, the similarities to the topics for each tokenset are summed in order to create a topic distribution for the entire document. We can also dive into this a bit deeper by then splitting these tokensets up into individual tokens and calculate how much a word, in a specific sentence, contributes to the topics found in that document. This can be enabled by setting calculate_tokens=True which can be used for visualization purposes in topic_model.visualize_approximate_distribution . The main output, topic_distributions , can also be used directly in .visualize_distribution(topic_distributions[index]) by simply selecting a single distribution. Parameters: Name Type Description Default documents Union[str, List[str]] A single document or a list of documents for which we approximate their topic distributions required window int Size of the moving window which indicates the number of tokens being considered. 4 stride int How far the window should move at each step. 1 min_similarity float The minimum similarity of a document's tokenset with respect to the topics. 0.1 batch_size int The number of documents to process at a time. If None, then all documents are processed at once. NOTE: With a large number of documents, it is not advised to process all documents at once. 1000 padding bool Whether to pad the beginning and ending of a document with empty tokens. False use_embedding_model bool Whether to use the topic model's embedding model to calculate the similarity between tokensets and topics instead of using c-TF-IDF. False calculate_tokens bool Calculate the similarity of tokens with all topics. NOTE: This is computation-wise more expensive and can require more memory. Using this over batches of documents might be preferred. False separator str The separator used to merge tokens into tokensets. ' ' Returns: Type Description topic_distributions A n x m matrix containing the topic distributions for all input documents with n being the documents and m the topics. topic_token_distributions: A list of t x m arrays with t being the number of tokens for the respective document and m the topics. Examples: After fitting the model, the topic distributions can be calculated regardless of the clustering model and regardless of whether the documents were previously seen or not: topic_distr , _ = topic_model . approximate_distribution ( docs ) As a result, the topic distributions are calculated in topic_distr for the entire document based on token set with a specific window size and stride. If you want to calculate the topic distributions on a token-level: topic_distr , topic_token_distr = topic_model . approximate_distribution ( docs , calculate_tokens = True ) The topic_token_distr then contains, for each token, the best fitting topics. As with topic_distr , it can contain multiple topics for a single token. Source code in bertopic\\_bertopic.py def approximate_distribution ( self , documents : Union [ str , List [ str ]], window : int = 4 , stride : int = 1 , min_similarity : float = 0.1 , batch_size : int = 1000 , padding : bool = False , use_embedding_model : bool = False , calculate_tokens : bool = False , separator : str = \" \" ) -> Tuple [ np . ndarray , Union [ List [ np . ndarray ], None ]]: \"\"\" A post-hoc approximation of topic distributions across documents. In order to perform this approximation, each document is split into tokens according to the provided tokenizer in the `CountVectorizer`. Then, a sliding window is applied on each document creating subsets of the document. For example, with a window size of 3 and stride of 1, the sentence: `Solving the right problem is difficult.` can be split up into `solving the right`, `the right problem`, `right problem is`, and `problem is difficult`. These are called tokensets. For each of these tokensets, we calculate their c-TF-IDF representation and find out how similar they are to the previously generated topics. Then, the similarities to the topics for each tokenset are summed in order to create a topic distribution for the entire document. We can also dive into this a bit deeper by then splitting these tokensets up into individual tokens and calculate how much a word, in a specific sentence, contributes to the topics found in that document. This can be enabled by setting `calculate_tokens=True` which can be used for visualization purposes in `topic_model.visualize_approximate_distribution`. The main output, `topic_distributions`, can also be used directly in `.visualize_distribution(topic_distributions[index])` by simply selecting a single distribution. Arguments: documents: A single document or a list of documents for which we approximate their topic distributions window: Size of the moving window which indicates the number of tokens being considered. stride: How far the window should move at each step. min_similarity: The minimum similarity of a document's tokenset with respect to the topics. batch_size: The number of documents to process at a time. If None, then all documents are processed at once. NOTE: With a large number of documents, it is not advised to process all documents at once. padding: Whether to pad the beginning and ending of a document with empty tokens. use_embedding_model: Whether to use the topic model's embedding model to calculate the similarity between tokensets and topics instead of using c-TF-IDF. calculate_tokens: Calculate the similarity of tokens with all topics. NOTE: This is computation-wise more expensive and can require more memory. Using this over batches of documents might be preferred. separator: The separator used to merge tokens into tokensets. Returns: topic_distributions: A `n` x `m` matrix containing the topic distributions for all input documents with `n` being the documents and `m` the topics. topic_token_distributions: A list of `t` x `m` arrays with `t` being the number of tokens for the respective document and `m` the topics. Examples: After fitting the model, the topic distributions can be calculated regardless of the clustering model and regardless of whether the documents were previously seen or not: ```python topic_distr, _ = topic_model.approximate_distribution(docs) ``` As a result, the topic distributions are calculated in `topic_distr` for the entire document based on token set with a specific window size and stride. If you want to calculate the topic distributions on a token-level: ```python topic_distr, topic_token_distr = topic_model.approximate_distribution(docs, calculate_tokens=True) ``` The `topic_token_distr` then contains, for each token, the best fitting topics. As with `topic_distr`, it can contain multiple topics for a single token. \"\"\" if isinstance ( documents , str ): documents = [ documents ] if batch_size is None : batch_size = len ( documents ) batches = 1 else : batches = math . ceil ( len ( documents ) / batch_size ) topic_distributions = [] topic_token_distributions = [] for i in tqdm ( range ( batches ), disable = not self . verbose ): doc_set = documents [ i * batch_size : ( i + 1 ) * batch_size ] # Extract tokens analyzer = self . vectorizer_model . build_tokenizer () tokens = [ analyzer ( document ) for document in doc_set ] # Extract token sets all_sentences = [] all_indices = [ 0 ] all_token_sets_ids = [] for tokenset in tokens : if len ( tokenset ) < window : token_sets = [ tokenset ] token_sets_ids = [ list ( range ( len ( tokenset )))] else : # Extract tokensets using window and stride parameters stride_indices = list ( range ( len ( tokenset )))[:: stride ] token_sets = [] token_sets_ids = [] for stride_index in stride_indices : selected_tokens = tokenset [ stride_index : stride_index + window ] if padding or len ( selected_tokens ) == window : token_sets . append ( selected_tokens ) token_sets_ids . append ( list ( range ( stride_index , stride_index + len ( selected_tokens )))) # Add empty tokens at the beginning and end of a document if padding : padded = [] padded_ids = [] t = math . ceil ( window / stride ) - 1 for i in range ( math . ceil ( window / stride ) - 1 ): padded . append ( tokenset [: window - (( t - i ) * stride )]) padded_ids . append ( list ( range ( 0 , window - (( t - i ) * stride )))) token_sets = padded + token_sets token_sets_ids = padded_ids + token_sets_ids # Join the tokens sentences = [ separator . join ( token ) for token in token_sets ] all_sentences . extend ( sentences ) all_token_sets_ids . extend ( token_sets_ids ) all_indices . append ( all_indices [ - 1 ] + len ( sentences )) # Calculate similarity between embeddings of token sets and the topics if use_embedding_model : embeddings = self . _extract_embeddings ( all_sentences , method = \"document\" , verbose = True ) similarity = cosine_similarity ( embeddings , self . topic_embeddings_ [ self . _outliers :]) # Calculate similarity between c-TF-IDF of token sets and the topics else : bow_doc = self . vectorizer_model . transform ( all_sentences ) c_tf_idf_doc = self . ctfidf_model . transform ( bow_doc ) similarity = cosine_similarity ( c_tf_idf_doc , self . c_tf_idf_ [ self . _outliers :]) # Only keep similarities that exceed the minimum similarity [ similarity < min_similarity ] = 0 # Aggregate results on an individual token level if calculate_tokens : topic_distribution = [] topic_token_distribution = [] for index , token in enumerate ( tokens ): start = all_indices [ index ] end = all_indices [ index + 1 ] if start == end : end = end + 1 # Assign topics to individual tokens token_id = [ i for i in range ( len ( token ))] token_val = { index : [] for index in token_id } for sim , token_set in zip ( similarity [ start : end ], all_token_sets_ids [ start : end ]): for token in token_set : if token in token_val : token_val [ token ] . append ( sim ) matrix = [] for _ , value in token_val . items (): matrix . append ( np . add . reduce ( value )) # Take empty documents into account matrix = np . array ( matrix ) if len ( matrix . shape ) == 1 : matrix = np . zeros (( 1 , len ( self . topic_labels_ ) - self . _outliers )) topic_token_distribution . append ( np . array ( matrix )) topic_distribution . append ( np . add . reduce ( matrix )) topic_distribution = normalize ( topic_distribution , norm = 'l1' , axis = 1 ) # Aggregate on a tokenset level indicated by the window and stride else : topic_distribution = [] for index in range ( len ( all_indices ) - 1 ): start = all_indices [ index ] end = all_indices [ index + 1 ] if start == end : end = end + 1 group = similarity [ start : end ] . sum ( axis = 0 ) topic_distribution . append ( group ) topic_distribution = normalize ( np . array ( topic_distribution ), norm = 'l1' , axis = 1 ) topic_token_distribution = None # Combine results topic_distributions . append ( topic_distribution ) if topic_token_distribution is None : topic_token_distributions = None else : topic_token_distributions . extend ( topic_token_distribution ) topic_distributions = np . vstack ( topic_distributions ) return topic_distributions , topic_token_distributions","title":"approximate_distribution()"},{"location":"api/bertopic.html#bertopic._bertopic.BERTopic.find_topics","text":"Find topics most similar to a search_term Creates an embedding for search_term and compares that with the topic embeddings. The most similar topics are returned along with their similarity values. The search_term can be of any size but since it compares with the topic representation it is advised to keep it below 5 words. Parameters: Name Type Description Default search_term str the term you want to use to search for topics required top_n int the number of topics to return 5 Returns: Type Description similar_topics the most similar topics from high to low similarity: the similarity scores from high to low Examples: You can use the underlying embedding model to find topics that best represent the search term: topics , similarity = topic_model . find_topics ( \"sports\" , top_n = 5 ) Note that the search query is typically more accurate if the search_term consists of a phrase or multiple words. Source code in bertopic\\_bertopic.py def find_topics ( self , search_term : str , top_n : int = 5 ) -> Tuple [ List [ int ], List [ float ]]: \"\"\" Find topics most similar to a search_term Creates an embedding for search_term and compares that with the topic embeddings. The most similar topics are returned along with their similarity values. The search_term can be of any size but since it compares with the topic representation it is advised to keep it below 5 words. Arguments: search_term: the term you want to use to search for topics top_n: the number of topics to return Returns: similar_topics: the most similar topics from high to low similarity: the similarity scores from high to low Examples: You can use the underlying embedding model to find topics that best represent the search term: ```python topics, similarity = topic_model.find_topics(\"sports\", top_n=5) ``` Note that the search query is typically more accurate if the search_term consists of a phrase or multiple words. \"\"\" if self . embedding_model is None : raise Exception ( \"This method can only be used if you did not use custom embeddings.\" ) topic_list = list ( self . topic_representations_ . keys ()) topic_list . sort () # Extract search_term embeddings and compare with topic embeddings search_embedding = self . _extract_embeddings ([ search_term ], method = \"word\" , verbose = False ) . flatten () sims = cosine_similarity ( search_embedding . reshape ( 1 , - 1 ), self . topic_embeddings_ ) . flatten () # Extract topics most similar to search_term ids = np . argsort ( sims )[ - top_n :] similarity = [ sims [ i ] for i in ids ][:: - 1 ] similar_topics = [ topic_list [ index ] for index in ids ][:: - 1 ] return similar_topics , similarity","title":"find_topics()"},{"location":"api/bertopic.html#bertopic._bertopic.BERTopic.fit","text":"Fit the models (Bert, UMAP, and, HDBSCAN) on a collection of documents and generate topics Parameters: Name Type Description Default documents List[str] A list of documents to fit on required embeddings ndarray Pre-trained document embeddings. These can be used instead of the sentence-transformer model None y Union[List[int], numpy.ndarray] The target class for (semi)-supervised modeling. Use -1 if no class for a specific instance is specified. None Examples: from bertopic import BERTopic from sklearn.datasets import fetch_20newsgroups docs = fetch_20newsgroups ( subset = 'all' )[ 'data' ] topic_model = BERTopic () . fit ( docs ) If you want to use your own embeddings, use it as follows: from bertopic import BERTopic from sklearn.datasets import fetch_20newsgroups from sentence_transformers import SentenceTransformer # Create embeddings docs = fetch_20newsgroups ( subset = 'all' )[ 'data' ] sentence_model = SentenceTransformer ( \"all-MiniLM-L6-v2\" ) embeddings = sentence_model . encode ( docs , show_progress_bar = True ) # Create topic model topic_model = BERTopic () . fit ( docs , embeddings ) Source code in bertopic\\_bertopic.py def fit ( self , documents : List [ str ], embeddings : np . ndarray = None , y : Union [ List [ int ], np . ndarray ] = None ): \"\"\" Fit the models (Bert, UMAP, and, HDBSCAN) on a collection of documents and generate topics Arguments: documents: A list of documents to fit on embeddings: Pre-trained document embeddings. These can be used instead of the sentence-transformer model y: The target class for (semi)-supervised modeling. Use -1 if no class for a specific instance is specified. Examples: ```python from bertopic import BERTopic from sklearn.datasets import fetch_20newsgroups docs = fetch_20newsgroups(subset='all')['data'] topic_model = BERTopic().fit(docs) ``` If you want to use your own embeddings, use it as follows: ```python from bertopic import BERTopic from sklearn.datasets import fetch_20newsgroups from sentence_transformers import SentenceTransformer # Create embeddings docs = fetch_20newsgroups(subset='all')['data'] sentence_model = SentenceTransformer(\"all-MiniLM-L6-v2\") embeddings = sentence_model.encode(docs, show_progress_bar=True) # Create topic model topic_model = BERTopic().fit(docs, embeddings) ``` \"\"\" self . fit_transform ( documents , embeddings , y ) return self","title":"fit()"},{"location":"api/bertopic.html#bertopic._bertopic.BERTopic.fit_transform","text":"Fit the models on a collection of documents, generate topics, and return the docs with topics Parameters: Name Type Description Default documents List[str] A list of documents to fit on required embeddings ndarray Pre-trained document embeddings. These can be used instead of the sentence-transformer model None y Union[List[int], numpy.ndarray] The target class for (semi)-supervised modeling. Use -1 if no class for a specific instance is specified. None Returns: Type Description predictions Topic predictions for each documents probabilities: The probability of the assigned topic per document. If calculate_probabilities in BERTopic is set to True, then it calculates the probabilities of all topics across all documents instead of only the assigned topic. This, however, slows down computation and may increase memory usage. Examples: from bertopic import BERTopic from sklearn.datasets import fetch_20newsgroups docs = fetch_20newsgroups ( subset = 'all' )[ 'data' ] topic_model = BERTopic () topics , probs = topic_model . fit_transform ( docs ) If you want to use your own embeddings, use it as follows: from bertopic import BERTopic from sklearn.datasets import fetch_20newsgroups from sentence_transformers import SentenceTransformer # Create embeddings docs = fetch_20newsgroups ( subset = 'all' )[ 'data' ] sentence_model = SentenceTransformer ( \"all-MiniLM-L6-v2\" ) embeddings = sentence_model . encode ( docs , show_progress_bar = True ) # Create topic model topic_model = BERTopic () topics , probs = topic_model . fit_transform ( docs , embeddings ) Source code in bertopic\\_bertopic.py def fit_transform ( self , documents : List [ str ], embeddings : np . ndarray = None , y : Union [ List [ int ], np . ndarray ] = None ) -> Tuple [ List [ int ], Union [ np . ndarray , None ]]: \"\"\" Fit the models on a collection of documents, generate topics, and return the docs with topics Arguments: documents: A list of documents to fit on embeddings: Pre-trained document embeddings. These can be used instead of the sentence-transformer model y: The target class for (semi)-supervised modeling. Use -1 if no class for a specific instance is specified. Returns: predictions: Topic predictions for each documents probabilities: The probability of the assigned topic per document. If `calculate_probabilities` in BERTopic is set to True, then it calculates the probabilities of all topics across all documents instead of only the assigned topic. This, however, slows down computation and may increase memory usage. Examples: ```python from bertopic import BERTopic from sklearn.datasets import fetch_20newsgroups docs = fetch_20newsgroups(subset='all')['data'] topic_model = BERTopic() topics, probs = topic_model.fit_transform(docs) ``` If you want to use your own embeddings, use it as follows: ```python from bertopic import BERTopic from sklearn.datasets import fetch_20newsgroups from sentence_transformers import SentenceTransformer # Create embeddings docs = fetch_20newsgroups(subset='all')['data'] sentence_model = SentenceTransformer(\"all-MiniLM-L6-v2\") embeddings = sentence_model.encode(docs, show_progress_bar=True) # Create topic model topic_model = BERTopic() topics, probs = topic_model.fit_transform(docs, embeddings) ``` \"\"\" check_documents_type ( documents ) check_embeddings_shape ( embeddings , documents ) documents = pd . DataFrame ({ \"Document\" : documents , \"ID\" : range ( len ( documents )), \"Topic\" : None }) # Extract embeddings if embeddings is None : self . embedding_model = select_backend ( self . embedding_model , language = self . language ) embeddings = self . _extract_embeddings ( documents . Document , method = \"document\" , verbose = self . verbose ) logger . info ( \"Transformed documents to Embeddings\" ) else : if self . embedding_model is not None : self . embedding_model = select_backend ( self . embedding_model , language = self . language ) # Reduce dimensionality if self . seed_topic_list is not None and self . embedding_model is not None : y , embeddings = self . _guided_topic_modeling ( embeddings ) umap_embeddings = self . _reduce_dimensionality ( embeddings , y ) # Cluster reduced embeddings documents , probabilities = self . _cluster_embeddings ( umap_embeddings , documents , y = y ) # Sort and Map Topic IDs by their frequency if not self . nr_topics : documents = self . _sort_mappings_by_frequency ( documents ) # Extract topics by calculating c-TF-IDF self . _extract_topics ( documents ) # Reduce topics if self . nr_topics : documents = self . _reduce_topics ( documents ) # Save the top 3 most representative documents per topic self . _save_representative_docs ( documents ) # Resulting output self . probabilities_ = self . _map_probabilities ( probabilities , original_topics = True ) predictions = documents . Topic . to_list () return predictions , self . probabilities_","title":"fit_transform()"},{"location":"api/bertopic.html#bertopic._bertopic.BERTopic.generate_topic_labels","text":"Get labels for each topic in a user-defined format Parameters: Name Type Description Default original_labels required nr_words int Top n words per topic to use 3 topic_prefix bool Whether to use the topic ID as a prefix. If set to True, the topic ID will be separated using the separator True word_length int The maximum length of each word in the topic label. Some words might be relatively long and setting this value helps to make sure that all labels have relatively similar lengths. None separator str The string with which the words and topic prefix will be separated. Underscores are the default but a nice alternative is \", \" . '_' Returns: Type Description topic_labels A list of topic labels sorted from the lowest topic ID to the highest. If the topic model was trained using HDBSCAN, the lowest topic ID is -1, otherwise it is 0. Examples: To create our custom topic labels, usage is rather straightforward: topic_labels = topic_model . get_topic_labels ( nr_words = 2 , separator = \", \" ) Source code in bertopic\\_bertopic.py def generate_topic_labels ( self , nr_words : int = 3 , topic_prefix : bool = True , word_length : int = None , separator : str = \"_\" ) -> List [ str ]: \"\"\" Get labels for each topic in a user-defined format Arguments: original_labels: nr_words: Top `n` words per topic to use topic_prefix: Whether to use the topic ID as a prefix. If set to True, the topic ID will be separated using the `separator` word_length: The maximum length of each word in the topic label. Some words might be relatively long and setting this value helps to make sure that all labels have relatively similar lengths. separator: The string with which the words and topic prefix will be separated. Underscores are the default but a nice alternative is `\", \"`. Returns: topic_labels: A list of topic labels sorted from the lowest topic ID to the highest. If the topic model was trained using HDBSCAN, the lowest topic ID is -1, otherwise it is 0. Examples: To create our custom topic labels, usage is rather straightforward: ```python topic_labels = topic_model.get_topic_labels(nr_words=2, separator=\", \") ``` \"\"\" unique_topics = sorted ( set ( self . topics_ )) topic_labels = [] for topic in unique_topics : words , _ = zip ( * self . get_topic ( topic )) if word_length : words = [ word [: word_length ] for word in words ][: nr_words ] else : words = list ( words )[: nr_words ] if topic_prefix : topic_label = f \" { topic }{ separator } \" + separator . join ( words ) else : topic_label = separator . join ( words ) topic_labels . append ( topic_label ) return topic_labels","title":"generate_topic_labels()"},{"location":"api/bertopic.html#bertopic._bertopic.BERTopic.get_document_info","text":"Get information about the documents on which the topic was trained including the documents themselves, their respective topics, the name of each topic, the top n words of each topic, whether it is a representative document, and probability of the clustering if the cluster model supports it. There are also options to include other meta data, such as the topic distributions or the x and y coordinates of the reduced embeddings. Parameters: Name Type Description Default docs List[str] The documents on which the topic model was trained. required df DataFrame A dataframe containing the metadata and the documents on which the topic model was originally trained on. None metadata Mapping[str, Any] A dictionary with meta data for each document in the form of column name (key) and the respective values (value). None Returns: Type Description document_info A dataframe with several statistics regarding the documents on which the topic model was trained. Usage: To get the document info, you will only need to pass the documents on which the topic model was trained: document_info = topic_model . get_document_info ( docs ) There are additionally options to include meta data, such as the topic distributions. Moreover, we can pass the original dataframe that contains the documents and extend it with the information retrieved from BERTopic: from sklearn.datasets import fetch_20newsgroups # The original data in a dataframe format to include the target variable data = fetch_20newsgroups ( subset = 'all' , remove = ( 'headers' , 'footers' , 'quotes' )) df = pd . DataFrame ({ \"Document\" : data [ 'data' ], \"Class\" : data [ 'target' ]}) # Add information about the percentage of the document that relates to the topic topic_distr , _ = topic_model . approximate_distribution ( docs , batch_size = 1000 ) distributions = [ distr [ topic ] if topic != - 1 else 0 for topic , distr in zip ( topics , topic_distr )] # Create our documents dataframe using the original dataframe and meta data about # the topic distributions document_info = topic_model . get_document_info ( docs , df = df , metadata = { \"Topic_distribution\" : distributions }) Source code in bertopic\\_bertopic.py def get_document_info ( self , docs : List [ str ], df : pd . DataFrame = None , metadata : Mapping [ str , Any ] = None ) -> pd . DataFrame : \"\"\" Get information about the documents on which the topic was trained including the documents themselves, their respective topics, the name of each topic, the top n words of each topic, whether it is a representative document, and probability of the clustering if the cluster model supports it. There are also options to include other meta data, such as the topic distributions or the x and y coordinates of the reduced embeddings. Arguments: docs: The documents on which the topic model was trained. df: A dataframe containing the metadata and the documents on which the topic model was originally trained on. metadata: A dictionary with meta data for each document in the form of column name (key) and the respective values (value). Returns: document_info: A dataframe with several statistics regarding the documents on which the topic model was trained. Usage: To get the document info, you will only need to pass the documents on which the topic model was trained: ```python document_info = topic_model.get_document_info(docs) ``` There are additionally options to include meta data, such as the topic distributions. Moreover, we can pass the original dataframe that contains the documents and extend it with the information retrieved from BERTopic: ```python from sklearn.datasets import fetch_20newsgroups # The original data in a dataframe format to include the target variable data= fetch_20newsgroups(subset='all', remove=('headers', 'footers', 'quotes')) df = pd.DataFrame({\"Document\": data['data'], \"Class\": data['target']}) # Add information about the percentage of the document that relates to the topic topic_distr, _ = topic_model.approximate_distribution(docs, batch_size=1000) distributions = [distr[topic] if topic != -1 else 0 for topic, distr in zip(topics, topic_distr)] # Create our documents dataframe using the original dataframe and meta data about # the topic distributions document_info = topic_model.get_document_info(docs, df=df, metadata={\"Topic_distribution\": distributions}) ``` \"\"\" if df is not None : document_info = df . copy () document_info [ \"Document\" ] = docs document_info [ \"Topic\" ] = self . topics_ else : document_info = pd . DataFrame ({ \"Document\" : docs , \"Topic\" : self . topics_ }) # Add topic info through `.get_topic_info()` topic_info = self . get_topic_info () . drop ( \"Count\" , axis = 1 ) document_info = pd . merge ( document_info , topic_info , on = \"Topic\" , how = \"left\" ) # Add top n words top_n_words = { topic : \" - \" . join ( list ( zip ( * self . get_topic ( topic )))[ 0 ]) for topic in set ( self . topics_ )} document_info [ \"Top_n_words\" ] = document_info . Topic . map ( top_n_words ) # Add flat probabilities if self . probabilities_ is not None : if len ( self . probabilities_ . shape ) == 1 : document_info [ \"Probability\" ] = self . probabilities_ else : document_info [ \"Probability\" ] = [ max ( probs ) if topic != - 1 else 1 - sum ( probs ) for topic , probs in zip ( self . topics_ , self . probabilities_ )] # Add representative document labels repr_docs = [ repr_doc for repr_docs in self . representative_docs_ . values () for repr_doc in repr_docs ] document_info [ \"Representative_document\" ] = False document_info . loc [ document_info . Document . isin ( repr_docs ), \"Representative_document\" ] = True # Add custom meta data provided by the user if metadata is not None : for column , values in metadata . items (): document_info [ column ] = values return document_info","title":"get_document_info()"},{"location":"api/bertopic.html#bertopic._bertopic.BERTopic.get_params","text":"Get parameters for this estimator. Adapted from: https://github.com/scikit-learn/scikit-learn/blob/b3ea3ed6a/sklearn/base.py#L178 Parameters: Name Type Description Default deep bool bool, default=True If True, will return the parameters for this estimator and contained subobjects that are estimators. False Returns: Type Description out Parameter names mapped to their values. Source code in bertopic\\_bertopic.py def get_params ( self , deep : bool = False ) -> Mapping [ str , Any ]: \"\"\" Get parameters for this estimator. Adapted from: https://github.com/scikit-learn/scikit-learn/blob/b3ea3ed6a/sklearn/base.py#L178 Arguments: deep: bool, default=True If True, will return the parameters for this estimator and contained subobjects that are estimators. Returns: out: Parameter names mapped to their values. \"\"\" out = dict () for key in self . _get_param_names (): value = getattr ( self , key ) if deep and hasattr ( value , 'get_params' ): deep_items = value . get_params () . items () out . update (( key + '__' + k , val ) for k , val in deep_items ) out [ key ] = value return out","title":"get_params()"},{"location":"api/bertopic.html#bertopic._bertopic.BERTopic.get_representative_docs","text":"Extract the best representing documents per topic. Note This does not extract all documents per topic as all documents are not saved within BERTopic. To get all documents, please run the following: # When you used `.fit_transform`: df = pd . DataFrame ({ \"Document\" : docs , \"Topic\" : topic }) # When you used `.fit`: df = pd . DataFrame ({ \"Document\" : docs , \"Topic\" : topic_model . topics_ }) Parameters: Name Type Description Default topic int A specific topic for which you want the representative documents None Returns: Type Description List[str] Representative documents of the chosen topic Examples: To extract the representative docs of all topics: representative_docs = topic_model . get_representative_docs () To get the representative docs of a single topic: representative_docs = topic_model . get_representative_docs ( 12 ) Source code in bertopic\\_bertopic.py def get_representative_docs ( self , topic : int = None ) -> List [ str ]: \"\"\" Extract the best representing documents per topic. NOTE: This does not extract all documents per topic as all documents are not saved within BERTopic. To get all documents, please run the following: ```python # When you used `.fit_transform`: df = pd.DataFrame({\"Document\": docs, \"Topic\": topic}) # When you used `.fit`: df = pd.DataFrame({\"Document\": docs, \"Topic\": topic_model.topics_}) ``` Arguments: topic: A specific topic for which you want the representative documents Returns: Representative documents of the chosen topic Examples: To extract the representative docs of all topics: ```python representative_docs = topic_model.get_representative_docs() ``` To get the representative docs of a single topic: ```python representative_docs = topic_model.get_representative_docs(12) ``` \"\"\" check_is_fitted ( self ) if isinstance ( topic , int ): if self . representative_docs_ . get ( topic ): return self . representative_docs_ [ topic ] else : return None else : return self . representative_docs_","title":"get_representative_docs()"},{"location":"api/bertopic.html#bertopic._bertopic.BERTopic.get_topic","text":"Return top n words for a specific topic and their c-TF-IDF scores Parameters: Name Type Description Default topic int A specific topic for which you want its representation required Returns: Type Description Union[Mapping[str, Tuple[str, float]], bool] The top n words for a specific word and its respective c-TF-IDF scores Examples: topic = topic_model . get_topic ( 12 ) Source code in bertopic\\_bertopic.py def get_topic ( self , topic : int ) -> Union [ Mapping [ str , Tuple [ str , float ]], bool ]: \"\"\" Return top n words for a specific topic and their c-TF-IDF scores Arguments: topic: A specific topic for which you want its representation Returns: The top n words for a specific word and its respective c-TF-IDF scores Examples: ```python topic = topic_model.get_topic(12) ``` \"\"\" check_is_fitted ( self ) if topic in self . topic_representations_ : return self . topic_representations_ [ topic ] else : return False","title":"get_topic()"},{"location":"api/bertopic.html#bertopic._bertopic.BERTopic.get_topic_freq","text":"Return the the size of topics (descending order) Parameters: Name Type Description Default topic int A specific topic for which you want the frequency None Returns: Type Description Union[pandas.core.frame.DataFrame, int] Either the frequency of a single topic or dataframe with the frequencies of all topics Examples: To extract the frequency of all topics: frequency = topic_model . get_topic_freq () To get the frequency of a single topic: frequency = topic_model . get_topic_freq ( 12 ) Source code in bertopic\\_bertopic.py def get_topic_freq ( self , topic : int = None ) -> Union [ pd . DataFrame , int ]: \"\"\" Return the the size of topics (descending order) Arguments: topic: A specific topic for which you want the frequency Returns: Either the frequency of a single topic or dataframe with the frequencies of all topics Examples: To extract the frequency of all topics: ```python frequency = topic_model.get_topic_freq() ``` To get the frequency of a single topic: ```python frequency = topic_model.get_topic_freq(12) ``` \"\"\" check_is_fitted ( self ) if isinstance ( topic , int ): return self . topic_sizes_ [ topic ] else : return pd . DataFrame ( self . topic_sizes_ . items (), columns = [ 'Topic' , 'Count' ]) . sort_values ( \"Count\" , ascending = False )","title":"get_topic_freq()"},{"location":"api/bertopic.html#bertopic._bertopic.BERTopic.get_topic_info","text":"Get information about each topic including its ID, frequency, and name. Parameters: Name Type Description Default topic int A specific topic for which you want the frequency None Returns: Type Description info The information relating to either a single topic or all topics Examples: info_df = topic_model . get_topic_info () Source code in bertopic\\_bertopic.py def get_topic_info ( self , topic : int = None ) -> pd . DataFrame : \"\"\" Get information about each topic including its ID, frequency, and name. Arguments: topic: A specific topic for which you want the frequency Returns: info: The information relating to either a single topic or all topics Examples: ```python info_df = topic_model.get_topic_info() ``` \"\"\" check_is_fitted ( self ) info = pd . DataFrame ( self . topic_sizes_ . items (), columns = [ \"Topic\" , \"Count\" ]) . sort_values ( \"Topic\" ) info [ \"Name\" ] = info . Topic . map ( self . topic_labels_ ) if self . custom_labels_ is not None : if len ( self . custom_labels_ ) == len ( info ): labels = { topic - self . _outliers : label for topic , label in enumerate ( self . custom_labels_ )} info [ \"CustomName\" ] = info [ \"Topic\" ] . map ( labels ) if topic is not None : info = info . loc [ info . Topic == topic , :] return info . reset_index ( drop = True )","title":"get_topic_info()"},{"location":"api/bertopic.html#bertopic._bertopic.BERTopic.get_topic_tree","text":"Extract the topic tree such that it can be printed Parameters: Name Type Description Default hier_topics DataFrame A dataframe containing the structure of the topic tree. This is the output of topic_model.hierachical_topics() required max_distance float The maximum distance between two topics. This value is based on the Distance column in hier_topics . None tight_layout bool Whether to use a tight layout (narrow width) for easier readability if you have hundreds of topics. False Returns: Type Description A tree that has the following structure when printed . . \u2514\u2500health_medical_disease_patients_hiv \u251c\u2500patients_medical_disease_candida_health \u2502 \u251c\u2500\u25a0\u2500\u2500candida_yeast_infection_gonorrhea_infections \u2500\u2500 Topic: 48 \u2502 \u2514\u2500patients_disease_cancer_medical_doctor \u2502 \u251c\u2500\u25a0\u2500\u2500hiv_medical_cancer_patients_doctor \u2500\u2500 Topic: 34 \u2502 \u2514\u2500\u25a0\u2500\u2500pain_drug_patients_disease_diet \u2500\u2500 Topic: 26 \u2514\u2500\u25a0\u2500\u2500health_newsgroup_tobacco_vote_votes \u2500\u2500 Topic: 9 The blocks (\u25a0) indicate that the topic is one you can directly access from topic_model.get_topic . In other words, they are the original un-grouped topics. Examples: # Train model from bertopic import BERTopic topic_model = BERTopic () topics , probs = topic_model . fit_transform ( docs ) hierarchical_topics = topic_model . hierarchical_topics ( docs ) # Print topic tree tree = topic_model . get_topic_tree ( hierarchical_topics ) print ( tree ) Source code in bertopic\\_bertopic.py @staticmethod def get_topic_tree ( hier_topics : pd . DataFrame , max_distance : float = None , tight_layout : bool = False ) -> str : \"\"\" Extract the topic tree such that it can be printed Arguments: hier_topics: A dataframe containing the structure of the topic tree. This is the output of `topic_model.hierachical_topics()` max_distance: The maximum distance between two topics. This value is based on the Distance column in `hier_topics`. tight_layout: Whether to use a tight layout (narrow width) for easier readability if you have hundreds of topics. Returns: A tree that has the following structure when printed: . . \u2514\u2500health_medical_disease_patients_hiv \u251c\u2500patients_medical_disease_candida_health \u2502 \u251c\u2500\u25a0\u2500\u2500candida_yeast_infection_gonorrhea_infections \u2500\u2500 Topic: 48 \u2502 \u2514\u2500patients_disease_cancer_medical_doctor \u2502 \u251c\u2500\u25a0\u2500\u2500hiv_medical_cancer_patients_doctor \u2500\u2500 Topic: 34 \u2502 \u2514\u2500\u25a0\u2500\u2500pain_drug_patients_disease_diet \u2500\u2500 Topic: 26 \u2514\u2500\u25a0\u2500\u2500health_newsgroup_tobacco_vote_votes \u2500\u2500 Topic: 9 The blocks (\u25a0) indicate that the topic is one you can directly access from `topic_model.get_topic`. In other words, they are the original un-grouped topics. Examples: ```python # Train model from bertopic import BERTopic topic_model = BERTopic() topics, probs = topic_model.fit_transform(docs) hierarchical_topics = topic_model.hierarchical_topics(docs) # Print topic tree tree = topic_model.get_topic_tree(hierarchical_topics) print(tree) ``` \"\"\" width = 1 if tight_layout else 4 if max_distance is None : max_distance = hier_topics . Distance . max () + 1 max_original_topic = hier_topics . Parent_ID . astype ( int ) . min () - 1 # Extract mapping from ID to name topic_to_name = dict ( zip ( hier_topics . Child_Left_ID , hier_topics . Child_Left_Name )) topic_to_name . update ( dict ( zip ( hier_topics . Child_Right_ID , hier_topics . Child_Right_Name ))) topic_to_name = { topic : name [: 100 ] for topic , name in topic_to_name . items ()} # Create tree tree = { str ( row [ 1 ] . Parent_ID ): [ str ( row [ 1 ] . Child_Left_ID ), str ( row [ 1 ] . Child_Right_ID )] for row in hier_topics . iterrows ()} def get_tree ( start , tree ): \"\"\" Based on: https://stackoverflow.com/a/51920869/10532563 \"\"\" def _tree ( to_print , start , parent , tree , grandpa = None , indent = \"\" ): # Get distance between merged topics distance = hier_topics . loc [( hier_topics . Child_Left_ID == parent ) | ( hier_topics . Child_Right_ID == parent ), \"Distance\" ] distance = distance . values [ 0 ] if len ( distance ) > 0 else 10 if parent != start : if grandpa is None : to_print += topic_to_name [ parent ] else : if int ( parent ) <= max_original_topic : # Do not append topic ID if they are not merged if distance < max_distance : to_print += \"\u25a0\u2500\u2500\" + topic_to_name [ parent ] + f \" \u2500\u2500 Topic: { parent } \" + \" \\n \" else : to_print += \"O \\n \" else : to_print += topic_to_name [ parent ] + \" \\n \" if parent not in tree : return to_print for child in tree [ parent ][: - 1 ]: to_print += indent + \"\u251c\" + \"\u2500\" to_print = _tree ( to_print , start , child , tree , parent , indent + \"\u2502\" + \" \" * width ) child = tree [ parent ][ - 1 ] to_print += indent + \"\u2514\" + \"\u2500\" to_print = _tree ( to_print , start , child , tree , parent , indent + \" \" * ( width + 1 )) return to_print to_print = \".\" + \" \\n \" to_print = _tree ( to_print , start , start , tree ) return to_print start = str ( hier_topics . Parent_ID . astype ( int ) . max ()) return get_tree ( start , tree )","title":"get_topic_tree()"},{"location":"api/bertopic.html#bertopic._bertopic.BERTopic.get_topics","text":"Return topics with top n words and their c-TF-IDF score Returns: Type Description self.topic_representations_ The top n words per topic and the corresponding c-TF-IDF score Examples: all_topics = topic_model . get_topics () Source code in bertopic\\_bertopic.py def get_topics ( self ) -> Mapping [ str , Tuple [ str , float ]]: \"\"\" Return topics with top n words and their c-TF-IDF score Returns: self.topic_representations_: The top n words per topic and the corresponding c-TF-IDF score Examples: ```python all_topics = topic_model.get_topics() ``` \"\"\" check_is_fitted ( self ) return self . topic_representations_","title":"get_topics()"},{"location":"api/bertopic.html#bertopic._bertopic.BERTopic.hierarchical_topics","text":"Create a hierarchy of topics To create this hierarchy, BERTopic needs to be already fitted once. Then, a hierarchy is calculated on the distance matrix of the c-TF-IDF representation using scipy.cluster.hierarchy.linkage . Based on that hierarchy, we calculate the topic representation at each merged step. This is a local representation, as we only assume that the chosen step is merged and not all others which typically improves the topic representation. Parameters: Name Type Description Default docs List[int] The documents you used when calling either fit or fit_transform required linkage_function Callable[[scipy.sparse._csr.csr_matrix], numpy.ndarray] The linkage function to use. Default is: lambda x: sch.linkage(x, 'ward', optimal_ordering=True) None distance_function Callable[[scipy.sparse._csr.csr_matrix], scipy.sparse._csr.csr_matrix] The distance function to use on the c-TF-IDF matrix. Default is: lambda x: 1 - cosine_similarity(x) None Returns: Type Description hierarchical_topics A dataframe that contains a hierarchy of topics represented by their parents and their children Examples: from bertopic import BERTopic topic_model = BERTopic () topics , probs = topic_model . fit_transform ( docs ) hierarchical_topics = topic_model . hierarchical_topics ( docs ) A custom linkage function can be used as follows: from scipy.cluster import hierarchy as sch from bertopic import BERTopic topic_model = BERTopic () topics , probs = topic_model . fit_transform ( docs ) # Hierarchical topics linkage_function = lambda x : sch . linkage ( x , 'ward' , optimal_ordering = True ) hierarchical_topics = topic_model . hierarchical_topics ( docs , linkage_function = linkage_function ) Source code in bertopic\\_bertopic.py def hierarchical_topics ( self , docs : List [ int ], linkage_function : Callable [[ csr_matrix ], np . ndarray ] = None , distance_function : Callable [[ csr_matrix ], csr_matrix ] = None ) -> pd . DataFrame : \"\"\" Create a hierarchy of topics To create this hierarchy, BERTopic needs to be already fitted once. Then, a hierarchy is calculated on the distance matrix of the c-TF-IDF representation using `scipy.cluster.hierarchy.linkage`. Based on that hierarchy, we calculate the topic representation at each merged step. This is a local representation, as we only assume that the chosen step is merged and not all others which typically improves the topic representation. Arguments: docs: The documents you used when calling either `fit` or `fit_transform` linkage_function: The linkage function to use. Default is: `lambda x: sch.linkage(x, 'ward', optimal_ordering=True)` distance_function: The distance function to use on the c-TF-IDF matrix. Default is: `lambda x: 1 - cosine_similarity(x)` Returns: hierarchical_topics: A dataframe that contains a hierarchy of topics represented by their parents and their children Examples: ```python from bertopic import BERTopic topic_model = BERTopic() topics, probs = topic_model.fit_transform(docs) hierarchical_topics = topic_model.hierarchical_topics(docs) ``` A custom linkage function can be used as follows: ```python from scipy.cluster import hierarchy as sch from bertopic import BERTopic topic_model = BERTopic() topics, probs = topic_model.fit_transform(docs) # Hierarchical topics linkage_function = lambda x: sch.linkage(x, 'ward', optimal_ordering=True) hierarchical_topics = topic_model.hierarchical_topics(docs, linkage_function=linkage_function) ``` \"\"\" if distance_function is None : distance_function = lambda x : 1 - cosine_similarity ( x ) if linkage_function is None : linkage_function = lambda x : sch . linkage ( x , 'ward' , optimal_ordering = True ) # Calculate distance embeddings = self . c_tf_idf_ [ self . _outliers :] X = distance_function ( embeddings ) # Make sure it is the 1-D condensed distance matrix with zeros on the diagonal np . fill_diagonal ( X , 0 ) X = squareform ( X ) # Use the 1-D condensed distance matrix as an input instead of the raw distance matrix Z = linkage_function ( X ) # Calculate basic bag-of-words to be iteratively merged later documents = pd . DataFrame ({ \"Document\" : docs , \"ID\" : range ( len ( docs )), \"Topic\" : self . topics_ }) documents_per_topic = documents . groupby ([ 'Topic' ], as_index = False ) . agg ({ 'Document' : ' ' . join }) documents_per_topic = documents_per_topic . loc [ documents_per_topic . Topic != - 1 , :] clean_documents = self . _preprocess_text ( documents_per_topic . Document . values ) # Scikit-Learn Deprecation: get_feature_names is deprecated in 1.0 # and will be removed in 1.2. Please use get_feature_names_out instead. if version . parse ( sklearn_version ) >= version . parse ( \"1.0.0\" ): words = self . vectorizer_model . get_feature_names_out () else : words = self . vectorizer_model . get_feature_names () bow = self . vectorizer_model . transform ( clean_documents ) # Extract clusters hier_topics = pd . DataFrame ( columns = [ \"Parent_ID\" , \"Parent_Name\" , \"Topics\" , \"Child_Left_ID\" , \"Child_Left_Name\" , \"Child_Right_ID\" , \"Child_Right_Name\" ]) for index in tqdm ( range ( len ( Z ))): # Find clustered documents clusters = sch . fcluster ( Z , t = Z [ index ][ 2 ], criterion = 'distance' ) - self . _outliers cluster_df = pd . DataFrame ({ \"Topic\" : range ( len ( clusters )), \"Cluster\" : clusters }) cluster_df = cluster_df . groupby ( \"Cluster\" ) . agg ({ 'Topic' : lambda x : list ( x )}) . reset_index () nr_clusters = len ( clusters ) # Extract first topic we find to get the set of topics in a merged topic topic = None val = Z [ index ][ 0 ] while topic is None : if val - len ( clusters ) < 0 : topic = int ( val ) else : val = Z [ int ( val - len ( clusters ))][ 0 ] clustered_topics = [ i for i , x in enumerate ( clusters ) if x == clusters [ topic ]] # Group bow per cluster, calculate c-TF-IDF and extract words grouped = csr_matrix ( bow [ clustered_topics ] . sum ( axis = 0 )) c_tf_idf = self . ctfidf_model . transform ( grouped ) selection = documents . loc [ documents . Topic . isin ( clustered_topics ), :] selection . Topic = 0 words_per_topic = self . _extract_words_per_topic ( words , selection , c_tf_idf ) # Extract parent's name and ID parent_id = index + len ( clusters ) parent_name = \"_\" . join ([ x [ 0 ] for x in words_per_topic [ 0 ]][: 5 ]) # Extract child's name and ID Z_id = Z [ index ][ 0 ] child_left_id = Z_id if Z_id - nr_clusters < 0 else Z_id - nr_clusters if Z_id - nr_clusters < 0 : child_left_name = \"_\" . join ([ x [ 0 ] for x in self . get_topic ( Z_id )][: 5 ]) else : child_left_name = hier_topics . iloc [ int ( child_left_id )] . Parent_Name # Extract child's name and ID Z_id = Z [ index ][ 1 ] child_right_id = Z_id if Z_id - nr_clusters < 0 else Z_id - nr_clusters if Z_id - nr_clusters < 0 : child_right_name = \"_\" . join ([ x [ 0 ] for x in self . get_topic ( Z_id )][: 5 ]) else : child_right_name = hier_topics . iloc [ int ( child_right_id )] . Parent_Name # Save results hier_topics . loc [ len ( hier_topics ), :] = [ parent_id , parent_name , clustered_topics , int ( Z [ index ][ 0 ]), child_left_name , int ( Z [ index ][ 1 ]), child_right_name ] hier_topics [ \"Distance\" ] = Z [:, 2 ] hier_topics = hier_topics . sort_values ( \"Parent_ID\" , ascending = False ) hier_topics [[ \"Parent_ID\" , \"Child_Left_ID\" , \"Child_Right_ID\" ]] = hier_topics [[ \"Parent_ID\" , \"Child_Left_ID\" , \"Child_Right_ID\" ]] . astype ( str ) return hier_topics","title":"hierarchical_topics()"},{"location":"api/bertopic.html#bertopic._bertopic.BERTopic.load","text":"Loads the model from the specified path Parameters: Name Type Description Default path str the location and name of the BERTopic file you want to load required embedding_model If the embedding_model was not saved to save space or to load it in from the cloud, you can load it in by specifying it here. None Examples: BERTopic . load ( \"my_model\" ) or if you did not save the embedding model: BERTopic . load ( \"my_model\" , embedding_model = \"all-MiniLM-L6-v2\" ) Source code in bertopic\\_bertopic.py @classmethod def load ( cls , path : str , embedding_model = None ): \"\"\" Loads the model from the specified path Arguments: path: the location and name of the BERTopic file you want to load embedding_model: If the embedding_model was not saved to save space or to load it in from the cloud, you can load it in by specifying it here. Examples: ```python BERTopic.load(\"my_model\") ``` or if you did not save the embedding model: ```python BERTopic.load(\"my_model\", embedding_model=\"all-MiniLM-L6-v2\") ``` \"\"\" with open ( path , 'rb' ) as file : if embedding_model : topic_model = joblib . load ( file ) topic_model . embedding_model = select_backend ( embedding_model ) else : topic_model = joblib . load ( file ) return topic_model","title":"load()"},{"location":"api/bertopic.html#bertopic._bertopic.BERTopic.merge_topics","text":"Parameters: Name Type Description Default docs List[str] The documents you used when calling either fit or fit_transform required topics_to_merge List[Union[Iterable[int], int]] Either a list of topics or a list of list of topics to merge. For example: [1, 2, 3] will merge topics 1, 2 and 3 [[1, 2], [3, 4]] will merge topics 1 and 2, and separately merge topics 3 and 4. required Examples: If you want to merge topics 1, 2, and 3: topics_to_merge = [ 1 , 2 , 3 ] topic_model . merge_topics ( docs , topics_to_merge ) or if you want to merge topics 1 and 2, and separately merge topics 3 and 4: topics_to_merge = [[ 1 , 2 ] [ 3 , 4 ]] topic_model . merge_topics ( docs , topics_to_merge ) Source code in bertopic\\_bertopic.py def merge_topics ( self , docs : List [ str ], topics_to_merge : List [ Union [ Iterable [ int ], int ]]) -> None : \"\"\" Arguments: docs: The documents you used when calling either `fit` or `fit_transform` topics_to_merge: Either a list of topics or a list of list of topics to merge. For example: [1, 2, 3] will merge topics 1, 2 and 3 [[1, 2], [3, 4]] will merge topics 1 and 2, and separately merge topics 3 and 4. Examples: If you want to merge topics 1, 2, and 3: ```python topics_to_merge = [1, 2, 3] topic_model.merge_topics(docs, topics_to_merge) ``` or if you want to merge topics 1 and 2, and separately merge topics 3 and 4: ```python topics_to_merge = [[1, 2] [3, 4]] topic_model.merge_topics(docs, topics_to_merge) ``` \"\"\" check_is_fitted ( self ) documents = pd . DataFrame ({ \"Document\" : docs , \"Topic\" : self . topics_ }) mapping = { topic : topic for topic in set ( self . topics_ )} if isinstance ( topics_to_merge [ 0 ], int ): for topic in sorted ( topics_to_merge ): mapping [ topic ] = topics_to_merge [ 0 ] elif isinstance ( topics_to_merge [ 0 ], Iterable ): for topic_group in sorted ( topics_to_merge ): for topic in topic_group : mapping [ topic ] = topic_group [ 0 ] else : raise ValueError ( \"Make sure that `topics_to_merge` is either\" \"a list of topics or a list of list of topics.\" ) documents . Topic = documents . Topic . map ( mapping ) self . topic_mapper_ . add_mappings ( mapping ) documents = self . _sort_mappings_by_frequency ( documents ) self . _extract_topics ( documents ) self . _update_topic_size ( documents ) self . _save_representative_docs ( documents ) self . probabilities_ = self . _map_probabilities ( self . probabilities_ )","title":"merge_topics()"},{"location":"api/bertopic.html#bertopic._bertopic.BERTopic.partial_fit","text":"Fit BERTopic on a subset of the data and perform online learning with batch-like data. Online topic modeling in BERTopic is performed by using dimensionality reduction and cluster algorithms that support a partial_fit method in order to incrementally train the topic model. Likewise, the bertopic.vectorizers.OnlineCountVectorizer is used to dynamically update its vocabulary when presented with new data. It has several parameters for modeling decay and updating the representations. In other words, although the main algorithm stays the same, the training procedure now works as follows: For each subset of the data: Generate embeddings with a pre-traing language model Incrementally update the dimensionality reduction algorithm with partial_fit Incrementally update the cluster algorithm with partial_fit Incrementally update the OnlineCountVectorizer and apply some form of decay Note that it is advised to use partial_fit with batches and not single documents for the best performance. Parameters: Name Type Description Default documents List[str] A list of documents to fit on required embeddings ndarray Pre-trained document embeddings. These can be used instead of the sentence-transformer model None y Union[List[int], numpy.ndarray] The target class for (semi)-supervised modeling. Use -1 if no class for a specific instance is specified. None Examples: from sklearn.datasets import fetch_20newsgroups from sklearn.cluster import MiniBatchKMeans from sklearn.decomposition import IncrementalPCA from bertopic.vectorizers import OnlineCountVectorizer from bertopic import BERTopic # Prepare documents docs = fetch_20newsgroups ( subset = subset , remove = ( 'headers' , 'footers' , 'quotes' ))[ \"data\" ] # Prepare sub-models that support online learning umap_model = IncrementalPCA ( n_components = 5 ) cluster_model = MiniBatchKMeans ( n_clusters = 50 , random_state = 0 ) vectorizer_model = OnlineCountVectorizer ( stop_words = \"english\" , decay = .01 ) topic_model = BERTopic ( umap_model = umap_model , hdbscan_model = cluster_model , vectorizer_model = vectorizer_model ) # Incrementally fit the topic model by training on 1000 documents at a time for index in range ( 0 , len ( docs ), 1000 ): topic_model . partial_fit ( docs [ index : index + 1000 ]) Source code in bertopic\\_bertopic.py def partial_fit ( self , documents : List [ str ], embeddings : np . ndarray = None , y : Union [ List [ int ], np . ndarray ] = None ): \"\"\" Fit BERTopic on a subset of the data and perform online learning with batch-like data. Online topic modeling in BERTopic is performed by using dimensionality reduction and cluster algorithms that support a `partial_fit` method in order to incrementally train the topic model. Likewise, the `bertopic.vectorizers.OnlineCountVectorizer` is used to dynamically update its vocabulary when presented with new data. It has several parameters for modeling decay and updating the representations. In other words, although the main algorithm stays the same, the training procedure now works as follows: For each subset of the data: 1. Generate embeddings with a pre-traing language model 2. Incrementally update the dimensionality reduction algorithm with `partial_fit` 3. Incrementally update the cluster algorithm with `partial_fit` 4. Incrementally update the OnlineCountVectorizer and apply some form of decay Note that it is advised to use `partial_fit` with batches and not single documents for the best performance. Arguments: documents: A list of documents to fit on embeddings: Pre-trained document embeddings. These can be used instead of the sentence-transformer model y: The target class for (semi)-supervised modeling. Use -1 if no class for a specific instance is specified. Examples: ```python from sklearn.datasets import fetch_20newsgroups from sklearn.cluster import MiniBatchKMeans from sklearn.decomposition import IncrementalPCA from bertopic.vectorizers import OnlineCountVectorizer from bertopic import BERTopic # Prepare documents docs = fetch_20newsgroups(subset=subset, remove=('headers', 'footers', 'quotes'))[\"data\"] # Prepare sub-models that support online learning umap_model = IncrementalPCA(n_components=5) cluster_model = MiniBatchKMeans(n_clusters=50, random_state=0) vectorizer_model = OnlineCountVectorizer(stop_words=\"english\", decay=.01) topic_model = BERTopic(umap_model=umap_model, hdbscan_model=cluster_model, vectorizer_model=vectorizer_model) # Incrementally fit the topic model by training on 1000 documents at a time for index in range(0, len(docs), 1000): topic_model.partial_fit(docs[index: index+1000]) ``` \"\"\" # Checks check_embeddings_shape ( embeddings , documents ) if not hasattr ( self . hdbscan_model , \"partial_fit\" ): raise ValueError ( \"In order to use `.partial_fit`, the cluster model should have \" \"a `.partial_fit` function.\" ) # Prepare documents if isinstance ( documents , str ): documents = [ documents ] documents = pd . DataFrame ({ \"Document\" : documents , \"ID\" : range ( len ( documents )), \"Topic\" : None }) # Extract embeddings if embeddings is None : if self . topic_representations_ is None : self . embedding_model = select_backend ( self . embedding_model , language = self . language ) embeddings = self . _extract_embeddings ( documents . Document , method = \"document\" , verbose = self . verbose ) else : if self . embedding_model is not None and self . topic_representations_ is None : self . embedding_model = select_backend ( self . embedding_model , language = self . language ) # Reduce dimensionality if self . seed_topic_list is not None and self . embedding_model is not None : y , embeddings = self . _guided_topic_modeling ( embeddings ) umap_embeddings = self . _reduce_dimensionality ( embeddings , y , partial_fit = True ) # Cluster reduced embeddings documents , self . probabilities_ = self . _cluster_embeddings ( umap_embeddings , documents , partial_fit = True ) topics = documents . Topic . to_list () # Map and find new topics if not self . topic_mapper_ : self . topic_mapper_ = TopicMapper ( topics ) mappings = self . topic_mapper_ . get_mappings () new_topics = set ( topics ) . difference ( set ( mappings . keys ())) new_topic_ids = { topic : max ( mappings . values ()) + index + 1 for index , topic in enumerate ( new_topics )} self . topic_mapper_ . add_new_topics ( new_topic_ids ) updated_mappings = self . topic_mapper_ . get_mappings () updated_topics = [ updated_mappings [ topic ] for topic in topics ] documents [ \"Topic\" ] = updated_topics # Add missing topics (topics that were originally created but are now missing) if self . topic_representations_ : missing_topics = set ( self . topic_representations_ . keys ()) . difference ( set ( updated_topics )) for missing_topic in missing_topics : documents . loc [ len ( documents ), :] = [ \" \" , len ( documents ), missing_topic ] else : missing_topics = {} # Prepare documents documents_per_topic = documents . sort_values ( \"Topic\" ) . groupby ([ 'Topic' ], as_index = False ) updated_topics = documents_per_topic . first () . Topic . astype ( int ) documents_per_topic = documents_per_topic . agg ({ 'Document' : ' ' . join }) # Update topic representations self . c_tf_idf_ , updated_words = self . _c_tf_idf ( documents_per_topic , partial_fit = True ) self . topic_representations_ = self . _extract_words_per_topic ( updated_words , documents , self . c_tf_idf_ ) self . _create_topic_vectors () self . topic_labels_ = { key : f \" { key } _\" + \"_\" . join ([ word [ 0 ] for word in values [: 4 ]]) for key , values in self . topic_representations_ . items ()} # Update topic sizes if len ( missing_topics ) > 0 : documents = documents . iloc [: - len ( missing_topics )] if self . topic_sizes_ is None : self . _update_topic_size ( documents ) else : sizes = documents . groupby ([ 'Topic' ], as_index = False ) . count () for _ , row in sizes . iterrows (): topic = int ( row . Topic ) if self . topic_sizes_ . get ( topic ) is not None and topic not in missing_topics : self . topic_sizes_ [ topic ] += int ( row . Document ) elif self . topic_sizes_ . get ( topic ) is None : self . topic_sizes_ [ topic ] = int ( row . Document ) self . topics_ = documents . Topic . astype ( int ) . tolist () return self","title":"partial_fit()"},{"location":"api/bertopic.html#bertopic._bertopic.BERTopic.reduce_outliers","text":"Reduce outliers by merging them with their nearest topic according to one of several strategies. When using HDBSCAN, DBSCAN, or OPTICS, a number of outlier documents might be created that do not fall within any of the created topics. These are labeled as -1. This function allows the user to match outlier documents with their nearest topic using one of the following strategies using the strategy parameter: * \"probabilities\" This uses the soft-clustering as performed by HDBSCAN to find the best matching topic for each outlier document. To use this, make sure to calculate the probabilities beforehand by instantiating BERTopic with calculate_probabilities=True . * \"distributions\" Use the topic distributions, as calculated with .approximate_distribution to find the most frequent topic in each outlier document. You can use the distributions_params variable to tweak the parameters of .approximate_distribution . * \"c-tf-idf\" Calculate the c-TF-IDF representation for each outlier document and find the best matching c-TF-IDF topic representation using cosine similarity. * \"embeddings\" Using the embeddings of each outlier documents, find the best matching topic embedding using cosine similarity. Parameters: Name Type Description Default documents List[str] A list of documents for which we reduce or remove the outliers. required topics List[int] The topics that correspond to the documents required strategy str The strategy used for reducing outliers. Options: * \"probabilities\" This uses the soft-clustering as performed by HDBSCAN to find the best matching topic for each outlier document. * \"distributions\" Use the topic distributions, as calculated with `.approximate_distribution` to find the most frequent topic in each outlier document. * \"c-tf-idf\" Calculate the c-TF-IDF representation for outlier documents and find the best matching c-TF-IDF topic representation. * \"embeddings\" Calculate the embeddings for outlier documents and find the best matching topic embedding. 'distributions' threshold int The threshold for assigning topics to outlier documents. This value represents the minimum probability when strategy=\"probabilities\" . For all other strategies, it represents the minimum similarity. 0 embeddings ndarray The pre-computed embeddings to be used when strategy=\"embeddings\" . If this is None, then it will compute the embeddings for the outlier documents. None distributions_params Mapping[str, Any] The parameters used in .approximate_distribution when using the strategy \"distributions\" . {} Returns: Type Description new_topics The updated topics Usage: The default settings uses the \"distributions\" strategy: new_topics = topic_model . reduce_outliers ( docs , topics ) When you use the \"probabilities\" strategy, make sure to also pass the probabilities as generated through HDBSCAN: from bertopic import BERTopic topic_model = BERTopic ( calculate_probabilities = True ) topics , probs = topic_model . fit_transform ( docs ) new_topics = topic_model . reduce_outliers ( docs , topics , probabilities = probs , strategy = \"probabilities\" ) Source code in bertopic\\_bertopic.py def reduce_outliers ( self , documents : List [ str ], topics : List [ int ], strategy : str = \"distributions\" , probabilities : np . ndarray = None , threshold : int = 0 , embeddings : np . ndarray = None , distributions_params : Mapping [ str , Any ] = {}) -> List [ int ]: \"\"\" Reduce outliers by merging them with their nearest topic according to one of several strategies. When using HDBSCAN, DBSCAN, or OPTICS, a number of outlier documents might be created that do not fall within any of the created topics. These are labeled as -1. This function allows the user to match outlier documents with their nearest topic using one of the following strategies using the `strategy` parameter: * \"probabilities\" This uses the soft-clustering as performed by HDBSCAN to find the best matching topic for each outlier document. To use this, make sure to calculate the `probabilities` beforehand by instantiating BERTopic with `calculate_probabilities=True`. * \"distributions\" Use the topic distributions, as calculated with `.approximate_distribution` to find the most frequent topic in each outlier document. You can use the `distributions_params` variable to tweak the parameters of `.approximate_distribution`. * \"c-tf-idf\" Calculate the c-TF-IDF representation for each outlier document and find the best matching c-TF-IDF topic representation using cosine similarity. * \"embeddings\" Using the embeddings of each outlier documents, find the best matching topic embedding using cosine similarity. Arguments: documents: A list of documents for which we reduce or remove the outliers. topics: The topics that correspond to the documents strategy: The strategy used for reducing outliers. Options: * \"probabilities\" This uses the soft-clustering as performed by HDBSCAN to find the best matching topic for each outlier document. * \"distributions\" Use the topic distributions, as calculated with `.approximate_distribution` to find the most frequent topic in each outlier document. * \"c-tf-idf\" Calculate the c-TF-IDF representation for outlier documents and find the best matching c-TF-IDF topic representation. * \"embeddings\" Calculate the embeddings for outlier documents and find the best matching topic embedding. threshold: The threshold for assigning topics to outlier documents. This value represents the minimum probability when `strategy=\"probabilities\"`. For all other strategies, it represents the minimum similarity. embeddings: The pre-computed embeddings to be used when `strategy=\"embeddings\"`. If this is None, then it will compute the embeddings for the outlier documents. distributions_params: The parameters used in `.approximate_distribution` when using the strategy `\"distributions\"`. Returns: new_topics: The updated topics Usage: The default settings uses the `\"distributions\"` strategy: ```python new_topics = topic_model.reduce_outliers(docs, topics) ``` When you use the `\"probabilities\"` strategy, make sure to also pass the probabilities as generated through HDBSCAN: ```python from bertopic import BERTopic topic_model = BERTopic(calculate_probabilities=True) topics, probs = topic_model.fit_transform(docs) new_topics = topic_model.reduce_outliers(docs, topics, probabilities=probs, strategy=\"probabilities\") ``` \"\"\" # Check correct use of parameters if strategy . lower () == \"probabilities\" and probabilities is None : raise ValueError ( \"Make sure to pass in `probabilities` in order to use the probabilities strategy\" ) # Reduce outliers by extracting most likely topics through the topic-term probability matrix if strategy . lower () == \"probabilities\" : new_topics = [ np . argmax ( prob ) if max ( prob ) >= threshold and topic == - 1 else topic for topic , prob in zip ( topics , probabilities )] # Reduce outliers by extracting most frequent topics through calculating of Topic Distributions elif strategy . lower () == \"distributions\" : outlier_ids = [ index for index , topic in enumerate ( topics ) if topic == - 1 ] outlier_docs = [ documents [ index ] for index in outlier_ids ] topic_distr , _ = self . approximate_distribution ( outlier_docs , min_similarity = threshold , ** distributions_params ) outlier_topics = iter ([ np . argmax ( prob ) if sum ( prob ) > 0 else - 1 for prob in topic_distr ]) new_topics = [ topic if topic != - 1 else next ( outlier_topics ) for topic in topics ] # Reduce outliers by finding the most similar c-TF-IDF representations elif strategy . lower () == \"c-tf-idf\" : outlier_ids = [ index for index , topic in enumerate ( topics ) if topic == - 1 ] outlier_docs = [ documents [ index ] for index in outlier_ids ] # Calculate c-TF-IDF of outlier documents with all topics bow_doc = self . vectorizer_model . transform ( outlier_docs ) c_tf_idf_doc = self . ctfidf_model . transform ( bow_doc ) similarity = cosine_similarity ( c_tf_idf_doc , self . c_tf_idf_ [ self . _outliers :]) # Update topics similarity [ similarity < threshold ] = 0 outlier_topics = iter ([ np . argmax ( sim ) if sum ( sim ) > 0 else - 1 for sim in similarity ]) new_topics = [ topic if topic != - 1 else next ( outlier_topics ) for topic in topics ] # Reduce outliers by finding the most similar topic embeddings elif strategy . lower () == \"embeddings\" : if self . embedding_model is None : raise ValueError ( \"To use this strategy, you will need to pass a model to `embedding_model`\" \"when instantiating BERTopic.\" ) outlier_ids = [ index for index , topic in enumerate ( topics ) if topic == - 1 ] outlier_docs = [ documents [ index ] for index in outlier_ids ] # Extract or calculate embeddings for outlier documents if embeddings is not None : outlier_embeddings = np . array ([ embeddings [ index ] for index in outlier_ids ]) else : outlier_embeddings = self . embedding_model . embed_documents ( outlier_docs ) similarity = cosine_similarity ( outlier_embeddings , self . topic_embeddings_ [ self . _outliers :]) # Update topics similarity [ similarity < threshold ] = 0 outlier_topics = iter ([ np . argmax ( sim ) if sum ( sim ) > 0 else - 1 for sim in similarity ]) new_topics = [ topic if topic != - 1 else next ( outlier_topics ) for topic in topics ] return new_topics","title":"reduce_outliers()"},{"location":"api/bertopic.html#bertopic._bertopic.BERTopic.reduce_topics","text":"Reduce the number of topics to a fixed number of topics or automatically. If nr_topics is a integer, then the number of topics is reduced to nr_topics using AgglomerativeClustering on the cosine distance matrix of the topic embeddings. If nr_topics is \"auto\" , then HDBSCAN is used to automatically reduce the number of topics by running it on the topic embeddings. The topics, their sizes, and representations are updated. Parameters: Name Type Description Default docs List[str] The docs you used when calling either fit or fit_transform required nr_topics Union[int, str] The number of topics you want reduced to 20 Updates topics_ : Assigns topics to their merged representations. probabilities_ : Assigns probabilities to their merged representations. Examples: You can further reduce the topics by passing the documents with its topics and probabilities (if they were calculated): topic_model . reduce_topics ( docs , nr_topics = 30 ) You can then access the updated topics and probabilities with: topics = topic_model . topics_ probabilities = topic_model . probabilities_ Source code in bertopic\\_bertopic.py def reduce_topics ( self , docs : List [ str ], nr_topics : Union [ int , str ] = 20 ) -> None : \"\"\" Reduce the number of topics to a fixed number of topics or automatically. If nr_topics is a integer, then the number of topics is reduced to nr_topics using `AgglomerativeClustering` on the cosine distance matrix of the topic embeddings. If nr_topics is `\"auto\"`, then HDBSCAN is used to automatically reduce the number of topics by running it on the topic embeddings. The topics, their sizes, and representations are updated. Arguments: docs: The docs you used when calling either `fit` or `fit_transform` nr_topics: The number of topics you want reduced to Updates: topics_ : Assigns topics to their merged representations. probabilities_ : Assigns probabilities to their merged representations. Examples: You can further reduce the topics by passing the documents with its topics and probabilities (if they were calculated): ```python topic_model.reduce_topics(docs, nr_topics=30) ``` You can then access the updated topics and probabilities with: ```python topics = topic_model.topics_ probabilities = topic_model.probabilities_ ``` \"\"\" check_is_fitted ( self ) self . nr_topics = nr_topics documents = pd . DataFrame ({ \"Document\" : docs , \"Topic\" : self . topics_ }) # Reduce number of topics documents = self . _reduce_topics ( documents ) self . _merged_topics = None self . _save_representative_docs ( documents ) self . probabilities_ = self . _map_probabilities ( self . probabilities_ ) return self","title":"reduce_topics()"},{"location":"api/bertopic.html#bertopic._bertopic.BERTopic.save","text":"Saves the model to the specified path When saving the model, make sure to also keep track of the versions of dependencies and Python used. Loading and saving the model should be done using the same dependencies and Python. Moreover, models saved in one version of BERTopic should not be loaded in other versions. Parameters: Name Type Description Default path str the location and name of the file you want to save required save_embedding_model bool Whether to save the embedding model in this class as you might have selected a local model or one that is downloaded automatically from the cloud. True Examples: topic_model . save ( \"my_model\" ) or if you do not want the embedding_model to be saved locally: topic_model . save ( \"my_model\" , save_embedding_model = False ) Source code in bertopic\\_bertopic.py def save ( self , path : str , save_embedding_model : bool = True ) -> None : \"\"\" Saves the model to the specified path When saving the model, make sure to also keep track of the versions of dependencies and Python used. Loading and saving the model should be done using the same dependencies and Python. Moreover, models saved in one version of BERTopic should not be loaded in other versions. Arguments: path: the location and name of the file you want to save save_embedding_model: Whether to save the embedding model in this class as you might have selected a local model or one that is downloaded automatically from the cloud. Examples: ```python topic_model.save(\"my_model\") ``` or if you do not want the embedding_model to be saved locally: ```python topic_model.save(\"my_model\", save_embedding_model=False) ``` \"\"\" with open ( path , 'wb' ) as file : # This prevents the vectorizer from being too large in size if `min_df` was # set to a value higher than 1 self . vectorizer_model . stop_words_ = None if not save_embedding_model : embedding_model = self . embedding_model self . embedding_model = None joblib . dump ( self , file ) self . embedding_model = embedding_model else : joblib . dump ( self , file )","title":"save()"},{"location":"api/bertopic.html#bertopic._bertopic.BERTopic.set_topic_labels","text":"Set custom topic labels in your fitted BERTopic model Parameters: Name Type Description Default topic_labels Union[List[str], Mapping[int, str]] If a list of topic labels, it should contain the same number of labels as there are topics. This must be ordered from the topic with the lowest ID to the highest ID, including topic -1 if it exists. If a dictionary of topic ID : topic_label , it can have any number of topics as it will only map the topics found in the dictionary. required Examples: First, we define our topic labels with .get_topic_labels in which we can customize our topic labels: topic_labels = topic_model . get_topic_labels ( nr_words = 2 , topic_prefix = True , word_length = 10 , separator = \", \" ) Then, we pass these topic_labels to our topic model which can be accessed at any time with .custom_labels_ : topic_model . set_topic_labels ( topic_labels ) topic_model . custom_labels_ You might want to change only a few topic labels instead of all of them. To do so, you can pass a dictionary where the keys are the topic IDs and its keys the topic labels: topic_model . set_topic_labels ({ 0 : \"Space\" , 1 : \"Sports\" , 2 : \"Medicine\" }) topic_model . custom_labels_ Source code in bertopic\\_bertopic.py def set_topic_labels ( self , topic_labels : Union [ List [ str ], Mapping [ int , str ]]) -> None : \"\"\" Set custom topic labels in your fitted BERTopic model Arguments: topic_labels: If a list of topic labels, it should contain the same number of labels as there are topics. This must be ordered from the topic with the lowest ID to the highest ID, including topic -1 if it exists. If a dictionary of `topic ID`: `topic_label`, it can have any number of topics as it will only map the topics found in the dictionary. Examples: First, we define our topic labels with `.get_topic_labels` in which we can customize our topic labels: ```python topic_labels = topic_model.get_topic_labels(nr_words=2, topic_prefix=True, word_length=10, separator=\", \") ``` Then, we pass these `topic_labels` to our topic model which can be accessed at any time with `.custom_labels_`: ```python topic_model.set_topic_labels(topic_labels) topic_model.custom_labels_ ``` You might want to change only a few topic labels instead of all of them. To do so, you can pass a dictionary where the keys are the topic IDs and its keys the topic labels: ```python topic_model.set_topic_labels({0: \"Space\", 1: \"Sports\", 2: \"Medicine\"}) topic_model.custom_labels_ ``` \"\"\" unique_topics = sorted ( set ( self . topics_ )) if isinstance ( topic_labels , dict ): if self . custom_labels_ is not None : original_labels = { topic : label for topic , label in zip ( unique_topics , self . custom_labels_ )} else : info = self . get_topic_info () original_labels = dict ( zip ( info . Topic , info . Name )) custom_labels = [ topic_labels . get ( topic ) if topic_labels . get ( topic ) else original_labels [ topic ] for topic in unique_topics ] elif isinstance ( topic_labels , list ): if len ( topic_labels ) == len ( unique_topics ): custom_labels = topic_labels else : raise ValueError ( \"Make sure that `topic_labels` contains the same number \" \"of labels as that there are topics.\" ) self . custom_labels_ = custom_labels","title":"set_topic_labels()"},{"location":"api/bertopic.html#bertopic._bertopic.BERTopic.topics_over_time","text":"Create topics over time To create the topics over time, BERTopic needs to be already fitted once. From the fitted models, the c-TF-IDF representations are calculate at each timestamp t. Then, the c-TF-IDF representations at timestamp t are averaged with the global c-TF-IDF representations in order to fine-tune the local representations. Note Make sure to use a limited number of unique timestamps (<100) as the c-TF-IDF representation will be calculated at each single unique timestamp. Having a large number of unique timestamps can take some time to be calculated. Moreover, there aren't many use-cased where you would like to see the difference in topic representations over more than 100 different timestamps. Parameters: Name Type Description Default docs List[str] The documents you used when calling either fit or fit_transform required timestamps Union[List[str], List[int]] The timestamp of each document. This can be either a list of strings or ints. If it is a list of strings, then the datetime format will be automatically inferred. If it is a list of ints, then the documents will be ordered by ascending order. required nr_bins int The number of bins you want to create for the timestamps. The left interval will be chosen as the timestamp. An additional column will be created with the entire interval. None datetime_format str The datetime format of the timestamps if they are strings, eg \u201c%d/%m/%Y\u201d. Set this to None if you want to have it automatically detect the format. See strftime documentation for more information on choices: https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior. None evolution_tuning bool Fine-tune each topic representation at timestamp t by averaging its c-TF-IDF matrix with the c-TF-IDF matrix at timestamp t-1 . This creates evolutionary topic representations. True global_tuning bool Fine-tune each topic representation at timestamp t by averaging its c-TF-IDF matrix with the global c-TF-IDF matrix. Turn this off if you want to prevent words in topic representations that could not be found in the documents at timestamp t . True Returns: Type Description topics_over_time A dataframe that contains the topic, words, and frequency of topic at timestamp t . Examples: The timestamps variable represent the timestamp of each document. If you have over 100 unique timestamps, it is advised to bin the timestamps as shown below: from bertopic import BERTopic topic_model = BERTopic () topics , probs = topic_model . fit_transform ( docs ) topics_over_time = topic_model . topics_over_time ( docs , timestamps , nr_bins = 20 ) Source code in bertopic\\_bertopic.py def topics_over_time ( self , docs : List [ str ], timestamps : Union [ List [ str ], List [ int ]], nr_bins : int = None , datetime_format : str = None , evolution_tuning : bool = True , global_tuning : bool = True ) -> pd . DataFrame : \"\"\" Create topics over time To create the topics over time, BERTopic needs to be already fitted once. From the fitted models, the c-TF-IDF representations are calculate at each timestamp t. Then, the c-TF-IDF representations at timestamp t are averaged with the global c-TF-IDF representations in order to fine-tune the local representations. NOTE: Make sure to use a limited number of unique timestamps (<100) as the c-TF-IDF representation will be calculated at each single unique timestamp. Having a large number of unique timestamps can take some time to be calculated. Moreover, there aren't many use-cased where you would like to see the difference in topic representations over more than 100 different timestamps. Arguments: docs: The documents you used when calling either `fit` or `fit_transform` timestamps: The timestamp of each document. This can be either a list of strings or ints. If it is a list of strings, then the datetime format will be automatically inferred. If it is a list of ints, then the documents will be ordered by ascending order. nr_bins: The number of bins you want to create for the timestamps. The left interval will be chosen as the timestamp. An additional column will be created with the entire interval. datetime_format: The datetime format of the timestamps if they are strings, eg \u201c%d/%m/%Y\u201d. Set this to None if you want to have it automatically detect the format. See strftime documentation for more information on choices: https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior. evolution_tuning: Fine-tune each topic representation at timestamp *t* by averaging its c-TF-IDF matrix with the c-TF-IDF matrix at timestamp *t-1*. This creates evolutionary topic representations. global_tuning: Fine-tune each topic representation at timestamp *t* by averaging its c-TF-IDF matrix with the global c-TF-IDF matrix. Turn this off if you want to prevent words in topic representations that could not be found in the documents at timestamp *t*. Returns: topics_over_time: A dataframe that contains the topic, words, and frequency of topic at timestamp *t*. Examples: The timestamps variable represent the timestamp of each document. If you have over 100 unique timestamps, it is advised to bin the timestamps as shown below: ```python from bertopic import BERTopic topic_model = BERTopic() topics, probs = topic_model.fit_transform(docs) topics_over_time = topic_model.topics_over_time(docs, timestamps, nr_bins=20) ``` \"\"\" check_is_fitted ( self ) check_documents_type ( docs ) documents = pd . DataFrame ({ \"Document\" : docs , \"Topic\" : self . topics_ , \"Timestamps\" : timestamps }) global_c_tf_idf = normalize ( self . c_tf_idf_ , axis = 1 , norm = 'l1' , copy = False ) all_topics = sorted ( list ( documents . Topic . unique ())) all_topics_indices = { topic : index for index , topic in enumerate ( all_topics )} if isinstance ( timestamps [ 0 ], str ): infer_datetime_format = True if not datetime_format else False documents [ \"Timestamps\" ] = pd . to_datetime ( documents [ \"Timestamps\" ], infer_datetime_format = infer_datetime_format , format = datetime_format ) if nr_bins : documents [ \"Bins\" ] = pd . cut ( documents . Timestamps , bins = nr_bins ) documents [ \"Timestamps\" ] = documents . apply ( lambda row : row . Bins . left , 1 ) # Sort documents in chronological order documents = documents . sort_values ( \"Timestamps\" ) timestamps = documents . Timestamps . unique () if len ( timestamps ) > 100 : warnings . warn ( f \"There are more than 100 unique timestamps (i.e., { len ( timestamps ) } ) \" \"which significantly slows down the application. Consider setting `nr_bins` \" \"to a value lower than 100 to speed up calculation. \" ) # For each unique timestamp, create topic representations topics_over_time = [] for index , timestamp in tqdm ( enumerate ( timestamps ), disable = not self . verbose ): # Calculate c-TF-IDF representation for a specific timestamp selection = documents . loc [ documents . Timestamps == timestamp , :] documents_per_topic = selection . groupby ([ 'Topic' ], as_index = False ) . agg ({ 'Document' : ' ' . join , \"Timestamps\" : \"count\" }) c_tf_idf , words = self . _c_tf_idf ( documents_per_topic , fit = False ) if global_tuning or evolution_tuning : c_tf_idf = normalize ( c_tf_idf , axis = 1 , norm = 'l1' , copy = False ) # Fine-tune the c-TF-IDF matrix at timestamp t by averaging it with the c-TF-IDF # matrix at timestamp t-1 if evolution_tuning and index != 0 : current_topics = sorted ( list ( documents_per_topic . Topic . values )) overlapping_topics = sorted ( list ( set ( previous_topics ) . intersection ( set ( current_topics )))) current_overlap_idx = [ current_topics . index ( topic ) for topic in overlapping_topics ] previous_overlap_idx = [ previous_topics . index ( topic ) for topic in overlapping_topics ] c_tf_idf . tolil ()[ current_overlap_idx ] = (( c_tf_idf [ current_overlap_idx ] + previous_c_tf_idf [ previous_overlap_idx ]) / 2.0 ) . tolil () # Fine-tune the timestamp c-TF-IDF representation based on the global c-TF-IDF representation # by simply taking the average of the two if global_tuning : selected_topics = [ all_topics_indices [ topic ] for topic in documents_per_topic . Topic . values ] c_tf_idf = ( global_c_tf_idf [ selected_topics ] + c_tf_idf ) / 2.0 # Extract the words per topic words_per_topic = self . _extract_words_per_topic ( words , selection , c_tf_idf ) topic_frequency = pd . Series ( documents_per_topic . Timestamps . values , index = documents_per_topic . Topic ) . to_dict () # Fill dataframe with results topics_at_timestamp = [( topic , \", \" . join ([ words [ 0 ] for words in values ][: 5 ]), topic_frequency [ topic ], timestamp ) for topic , values in words_per_topic . items ()] topics_over_time . extend ( topics_at_timestamp ) if evolution_tuning : previous_topics = sorted ( list ( documents_per_topic . Topic . values )) previous_c_tf_idf = c_tf_idf . copy () return pd . DataFrame ( topics_over_time , columns = [ \"Topic\" , \"Words\" , \"Frequency\" , \"Timestamp\" ])","title":"topics_over_time()"},{"location":"api/bertopic.html#bertopic._bertopic.BERTopic.topics_per_class","text":"Create topics per class To create the topics per class, BERTopic needs to be already fitted once. From the fitted models, the c-TF-IDF representations are calculate at each class c. Then, the c-TF-IDF representations at class c are averaged with the global c-TF-IDF representations in order to fine-tune the local representations. This can be turned off if the pure representation is needed. Note Make sure to use a limited number of unique classes (<100) as the c-TF-IDF representation will be calculated at each single unique class. Having a large number of unique classes can take some time to be calculated. Parameters: Name Type Description Default docs List[str] The documents you used when calling either fit or fit_transform required classes Union[List[int], List[str]] The class of each document. This can be either a list of strings or ints. required global_tuning bool Fine-tune each topic representation for class c t by averaging its c-TF-IDF matrix with the global c-TF-IDF matrix. Turn this off if you want to prevent words in topic representations that could not be found in the documents for class c. True Returns: Type Description topics_per_class A dataframe that contains the topic, words, and frequency of topics for each class. Examples: from bertopic import BERTopic topic_model = BERTopic () topics , probs = topic_model . fit_transform ( docs ) topics_per_class = topic_model . topics_per_class ( docs , classes ) Source code in bertopic\\_bertopic.py def topics_per_class ( self , docs : List [ str ], classes : Union [ List [ int ], List [ str ]], global_tuning : bool = True ) -> pd . DataFrame : \"\"\" Create topics per class To create the topics per class, BERTopic needs to be already fitted once. From the fitted models, the c-TF-IDF representations are calculate at each class c. Then, the c-TF-IDF representations at class c are averaged with the global c-TF-IDF representations in order to fine-tune the local representations. This can be turned off if the pure representation is needed. NOTE: Make sure to use a limited number of unique classes (<100) as the c-TF-IDF representation will be calculated at each single unique class. Having a large number of unique classes can take some time to be calculated. Arguments: docs: The documents you used when calling either `fit` or `fit_transform` classes: The class of each document. This can be either a list of strings or ints. global_tuning: Fine-tune each topic representation for class c t by averaging its c-TF-IDF matrix with the global c-TF-IDF matrix. Turn this off if you want to prevent words in topic representations that could not be found in the documents for class c. Returns: topics_per_class: A dataframe that contains the topic, words, and frequency of topics for each class. Examples: ```python from bertopic import BERTopic topic_model = BERTopic() topics, probs = topic_model.fit_transform(docs) topics_per_class = topic_model.topics_per_class(docs, classes) ``` \"\"\" documents = pd . DataFrame ({ \"Document\" : docs , \"Topic\" : self . topics_ , \"Class\" : classes }) global_c_tf_idf = normalize ( self . c_tf_idf_ , axis = 1 , norm = 'l1' , copy = False ) # For each unique timestamp, create topic representations topics_per_class = [] for _ , class_ in tqdm ( enumerate ( set ( classes )), disable = not self . verbose ): # Calculate c-TF-IDF representation for a specific timestamp selection = documents . loc [ documents . Class == class_ , :] documents_per_topic = selection . groupby ([ 'Topic' ], as_index = False ) . agg ({ 'Document' : ' ' . join , \"Class\" : \"count\" }) c_tf_idf , words = self . _c_tf_idf ( documents_per_topic , fit = False ) # Fine-tune the timestamp c-TF-IDF representation based on the global c-TF-IDF representation # by simply taking the average of the two if global_tuning : c_tf_idf = normalize ( c_tf_idf , axis = 1 , norm = 'l1' , copy = False ) c_tf_idf = ( global_c_tf_idf [ documents_per_topic . Topic . values + self . _outliers ] + c_tf_idf ) / 2.0 # Extract the words per topic words_per_topic = self . _extract_words_per_topic ( words , selection , c_tf_idf ) topic_frequency = pd . Series ( documents_per_topic . Class . values , index = documents_per_topic . Topic ) . to_dict () # Fill dataframe with results topics_at_class = [( topic , \", \" . join ([ words [ 0 ] for words in values ][: 5 ]), topic_frequency [ topic ], class_ ) for topic , values in words_per_topic . items ()] topics_per_class . extend ( topics_at_class ) topics_per_class = pd . DataFrame ( topics_per_class , columns = [ \"Topic\" , \"Words\" , \"Frequency\" , \"Class\" ]) return topics_per_class","title":"topics_per_class()"},{"location":"api/bertopic.html#bertopic._bertopic.BERTopic.transform","text":"After having fit a model, use transform to predict new instances Parameters: Name Type Description Default documents Union[str, List[str]] A single document or a list of documents to fit on required embeddings ndarray Pre-trained document embeddings. These can be used instead of the sentence-transformer model. None Returns: Type Description predictions Topic predictions for each documents probabilities: The topic probability distribution which is returned by default. If calculate_probabilities in BERTopic is set to False, then the probabilities are not calculated to speed up computation and decrease memory usage. Examples: from bertopic import BERTopic from sklearn.datasets import fetch_20newsgroups docs = fetch_20newsgroups ( subset = 'all' )[ 'data' ] topic_model = BERTopic () . fit ( docs ) topics , probs = topic_model . transform ( docs ) If you want to use your own embeddings: from bertopic import BERTopic from sklearn.datasets import fetch_20newsgroups from sentence_transformers import SentenceTransformer # Create embeddings docs = fetch_20newsgroups ( subset = 'all' )[ 'data' ] sentence_model = SentenceTransformer ( \"all-MiniLM-L6-v2\" ) embeddings = sentence_model . encode ( docs , show_progress_bar = True ) # Create topic model topic_model = BERTopic () . fit ( docs , embeddings ) topics , probs = topic_model . transform ( docs , embeddings ) Source code in bertopic\\_bertopic.py def transform ( self , documents : Union [ str , List [ str ]], embeddings : np . ndarray = None ) -> Tuple [ List [ int ], np . ndarray ]: \"\"\" After having fit a model, use transform to predict new instances Arguments: documents: A single document or a list of documents to fit on embeddings: Pre-trained document embeddings. These can be used instead of the sentence-transformer model. Returns: predictions: Topic predictions for each documents probabilities: The topic probability distribution which is returned by default. If `calculate_probabilities` in BERTopic is set to False, then the probabilities are not calculated to speed up computation and decrease memory usage. Examples: ```python from bertopic import BERTopic from sklearn.datasets import fetch_20newsgroups docs = fetch_20newsgroups(subset='all')['data'] topic_model = BERTopic().fit(docs) topics, probs = topic_model.transform(docs) ``` If you want to use your own embeddings: ```python from bertopic import BERTopic from sklearn.datasets import fetch_20newsgroups from sentence_transformers import SentenceTransformer # Create embeddings docs = fetch_20newsgroups(subset='all')['data'] sentence_model = SentenceTransformer(\"all-MiniLM-L6-v2\") embeddings = sentence_model.encode(docs, show_progress_bar=True) # Create topic model topic_model = BERTopic().fit(docs, embeddings) topics, probs = topic_model.transform(docs, embeddings) ``` \"\"\" check_is_fitted ( self ) check_embeddings_shape ( embeddings , documents ) if isinstance ( documents , str ): documents = [ documents ] if embeddings is None : embeddings = self . _extract_embeddings ( documents , method = \"document\" , verbose = self . verbose ) umap_embeddings = self . umap_model . transform ( embeddings ) logger . info ( \"Reduced dimensionality\" ) # Extract predictions and probabilities if it is a HDBSCAN-like model if is_supported_hdbscan ( self . hdbscan_model ): predictions , probabilities = hdbscan_delegator ( self . hdbscan_model , \"approximate_predict\" , umap_embeddings ) # Calculate probabilities if self . calculate_probabilities and isinstance ( self . hdbscan_model , hdbscan . HDBSCAN ): probabilities = hdbscan . membership_vector ( self . hdbscan_model , umap_embeddings ) logger . info ( \"Calculated probabilities with HDBSCAN\" ) else : predictions = self . hdbscan_model . predict ( umap_embeddings ) probabilities = None logger . info ( \"Predicted clusters\" ) # Map probabilities and predictions probabilities = self . _map_probabilities ( probabilities , original_topics = True ) predictions = self . _map_predictions ( predictions ) return predictions , probabilities","title":"transform()"},{"location":"api/bertopic.html#bertopic._bertopic.BERTopic.update_topics","text":"Updates the topic representation by recalculating c-TF-IDF with the new parameters as defined in this function. When you have trained a model and viewed the topics and the words that represent them, you might not be satisfied with the representation. Perhaps you forgot to remove stop_words or you want to try out a different n_gram_range. This function allows you to update the topic representation after they have been formed. Parameters: Name Type Description Default docs List[str] The documents you used when calling either fit or fit_transform required topics List[int] A list of topics where each topic is related to a document in docs . Use this variable to change or map the topics. NOTE: Using a custom list of topic assignments may lead to errors if topic reduction techniques are used afterwards. Make sure that manually assigning topics is the last step in the pipeline None top_n_words int The number of words per topic to extract. Setting this too high can negatively impact topic embeddings as topics are typically best represented by at most 10 words. 10 n_gram_range Tuple[int, int] The n-gram range for the CountVectorizer. None vectorizer_model CountVectorizer Pass in your own CountVectorizer from scikit-learn None ctfidf_model ClassTfidfTransformer Pass in your own c-TF-IDF model to update the representations None representation_model BaseRepresentation Pass in a model that fine-tunes the topic representations calculated through c-TF-IDF. Models from bertopic.representation are supported. None Examples: In order to update the topic representation, you will need to first fit the topic model and extract topics from them. Based on these, you can update the representation: topic_model . update_topics ( docs , n_gram_range = ( 2 , 3 )) You can also use a custom vectorizer to update the representation: from sklearn.feature_extraction.text import CountVectorizer vectorizer_model = CountVectorizer ( ngram_range = ( 1 , 2 ), stop_words = \"english\" ) topic_model . update_topics ( docs , vectorizer_model = vectorizer_model ) You can also use this function to change or map the topics to something else. You can update them as follows: topic_model . update_topics ( docs , my_updated_topics ) Source code in bertopic\\_bertopic.py def update_topics ( self , docs : List [ str ], topics : List [ int ] = None , top_n_words : int = 10 , n_gram_range : Tuple [ int , int ] = None , vectorizer_model : CountVectorizer = None , ctfidf_model : ClassTfidfTransformer = None , representation_model : BaseRepresentation = None ): \"\"\" Updates the topic representation by recalculating c-TF-IDF with the new parameters as defined in this function. When you have trained a model and viewed the topics and the words that represent them, you might not be satisfied with the representation. Perhaps you forgot to remove stop_words or you want to try out a different n_gram_range. This function allows you to update the topic representation after they have been formed. Arguments: docs: The documents you used when calling either `fit` or `fit_transform` topics: A list of topics where each topic is related to a document in `docs`. Use this variable to change or map the topics. NOTE: Using a custom list of topic assignments may lead to errors if topic reduction techniques are used afterwards. Make sure that manually assigning topics is the last step in the pipeline top_n_words: The number of words per topic to extract. Setting this too high can negatively impact topic embeddings as topics are typically best represented by at most 10 words. n_gram_range: The n-gram range for the CountVectorizer. vectorizer_model: Pass in your own CountVectorizer from scikit-learn ctfidf_model: Pass in your own c-TF-IDF model to update the representations representation_model: Pass in a model that fine-tunes the topic representations calculated through c-TF-IDF. Models from `bertopic.representation` are supported. Examples: In order to update the topic representation, you will need to first fit the topic model and extract topics from them. Based on these, you can update the representation: ```python topic_model.update_topics(docs, n_gram_range=(2, 3)) ``` You can also use a custom vectorizer to update the representation: ```python from sklearn.feature_extraction.text import CountVectorizer vectorizer_model = CountVectorizer(ngram_range=(1, 2), stop_words=\"english\") topic_model.update_topics(docs, vectorizer_model=vectorizer_model) ``` You can also use this function to change or map the topics to something else. You can update them as follows: ```python topic_model.update_topics(docs, my_updated_topics) ``` \"\"\" check_is_fitted ( self ) if not n_gram_range : n_gram_range = self . n_gram_range if top_n_words > 100 : warnings . warn ( \"Note that extracting more than 100 words from a sparse \" \"can slow down computation quite a bit.\" ) self . top_n_words = top_n_words self . vectorizer_model = vectorizer_model or CountVectorizer ( ngram_range = n_gram_range ) self . ctfidf_model = ctfidf_model or ClassTfidfTransformer () self . representation_model = representation_model if topics is None : topics = self . topics_ else : warnings . warn ( \"Using a custom list of topic assignments may lead to errors if \" \"topic reduction techniques are used afterwards. Make sure that \" \"manually assigning topics is the last step in the pipeline.\" ) # Extract words documents = pd . DataFrame ({ \"Document\" : docs , \"Topic\" : topics }) documents_per_topic = documents . groupby ([ 'Topic' ], as_index = False ) . agg ({ 'Document' : ' ' . join }) self . c_tf_idf_ , words = self . _c_tf_idf ( documents_per_topic ) self . topic_representations_ = self . _extract_words_per_topic ( words , documents ) self . _create_topic_vectors () self . topic_labels_ = { key : f \" { key } _\" + \"_\" . join ([ word [ 0 ] for word in values [: 4 ]]) for key , values in self . topic_representations_ . items ()} self . _update_topic_size ( documents )","title":"update_topics()"},{"location":"api/bertopic.html#bertopic._bertopic.BERTopic.visualize_approximate_distribution","text":"Visualize the topic distribution calculated by .approximate_topic_distribution on a token level. Thereby indicating the extend to which a certain word or phrases belong to a specific topic. The assumption here is that a single word can belong to multiple similar topics and as such give information about the broader set of topics within a single document. Parameters: Name Type Description Default topic_model A fitted BERTopic instance. required document str The document for which you want to visualize the approximated topic distribution. required topic_token_distribution ndarray The topic-token distribution of the document as extracted by .approximate_topic_distribution required normalize bool Whether to normalize, between 0 and 1 (summing to 1), the topic distribution values. False Returns: Type Description df A stylized dataframe indicating the best fitting topics for each token. Examples: # Calculate the topic distributions on a token level # Note that we need to have `calculate_token_level=True` topic_distr , topic_token_distr = topic_model . approximate_distribution ( docs , calculate_token_level = True ) # Visualize the approximated topic distributions df = topic_model . visualize_approximate_distribution ( docs [ 0 ], topic_token_distr [ 0 ]) df To revert this stylized dataframe back to a regular dataframe, you can run the following: df . data . columns = [ column . strip () for column in df . data . columns ] df = df . data Source code in bertopic\\_bertopic.py def visualize_approximate_distribution ( self , document : str , topic_token_distribution : np . ndarray , normalize : bool = False ): \"\"\" Visualize the topic distribution calculated by `.approximate_topic_distribution` on a token level. Thereby indicating the extend to which a certain word or phrases belong to a specific topic. The assumption here is that a single word can belong to multiple similar topics and as such give information about the broader set of topics within a single document. Arguments: topic_model: A fitted BERTopic instance. document: The document for which you want to visualize the approximated topic distribution. topic_token_distribution: The topic-token distribution of the document as extracted by `.approximate_topic_distribution` normalize: Whether to normalize, between 0 and 1 (summing to 1), the topic distribution values. Returns: df: A stylized dataframe indicating the best fitting topics for each token. Examples: ```python # Calculate the topic distributions on a token level # Note that we need to have `calculate_token_level=True` topic_distr, topic_token_distr = topic_model.approximate_distribution( docs, calculate_token_level=True ) # Visualize the approximated topic distributions df = topic_model.visualize_approximate_distribution(docs[0], topic_token_distr[0]) df ``` To revert this stylized dataframe back to a regular dataframe, you can run the following: ```python df.data.columns = [column.strip() for column in df.data.columns] df = df.data ``` \"\"\" check_is_fitted ( self ) return plotting . visualize_approximate_distribution ( self , document = document , topic_token_distribution = topic_token_distribution , normalize = normalize )","title":"visualize_approximate_distribution()"},{"location":"api/bertopic.html#bertopic._bertopic.BERTopic.visualize_barchart","text":"Visualize a barchart of selected topics Parameters: Name Type Description Default topics List[int] A selection of topics to visualize. None top_n_topics int Only select the top n most frequent topics. 8 n_words int Number of words to show in a topic 5 custom_labels bool Whether to use custom topic labels that were defined using topic_model.set_topic_labels . False title str Title of the plot. 'Topic Word Scores' width int The width of each figure. 250 height int The height of each figure. 250 Returns: Type Description fig A plotly figure Examples: To visualize the barchart of selected topics simply run: topic_model . visualize_barchart () Or if you want to save the resulting figure: fig = topic_model . visualize_barchart () fig . write_html ( \"path/to/file.html\" ) Source code in bertopic\\_bertopic.py def visualize_barchart ( self , topics : List [ int ] = None , top_n_topics : int = 8 , n_words : int = 5 , custom_labels : bool = False , title : str = \"Topic Word Scores\" , width : int = 250 , height : int = 250 ) -> go . Figure : \"\"\" Visualize a barchart of selected topics Arguments: topics: A selection of topics to visualize. top_n_topics: Only select the top n most frequent topics. n_words: Number of words to show in a topic custom_labels: Whether to use custom topic labels that were defined using `topic_model.set_topic_labels`. title: Title of the plot. width: The width of each figure. height: The height of each figure. Returns: fig: A plotly figure Examples: To visualize the barchart of selected topics simply run: ```python topic_model.visualize_barchart() ``` Or if you want to save the resulting figure: ```python fig = topic_model.visualize_barchart() fig.write_html(\"path/to/file.html\") ``` \"\"\" check_is_fitted ( self ) return plotting . visualize_barchart ( self , topics = topics , top_n_topics = top_n_topics , n_words = n_words , custom_labels = custom_labels , title = title , width = width , height = height )","title":"visualize_barchart()"},{"location":"api/bertopic.html#bertopic._bertopic.BERTopic.visualize_distribution","text":"Visualize the distribution of topic probabilities Parameters: Name Type Description Default probabilities ndarray An array of probability scores required min_probability float The minimum probability score to visualize. All others are ignored. 0.015 custom_labels bool Whether to use custom topic labels that were defined using topic_model.set_topic_labels . False title str Title of the plot. '<b>Topic Probability Distribution</b>' width int The width of the figure. 800 height int The height of the figure. 600 Examples: Make sure to fit the model before and only input the probabilities of a single document: topic_model . visualize_distribution ( topic_model . probabilities_ [ 0 ]) Or if you want to save the resulting figure: fig = topic_model . visualize_distribution ( topic_model . probabilities_ [ 0 ]) fig . write_html ( \"path/to/file.html\" ) Source code in bertopic\\_bertopic.py def visualize_distribution ( self , probabilities : np . ndarray , min_probability : float = 0.015 , custom_labels : bool = False , title : str = \"<b>Topic Probability Distribution</b>\" , width : int = 800 , height : int = 600 ) -> go . Figure : \"\"\" Visualize the distribution of topic probabilities Arguments: probabilities: An array of probability scores min_probability: The minimum probability score to visualize. All others are ignored. custom_labels: Whether to use custom topic labels that were defined using `topic_model.set_topic_labels`. title: Title of the plot. width: The width of the figure. height: The height of the figure. Examples: Make sure to fit the model before and only input the probabilities of a single document: ```python topic_model.visualize_distribution(topic_model.probabilities_[0]) ``` Or if you want to save the resulting figure: ```python fig = topic_model.visualize_distribution(topic_model.probabilities_[0]) fig.write_html(\"path/to/file.html\") ``` \"\"\" check_is_fitted ( self ) return plotting . visualize_distribution ( self , probabilities = probabilities , min_probability = min_probability , custom_labels = custom_labels , title = title , width = width , height = height )","title":"visualize_distribution()"},{"location":"api/bertopic.html#bertopic._bertopic.BERTopic.visualize_documents","text":"Visualize documents and their topics in 2D Parameters: Name Type Description Default topic_model A fitted BERTopic instance. required docs List[str] The documents you used when calling either fit or fit_transform required topics List[int] A selection of topics to visualize. Not to be confused with the topics that you get from .fit_transform . For example, if you want to visualize only topics 1 through 5: topics = [1, 2, 3, 4, 5] . None embeddings ndarray The embeddings of all documents in docs . None reduced_embeddings ndarray The 2D reduced embeddings of all documents in docs . None sample float The percentage of documents in each topic that you would like to keep. Value can be between 0 and 1. Setting this value to, for example, 0.1 (10% of documents in each topic) makes it easier to visualize millions of documents as a subset is chosen. None hide_annotations bool Hide the names of the traces on top of each cluster. False hide_document_hover bool Hide the content of the documents when hovering over specific points. Helps to speed up generation of visualization. False custom_labels bool Whether to use custom topic labels that were defined using topic_model.set_topic_labels . False title str Title of the plot. '<b>Documents and Topics</b>' width int The width of the figure. 1200 height int The height of the figure. 750 Examples: To visualize the topics simply run: topic_model . visualize_documents ( docs ) Do note that this re-calculates the embeddings and reduces them to 2D. The advised and prefered pipeline for using this function is as follows: from sklearn.datasets import fetch_20newsgroups from sentence_transformers import SentenceTransformer from bertopic import BERTopic from umap import UMAP # Prepare embeddings docs = fetch_20newsgroups ( subset = 'all' , remove = ( 'headers' , 'footers' , 'quotes' ))[ 'data' ] sentence_model = SentenceTransformer ( \"all-MiniLM-L6-v2\" ) embeddings = sentence_model . encode ( docs , show_progress_bar = False ) # Train BERTopic topic_model = BERTopic () . fit ( docs , embeddings ) # Reduce dimensionality of embeddings, this step is optional # reduced_embeddings = UMAP(n_neighbors=10, n_components=2, min_dist=0.0, metric='cosine').fit_transform(embeddings) # Run the visualization with the original embeddings topic_model . visualize_documents ( docs , embeddings = embeddings ) # Or, if you have reduced the original embeddings already: topic_model . visualize_documents ( docs , reduced_embeddings = reduced_embeddings ) Or if you want to save the resulting figure: fig = topic_model . visualize_documents ( docs , reduced_embeddings = reduced_embeddings ) fig . write_html ( \"path/to/file.html\" ) Source code in bertopic\\_bertopic.py def visualize_documents ( self , docs : List [ str ], topics : List [ int ] = None , embeddings : np . ndarray = None , reduced_embeddings : np . ndarray = None , sample : float = None , hide_annotations : bool = False , hide_document_hover : bool = False , custom_labels : bool = False , title : str = \"<b>Documents and Topics</b>\" , width : int = 1200 , height : int = 750 ) -> go . Figure : \"\"\" Visualize documents and their topics in 2D Arguments: topic_model: A fitted BERTopic instance. docs: The documents you used when calling either `fit` or `fit_transform` topics: A selection of topics to visualize. Not to be confused with the topics that you get from `.fit_transform`. For example, if you want to visualize only topics 1 through 5: `topics = [1, 2, 3, 4, 5]`. embeddings: The embeddings of all documents in `docs`. reduced_embeddings: The 2D reduced embeddings of all documents in `docs`. sample: The percentage of documents in each topic that you would like to keep. Value can be between 0 and 1. Setting this value to, for example, 0.1 (10% of documents in each topic) makes it easier to visualize millions of documents as a subset is chosen. hide_annotations: Hide the names of the traces on top of each cluster. hide_document_hover: Hide the content of the documents when hovering over specific points. Helps to speed up generation of visualization. custom_labels: Whether to use custom topic labels that were defined using `topic_model.set_topic_labels`. title: Title of the plot. width: The width of the figure. height: The height of the figure. Examples: To visualize the topics simply run: ```python topic_model.visualize_documents(docs) ``` Do note that this re-calculates the embeddings and reduces them to 2D. The advised and prefered pipeline for using this function is as follows: ```python from sklearn.datasets import fetch_20newsgroups from sentence_transformers import SentenceTransformer from bertopic import BERTopic from umap import UMAP # Prepare embeddings docs = fetch_20newsgroups(subset='all', remove=('headers', 'footers', 'quotes'))['data'] sentence_model = SentenceTransformer(\"all-MiniLM-L6-v2\") embeddings = sentence_model.encode(docs, show_progress_bar=False) # Train BERTopic topic_model = BERTopic().fit(docs, embeddings) # Reduce dimensionality of embeddings, this step is optional # reduced_embeddings = UMAP(n_neighbors=10, n_components=2, min_dist=0.0, metric='cosine').fit_transform(embeddings) # Run the visualization with the original embeddings topic_model.visualize_documents(docs, embeddings=embeddings) # Or, if you have reduced the original embeddings already: topic_model.visualize_documents(docs, reduced_embeddings=reduced_embeddings) ``` Or if you want to save the resulting figure: ```python fig = topic_model.visualize_documents(docs, reduced_embeddings=reduced_embeddings) fig.write_html(\"path/to/file.html\") ``` <iframe src=\"../getting_started/visualization/documents.html\" style=\"width:1000px; height: 800px; border: 0px;\"\"></iframe> \"\"\" check_is_fitted ( self ) return plotting . visualize_documents ( self , docs = docs , topics = topics , embeddings = embeddings , reduced_embeddings = reduced_embeddings , sample = sample , hide_annotations = hide_annotations , hide_document_hover = hide_document_hover , custom_labels = custom_labels , title = title , width = width , height = height )","title":"visualize_documents()"},{"location":"api/bertopic.html#bertopic._bertopic.BERTopic.visualize_heatmap","text":"Visualize a heatmap of the topic's similarity matrix Based on the cosine similarity matrix between topic embeddings, a heatmap is created showing the similarity between topics. Parameters: Name Type Description Default topics List[int] A selection of topics to visualize. None top_n_topics int Only select the top n most frequent topics. None n_clusters int Create n clusters and order the similarity matrix by those clusters. None custom_labels bool Whether to use custom topic labels that were defined using topic_model.set_topic_labels . False title str Title of the plot. '<b>Similarity Matrix</b>' width int The width of the figure. 800 height int The height of the figure. 800 Returns: Type Description fig A plotly figure Examples: To visualize the similarity matrix of topics simply run: topic_model . visualize_heatmap () Or if you want to save the resulting figure: fig = topic_model . visualize_heatmap () fig . write_html ( \"path/to/file.html\" ) Source code in bertopic\\_bertopic.py def visualize_heatmap ( self , topics : List [ int ] = None , top_n_topics : int = None , n_clusters : int = None , custom_labels : bool = False , title : str = \"<b>Similarity Matrix</b>\" , width : int = 800 , height : int = 800 ) -> go . Figure : \"\"\" Visualize a heatmap of the topic's similarity matrix Based on the cosine similarity matrix between topic embeddings, a heatmap is created showing the similarity between topics. Arguments: topics: A selection of topics to visualize. top_n_topics: Only select the top n most frequent topics. n_clusters: Create n clusters and order the similarity matrix by those clusters. custom_labels: Whether to use custom topic labels that were defined using `topic_model.set_topic_labels`. title: Title of the plot. width: The width of the figure. height: The height of the figure. Returns: fig: A plotly figure Examples: To visualize the similarity matrix of topics simply run: ```python topic_model.visualize_heatmap() ``` Or if you want to save the resulting figure: ```python fig = topic_model.visualize_heatmap() fig.write_html(\"path/to/file.html\") ``` \"\"\" check_is_fitted ( self ) return plotting . visualize_heatmap ( self , topics = topics , top_n_topics = top_n_topics , n_clusters = n_clusters , custom_labels = custom_labels , title = title , width = width , height = height )","title":"visualize_heatmap()"},{"location":"api/bertopic.html#bertopic._bertopic.BERTopic.visualize_hierarchical_documents","text":"Visualize documents and their topics in 2D at different levels of hierarchy Parameters: Name Type Description Default docs List[str] The documents you used when calling either fit or fit_transform required hierarchical_topics DataFrame A dataframe that contains a hierarchy of topics represented by their parents and their children required topics List[int] A selection of topics to visualize. Not to be confused with the topics that you get from .fit_transform . For example, if you want to visualize only topics 1 through 5: topics = [1, 2, 3, 4, 5] . None embeddings ndarray The embeddings of all documents in docs . None reduced_embeddings ndarray The 2D reduced embeddings of all documents in docs . None sample Union[float, int] The percentage of documents in each topic that you would like to keep. Value can be between 0 and 1. Setting this value to, for example, 0.1 (10% of documents in each topic) makes it easier to visualize millions of documents as a subset is chosen. None hide_annotations bool Hide the names of the traces on top of each cluster. False hide_document_hover bool Hide the content of the documents when hovering over specific points. Helps to speed up generation of visualizations. True nr_levels int The number of levels to be visualized in the hierarchy. First, the distances in hierarchical_topics.Distance are split in nr_levels lists of distances with equal length. Then, for each list of distances, the merged topics are selected that have a distance less or equal to the maximum distance of the selected list of distances. NOTE: To get all possible merged steps, make sure that nr_levels is equal to the length of hierarchical_topics . 10 custom_labels bool Whether to use custom topic labels that were defined using topic_model.set_topic_labels . NOTE: Custom labels are only generated for the original un-merged topics. False title str Title of the plot. '<b>Hierarchical Documents and Topics</b>' width int The width of the figure. 1200 height int The height of the figure. 750 Examples: To visualize the topics simply run: topic_model . visualize_hierarchical_documents ( docs , hierarchical_topics ) Do note that this re-calculates the embeddings and reduces them to 2D. The advised and prefered pipeline for using this function is as follows: from sklearn.datasets import fetch_20newsgroups from sentence_transformers import SentenceTransformer from bertopic import BERTopic from umap import UMAP # Prepare embeddings docs = fetch_20newsgroups ( subset = 'all' , remove = ( 'headers' , 'footers' , 'quotes' ))[ 'data' ] sentence_model = SentenceTransformer ( \"all-MiniLM-L6-v2\" ) embeddings = sentence_model . encode ( docs , show_progress_bar = False ) # Train BERTopic and extract hierarchical topics topic_model = BERTopic () . fit ( docs , embeddings ) hierarchical_topics = topic_model . hierarchical_topics ( docs ) # Reduce dimensionality of embeddings, this step is optional # reduced_embeddings = UMAP(n_neighbors=10, n_components=2, min_dist=0.0, metric='cosine').fit_transform(embeddings) # Run the visualization with the original embeddings topic_model . visualize_hierarchical_documents ( docs , hierarchical_topics , embeddings = embeddings ) # Or, if you have reduced the original embeddings already: topic_model . visualize_hierarchical_documents ( docs , hierarchical_topics , reduced_embeddings = reduced_embeddings ) Or if you want to save the resulting figure: fig = topic_model . visualize_hierarchical_documents ( docs , hierarchical_topics , reduced_embeddings = reduced_embeddings ) fig . write_html ( \"path/to/file.html\" ) Source code in bertopic\\_bertopic.py def visualize_hierarchical_documents ( self , docs : List [ str ], hierarchical_topics : pd . DataFrame , topics : List [ int ] = None , embeddings : np . ndarray = None , reduced_embeddings : np . ndarray = None , sample : Union [ float , int ] = None , hide_annotations : bool = False , hide_document_hover : bool = True , nr_levels : int = 10 , custom_labels : bool = False , title : str = \"<b>Hierarchical Documents and Topics</b>\" , width : int = 1200 , height : int = 750 ) -> go . Figure : \"\"\" Visualize documents and their topics in 2D at different levels of hierarchy Arguments: docs: The documents you used when calling either `fit` or `fit_transform` hierarchical_topics: A dataframe that contains a hierarchy of topics represented by their parents and their children topics: A selection of topics to visualize. Not to be confused with the topics that you get from `.fit_transform`. For example, if you want to visualize only topics 1 through 5: `topics = [1, 2, 3, 4, 5]`. embeddings: The embeddings of all documents in `docs`. reduced_embeddings: The 2D reduced embeddings of all documents in `docs`. sample: The percentage of documents in each topic that you would like to keep. Value can be between 0 and 1. Setting this value to, for example, 0.1 (10% of documents in each topic) makes it easier to visualize millions of documents as a subset is chosen. hide_annotations: Hide the names of the traces on top of each cluster. hide_document_hover: Hide the content of the documents when hovering over specific points. Helps to speed up generation of visualizations. nr_levels: The number of levels to be visualized in the hierarchy. First, the distances in `hierarchical_topics.Distance` are split in `nr_levels` lists of distances with equal length. Then, for each list of distances, the merged topics are selected that have a distance less or equal to the maximum distance of the selected list of distances. NOTE: To get all possible merged steps, make sure that `nr_levels` is equal to the length of `hierarchical_topics`. custom_labels: Whether to use custom topic labels that were defined using `topic_model.set_topic_labels`. NOTE: Custom labels are only generated for the original un-merged topics. title: Title of the plot. width: The width of the figure. height: The height of the figure. Examples: To visualize the topics simply run: ```python topic_model.visualize_hierarchical_documents(docs, hierarchical_topics) ``` Do note that this re-calculates the embeddings and reduces them to 2D. The advised and prefered pipeline for using this function is as follows: ```python from sklearn.datasets import fetch_20newsgroups from sentence_transformers import SentenceTransformer from bertopic import BERTopic from umap import UMAP # Prepare embeddings docs = fetch_20newsgroups(subset='all', remove=('headers', 'footers', 'quotes'))['data'] sentence_model = SentenceTransformer(\"all-MiniLM-L6-v2\") embeddings = sentence_model.encode(docs, show_progress_bar=False) # Train BERTopic and extract hierarchical topics topic_model = BERTopic().fit(docs, embeddings) hierarchical_topics = topic_model.hierarchical_topics(docs) # Reduce dimensionality of embeddings, this step is optional # reduced_embeddings = UMAP(n_neighbors=10, n_components=2, min_dist=0.0, metric='cosine').fit_transform(embeddings) # Run the visualization with the original embeddings topic_model.visualize_hierarchical_documents(docs, hierarchical_topics, embeddings=embeddings) # Or, if you have reduced the original embeddings already: topic_model.visualize_hierarchical_documents(docs, hierarchical_topics, reduced_embeddings=reduced_embeddings) ``` Or if you want to save the resulting figure: ```python fig = topic_model.visualize_hierarchical_documents(docs, hierarchical_topics, reduced_embeddings=reduced_embeddings) fig.write_html(\"path/to/file.html\") ``` <iframe src=\"../getting_started/visualization/hierarchical_documents.html\" style=\"width:1000px; height: 770px; border: 0px;\"\"></iframe> \"\"\" check_is_fitted ( self ) return plotting . visualize_hierarchical_documents ( self , docs = docs , hierarchical_topics = hierarchical_topics , topics = topics , embeddings = embeddings , reduced_embeddings = reduced_embeddings , sample = sample , hide_annotations = hide_annotations , hide_document_hover = hide_document_hover , nr_levels = nr_levels , custom_labels = custom_labels , title = title , width = width , height = height )","title":"visualize_hierarchical_documents()"},{"location":"api/bertopic.html#bertopic._bertopic.BERTopic.visualize_hierarchy","text":"Visualize a hierarchical structure of the topics A ward linkage function is used to perform the hierarchical clustering based on the cosine distance matrix between topic embeddings. Parameters: Name Type Description Default topic_model A fitted BERTopic instance. required orientation str The orientation of the figure. Either 'left' or 'bottom' 'left' topics List[int] A selection of topics to visualize None top_n_topics int Only select the top n most frequent topics None custom_labels bool Whether to use custom topic labels that were defined using topic_model.set_topic_labels . NOTE: Custom labels are only generated for the original un-merged topics. False title str Title of the plot. '<b>Hierarchical Clustering</b>' width int The width of the figure. Only works if orientation is set to 'left' 1000 height int The height of the figure. Only works if orientation is set to 'bottom' 600 hierarchical_topics DataFrame A dataframe that contains a hierarchy of topics represented by their parents and their children. NOTE: The hierarchical topic names are only visualized if both topics and top_n_topics are not set. None linkage_function Callable[[scipy.sparse._csr.csr_matrix], numpy.ndarray] The linkage function to use. Default is: lambda x: sch.linkage(x, 'ward', optimal_ordering=True) NOTE: Make sure to use the same linkage_function as used in topic_model.hierarchical_topics . None distance_function Callable[[scipy.sparse._csr.csr_matrix], scipy.sparse._csr.csr_matrix] The distance function to use on the c-TF-IDF matrix. Default is: lambda x: 1 - cosine_similarity(x) NOTE: Make sure to use the same distance_function as used in topic_model.hierarchical_topics . None color_threshold int Value at which the separation of clusters will be made which will result in different colors for different clusters. A higher value will typically lead in less colored clusters. 1 Returns: Type Description fig A plotly figure Examples: To visualize the hierarchical structure of topics simply run: topic_model . visualize_hierarchy () If you also want the labels visualized of hierarchical topics, run the following: # Extract hierarchical topics and their representations hierarchical_topics = topic_model . hierarchical_topics ( docs ) # Visualize these representations topic_model . visualize_hierarchy ( hierarchical_topics = hierarchical_topics ) If you want to save the resulting figure: fig = topic_model . visualize_hierarchy () fig . write_html ( \"path/to/file.html\" ) Source code in bertopic\\_bertopic.py def visualize_hierarchy ( self , orientation : str = \"left\" , topics : List [ int ] = None , top_n_topics : int = None , custom_labels : bool = False , title : str = \"<b>Hierarchical Clustering</b>\" , width : int = 1000 , height : int = 600 , hierarchical_topics : pd . DataFrame = None , linkage_function : Callable [[ csr_matrix ], np . ndarray ] = None , distance_function : Callable [[ csr_matrix ], csr_matrix ] = None , color_threshold : int = 1 ) -> go . Figure : \"\"\" Visualize a hierarchical structure of the topics A ward linkage function is used to perform the hierarchical clustering based on the cosine distance matrix between topic embeddings. Arguments: topic_model: A fitted BERTopic instance. orientation: The orientation of the figure. Either 'left' or 'bottom' topics: A selection of topics to visualize top_n_topics: Only select the top n most frequent topics custom_labels: Whether to use custom topic labels that were defined using `topic_model.set_topic_labels`. NOTE: Custom labels are only generated for the original un-merged topics. title: Title of the plot. width: The width of the figure. Only works if orientation is set to 'left' height: The height of the figure. Only works if orientation is set to 'bottom' hierarchical_topics: A dataframe that contains a hierarchy of topics represented by their parents and their children. NOTE: The hierarchical topic names are only visualized if both `topics` and `top_n_topics` are not set. linkage_function: The linkage function to use. Default is: `lambda x: sch.linkage(x, 'ward', optimal_ordering=True)` NOTE: Make sure to use the same `linkage_function` as used in `topic_model.hierarchical_topics`. distance_function: The distance function to use on the c-TF-IDF matrix. Default is: `lambda x: 1 - cosine_similarity(x)` NOTE: Make sure to use the same `distance_function` as used in `topic_model.hierarchical_topics`. color_threshold: Value at which the separation of clusters will be made which will result in different colors for different clusters. A higher value will typically lead in less colored clusters. Returns: fig: A plotly figure Examples: To visualize the hierarchical structure of topics simply run: ```python topic_model.visualize_hierarchy() ``` If you also want the labels visualized of hierarchical topics, run the following: ```python # Extract hierarchical topics and their representations hierarchical_topics = topic_model.hierarchical_topics(docs) # Visualize these representations topic_model.visualize_hierarchy(hierarchical_topics=hierarchical_topics) ``` If you want to save the resulting figure: ```python fig = topic_model.visualize_hierarchy() fig.write_html(\"path/to/file.html\") ``` <iframe src=\"../getting_started/visualization/hierarchy.html\" style=\"width:1000px; height: 680px; border: 0px;\"\"></iframe> \"\"\" check_is_fitted ( self ) return plotting . visualize_hierarchy ( self , orientation = orientation , topics = topics , top_n_topics = top_n_topics , custom_labels = custom_labels , title = title , width = width , height = height , hierarchical_topics = hierarchical_topics , linkage_function = linkage_function , distance_function = distance_function , color_threshold = color_threshold )","title":"visualize_hierarchy()"},{"location":"api/bertopic.html#bertopic._bertopic.BERTopic.visualize_term_rank","text":"Visualize the ranks of all terms across all topics Each topic is represented by a set of words. These words, however, do not all equally represent the topic. This visualization shows how many words are needed to represent a topic and at which point the beneficial effect of adding words starts to decline. Parameters: Name Type Description Default topics List[int] A selection of topics to visualize. These will be colored red where all others will be colored black. None log_scale bool Whether to represent the ranking on a log scale False custom_labels bool Whether to use custom topic labels that were defined using topic_model.set_topic_labels . False title str Title of the plot. '<b>Term score decline per Topic</b>' width int The width of the figure. 800 height int The height of the figure. 500 Returns: Type Description fig A plotly figure Examples: To visualize the ranks of all words across all topics simply run: topic_model . visualize_term_rank () Or if you want to save the resulting figure: fig = topic_model . visualize_term_rank () fig . write_html ( \"path/to/file.html\" ) Reference: This visualization was heavily inspired by the \"Term Probability Decline\" visualization found in an analysis by the amazing tmtoolkit . Reference to that specific analysis can be found here . Source code in bertopic\\_bertopic.py def visualize_term_rank ( self , topics : List [ int ] = None , log_scale : bool = False , custom_labels : bool = False , title : str = \"<b>Term score decline per Topic</b>\" , width : int = 800 , height : int = 500 ) -> go . Figure : \"\"\" Visualize the ranks of all terms across all topics Each topic is represented by a set of words. These words, however, do not all equally represent the topic. This visualization shows how many words are needed to represent a topic and at which point the beneficial effect of adding words starts to decline. Arguments: topics: A selection of topics to visualize. These will be colored red where all others will be colored black. log_scale: Whether to represent the ranking on a log scale custom_labels: Whether to use custom topic labels that were defined using `topic_model.set_topic_labels`. title: Title of the plot. width: The width of the figure. height: The height of the figure. Returns: fig: A plotly figure Examples: To visualize the ranks of all words across all topics simply run: ```python topic_model.visualize_term_rank() ``` Or if you want to save the resulting figure: ```python fig = topic_model.visualize_term_rank() fig.write_html(\"path/to/file.html\") ``` Reference: This visualization was heavily inspired by the \"Term Probability Decline\" visualization found in an analysis by the amazing [tmtoolkit](https://tmtoolkit.readthedocs.io/). Reference to that specific analysis can be found [here](https://wzbsocialsciencecenter.github.io/tm_corona/tm_analysis.html). \"\"\" check_is_fitted ( self ) return plotting . visualize_term_rank ( self , topics = topics , log_scale = log_scale , custom_labels = custom_labels , title = title , width = width , height = height )","title":"visualize_term_rank()"},{"location":"api/bertopic.html#bertopic._bertopic.BERTopic.visualize_topics","text":"Visualize topics, their sizes, and their corresponding words This visualization is highly inspired by LDAvis, a great visualization technique typically reserved for LDA. Parameters: Name Type Description Default topics List[int] A selection of topics to visualize None top_n_topics int Only select the top n most frequent topics None custom_labels bool Whether to use custom topic labels that were defined using topic_model.set_topic_labels . False title str Title of the plot. '<b>Intertopic Distance Map</b>' width int The width of the figure. 650 height int The height of the figure. 650 Examples: To visualize the topics simply run: topic_model . visualize_topics () Or if you want to save the resulting figure: fig = topic_model . visualize_topics () fig . write_html ( \"path/to/file.html\" ) Source code in bertopic\\_bertopic.py def visualize_topics ( self , topics : List [ int ] = None , top_n_topics : int = None , custom_labels : bool = False , title : str = \"<b>Intertopic Distance Map</b>\" , width : int = 650 , height : int = 650 ) -> go . Figure : \"\"\" Visualize topics, their sizes, and their corresponding words This visualization is highly inspired by LDAvis, a great visualization technique typically reserved for LDA. Arguments: topics: A selection of topics to visualize top_n_topics: Only select the top n most frequent topics custom_labels: Whether to use custom topic labels that were defined using `topic_model.set_topic_labels`. title: Title of the plot. width: The width of the figure. height: The height of the figure. Examples: To visualize the topics simply run: ```python topic_model.visualize_topics() ``` Or if you want to save the resulting figure: ```python fig = topic_model.visualize_topics() fig.write_html(\"path/to/file.html\") ``` \"\"\" check_is_fitted ( self ) return plotting . visualize_topics ( self , topics = topics , top_n_topics = top_n_topics , custom_labels = custom_labels , title = title , width = width , height = height )","title":"visualize_topics()"},{"location":"api/bertopic.html#bertopic._bertopic.BERTopic.visualize_topics_over_time","text":"Visualize topics over time Parameters: Name Type Description Default topics_over_time DataFrame The topics you would like to be visualized with the corresponding topic representation required top_n_topics int To visualize the most frequent topics instead of all None topics List[int] Select which topics you would like to be visualized None normalize_frequency bool Whether to normalize each topic's frequency individually False custom_labels bool Whether to use custom topic labels that were defined using topic_model.set_topic_labels . False title str Title of the plot. '<b>Topics over Time</b>' width int The width of the figure. 1250 height int The height of the figure. 450 Returns: Type Description Figure A plotly.graph_objects.Figure including all traces Examples: To visualize the topics over time, simply run: topics_over_time = topic_model . topics_over_time ( docs , timestamps ) topic_model . visualize_topics_over_time ( topics_over_time ) Or if you want to save the resulting figure: fig = topic_model . visualize_topics_over_time ( topics_over_time ) fig . write_html ( \"path/to/file.html\" ) Source code in bertopic\\_bertopic.py def visualize_topics_over_time ( self , topics_over_time : pd . DataFrame , top_n_topics : int = None , topics : List [ int ] = None , normalize_frequency : bool = False , custom_labels : bool = False , title : str = \"<b>Topics over Time</b>\" , width : int = 1250 , height : int = 450 ) -> go . Figure : \"\"\" Visualize topics over time Arguments: topics_over_time: The topics you would like to be visualized with the corresponding topic representation top_n_topics: To visualize the most frequent topics instead of all topics: Select which topics you would like to be visualized normalize_frequency: Whether to normalize each topic's frequency individually custom_labels: Whether to use custom topic labels that were defined using `topic_model.set_topic_labels`. title: Title of the plot. width: The width of the figure. height: The height of the figure. Returns: A plotly.graph_objects.Figure including all traces Examples: To visualize the topics over time, simply run: ```python topics_over_time = topic_model.topics_over_time(docs, timestamps) topic_model.visualize_topics_over_time(topics_over_time) ``` Or if you want to save the resulting figure: ```python fig = topic_model.visualize_topics_over_time(topics_over_time) fig.write_html(\"path/to/file.html\") ``` \"\"\" check_is_fitted ( self ) return plotting . visualize_topics_over_time ( self , topics_over_time = topics_over_time , top_n_topics = top_n_topics , topics = topics , normalize_frequency = normalize_frequency , custom_labels = custom_labels , title = title , width = width , height = height )","title":"visualize_topics_over_time()"},{"location":"api/bertopic.html#bertopic._bertopic.BERTopic.visualize_topics_per_class","text":"Visualize topics per class Parameters: Name Type Description Default topics_per_class DataFrame The topics you would like to be visualized with the corresponding topic representation required top_n_topics int To visualize the most frequent topics instead of all 10 topics List[int] Select which topics you would like to be visualized None normalize_frequency bool Whether to normalize each topic's frequency individually False custom_labels bool Whether to use custom topic labels that were defined using topic_model.set_topic_labels . False title str Title of the plot. '<b>Topics per Class</b>' width int The width of the figure. 1250 height int The height of the figure. 900 Returns: Type Description Figure A plotly.graph_objects.Figure including all traces Examples: To visualize the topics per class, simply run: topics_per_class = topic_model . topics_per_class ( docs , classes ) topic_model . visualize_topics_per_class ( topics_per_class ) Or if you want to save the resulting figure: fig = topic_model . visualize_topics_per_class ( topics_per_class ) fig . write_html ( \"path/to/file.html\" ) Source code in bertopic\\_bertopic.py def visualize_topics_per_class ( self , topics_per_class : pd . DataFrame , top_n_topics : int = 10 , topics : List [ int ] = None , normalize_frequency : bool = False , custom_labels : bool = False , title : str = \"<b>Topics per Class</b>\" , width : int = 1250 , height : int = 900 ) -> go . Figure : \"\"\" Visualize topics per class Arguments: topics_per_class: The topics you would like to be visualized with the corresponding topic representation top_n_topics: To visualize the most frequent topics instead of all topics: Select which topics you would like to be visualized normalize_frequency: Whether to normalize each topic's frequency individually custom_labels: Whether to use custom topic labels that were defined using `topic_model.set_topic_labels`. title: Title of the plot. width: The width of the figure. height: The height of the figure. Returns: A plotly.graph_objects.Figure including all traces Examples: To visualize the topics per class, simply run: ```python topics_per_class = topic_model.topics_per_class(docs, classes) topic_model.visualize_topics_per_class(topics_per_class) ``` Or if you want to save the resulting figure: ```python fig = topic_model.visualize_topics_per_class(topics_per_class) fig.write_html(\"path/to/file.html\") ``` \"\"\" check_is_fitted ( self ) return plotting . visualize_topics_per_class ( self , topics_per_class = topics_per_class , top_n_topics = top_n_topics , topics = topics , normalize_frequency = normalize_frequency , custom_labels = custom_labels , title = title , width = width , height = height )","title":"visualize_topics_per_class()"},{"location":"api/ctfidf.html","text":"c-TF-IDF \u00b6 A Class-based TF-IDF procedure using scikit-learns TfidfTransformer as a base. c-TF-IDF can best be explained as a TF-IDF formula adopted for multiple classes by joining all documents per class. Thus, each class is converted to a single document instead of set of documents. The frequency of each word x is extracted for each class c and is l1 normalized. This constitutes the term frequency. Then, the term frequency is multiplied with IDF which is the logarithm of 1 plus the average number of words per class A divided by the frequency of word x across all classes. Parameters: Name Type Description Default bm25_weighting bool Uses BM25-inspired idf-weighting procedure instead of the procedure as defined in the c-TF-IDF formula. It uses the following weighting scheme: log(1+((avg_nr_samples - df + 0.5) / (df+0.5))) False reduce_frequent_words bool Takes the square root of the bag-of-words after normalizing the matrix. Helps to reduce the impact of words that appear too frequently. False Examples: transformer = ClassTfidfTransformer () Source code in bertopic\\vectorizers\\_ctfidf.py class ClassTfidfTransformer ( TfidfTransformer ): \"\"\" A Class-based TF-IDF procedure using scikit-learns TfidfTransformer as a base. ![](../algorithm/c-TF-IDF.svg) c-TF-IDF can best be explained as a TF-IDF formula adopted for multiple classes by joining all documents per class. Thus, each class is converted to a single document instead of set of documents. The frequency of each word **x** is extracted for each class **c** and is **l1** normalized. This constitutes the term frequency. Then, the term frequency is multiplied with IDF which is the logarithm of 1 plus the average number of words per class **A** divided by the frequency of word **x** across all classes. Arguments: bm25_weighting: Uses BM25-inspired idf-weighting procedure instead of the procedure as defined in the c-TF-IDF formula. It uses the following weighting scheme: `log(1+((avg_nr_samples - df + 0.5) / (df+0.5)))` reduce_frequent_words: Takes the square root of the bag-of-words after normalizing the matrix. Helps to reduce the impact of words that appear too frequently. Examples: ```python transformer = ClassTfidfTransformer() ``` \"\"\" def __init__ ( self , bm25_weighting : bool = False , reduce_frequent_words : bool = False ): self . bm25_weighting = bm25_weighting self . reduce_frequent_words = reduce_frequent_words super ( ClassTfidfTransformer , self ) . __init__ () def fit ( self , X : sp . csr_matrix , multiplier : np . ndarray = None ): \"\"\"Learn the idf vector (global term weights). Arguments: X: A matrix of term/token counts. multiplier: A multiplier for increasing/decreasing certain IDF scores \"\"\" X = check_array ( X , accept_sparse = ( 'csr' , 'csc' )) if not sp . issparse ( X ): X = sp . csr_matrix ( X ) dtype = np . float64 if self . use_idf : _ , n_features = X . shape # Calculate the frequency of words across all classes df = np . squeeze ( np . asarray ( X . sum ( axis = 0 ))) # Calculate the average number of samples as regularization avg_nr_samples = int ( X . sum ( axis = 1 ) . mean ()) # BM25-inspired weighting procedure if self . bm25_weighting : idf = np . log ( 1 + (( avg_nr_samples - df + 0.5 ) / ( df + 0.5 ))) # Divide the average number of samples by the word frequency # +1 is added to force values to be positive else : idf = np . log (( avg_nr_samples / df ) + 1 ) # Multiplier to increase/decrease certain idf scores if multiplier is not None : idf = idf * multiplier self . _idf_diag = sp . diags ( idf , offsets = 0 , shape = ( n_features , n_features ), format = 'csr' , dtype = dtype ) return self def transform ( self , X : sp . csr_matrix ): \"\"\"Transform a count-based matrix to c-TF-IDF Arguments: X (sparse matrix): A matrix of term/token counts. Returns: X (sparse matrix): A c-TF-IDF matrix \"\"\" if self . use_idf : X = normalize ( X , axis = 1 , norm = 'l1' , copy = False ) if self . reduce_frequent_words : X . data = np . sqrt ( X . data ) X = X * self . _idf_diag return X fit ( self , X , multiplier = None ) \u00b6 Learn the idf vector (global term weights). Parameters: Name Type Description Default X csr_matrix A matrix of term/token counts. required multiplier ndarray A multiplier for increasing/decreasing certain IDF scores None Source code in bertopic\\vectorizers\\_ctfidf.py def fit ( self , X : sp . csr_matrix , multiplier : np . ndarray = None ): \"\"\"Learn the idf vector (global term weights). Arguments: X: A matrix of term/token counts. multiplier: A multiplier for increasing/decreasing certain IDF scores \"\"\" X = check_array ( X , accept_sparse = ( 'csr' , 'csc' )) if not sp . issparse ( X ): X = sp . csr_matrix ( X ) dtype = np . float64 if self . use_idf : _ , n_features = X . shape # Calculate the frequency of words across all classes df = np . squeeze ( np . asarray ( X . sum ( axis = 0 ))) # Calculate the average number of samples as regularization avg_nr_samples = int ( X . sum ( axis = 1 ) . mean ()) # BM25-inspired weighting procedure if self . bm25_weighting : idf = np . log ( 1 + (( avg_nr_samples - df + 0.5 ) / ( df + 0.5 ))) # Divide the average number of samples by the word frequency # +1 is added to force values to be positive else : idf = np . log (( avg_nr_samples / df ) + 1 ) # Multiplier to increase/decrease certain idf scores if multiplier is not None : idf = idf * multiplier self . _idf_diag = sp . diags ( idf , offsets = 0 , shape = ( n_features , n_features ), format = 'csr' , dtype = dtype ) return self transform ( self , X ) \u00b6 Transform a count-based matrix to c-TF-IDF Parameters: Name Type Description Default X sparse matrix A matrix of term/token counts. required Returns: Type Description X (sparse matrix) A c-TF-IDF matrix Source code in bertopic\\vectorizers\\_ctfidf.py def transform ( self , X : sp . csr_matrix ): \"\"\"Transform a count-based matrix to c-TF-IDF Arguments: X (sparse matrix): A matrix of term/token counts. Returns: X (sparse matrix): A c-TF-IDF matrix \"\"\" if self . use_idf : X = normalize ( X , axis = 1 , norm = 'l1' , copy = False ) if self . reduce_frequent_words : X . data = np . sqrt ( X . data ) X = X * self . _idf_diag return X","title":"cTFIDF"},{"location":"api/ctfidf.html#c-tf-idf","text":"A Class-based TF-IDF procedure using scikit-learns TfidfTransformer as a base. c-TF-IDF can best be explained as a TF-IDF formula adopted for multiple classes by joining all documents per class. Thus, each class is converted to a single document instead of set of documents. The frequency of each word x is extracted for each class c and is l1 normalized. This constitutes the term frequency. Then, the term frequency is multiplied with IDF which is the logarithm of 1 plus the average number of words per class A divided by the frequency of word x across all classes. Parameters: Name Type Description Default bm25_weighting bool Uses BM25-inspired idf-weighting procedure instead of the procedure as defined in the c-TF-IDF formula. It uses the following weighting scheme: log(1+((avg_nr_samples - df + 0.5) / (df+0.5))) False reduce_frequent_words bool Takes the square root of the bag-of-words after normalizing the matrix. Helps to reduce the impact of words that appear too frequently. False Examples: transformer = ClassTfidfTransformer () Source code in bertopic\\vectorizers\\_ctfidf.py class ClassTfidfTransformer ( TfidfTransformer ): \"\"\" A Class-based TF-IDF procedure using scikit-learns TfidfTransformer as a base. ![](../algorithm/c-TF-IDF.svg) c-TF-IDF can best be explained as a TF-IDF formula adopted for multiple classes by joining all documents per class. Thus, each class is converted to a single document instead of set of documents. The frequency of each word **x** is extracted for each class **c** and is **l1** normalized. This constitutes the term frequency. Then, the term frequency is multiplied with IDF which is the logarithm of 1 plus the average number of words per class **A** divided by the frequency of word **x** across all classes. Arguments: bm25_weighting: Uses BM25-inspired idf-weighting procedure instead of the procedure as defined in the c-TF-IDF formula. It uses the following weighting scheme: `log(1+((avg_nr_samples - df + 0.5) / (df+0.5)))` reduce_frequent_words: Takes the square root of the bag-of-words after normalizing the matrix. Helps to reduce the impact of words that appear too frequently. Examples: ```python transformer = ClassTfidfTransformer() ``` \"\"\" def __init__ ( self , bm25_weighting : bool = False , reduce_frequent_words : bool = False ): self . bm25_weighting = bm25_weighting self . reduce_frequent_words = reduce_frequent_words super ( ClassTfidfTransformer , self ) . __init__ () def fit ( self , X : sp . csr_matrix , multiplier : np . ndarray = None ): \"\"\"Learn the idf vector (global term weights). Arguments: X: A matrix of term/token counts. multiplier: A multiplier for increasing/decreasing certain IDF scores \"\"\" X = check_array ( X , accept_sparse = ( 'csr' , 'csc' )) if not sp . issparse ( X ): X = sp . csr_matrix ( X ) dtype = np . float64 if self . use_idf : _ , n_features = X . shape # Calculate the frequency of words across all classes df = np . squeeze ( np . asarray ( X . sum ( axis = 0 ))) # Calculate the average number of samples as regularization avg_nr_samples = int ( X . sum ( axis = 1 ) . mean ()) # BM25-inspired weighting procedure if self . bm25_weighting : idf = np . log ( 1 + (( avg_nr_samples - df + 0.5 ) / ( df + 0.5 ))) # Divide the average number of samples by the word frequency # +1 is added to force values to be positive else : idf = np . log (( avg_nr_samples / df ) + 1 ) # Multiplier to increase/decrease certain idf scores if multiplier is not None : idf = idf * multiplier self . _idf_diag = sp . diags ( idf , offsets = 0 , shape = ( n_features , n_features ), format = 'csr' , dtype = dtype ) return self def transform ( self , X : sp . csr_matrix ): \"\"\"Transform a count-based matrix to c-TF-IDF Arguments: X (sparse matrix): A matrix of term/token counts. Returns: X (sparse matrix): A c-TF-IDF matrix \"\"\" if self . use_idf : X = normalize ( X , axis = 1 , norm = 'l1' , copy = False ) if self . reduce_frequent_words : X . data = np . sqrt ( X . data ) X = X * self . _idf_diag return X","title":"c-TF-IDF"},{"location":"api/ctfidf.html#bertopic.vectorizers._ctfidf.ClassTfidfTransformer.fit","text":"Learn the idf vector (global term weights). Parameters: Name Type Description Default X csr_matrix A matrix of term/token counts. required multiplier ndarray A multiplier for increasing/decreasing certain IDF scores None Source code in bertopic\\vectorizers\\_ctfidf.py def fit ( self , X : sp . csr_matrix , multiplier : np . ndarray = None ): \"\"\"Learn the idf vector (global term weights). Arguments: X: A matrix of term/token counts. multiplier: A multiplier for increasing/decreasing certain IDF scores \"\"\" X = check_array ( X , accept_sparse = ( 'csr' , 'csc' )) if not sp . issparse ( X ): X = sp . csr_matrix ( X ) dtype = np . float64 if self . use_idf : _ , n_features = X . shape # Calculate the frequency of words across all classes df = np . squeeze ( np . asarray ( X . sum ( axis = 0 ))) # Calculate the average number of samples as regularization avg_nr_samples = int ( X . sum ( axis = 1 ) . mean ()) # BM25-inspired weighting procedure if self . bm25_weighting : idf = np . log ( 1 + (( avg_nr_samples - df + 0.5 ) / ( df + 0.5 ))) # Divide the average number of samples by the word frequency # +1 is added to force values to be positive else : idf = np . log (( avg_nr_samples / df ) + 1 ) # Multiplier to increase/decrease certain idf scores if multiplier is not None : idf = idf * multiplier self . _idf_diag = sp . diags ( idf , offsets = 0 , shape = ( n_features , n_features ), format = 'csr' , dtype = dtype ) return self","title":"fit()"},{"location":"api/ctfidf.html#bertopic.vectorizers._ctfidf.ClassTfidfTransformer.transform","text":"Transform a count-based matrix to c-TF-IDF Parameters: Name Type Description Default X sparse matrix A matrix of term/token counts. required Returns: Type Description X (sparse matrix) A c-TF-IDF matrix Source code in bertopic\\vectorizers\\_ctfidf.py def transform ( self , X : sp . csr_matrix ): \"\"\"Transform a count-based matrix to c-TF-IDF Arguments: X (sparse matrix): A matrix of term/token counts. Returns: X (sparse matrix): A c-TF-IDF matrix \"\"\" if self . use_idf : X = normalize ( X , axis = 1 , norm = 'l1' , copy = False ) if self . reduce_frequent_words : X . data = np . sqrt ( X . data ) X = X * self . _idf_diag return X","title":"transform()"},{"location":"api/onlinecv.html","text":"OnlineCountVectorizer \u00b6 An online variant of the CountVectorizer with updating vocabulary. At each .partial_fit , its vocabulary is updated based on any OOV words it might find. Then, .update_bow can be used to track and update the Bag-of-Words representation. These functions are seperated such that the vectorizer can be used in iteration without updating the Bag-of-Words representation can might speed up the fitting process. However, the .update_bow function is used in BERTopic to track changes in the topic representations and allow for decay. This class inherits its parameters and attributes from: sklearn.feature_extraction.text.CountVectorizer Parameters: Name Type Description Default decay float A value between [0, 1] to weight the percentage of frequencies the previous bag-of-words should be decreased. For example, a value of .1 will decrease the frequencies in the bag-of-words matrix with 10% at each iteration. None delete_min_df float Delete words eat each iteration from its vocabulary that do not exceed a minimum frequency. This will keep the resulting bag-of-words matrix small such that it does not explode in size with increasing vocabulary. If decay is None then this equals min_df . None **kwargs Set of parameters inherited from: sklearn.feature_extraction.text.CountVectorizer In practice, this means that you can still use parameters from the original CountVectorizer, like stop_words and ngram_range . {} Attributes: Name Type Description X_ scipy.sparse.csr_matrix) The Bag-of-Words representation Examples: from bertopic.vectorizers import OnlineCountVectorizer vectorizer = OnlineCountVectorizer ( stop_words = \"english\" ) for index , doc in enumerate ( my_docs ): vectorizer . partial_fit ( doc ) # Update and clean the bow every 100 iterations: if index % 100 == 0 : X = vectorizer . update_bow () To use the model in BERTopic: from bertopic import BERTopic from bertopic.vectorizers import OnlineCountVectorizer vectorizer_model = OnlineCountVectorizer ( stop_words = \"english\" ) topic_model = BERTopic ( vectorizer_model = vectorizer_model ) References Adapted from: https://github.com/idoshlomo/online_vectorizers Source code in bertopic\\vectorizers\\_online_cv.py class OnlineCountVectorizer ( CountVectorizer ): \"\"\" An online variant of the CountVectorizer with updating vocabulary. At each `.partial_fit`, its vocabulary is updated based on any OOV words it might find. Then, `.update_bow` can be used to track and update the Bag-of-Words representation. These functions are seperated such that the vectorizer can be used in iteration without updating the Bag-of-Words representation can might speed up the fitting process. However, the `.update_bow` function is used in BERTopic to track changes in the topic representations and allow for decay. This class inherits its parameters and attributes from: `sklearn.feature_extraction.text.CountVectorizer` Arguments: decay: A value between [0, 1] to weight the percentage of frequencies the previous bag-of-words should be decreased. For example, a value of `.1` will decrease the frequencies in the bag-of-words matrix with 10% at each iteration. delete_min_df: Delete words eat each iteration from its vocabulary that do not exceed a minimum frequency. This will keep the resulting bag-of-words matrix small such that it does not explode in size with increasing vocabulary. If `decay` is None then this equals `min_df`. **kwargs: Set of parameters inherited from: `sklearn.feature_extraction.text.CountVectorizer` In practice, this means that you can still use parameters from the original CountVectorizer, like `stop_words` and `ngram_range`. Attributes: X_ (scipy.sparse.csr_matrix) : The Bag-of-Words representation Examples: ```python from bertopic.vectorizers import OnlineCountVectorizer vectorizer = OnlineCountVectorizer(stop_words=\"english\") for index, doc in enumerate(my_docs): vectorizer.partial_fit(doc) # Update and clean the bow every 100 iterations: if index % 100 == 0: X = vectorizer.update_bow() ``` To use the model in BERTopic: ```python from bertopic import BERTopic from bertopic.vectorizers import OnlineCountVectorizer vectorizer_model = OnlineCountVectorizer(stop_words=\"english\") topic_model = BERTopic(vectorizer_model=vectorizer_model) ``` References: Adapted from: https://github.com/idoshlomo/online_vectorizers \"\"\" def __init__ ( self , decay : float = None , delete_min_df : float = None , ** kwargs ): self . decay = decay self . delete_min_df = delete_min_df super ( OnlineCountVectorizer , self ) . __init__ ( ** kwargs ) def partial_fit ( self , raw_documents : List [ str ]) -> None : \"\"\" Perform a partial fit and update vocabulary with OOV tokens Arguments: raw_documents: A list of documents \"\"\" if not hasattr ( self , 'vocabulary_' ): return self . fit ( raw_documents ) analyzer = self . build_analyzer () analyzed_documents = [ analyzer ( doc ) for doc in raw_documents ] new_tokens = set ( chain . from_iterable ( analyzed_documents )) oov_tokens = new_tokens . difference ( set ( self . vocabulary_ . keys ())) if oov_tokens : max_index = max ( self . vocabulary_ . values ()) oov_vocabulary = dict ( zip ( oov_tokens , list ( range ( max_index + 1 , max_index + 1 + len ( oov_tokens ), 1 )))) self . vocabulary_ . update ( oov_vocabulary ) return self def update_bow ( self , raw_documents : List [ str ]) -> csr_matrix : \"\"\" Create or update the bag-of-words matrix Update the bag-of-words matrix by adding the newly transformed documents. This may add empty columns if new words are found and/or add empty rows if new topics are found. During this process, the previous bag-of-words matrix might be decayed if `self.decay` has been set during init. Similarly, words that do not exceed `self.delete_min_df` are removed from its vocabulary and bag-of-words matrix. Arguments: raw_documents: A list of documents Returns: X_: Bag-of-words matrix \"\"\" if hasattr ( self , \"X_\" ): X = self . transform ( raw_documents ) # Add empty columns if new words are found columns = csr_matrix (( self . X_ . shape [ 0 ], X . shape [ 1 ] - self . X_ . shape [ 1 ]), dtype = int ) self . X_ = sparse . hstack ([ self . X_ , columns ]) # Add empty rows if new topics are found rows = csr_matrix (( X . shape [ 0 ] - self . X_ . shape [ 0 ], self . X_ . shape [ 1 ]), dtype = int ) self . X_ = sparse . vstack ([ self . X_ , rows ]) # Decay of BoW matrix if self . decay is not None : self . X_ = self . X_ * ( 1 - self . decay ) self . X_ += X else : self . X_ = self . transform ( raw_documents ) if self . delete_min_df is not None : self . _clean_bow () return self . X_ def _clean_bow ( self ) -> None : \"\"\" Remove words that do not exceed `self.delete_min_df` \"\"\" # Only keep words with a minimum frequency indices = np . where ( self . X_ . sum ( 0 ) >= self . delete_min_df )[ 1 ] indices_dict = { index : index for index in indices } self . X_ = self . X_ [:, indices ] # Update vocabulary with new words new_vocab = {} vocabulary_dict = { v : k for k , v in self . vocabulary_ . items ()} for i , index in enumerate ( indices ): if indices_dict . get ( index ) is not None : new_vocab [ vocabulary_dict [ index ]] = i self . vocabulary_ = new_vocab partial_fit ( self , raw_documents ) \u00b6 Perform a partial fit and update vocabulary with OOV tokens Parameters: Name Type Description Default raw_documents List[str] A list of documents required Source code in bertopic\\vectorizers\\_online_cv.py def partial_fit ( self , raw_documents : List [ str ]) -> None : \"\"\" Perform a partial fit and update vocabulary with OOV tokens Arguments: raw_documents: A list of documents \"\"\" if not hasattr ( self , 'vocabulary_' ): return self . fit ( raw_documents ) analyzer = self . build_analyzer () analyzed_documents = [ analyzer ( doc ) for doc in raw_documents ] new_tokens = set ( chain . from_iterable ( analyzed_documents )) oov_tokens = new_tokens . difference ( set ( self . vocabulary_ . keys ())) if oov_tokens : max_index = max ( self . vocabulary_ . values ()) oov_vocabulary = dict ( zip ( oov_tokens , list ( range ( max_index + 1 , max_index + 1 + len ( oov_tokens ), 1 )))) self . vocabulary_ . update ( oov_vocabulary ) return self update_bow ( self , raw_documents ) \u00b6 Create or update the bag-of-words matrix Update the bag-of-words matrix by adding the newly transformed documents. This may add empty columns if new words are found and/or add empty rows if new topics are found. During this process, the previous bag-of-words matrix might be decayed if self.decay has been set during init. Similarly, words that do not exceed self.delete_min_df are removed from its vocabulary and bag-of-words matrix. Parameters: Name Type Description Default raw_documents List[str] A list of documents required Returns: Type Description X_ Bag-of-words matrix Source code in bertopic\\vectorizers\\_online_cv.py def update_bow ( self , raw_documents : List [ str ]) -> csr_matrix : \"\"\" Create or update the bag-of-words matrix Update the bag-of-words matrix by adding the newly transformed documents. This may add empty columns if new words are found and/or add empty rows if new topics are found. During this process, the previous bag-of-words matrix might be decayed if `self.decay` has been set during init. Similarly, words that do not exceed `self.delete_min_df` are removed from its vocabulary and bag-of-words matrix. Arguments: raw_documents: A list of documents Returns: X_: Bag-of-words matrix \"\"\" if hasattr ( self , \"X_\" ): X = self . transform ( raw_documents ) # Add empty columns if new words are found columns = csr_matrix (( self . X_ . shape [ 0 ], X . shape [ 1 ] - self . X_ . shape [ 1 ]), dtype = int ) self . X_ = sparse . hstack ([ self . X_ , columns ]) # Add empty rows if new topics are found rows = csr_matrix (( X . shape [ 0 ] - self . X_ . shape [ 0 ], self . X_ . shape [ 1 ]), dtype = int ) self . X_ = sparse . vstack ([ self . X_ , rows ]) # Decay of BoW matrix if self . decay is not None : self . X_ = self . X_ * ( 1 - self . decay ) self . X_ += X else : self . X_ = self . transform ( raw_documents ) if self . delete_min_df is not None : self . _clean_bow () return self . X_","title":"OnlineCountVectorizer"},{"location":"api/onlinecv.html#onlinecountvectorizer","text":"An online variant of the CountVectorizer with updating vocabulary. At each .partial_fit , its vocabulary is updated based on any OOV words it might find. Then, .update_bow can be used to track and update the Bag-of-Words representation. These functions are seperated such that the vectorizer can be used in iteration without updating the Bag-of-Words representation can might speed up the fitting process. However, the .update_bow function is used in BERTopic to track changes in the topic representations and allow for decay. This class inherits its parameters and attributes from: sklearn.feature_extraction.text.CountVectorizer Parameters: Name Type Description Default decay float A value between [0, 1] to weight the percentage of frequencies the previous bag-of-words should be decreased. For example, a value of .1 will decrease the frequencies in the bag-of-words matrix with 10% at each iteration. None delete_min_df float Delete words eat each iteration from its vocabulary that do not exceed a minimum frequency. This will keep the resulting bag-of-words matrix small such that it does not explode in size with increasing vocabulary. If decay is None then this equals min_df . None **kwargs Set of parameters inherited from: sklearn.feature_extraction.text.CountVectorizer In practice, this means that you can still use parameters from the original CountVectorizer, like stop_words and ngram_range . {} Attributes: Name Type Description X_ scipy.sparse.csr_matrix) The Bag-of-Words representation Examples: from bertopic.vectorizers import OnlineCountVectorizer vectorizer = OnlineCountVectorizer ( stop_words = \"english\" ) for index , doc in enumerate ( my_docs ): vectorizer . partial_fit ( doc ) # Update and clean the bow every 100 iterations: if index % 100 == 0 : X = vectorizer . update_bow () To use the model in BERTopic: from bertopic import BERTopic from bertopic.vectorizers import OnlineCountVectorizer vectorizer_model = OnlineCountVectorizer ( stop_words = \"english\" ) topic_model = BERTopic ( vectorizer_model = vectorizer_model ) References Adapted from: https://github.com/idoshlomo/online_vectorizers Source code in bertopic\\vectorizers\\_online_cv.py class OnlineCountVectorizer ( CountVectorizer ): \"\"\" An online variant of the CountVectorizer with updating vocabulary. At each `.partial_fit`, its vocabulary is updated based on any OOV words it might find. Then, `.update_bow` can be used to track and update the Bag-of-Words representation. These functions are seperated such that the vectorizer can be used in iteration without updating the Bag-of-Words representation can might speed up the fitting process. However, the `.update_bow` function is used in BERTopic to track changes in the topic representations and allow for decay. This class inherits its parameters and attributes from: `sklearn.feature_extraction.text.CountVectorizer` Arguments: decay: A value between [0, 1] to weight the percentage of frequencies the previous bag-of-words should be decreased. For example, a value of `.1` will decrease the frequencies in the bag-of-words matrix with 10% at each iteration. delete_min_df: Delete words eat each iteration from its vocabulary that do not exceed a minimum frequency. This will keep the resulting bag-of-words matrix small such that it does not explode in size with increasing vocabulary. If `decay` is None then this equals `min_df`. **kwargs: Set of parameters inherited from: `sklearn.feature_extraction.text.CountVectorizer` In practice, this means that you can still use parameters from the original CountVectorizer, like `stop_words` and `ngram_range`. Attributes: X_ (scipy.sparse.csr_matrix) : The Bag-of-Words representation Examples: ```python from bertopic.vectorizers import OnlineCountVectorizer vectorizer = OnlineCountVectorizer(stop_words=\"english\") for index, doc in enumerate(my_docs): vectorizer.partial_fit(doc) # Update and clean the bow every 100 iterations: if index % 100 == 0: X = vectorizer.update_bow() ``` To use the model in BERTopic: ```python from bertopic import BERTopic from bertopic.vectorizers import OnlineCountVectorizer vectorizer_model = OnlineCountVectorizer(stop_words=\"english\") topic_model = BERTopic(vectorizer_model=vectorizer_model) ``` References: Adapted from: https://github.com/idoshlomo/online_vectorizers \"\"\" def __init__ ( self , decay : float = None , delete_min_df : float = None , ** kwargs ): self . decay = decay self . delete_min_df = delete_min_df super ( OnlineCountVectorizer , self ) . __init__ ( ** kwargs ) def partial_fit ( self , raw_documents : List [ str ]) -> None : \"\"\" Perform a partial fit and update vocabulary with OOV tokens Arguments: raw_documents: A list of documents \"\"\" if not hasattr ( self , 'vocabulary_' ): return self . fit ( raw_documents ) analyzer = self . build_analyzer () analyzed_documents = [ analyzer ( doc ) for doc in raw_documents ] new_tokens = set ( chain . from_iterable ( analyzed_documents )) oov_tokens = new_tokens . difference ( set ( self . vocabulary_ . keys ())) if oov_tokens : max_index = max ( self . vocabulary_ . values ()) oov_vocabulary = dict ( zip ( oov_tokens , list ( range ( max_index + 1 , max_index + 1 + len ( oov_tokens ), 1 )))) self . vocabulary_ . update ( oov_vocabulary ) return self def update_bow ( self , raw_documents : List [ str ]) -> csr_matrix : \"\"\" Create or update the bag-of-words matrix Update the bag-of-words matrix by adding the newly transformed documents. This may add empty columns if new words are found and/or add empty rows if new topics are found. During this process, the previous bag-of-words matrix might be decayed if `self.decay` has been set during init. Similarly, words that do not exceed `self.delete_min_df` are removed from its vocabulary and bag-of-words matrix. Arguments: raw_documents: A list of documents Returns: X_: Bag-of-words matrix \"\"\" if hasattr ( self , \"X_\" ): X = self . transform ( raw_documents ) # Add empty columns if new words are found columns = csr_matrix (( self . X_ . shape [ 0 ], X . shape [ 1 ] - self . X_ . shape [ 1 ]), dtype = int ) self . X_ = sparse . hstack ([ self . X_ , columns ]) # Add empty rows if new topics are found rows = csr_matrix (( X . shape [ 0 ] - self . X_ . shape [ 0 ], self . X_ . shape [ 1 ]), dtype = int ) self . X_ = sparse . vstack ([ self . X_ , rows ]) # Decay of BoW matrix if self . decay is not None : self . X_ = self . X_ * ( 1 - self . decay ) self . X_ += X else : self . X_ = self . transform ( raw_documents ) if self . delete_min_df is not None : self . _clean_bow () return self . X_ def _clean_bow ( self ) -> None : \"\"\" Remove words that do not exceed `self.delete_min_df` \"\"\" # Only keep words with a minimum frequency indices = np . where ( self . X_ . sum ( 0 ) >= self . delete_min_df )[ 1 ] indices_dict = { index : index for index in indices } self . X_ = self . X_ [:, indices ] # Update vocabulary with new words new_vocab = {} vocabulary_dict = { v : k for k , v in self . vocabulary_ . items ()} for i , index in enumerate ( indices ): if indices_dict . get ( index ) is not None : new_vocab [ vocabulary_dict [ index ]] = i self . vocabulary_ = new_vocab","title":"OnlineCountVectorizer"},{"location":"api/onlinecv.html#bertopic.vectorizers._online_cv.OnlineCountVectorizer.partial_fit","text":"Perform a partial fit and update vocabulary with OOV tokens Parameters: Name Type Description Default raw_documents List[str] A list of documents required Source code in bertopic\\vectorizers\\_online_cv.py def partial_fit ( self , raw_documents : List [ str ]) -> None : \"\"\" Perform a partial fit and update vocabulary with OOV tokens Arguments: raw_documents: A list of documents \"\"\" if not hasattr ( self , 'vocabulary_' ): return self . fit ( raw_documents ) analyzer = self . build_analyzer () analyzed_documents = [ analyzer ( doc ) for doc in raw_documents ] new_tokens = set ( chain . from_iterable ( analyzed_documents )) oov_tokens = new_tokens . difference ( set ( self . vocabulary_ . keys ())) if oov_tokens : max_index = max ( self . vocabulary_ . values ()) oov_vocabulary = dict ( zip ( oov_tokens , list ( range ( max_index + 1 , max_index + 1 + len ( oov_tokens ), 1 )))) self . vocabulary_ . update ( oov_vocabulary ) return self","title":"partial_fit()"},{"location":"api/onlinecv.html#bertopic.vectorizers._online_cv.OnlineCountVectorizer.update_bow","text":"Create or update the bag-of-words matrix Update the bag-of-words matrix by adding the newly transformed documents. This may add empty columns if new words are found and/or add empty rows if new topics are found. During this process, the previous bag-of-words matrix might be decayed if self.decay has been set during init. Similarly, words that do not exceed self.delete_min_df are removed from its vocabulary and bag-of-words matrix. Parameters: Name Type Description Default raw_documents List[str] A list of documents required Returns: Type Description X_ Bag-of-words matrix Source code in bertopic\\vectorizers\\_online_cv.py def update_bow ( self , raw_documents : List [ str ]) -> csr_matrix : \"\"\" Create or update the bag-of-words matrix Update the bag-of-words matrix by adding the newly transformed documents. This may add empty columns if new words are found and/or add empty rows if new topics are found. During this process, the previous bag-of-words matrix might be decayed if `self.decay` has been set during init. Similarly, words that do not exceed `self.delete_min_df` are removed from its vocabulary and bag-of-words matrix. Arguments: raw_documents: A list of documents Returns: X_: Bag-of-words matrix \"\"\" if hasattr ( self , \"X_\" ): X = self . transform ( raw_documents ) # Add empty columns if new words are found columns = csr_matrix (( self . X_ . shape [ 0 ], X . shape [ 1 ] - self . X_ . shape [ 1 ]), dtype = int ) self . X_ = sparse . hstack ([ self . X_ , columns ]) # Add empty rows if new topics are found rows = csr_matrix (( X . shape [ 0 ] - self . X_ . shape [ 0 ], self . X_ . shape [ 1 ]), dtype = int ) self . X_ = sparse . vstack ([ self . X_ , rows ]) # Decay of BoW matrix if self . decay is not None : self . X_ = self . X_ * ( 1 - self . decay ) self . X_ += X else : self . X_ = self . transform ( raw_documents ) if self . delete_min_df is not None : self . _clean_bow () return self . X_","title":"update_bow()"},{"location":"api/backends/base.html","text":"BaseEmbedder \u00b6 The Base Embedder used for creating embedding models Parameters: Name Type Description Default embedding_model The main embedding model to be used for extracting document and word embedding None word_embedding_model The embedding model used for extracting word embeddings only. If this model is selected, then the embedding_model is purely used for creating document embeddings. None Source code in bertopic\\backend\\_base.py class BaseEmbedder : \"\"\" The Base Embedder used for creating embedding models Arguments: embedding_model: The main embedding model to be used for extracting document and word embedding word_embedding_model: The embedding model used for extracting word embeddings only. If this model is selected, then the `embedding_model` is purely used for creating document embeddings. \"\"\" def __init__ ( self , embedding_model = None , word_embedding_model = None ): self . embedding_model = embedding_model self . word_embedding_model = word_embedding_model def embed ( self , documents : List [ str ], verbose : bool = False ) -> np . ndarray : \"\"\" Embed a list of n documents/words into an n-dimensional matrix of embeddings Arguments: documents: A list of documents or words to be embedded verbose: Controls the verbosity of the process Returns: Document/words embeddings with shape (n, m) with `n` documents/words that each have an embeddings size of `m` \"\"\" pass def embed_words ( self , words : List [ str ], verbose : bool = False ) -> np . ndarray : \"\"\" Embed a list of n words into an n-dimensional matrix of embeddings Arguments: words: A list of words to be embedded verbose: Controls the verbosity of the process Returns: Word embeddings with shape (n, m) with `n` words that each have an embeddings size of `m` \"\"\" return self . embed ( words , verbose ) def embed_documents ( self , document : List [ str ], verbose : bool = False ) -> np . ndarray : \"\"\" Embed a list of n words into an n-dimensional matrix of embeddings Arguments: document: A list of documents to be embedded verbose: Controls the verbosity of the process Returns: Document embeddings with shape (n, m) with `n` documents that each have an embeddings size of `m` \"\"\" return self . embed ( document , verbose ) embed ( self , documents , verbose = False ) \u00b6 Embed a list of n documents/words into an n-dimensional matrix of embeddings Parameters: Name Type Description Default documents List[str] A list of documents or words to be embedded required verbose bool Controls the verbosity of the process False Returns: Type Description ndarray Document/words embeddings with shape (n, m) with n documents/words that each have an embeddings size of m Source code in bertopic\\backend\\_base.py def embed ( self , documents : List [ str ], verbose : bool = False ) -> np . ndarray : \"\"\" Embed a list of n documents/words into an n-dimensional matrix of embeddings Arguments: documents: A list of documents or words to be embedded verbose: Controls the verbosity of the process Returns: Document/words embeddings with shape (n, m) with `n` documents/words that each have an embeddings size of `m` \"\"\" pass embed_documents ( self , document , verbose = False ) \u00b6 Embed a list of n words into an n-dimensional matrix of embeddings Parameters: Name Type Description Default document List[str] A list of documents to be embedded required verbose bool Controls the verbosity of the process False Returns: Type Description ndarray Document embeddings with shape (n, m) with n documents that each have an embeddings size of m Source code in bertopic\\backend\\_base.py def embed_documents ( self , document : List [ str ], verbose : bool = False ) -> np . ndarray : \"\"\" Embed a list of n words into an n-dimensional matrix of embeddings Arguments: document: A list of documents to be embedded verbose: Controls the verbosity of the process Returns: Document embeddings with shape (n, m) with `n` documents that each have an embeddings size of `m` \"\"\" return self . embed ( document , verbose ) embed_words ( self , words , verbose = False ) \u00b6 Embed a list of n words into an n-dimensional matrix of embeddings Parameters: Name Type Description Default words List[str] A list of words to be embedded required verbose bool Controls the verbosity of the process False Returns: Type Description ndarray Word embeddings with shape (n, m) with n words that each have an embeddings size of m Source code in bertopic\\backend\\_base.py def embed_words ( self , words : List [ str ], verbose : bool = False ) -> np . ndarray : \"\"\" Embed a list of n words into an n-dimensional matrix of embeddings Arguments: words: A list of words to be embedded verbose: Controls the verbosity of the process Returns: Word embeddings with shape (n, m) with `n` words that each have an embeddings size of `m` \"\"\" return self . embed ( words , verbose )","title":"Base"},{"location":"api/backends/base.html#baseembedder","text":"The Base Embedder used for creating embedding models Parameters: Name Type Description Default embedding_model The main embedding model to be used for extracting document and word embedding None word_embedding_model The embedding model used for extracting word embeddings only. If this model is selected, then the embedding_model is purely used for creating document embeddings. None Source code in bertopic\\backend\\_base.py class BaseEmbedder : \"\"\" The Base Embedder used for creating embedding models Arguments: embedding_model: The main embedding model to be used for extracting document and word embedding word_embedding_model: The embedding model used for extracting word embeddings only. If this model is selected, then the `embedding_model` is purely used for creating document embeddings. \"\"\" def __init__ ( self , embedding_model = None , word_embedding_model = None ): self . embedding_model = embedding_model self . word_embedding_model = word_embedding_model def embed ( self , documents : List [ str ], verbose : bool = False ) -> np . ndarray : \"\"\" Embed a list of n documents/words into an n-dimensional matrix of embeddings Arguments: documents: A list of documents or words to be embedded verbose: Controls the verbosity of the process Returns: Document/words embeddings with shape (n, m) with `n` documents/words that each have an embeddings size of `m` \"\"\" pass def embed_words ( self , words : List [ str ], verbose : bool = False ) -> np . ndarray : \"\"\" Embed a list of n words into an n-dimensional matrix of embeddings Arguments: words: A list of words to be embedded verbose: Controls the verbosity of the process Returns: Word embeddings with shape (n, m) with `n` words that each have an embeddings size of `m` \"\"\" return self . embed ( words , verbose ) def embed_documents ( self , document : List [ str ], verbose : bool = False ) -> np . ndarray : \"\"\" Embed a list of n words into an n-dimensional matrix of embeddings Arguments: document: A list of documents to be embedded verbose: Controls the verbosity of the process Returns: Document embeddings with shape (n, m) with `n` documents that each have an embeddings size of `m` \"\"\" return self . embed ( document , verbose )","title":"BaseEmbedder"},{"location":"api/backends/base.html#bertopic.backend._base.BaseEmbedder.embed","text":"Embed a list of n documents/words into an n-dimensional matrix of embeddings Parameters: Name Type Description Default documents List[str] A list of documents or words to be embedded required verbose bool Controls the verbosity of the process False Returns: Type Description ndarray Document/words embeddings with shape (n, m) with n documents/words that each have an embeddings size of m Source code in bertopic\\backend\\_base.py def embed ( self , documents : List [ str ], verbose : bool = False ) -> np . ndarray : \"\"\" Embed a list of n documents/words into an n-dimensional matrix of embeddings Arguments: documents: A list of documents or words to be embedded verbose: Controls the verbosity of the process Returns: Document/words embeddings with shape (n, m) with `n` documents/words that each have an embeddings size of `m` \"\"\" pass","title":"embed()"},{"location":"api/backends/base.html#bertopic.backend._base.BaseEmbedder.embed_documents","text":"Embed a list of n words into an n-dimensional matrix of embeddings Parameters: Name Type Description Default document List[str] A list of documents to be embedded required verbose bool Controls the verbosity of the process False Returns: Type Description ndarray Document embeddings with shape (n, m) with n documents that each have an embeddings size of m Source code in bertopic\\backend\\_base.py def embed_documents ( self , document : List [ str ], verbose : bool = False ) -> np . ndarray : \"\"\" Embed a list of n words into an n-dimensional matrix of embeddings Arguments: document: A list of documents to be embedded verbose: Controls the verbosity of the process Returns: Document embeddings with shape (n, m) with `n` documents that each have an embeddings size of `m` \"\"\" return self . embed ( document , verbose )","title":"embed_documents()"},{"location":"api/backends/base.html#bertopic.backend._base.BaseEmbedder.embed_words","text":"Embed a list of n words into an n-dimensional matrix of embeddings Parameters: Name Type Description Default words List[str] A list of words to be embedded required verbose bool Controls the verbosity of the process False Returns: Type Description ndarray Word embeddings with shape (n, m) with n words that each have an embeddings size of m Source code in bertopic\\backend\\_base.py def embed_words ( self , words : List [ str ], verbose : bool = False ) -> np . ndarray : \"\"\" Embed a list of n words into an n-dimensional matrix of embeddings Arguments: words: A list of words to be embedded verbose: Controls the verbosity of the process Returns: Word embeddings with shape (n, m) with `n` words that each have an embeddings size of `m` \"\"\" return self . embed ( words , verbose )","title":"embed_words()"},{"location":"api/backends/word_doc.html","text":"WordDocEmbedder \u00b6 Combine a document- and word-level embedder Source code in bertopic\\backend\\_word_doc.py class WordDocEmbedder ( BaseEmbedder ): \"\"\" Combine a document- and word-level embedder \"\"\" def __init__ ( self , embedding_model , word_embedding_model ): super () . __init__ () self . embedding_model = select_backend ( embedding_model ) self . word_embedding_model = select_backend ( word_embedding_model ) def embed_words ( self , words : List [ str ], verbose : bool = False ) -> np . ndarray : \"\"\" Embed a list of n words into an n-dimensional matrix of embeddings Arguments: words: A list of words to be embedded verbose: Controls the verbosity of the process Returns: Word embeddings with shape (n, m) with `n` words that each have an embeddings size of `m` \"\"\" return self . word_embedding_model . embed ( words , verbose ) def embed_documents ( self , document : List [ str ], verbose : bool = False ) -> np . ndarray : \"\"\" Embed a list of n words into an n-dimensional matrix of embeddings Arguments: document: A list of documents to be embedded verbose: Controls the verbosity of the process Returns: Document embeddings with shape (n, m) with `n` documents that each have an embeddings size of `m` \"\"\" return self . embedding_model . embed ( document , verbose ) embed_documents ( self , document , verbose = False ) \u00b6 Embed a list of n words into an n-dimensional matrix of embeddings Parameters: Name Type Description Default document List[str] A list of documents to be embedded required verbose bool Controls the verbosity of the process False Returns: Type Description ndarray Document embeddings with shape (n, m) with n documents that each have an embeddings size of m Source code in bertopic\\backend\\_word_doc.py def embed_documents ( self , document : List [ str ], verbose : bool = False ) -> np . ndarray : \"\"\" Embed a list of n words into an n-dimensional matrix of embeddings Arguments: document: A list of documents to be embedded verbose: Controls the verbosity of the process Returns: Document embeddings with shape (n, m) with `n` documents that each have an embeddings size of `m` \"\"\" return self . embedding_model . embed ( document , verbose ) embed_words ( self , words , verbose = False ) \u00b6 Embed a list of n words into an n-dimensional matrix of embeddings Parameters: Name Type Description Default words List[str] A list of words to be embedded required verbose bool Controls the verbosity of the process False Returns: Type Description ndarray Word embeddings with shape (n, m) with n words that each have an embeddings size of m Source code in bertopic\\backend\\_word_doc.py def embed_words ( self , words : List [ str ], verbose : bool = False ) -> np . ndarray : \"\"\" Embed a list of n words into an n-dimensional matrix of embeddings Arguments: words: A list of words to be embedded verbose: Controls the verbosity of the process Returns: Word embeddings with shape (n, m) with `n` words that each have an embeddings size of `m` \"\"\" return self . word_embedding_model . embed ( words , verbose )","title":"Word Doc"},{"location":"api/backends/word_doc.html#worddocembedder","text":"Combine a document- and word-level embedder Source code in bertopic\\backend\\_word_doc.py class WordDocEmbedder ( BaseEmbedder ): \"\"\" Combine a document- and word-level embedder \"\"\" def __init__ ( self , embedding_model , word_embedding_model ): super () . __init__ () self . embedding_model = select_backend ( embedding_model ) self . word_embedding_model = select_backend ( word_embedding_model ) def embed_words ( self , words : List [ str ], verbose : bool = False ) -> np . ndarray : \"\"\" Embed a list of n words into an n-dimensional matrix of embeddings Arguments: words: A list of words to be embedded verbose: Controls the verbosity of the process Returns: Word embeddings with shape (n, m) with `n` words that each have an embeddings size of `m` \"\"\" return self . word_embedding_model . embed ( words , verbose ) def embed_documents ( self , document : List [ str ], verbose : bool = False ) -> np . ndarray : \"\"\" Embed a list of n words into an n-dimensional matrix of embeddings Arguments: document: A list of documents to be embedded verbose: Controls the verbosity of the process Returns: Document embeddings with shape (n, m) with `n` documents that each have an embeddings size of `m` \"\"\" return self . embedding_model . embed ( document , verbose )","title":"WordDocEmbedder"},{"location":"api/backends/word_doc.html#bertopic.backend._word_doc.WordDocEmbedder.embed_documents","text":"Embed a list of n words into an n-dimensional matrix of embeddings Parameters: Name Type Description Default document List[str] A list of documents to be embedded required verbose bool Controls the verbosity of the process False Returns: Type Description ndarray Document embeddings with shape (n, m) with n documents that each have an embeddings size of m Source code in bertopic\\backend\\_word_doc.py def embed_documents ( self , document : List [ str ], verbose : bool = False ) -> np . ndarray : \"\"\" Embed a list of n words into an n-dimensional matrix of embeddings Arguments: document: A list of documents to be embedded verbose: Controls the verbosity of the process Returns: Document embeddings with shape (n, m) with `n` documents that each have an embeddings size of `m` \"\"\" return self . embedding_model . embed ( document , verbose )","title":"embed_documents()"},{"location":"api/backends/word_doc.html#bertopic.backend._word_doc.WordDocEmbedder.embed_words","text":"Embed a list of n words into an n-dimensional matrix of embeddings Parameters: Name Type Description Default words List[str] A list of words to be embedded required verbose bool Controls the verbosity of the process False Returns: Type Description ndarray Word embeddings with shape (n, m) with n words that each have an embeddings size of m Source code in bertopic\\backend\\_word_doc.py def embed_words ( self , words : List [ str ], verbose : bool = False ) -> np . ndarray : \"\"\" Embed a list of n words into an n-dimensional matrix of embeddings Arguments: words: A list of words to be embedded verbose: Controls the verbosity of the process Returns: Word embeddings with shape (n, m) with `n` words that each have an embeddings size of `m` \"\"\" return self . word_embedding_model . embed ( words , verbose )","title":"embed_words()"},{"location":"api/cluster/base.html","text":"BaseCluster \u00b6 The Base Cluster class Using this class directly in BERTopic will make it skip over the cluster step. As a result, topics need to be passed to BERTopic in the form of its y parameter in order to create topic representations. Examples: This will skip over the cluster step in BERTopic: from bertopic import BERTopic from bertopic.dimensionality import BaseCluster empty_cluster_model = BaseCluster () topic_model = BERTopic ( hdbscan_model = empty_cluster_model ) Then, this class can be used to perform manual topic modeling. That is, topic modeling on a topics that were already generated before without the need to learn them: topic_model . fit ( docs , y = y ) Source code in bertopic\\cluster\\_base.py class BaseCluster : \"\"\" The Base Cluster class Using this class directly in BERTopic will make it skip over the cluster step. As a result, topics need to be passed to BERTopic in the form of its `y` parameter in order to create topic representations. Examples: This will skip over the cluster step in BERTopic: ```python from bertopic import BERTopic from bertopic.dimensionality import BaseCluster empty_cluster_model = BaseCluster() topic_model = BERTopic(hdbscan_model=empty_cluster_model) ``` Then, this class can be used to perform manual topic modeling. That is, topic modeling on a topics that were already generated before without the need to learn them: ```python topic_model.fit(docs, y=y) ``` \"\"\" def fit ( self , X , y = None ): if y is not None : self . labels_ = y else : self . labels_ = None return self def transform ( self , X : np . ndarray ) -> np . ndarray : return X","title":"Base"},{"location":"api/cluster/base.html#basecluster","text":"The Base Cluster class Using this class directly in BERTopic will make it skip over the cluster step. As a result, topics need to be passed to BERTopic in the form of its y parameter in order to create topic representations. Examples: This will skip over the cluster step in BERTopic: from bertopic import BERTopic from bertopic.dimensionality import BaseCluster empty_cluster_model = BaseCluster () topic_model = BERTopic ( hdbscan_model = empty_cluster_model ) Then, this class can be used to perform manual topic modeling. That is, topic modeling on a topics that were already generated before without the need to learn them: topic_model . fit ( docs , y = y ) Source code in bertopic\\cluster\\_base.py class BaseCluster : \"\"\" The Base Cluster class Using this class directly in BERTopic will make it skip over the cluster step. As a result, topics need to be passed to BERTopic in the form of its `y` parameter in order to create topic representations. Examples: This will skip over the cluster step in BERTopic: ```python from bertopic import BERTopic from bertopic.dimensionality import BaseCluster empty_cluster_model = BaseCluster() topic_model = BERTopic(hdbscan_model=empty_cluster_model) ``` Then, this class can be used to perform manual topic modeling. That is, topic modeling on a topics that were already generated before without the need to learn them: ```python topic_model.fit(docs, y=y) ``` \"\"\" def fit ( self , X , y = None ): if y is not None : self . labels_ = y else : self . labels_ = None return self def transform ( self , X : np . ndarray ) -> np . ndarray : return X","title":"BaseCluster"},{"location":"api/dimensionality/base.html","text":"BaseDimensionalityReduction \u00b6 The Base Dimensionality Reduction class You can use this to skip over the dimensionality reduction step in BERTopic. Examples: This will skip over the reduction step in BERTopic: from bertopic import BERTopic from bertopic.dimensionality import BaseDimensionalityReduction empty_reduction_model = BaseDimensionalityReduction () topic_model = BERTopic ( umap_model = empty_reduction_model ) Source code in bertopic\\dimensionality\\_base.py class BaseDimensionalityReduction : \"\"\" The Base Dimensionality Reduction class You can use this to skip over the dimensionality reduction step in BERTopic. Examples: This will skip over the reduction step in BERTopic: ```python from bertopic import BERTopic from bertopic.dimensionality import BaseDimensionalityReduction empty_reduction_model = BaseDimensionalityReduction() topic_model = BERTopic(umap_model=empty_reduction_model) ``` \"\"\" def fit ( self , X : np . ndarray = None ): return self def transform ( self , X : np . ndarray ) -> np . ndarray : return X","title":"Base"},{"location":"api/dimensionality/base.html#basedimensionalityreduction","text":"The Base Dimensionality Reduction class You can use this to skip over the dimensionality reduction step in BERTopic. Examples: This will skip over the reduction step in BERTopic: from bertopic import BERTopic from bertopic.dimensionality import BaseDimensionalityReduction empty_reduction_model = BaseDimensionalityReduction () topic_model = BERTopic ( umap_model = empty_reduction_model ) Source code in bertopic\\dimensionality\\_base.py class BaseDimensionalityReduction : \"\"\" The Base Dimensionality Reduction class You can use this to skip over the dimensionality reduction step in BERTopic. Examples: This will skip over the reduction step in BERTopic: ```python from bertopic import BERTopic from bertopic.dimensionality import BaseDimensionalityReduction empty_reduction_model = BaseDimensionalityReduction() topic_model = BERTopic(umap_model=empty_reduction_model) ``` \"\"\" def fit ( self , X : np . ndarray = None ): return self def transform ( self , X : np . ndarray ) -> np . ndarray : return X","title":"BaseDimensionalityReduction"},{"location":"api/plotting/barchart.html","text":"Barchart \u00b6 Visualize a barchart of selected topics Parameters: Name Type Description Default topic_model A fitted BERTopic instance. required topics List[int] A selection of topics to visualize. None top_n_topics int Only select the top n most frequent topics. 8 n_words int Number of words to show in a topic 5 custom_labels bool Whether to use custom topic labels that were defined using topic_model.set_topic_labels . False title str Title of the plot. '<b>Topic Word Scores</b>' width int The width of each figure. 250 height int The height of each figure. 250 Returns: Type Description fig A plotly figure Examples: To visualize the barchart of selected topics simply run: topic_model . visualize_barchart () Or if you want to save the resulting figure: fig = topic_model . visualize_barchart () fig . write_html ( \"path/to/file.html\" ) Source code in bertopic\\plotting\\_barchart.py def visualize_barchart ( topic_model , topics : List [ int ] = None , top_n_topics : int = 8 , n_words : int = 5 , custom_labels : bool = False , title : str = \"<b>Topic Word Scores</b>\" , width : int = 250 , height : int = 250 ) -> go . Figure : \"\"\" Visualize a barchart of selected topics Arguments: topic_model: A fitted BERTopic instance. topics: A selection of topics to visualize. top_n_topics: Only select the top n most frequent topics. n_words: Number of words to show in a topic custom_labels: Whether to use custom topic labels that were defined using `topic_model.set_topic_labels`. title: Title of the plot. width: The width of each figure. height: The height of each figure. Returns: fig: A plotly figure Examples: To visualize the barchart of selected topics simply run: ```python topic_model.visualize_barchart() ``` Or if you want to save the resulting figure: ```python fig = topic_model.visualize_barchart() fig.write_html(\"path/to/file.html\") ``` <iframe src=\"../../getting_started/visualization/bar_chart.html\" style=\"width:1100px; height: 660px; border: 0px;\"\"></iframe> \"\"\" colors = itertools . cycle ([ \"#D55E00\" , \"#0072B2\" , \"#CC79A7\" , \"#E69F00\" , \"#56B4E9\" , \"#009E73\" , \"#F0E442\" ]) # Select topics based on top_n and topics args freq_df = topic_model . get_topic_freq () freq_df = freq_df . loc [ freq_df . Topic != - 1 , :] if topics is not None : topics = list ( topics ) elif top_n_topics is not None : topics = sorted ( freq_df . Topic . to_list ()[: top_n_topics ]) else : topics = sorted ( freq_df . Topic . to_list ()[ 0 : 6 ]) # Initialize figure if topic_model . custom_labels_ is not None and custom_labels : subplot_titles = [ topic_model . custom_labels_ [ topic + topic_model . _outliers ] for topic in topics ] else : subplot_titles = [ f \"Topic { topic } \" for topic in topics ] columns = 4 rows = int ( np . ceil ( len ( topics ) / columns )) fig = make_subplots ( rows = rows , cols = columns , shared_xaxes = False , horizontal_spacing = .1 , vertical_spacing = .4 / rows if rows > 1 else 0 , subplot_titles = subplot_titles ) # Add barchart for each topic row = 1 column = 1 for topic in topics : words = [ word + \" \" for word , _ in topic_model . get_topic ( topic )][: n_words ][:: - 1 ] scores = [ score for _ , score in topic_model . get_topic ( topic )][: n_words ][:: - 1 ] fig . add_trace ( go . Bar ( x = scores , y = words , orientation = 'h' , marker_color = next ( colors )), row = row , col = column ) if column == columns : column = 1 row += 1 else : column += 1 # Stylize graph fig . update_layout ( template = \"plotly_white\" , showlegend = False , title = { 'text' : f \" { title } \" , 'x' : .5 , 'xanchor' : 'center' , 'yanchor' : 'top' , 'font' : dict ( size = 22 , color = \"Black\" ) }, width = width * 4 , height = height * rows if rows > 1 else height * 1.3 , hoverlabel = dict ( bgcolor = \"white\" , font_size = 16 , font_family = \"Rockwell\" ), ) fig . update_xaxes ( showgrid = True ) fig . update_yaxes ( showgrid = True ) return fig","title":"Barchart"},{"location":"api/plotting/barchart.html#barchart","text":"Visualize a barchart of selected topics Parameters: Name Type Description Default topic_model A fitted BERTopic instance. required topics List[int] A selection of topics to visualize. None top_n_topics int Only select the top n most frequent topics. 8 n_words int Number of words to show in a topic 5 custom_labels bool Whether to use custom topic labels that were defined using topic_model.set_topic_labels . False title str Title of the plot. '<b>Topic Word Scores</b>' width int The width of each figure. 250 height int The height of each figure. 250 Returns: Type Description fig A plotly figure Examples: To visualize the barchart of selected topics simply run: topic_model . visualize_barchart () Or if you want to save the resulting figure: fig = topic_model . visualize_barchart () fig . write_html ( \"path/to/file.html\" ) Source code in bertopic\\plotting\\_barchart.py def visualize_barchart ( topic_model , topics : List [ int ] = None , top_n_topics : int = 8 , n_words : int = 5 , custom_labels : bool = False , title : str = \"<b>Topic Word Scores</b>\" , width : int = 250 , height : int = 250 ) -> go . Figure : \"\"\" Visualize a barchart of selected topics Arguments: topic_model: A fitted BERTopic instance. topics: A selection of topics to visualize. top_n_topics: Only select the top n most frequent topics. n_words: Number of words to show in a topic custom_labels: Whether to use custom topic labels that were defined using `topic_model.set_topic_labels`. title: Title of the plot. width: The width of each figure. height: The height of each figure. Returns: fig: A plotly figure Examples: To visualize the barchart of selected topics simply run: ```python topic_model.visualize_barchart() ``` Or if you want to save the resulting figure: ```python fig = topic_model.visualize_barchart() fig.write_html(\"path/to/file.html\") ``` <iframe src=\"../../getting_started/visualization/bar_chart.html\" style=\"width:1100px; height: 660px; border: 0px;\"\"></iframe> \"\"\" colors = itertools . cycle ([ \"#D55E00\" , \"#0072B2\" , \"#CC79A7\" , \"#E69F00\" , \"#56B4E9\" , \"#009E73\" , \"#F0E442\" ]) # Select topics based on top_n and topics args freq_df = topic_model . get_topic_freq () freq_df = freq_df . loc [ freq_df . Topic != - 1 , :] if topics is not None : topics = list ( topics ) elif top_n_topics is not None : topics = sorted ( freq_df . Topic . to_list ()[: top_n_topics ]) else : topics = sorted ( freq_df . Topic . to_list ()[ 0 : 6 ]) # Initialize figure if topic_model . custom_labels_ is not None and custom_labels : subplot_titles = [ topic_model . custom_labels_ [ topic + topic_model . _outliers ] for topic in topics ] else : subplot_titles = [ f \"Topic { topic } \" for topic in topics ] columns = 4 rows = int ( np . ceil ( len ( topics ) / columns )) fig = make_subplots ( rows = rows , cols = columns , shared_xaxes = False , horizontal_spacing = .1 , vertical_spacing = .4 / rows if rows > 1 else 0 , subplot_titles = subplot_titles ) # Add barchart for each topic row = 1 column = 1 for topic in topics : words = [ word + \" \" for word , _ in topic_model . get_topic ( topic )][: n_words ][:: - 1 ] scores = [ score for _ , score in topic_model . get_topic ( topic )][: n_words ][:: - 1 ] fig . add_trace ( go . Bar ( x = scores , y = words , orientation = 'h' , marker_color = next ( colors )), row = row , col = column ) if column == columns : column = 1 row += 1 else : column += 1 # Stylize graph fig . update_layout ( template = \"plotly_white\" , showlegend = False , title = { 'text' : f \" { title } \" , 'x' : .5 , 'xanchor' : 'center' , 'yanchor' : 'top' , 'font' : dict ( size = 22 , color = \"Black\" ) }, width = width * 4 , height = height * rows if rows > 1 else height * 1.3 , hoverlabel = dict ( bgcolor = \"white\" , font_size = 16 , font_family = \"Rockwell\" ), ) fig . update_xaxes ( showgrid = True ) fig . update_yaxes ( showgrid = True ) return fig","title":"Barchart"},{"location":"api/plotting/distribution.html","text":"Distribution \u00b6 Visualize the distribution of topic probabilities Parameters: Name Type Description Default topic_model A fitted BERTopic instance. required probabilities ndarray An array of probability scores required min_probability float The minimum probability score to visualize. All others are ignored. 0.015 custom_labels bool Whether to use custom topic labels that were defined using topic_model.set_topic_labels . False title str Title of the plot. '<b>Topic Probability Distribution</b>' width int The width of the figure. 800 height int The height of the figure. 600 Examples: Make sure to fit the model before and only input the probabilities of a single document: topic_model . visualize_distribution ( probabilities [ 0 ]) Or if you want to save the resulting figure: fig = topic_model . visualize_distribution ( probabilities [ 0 ]) fig . write_html ( \"path/to/file.html\" ) Source code in bertopic\\plotting\\_distribution.py def visualize_distribution ( topic_model , probabilities : np . ndarray , min_probability : float = 0.015 , custom_labels : bool = False , title : str = \"<b>Topic Probability Distribution</b>\" , width : int = 800 , height : int = 600 ) -> go . Figure : \"\"\" Visualize the distribution of topic probabilities Arguments: topic_model: A fitted BERTopic instance. probabilities: An array of probability scores min_probability: The minimum probability score to visualize. All others are ignored. custom_labels: Whether to use custom topic labels that were defined using `topic_model.set_topic_labels`. title: Title of the plot. width: The width of the figure. height: The height of the figure. Examples: Make sure to fit the model before and only input the probabilities of a single document: ```python topic_model.visualize_distribution(probabilities[0]) ``` Or if you want to save the resulting figure: ```python fig = topic_model.visualize_distribution(probabilities[0]) fig.write_html(\"path/to/file.html\") ``` <iframe src=\"../../getting_started/visualization/probabilities.html\" style=\"width:1000px; height: 500px; border: 0px;\"\"></iframe> \"\"\" if len ( probabilities . shape ) != 1 : raise ValueError ( \"This visualization cannot be used if you have set `calculate_probabilities` to False \" \"as it uses the topic probabilities of all topics. \" ) if len ( probabilities [ probabilities > min_probability ]) == 0 : raise ValueError ( \"There are no values where `min_probability` is higher than the \" \"probabilities that were supplied. Lower `min_probability` to prevent this error.\" ) # Get values and indices equal or exceed the minimum probability labels_idx = np . argwhere ( probabilities >= min_probability ) . flatten () vals = probabilities [ labels_idx ] . tolist () # Create labels if topic_model . custom_labels_ is not None and custom_labels : labels = [ topic_model . custom_labels_ [ idx + topic_model . _outliers ] for idx in labels_idx ] else : labels = [] for idx in labels_idx : words = topic_model . get_topic ( idx ) if words : label = [ word [ 0 ] for word in words [: 5 ]] label = f \"<b>Topic { idx } </b>: { '_' . join ( label ) } \" label = label [: 40 ] + \"...\" if len ( label ) > 40 else label labels . append ( label ) else : vals . remove ( probabilities [ idx ]) # Create Figure fig = go . Figure ( go . Bar ( x = vals , y = labels , marker = dict ( color = '#C8D2D7' , line = dict ( color = '#6E8484' , width = 1 ), ), orientation = 'h' ) ) fig . update_layout ( xaxis_title = \"Probability\" , title = { 'text' : f \" { title } \" , 'y' : .95 , 'x' : 0.5 , 'xanchor' : 'center' , 'yanchor' : 'top' , 'font' : dict ( size = 22 , color = \"Black\" ) }, template = \"simple_white\" , width = width , height = height , hoverlabel = dict ( bgcolor = \"white\" , font_size = 16 , font_family = \"Rockwell\" ), ) return fig","title":"Distribution"},{"location":"api/plotting/distribution.html#distribution","text":"Visualize the distribution of topic probabilities Parameters: Name Type Description Default topic_model A fitted BERTopic instance. required probabilities ndarray An array of probability scores required min_probability float The minimum probability score to visualize. All others are ignored. 0.015 custom_labels bool Whether to use custom topic labels that were defined using topic_model.set_topic_labels . False title str Title of the plot. '<b>Topic Probability Distribution</b>' width int The width of the figure. 800 height int The height of the figure. 600 Examples: Make sure to fit the model before and only input the probabilities of a single document: topic_model . visualize_distribution ( probabilities [ 0 ]) Or if you want to save the resulting figure: fig = topic_model . visualize_distribution ( probabilities [ 0 ]) fig . write_html ( \"path/to/file.html\" ) Source code in bertopic\\plotting\\_distribution.py def visualize_distribution ( topic_model , probabilities : np . ndarray , min_probability : float = 0.015 , custom_labels : bool = False , title : str = \"<b>Topic Probability Distribution</b>\" , width : int = 800 , height : int = 600 ) -> go . Figure : \"\"\" Visualize the distribution of topic probabilities Arguments: topic_model: A fitted BERTopic instance. probabilities: An array of probability scores min_probability: The minimum probability score to visualize. All others are ignored. custom_labels: Whether to use custom topic labels that were defined using `topic_model.set_topic_labels`. title: Title of the plot. width: The width of the figure. height: The height of the figure. Examples: Make sure to fit the model before and only input the probabilities of a single document: ```python topic_model.visualize_distribution(probabilities[0]) ``` Or if you want to save the resulting figure: ```python fig = topic_model.visualize_distribution(probabilities[0]) fig.write_html(\"path/to/file.html\") ``` <iframe src=\"../../getting_started/visualization/probabilities.html\" style=\"width:1000px; height: 500px; border: 0px;\"\"></iframe> \"\"\" if len ( probabilities . shape ) != 1 : raise ValueError ( \"This visualization cannot be used if you have set `calculate_probabilities` to False \" \"as it uses the topic probabilities of all topics. \" ) if len ( probabilities [ probabilities > min_probability ]) == 0 : raise ValueError ( \"There are no values where `min_probability` is higher than the \" \"probabilities that were supplied. Lower `min_probability` to prevent this error.\" ) # Get values and indices equal or exceed the minimum probability labels_idx = np . argwhere ( probabilities >= min_probability ) . flatten () vals = probabilities [ labels_idx ] . tolist () # Create labels if topic_model . custom_labels_ is not None and custom_labels : labels = [ topic_model . custom_labels_ [ idx + topic_model . _outliers ] for idx in labels_idx ] else : labels = [] for idx in labels_idx : words = topic_model . get_topic ( idx ) if words : label = [ word [ 0 ] for word in words [: 5 ]] label = f \"<b>Topic { idx } </b>: { '_' . join ( label ) } \" label = label [: 40 ] + \"...\" if len ( label ) > 40 else label labels . append ( label ) else : vals . remove ( probabilities [ idx ]) # Create Figure fig = go . Figure ( go . Bar ( x = vals , y = labels , marker = dict ( color = '#C8D2D7' , line = dict ( color = '#6E8484' , width = 1 ), ), orientation = 'h' ) ) fig . update_layout ( xaxis_title = \"Probability\" , title = { 'text' : f \" { title } \" , 'y' : .95 , 'x' : 0.5 , 'xanchor' : 'center' , 'yanchor' : 'top' , 'font' : dict ( size = 22 , color = \"Black\" ) }, template = \"simple_white\" , width = width , height = height , hoverlabel = dict ( bgcolor = \"white\" , font_size = 16 , font_family = \"Rockwell\" ), ) return fig","title":"Distribution"},{"location":"api/plotting/documents.html","text":"Documents \u00b6 Visualize documents and their topics in 2D Parameters: Name Type Description Default topic_model A fitted BERTopic instance. required docs List[str] The documents you used when calling either fit or fit_transform required topics List[int] A selection of topics to visualize. Not to be confused with the topics that you get from .fit_transform . For example, if you want to visualize only topics 1 through 5: topics = [1, 2, 3, 4, 5] . None embeddings ndarray The embeddings of all documents in docs . None reduced_embeddings ndarray The 2D reduced embeddings of all documents in docs . None sample float The percentage of documents in each topic that you would like to keep. Value can be between 0 and 1. Setting this value to, for example, 0.1 (10% of documents in each topic) makes it easier to visualize millions of documents as a subset is chosen. None hide_annotations bool Hide the names of the traces on top of each cluster. False hide_document_hover bool Hide the content of the documents when hovering over specific points. Helps to speed up generation of visualization. False custom_labels bool Whether to use custom topic labels that were defined using topic_model.set_topic_labels . False title str Title of the plot. '<b>Documents and Topics</b>' width int The width of the figure. 1200 height int The height of the figure. 750 Examples: To visualize the topics simply run: topic_model . visualize_documents ( docs ) Do note that this re-calculates the embeddings and reduces them to 2D. The advised and prefered pipeline for using this function is as follows: from sklearn.datasets import fetch_20newsgroups from sentence_transformers import SentenceTransformer from bertopic import BERTopic from umap import UMAP # Prepare embeddings docs = fetch_20newsgroups ( subset = 'all' , remove = ( 'headers' , 'footers' , 'quotes' ))[ 'data' ] sentence_model = SentenceTransformer ( \"all-MiniLM-L6-v2\" ) embeddings = sentence_model . encode ( docs , show_progress_bar = False ) # Train BERTopic topic_model = BERTopic () . fit ( docs , embeddings ) # Reduce dimensionality of embeddings, this step is optional # reduced_embeddings = UMAP(n_neighbors=10, n_components=2, min_dist=0.0, metric='cosine').fit_transform(embeddings) # Run the visualization with the original embeddings topic_model . visualize_documents ( docs , embeddings = embeddings ) # Or, if you have reduced the original embeddings already: topic_model . visualize_documents ( docs , reduced_embeddings = reduced_embeddings ) Or if you want to save the resulting figure: fig = topic_model . visualize_documents ( docs , reduced_embeddings = reduced_embeddings ) fig . write_html ( \"path/to/file.html\" ) Source code in bertopic\\plotting\\_documents.py def visualize_documents ( topic_model , docs : List [ str ], topics : List [ int ] = None , embeddings : np . ndarray = None , reduced_embeddings : np . ndarray = None , sample : float = None , hide_annotations : bool = False , hide_document_hover : bool = False , custom_labels : bool = False , title : str = \"<b>Documents and Topics</b>\" , width : int = 1200 , height : int = 750 ): \"\"\" Visualize documents and their topics in 2D Arguments: topic_model: A fitted BERTopic instance. docs: The documents you used when calling either `fit` or `fit_transform` topics: A selection of topics to visualize. Not to be confused with the topics that you get from `.fit_transform`. For example, if you want to visualize only topics 1 through 5: `topics = [1, 2, 3, 4, 5]`. embeddings: The embeddings of all documents in `docs`. reduced_embeddings: The 2D reduced embeddings of all documents in `docs`. sample: The percentage of documents in each topic that you would like to keep. Value can be between 0 and 1. Setting this value to, for example, 0.1 (10% of documents in each topic) makes it easier to visualize millions of documents as a subset is chosen. hide_annotations: Hide the names of the traces on top of each cluster. hide_document_hover: Hide the content of the documents when hovering over specific points. Helps to speed up generation of visualization. custom_labels: Whether to use custom topic labels that were defined using `topic_model.set_topic_labels`. title: Title of the plot. width: The width of the figure. height: The height of the figure. Examples: To visualize the topics simply run: ```python topic_model.visualize_documents(docs) ``` Do note that this re-calculates the embeddings and reduces them to 2D. The advised and prefered pipeline for using this function is as follows: ```python from sklearn.datasets import fetch_20newsgroups from sentence_transformers import SentenceTransformer from bertopic import BERTopic from umap import UMAP # Prepare embeddings docs = fetch_20newsgroups(subset='all', remove=('headers', 'footers', 'quotes'))['data'] sentence_model = SentenceTransformer(\"all-MiniLM-L6-v2\") embeddings = sentence_model.encode(docs, show_progress_bar=False) # Train BERTopic topic_model = BERTopic().fit(docs, embeddings) # Reduce dimensionality of embeddings, this step is optional # reduced_embeddings = UMAP(n_neighbors=10, n_components=2, min_dist=0.0, metric='cosine').fit_transform(embeddings) # Run the visualization with the original embeddings topic_model.visualize_documents(docs, embeddings=embeddings) # Or, if you have reduced the original embeddings already: topic_model.visualize_documents(docs, reduced_embeddings=reduced_embeddings) ``` Or if you want to save the resulting figure: ```python fig = topic_model.visualize_documents(docs, reduced_embeddings=reduced_embeddings) fig.write_html(\"path/to/file.html\") ``` <iframe src=\"../../getting_started/visualization/documents.html\" style=\"width:1000px; height: 800px; border: 0px;\"\"></iframe> \"\"\" topic_per_doc = topic_model . topics_ # Sample the data to optimize for visualization and dimensionality reduction if sample is None or sample > 1 : sample = 1 indices = [] for topic in set ( topic_per_doc ): s = np . where ( np . array ( topic_per_doc ) == topic )[ 0 ] size = len ( s ) if len ( s ) < 100 else int ( len ( s ) * sample ) indices . extend ( np . random . choice ( s , size = size , replace = False )) indices = np . array ( indices ) df = pd . DataFrame ({ \"topic\" : np . array ( topic_per_doc )[ indices ]}) df [ \"doc\" ] = [ docs [ index ] for index in indices ] df [ \"topic\" ] = [ topic_per_doc [ index ] for index in indices ] # Extract embeddings if not already done if sample is None : if embeddings is None and reduced_embeddings is None : embeddings_to_reduce = topic_model . _extract_embeddings ( df . doc . to_list (), method = \"document\" ) else : embeddings_to_reduce = embeddings else : if embeddings is not None : embeddings_to_reduce = embeddings [ indices ] elif embeddings is None and reduced_embeddings is None : embeddings_to_reduce = topic_model . _extract_embeddings ( df . doc . to_list (), method = \"document\" ) # Reduce input embeddings if reduced_embeddings is None : umap_model = UMAP ( n_neighbors = 10 , n_components = 2 , min_dist = 0.0 , metric = 'cosine' ) . fit ( embeddings_to_reduce ) embeddings_2d = umap_model . embedding_ elif sample is not None and reduced_embeddings is not None : embeddings_2d = reduced_embeddings [ indices ] elif sample is None and reduced_embeddings is not None : embeddings_2d = reduced_embeddings unique_topics = set ( topic_per_doc ) if topics is None : topics = unique_topics # Combine data df [ \"x\" ] = embeddings_2d [:, 0 ] df [ \"y\" ] = embeddings_2d [:, 1 ] # Prepare text and names if topic_model . custom_labels_ is not None and custom_labels : names = [ topic_model . custom_labels_ [ topic + topic_model . _outliers ] for topic in unique_topics ] else : names = [ f \" { topic } _\" + \"_\" . join ([ word for word , value in topic_model . get_topic ( topic )][: 3 ]) for topic in unique_topics ] # Visualize fig = go . Figure () # Outliers and non-selected topics non_selected_topics = set ( unique_topics ) . difference ( topics ) if len ( non_selected_topics ) == 0 : non_selected_topics = [ - 1 ] selection = df . loc [ df . topic . isin ( non_selected_topics ), :] selection [ \"text\" ] = \"\" selection . loc [ len ( selection ), :] = [ None , None , selection . x . mean (), selection . y . mean (), \"Other documents\" ] fig . add_trace ( go . Scattergl ( x = selection . x , y = selection . y , hovertext = selection . doc if not hide_document_hover else None , hoverinfo = \"text\" , mode = 'markers+text' , name = \"other\" , showlegend = False , marker = dict ( color = '#CFD8DC' , size = 5 , opacity = 0.5 ) ) ) # Selected topics for name , topic in zip ( names , unique_topics ): if topic in topics and topic != - 1 : selection = df . loc [ df . topic == topic , :] selection [ \"text\" ] = \"\" if not hide_annotations : selection . loc [ len ( selection ), :] = [ None , None , selection . x . mean (), selection . y . mean (), name ] fig . add_trace ( go . Scattergl ( x = selection . x , y = selection . y , hovertext = selection . doc if not hide_document_hover else None , hoverinfo = \"text\" , text = selection . text , mode = 'markers+text' , name = name , textfont = dict ( size = 12 , ), marker = dict ( size = 5 , opacity = 0.5 ) ) ) # Add grid in a 'plus' shape x_range = ( df . x . min () - abs (( df . x . min ()) * .15 ), df . x . max () + abs (( df . x . max ()) * .15 )) y_range = ( df . y . min () - abs (( df . y . min ()) * .15 ), df . y . max () + abs (( df . y . max ()) * .15 )) fig . add_shape ( type = \"line\" , x0 = sum ( x_range ) / 2 , y0 = y_range [ 0 ], x1 = sum ( x_range ) / 2 , y1 = y_range [ 1 ], line = dict ( color = \"#CFD8DC\" , width = 2 )) fig . add_shape ( type = \"line\" , x0 = x_range [ 0 ], y0 = sum ( y_range ) / 2 , x1 = x_range [ 1 ], y1 = sum ( y_range ) / 2 , line = dict ( color = \"#9E9E9E\" , width = 2 )) fig . add_annotation ( x = x_range [ 0 ], y = sum ( y_range ) / 2 , text = \"D1\" , showarrow = False , yshift = 10 ) fig . add_annotation ( y = y_range [ 1 ], x = sum ( x_range ) / 2 , text = \"D2\" , showarrow = False , xshift = 10 ) # Stylize layout fig . update_layout ( template = \"simple_white\" , title = { 'text' : f \" { title } \" , 'x' : 0.5 , 'xanchor' : 'center' , 'yanchor' : 'top' , 'font' : dict ( size = 22 , color = \"Black\" ) }, width = width , height = height ) fig . update_xaxes ( visible = False ) fig . update_yaxes ( visible = False ) return fig","title":"Documents"},{"location":"api/plotting/documents.html#documents","text":"Visualize documents and their topics in 2D Parameters: Name Type Description Default topic_model A fitted BERTopic instance. required docs List[str] The documents you used when calling either fit or fit_transform required topics List[int] A selection of topics to visualize. Not to be confused with the topics that you get from .fit_transform . For example, if you want to visualize only topics 1 through 5: topics = [1, 2, 3, 4, 5] . None embeddings ndarray The embeddings of all documents in docs . None reduced_embeddings ndarray The 2D reduced embeddings of all documents in docs . None sample float The percentage of documents in each topic that you would like to keep. Value can be between 0 and 1. Setting this value to, for example, 0.1 (10% of documents in each topic) makes it easier to visualize millions of documents as a subset is chosen. None hide_annotations bool Hide the names of the traces on top of each cluster. False hide_document_hover bool Hide the content of the documents when hovering over specific points. Helps to speed up generation of visualization. False custom_labels bool Whether to use custom topic labels that were defined using topic_model.set_topic_labels . False title str Title of the plot. '<b>Documents and Topics</b>' width int The width of the figure. 1200 height int The height of the figure. 750 Examples: To visualize the topics simply run: topic_model . visualize_documents ( docs ) Do note that this re-calculates the embeddings and reduces them to 2D. The advised and prefered pipeline for using this function is as follows: from sklearn.datasets import fetch_20newsgroups from sentence_transformers import SentenceTransformer from bertopic import BERTopic from umap import UMAP # Prepare embeddings docs = fetch_20newsgroups ( subset = 'all' , remove = ( 'headers' , 'footers' , 'quotes' ))[ 'data' ] sentence_model = SentenceTransformer ( \"all-MiniLM-L6-v2\" ) embeddings = sentence_model . encode ( docs , show_progress_bar = False ) # Train BERTopic topic_model = BERTopic () . fit ( docs , embeddings ) # Reduce dimensionality of embeddings, this step is optional # reduced_embeddings = UMAP(n_neighbors=10, n_components=2, min_dist=0.0, metric='cosine').fit_transform(embeddings) # Run the visualization with the original embeddings topic_model . visualize_documents ( docs , embeddings = embeddings ) # Or, if you have reduced the original embeddings already: topic_model . visualize_documents ( docs , reduced_embeddings = reduced_embeddings ) Or if you want to save the resulting figure: fig = topic_model . visualize_documents ( docs , reduced_embeddings = reduced_embeddings ) fig . write_html ( \"path/to/file.html\" ) Source code in bertopic\\plotting\\_documents.py def visualize_documents ( topic_model , docs : List [ str ], topics : List [ int ] = None , embeddings : np . ndarray = None , reduced_embeddings : np . ndarray = None , sample : float = None , hide_annotations : bool = False , hide_document_hover : bool = False , custom_labels : bool = False , title : str = \"<b>Documents and Topics</b>\" , width : int = 1200 , height : int = 750 ): \"\"\" Visualize documents and their topics in 2D Arguments: topic_model: A fitted BERTopic instance. docs: The documents you used when calling either `fit` or `fit_transform` topics: A selection of topics to visualize. Not to be confused with the topics that you get from `.fit_transform`. For example, if you want to visualize only topics 1 through 5: `topics = [1, 2, 3, 4, 5]`. embeddings: The embeddings of all documents in `docs`. reduced_embeddings: The 2D reduced embeddings of all documents in `docs`. sample: The percentage of documents in each topic that you would like to keep. Value can be between 0 and 1. Setting this value to, for example, 0.1 (10% of documents in each topic) makes it easier to visualize millions of documents as a subset is chosen. hide_annotations: Hide the names of the traces on top of each cluster. hide_document_hover: Hide the content of the documents when hovering over specific points. Helps to speed up generation of visualization. custom_labels: Whether to use custom topic labels that were defined using `topic_model.set_topic_labels`. title: Title of the plot. width: The width of the figure. height: The height of the figure. Examples: To visualize the topics simply run: ```python topic_model.visualize_documents(docs) ``` Do note that this re-calculates the embeddings and reduces them to 2D. The advised and prefered pipeline for using this function is as follows: ```python from sklearn.datasets import fetch_20newsgroups from sentence_transformers import SentenceTransformer from bertopic import BERTopic from umap import UMAP # Prepare embeddings docs = fetch_20newsgroups(subset='all', remove=('headers', 'footers', 'quotes'))['data'] sentence_model = SentenceTransformer(\"all-MiniLM-L6-v2\") embeddings = sentence_model.encode(docs, show_progress_bar=False) # Train BERTopic topic_model = BERTopic().fit(docs, embeddings) # Reduce dimensionality of embeddings, this step is optional # reduced_embeddings = UMAP(n_neighbors=10, n_components=2, min_dist=0.0, metric='cosine').fit_transform(embeddings) # Run the visualization with the original embeddings topic_model.visualize_documents(docs, embeddings=embeddings) # Or, if you have reduced the original embeddings already: topic_model.visualize_documents(docs, reduced_embeddings=reduced_embeddings) ``` Or if you want to save the resulting figure: ```python fig = topic_model.visualize_documents(docs, reduced_embeddings=reduced_embeddings) fig.write_html(\"path/to/file.html\") ``` <iframe src=\"../../getting_started/visualization/documents.html\" style=\"width:1000px; height: 800px; border: 0px;\"\"></iframe> \"\"\" topic_per_doc = topic_model . topics_ # Sample the data to optimize for visualization and dimensionality reduction if sample is None or sample > 1 : sample = 1 indices = [] for topic in set ( topic_per_doc ): s = np . where ( np . array ( topic_per_doc ) == topic )[ 0 ] size = len ( s ) if len ( s ) < 100 else int ( len ( s ) * sample ) indices . extend ( np . random . choice ( s , size = size , replace = False )) indices = np . array ( indices ) df = pd . DataFrame ({ \"topic\" : np . array ( topic_per_doc )[ indices ]}) df [ \"doc\" ] = [ docs [ index ] for index in indices ] df [ \"topic\" ] = [ topic_per_doc [ index ] for index in indices ] # Extract embeddings if not already done if sample is None : if embeddings is None and reduced_embeddings is None : embeddings_to_reduce = topic_model . _extract_embeddings ( df . doc . to_list (), method = \"document\" ) else : embeddings_to_reduce = embeddings else : if embeddings is not None : embeddings_to_reduce = embeddings [ indices ] elif embeddings is None and reduced_embeddings is None : embeddings_to_reduce = topic_model . _extract_embeddings ( df . doc . to_list (), method = \"document\" ) # Reduce input embeddings if reduced_embeddings is None : umap_model = UMAP ( n_neighbors = 10 , n_components = 2 , min_dist = 0.0 , metric = 'cosine' ) . fit ( embeddings_to_reduce ) embeddings_2d = umap_model . embedding_ elif sample is not None and reduced_embeddings is not None : embeddings_2d = reduced_embeddings [ indices ] elif sample is None and reduced_embeddings is not None : embeddings_2d = reduced_embeddings unique_topics = set ( topic_per_doc ) if topics is None : topics = unique_topics # Combine data df [ \"x\" ] = embeddings_2d [:, 0 ] df [ \"y\" ] = embeddings_2d [:, 1 ] # Prepare text and names if topic_model . custom_labels_ is not None and custom_labels : names = [ topic_model . custom_labels_ [ topic + topic_model . _outliers ] for topic in unique_topics ] else : names = [ f \" { topic } _\" + \"_\" . join ([ word for word , value in topic_model . get_topic ( topic )][: 3 ]) for topic in unique_topics ] # Visualize fig = go . Figure () # Outliers and non-selected topics non_selected_topics = set ( unique_topics ) . difference ( topics ) if len ( non_selected_topics ) == 0 : non_selected_topics = [ - 1 ] selection = df . loc [ df . topic . isin ( non_selected_topics ), :] selection [ \"text\" ] = \"\" selection . loc [ len ( selection ), :] = [ None , None , selection . x . mean (), selection . y . mean (), \"Other documents\" ] fig . add_trace ( go . Scattergl ( x = selection . x , y = selection . y , hovertext = selection . doc if not hide_document_hover else None , hoverinfo = \"text\" , mode = 'markers+text' , name = \"other\" , showlegend = False , marker = dict ( color = '#CFD8DC' , size = 5 , opacity = 0.5 ) ) ) # Selected topics for name , topic in zip ( names , unique_topics ): if topic in topics and topic != - 1 : selection = df . loc [ df . topic == topic , :] selection [ \"text\" ] = \"\" if not hide_annotations : selection . loc [ len ( selection ), :] = [ None , None , selection . x . mean (), selection . y . mean (), name ] fig . add_trace ( go . Scattergl ( x = selection . x , y = selection . y , hovertext = selection . doc if not hide_document_hover else None , hoverinfo = \"text\" , text = selection . text , mode = 'markers+text' , name = name , textfont = dict ( size = 12 , ), marker = dict ( size = 5 , opacity = 0.5 ) ) ) # Add grid in a 'plus' shape x_range = ( df . x . min () - abs (( df . x . min ()) * .15 ), df . x . max () + abs (( df . x . max ()) * .15 )) y_range = ( df . y . min () - abs (( df . y . min ()) * .15 ), df . y . max () + abs (( df . y . max ()) * .15 )) fig . add_shape ( type = \"line\" , x0 = sum ( x_range ) / 2 , y0 = y_range [ 0 ], x1 = sum ( x_range ) / 2 , y1 = y_range [ 1 ], line = dict ( color = \"#CFD8DC\" , width = 2 )) fig . add_shape ( type = \"line\" , x0 = x_range [ 0 ], y0 = sum ( y_range ) / 2 , x1 = x_range [ 1 ], y1 = sum ( y_range ) / 2 , line = dict ( color = \"#9E9E9E\" , width = 2 )) fig . add_annotation ( x = x_range [ 0 ], y = sum ( y_range ) / 2 , text = \"D1\" , showarrow = False , yshift = 10 ) fig . add_annotation ( y = y_range [ 1 ], x = sum ( x_range ) / 2 , text = \"D2\" , showarrow = False , xshift = 10 ) # Stylize layout fig . update_layout ( template = \"simple_white\" , title = { 'text' : f \" { title } \" , 'x' : 0.5 , 'xanchor' : 'center' , 'yanchor' : 'top' , 'font' : dict ( size = 22 , color = \"Black\" ) }, width = width , height = height ) fig . update_xaxes ( visible = False ) fig . update_yaxes ( visible = False ) return fig","title":"Documents"},{"location":"api/plotting/dtm.html","text":"DTM \u00b6 Visualize topics over time Parameters: Name Type Description Default topic_model A fitted BERTopic instance. required topics_over_time DataFrame The topics you would like to be visualized with the corresponding topic representation required top_n_topics int To visualize the most frequent topics instead of all None topics List[int] Select which topics you would like to be visualized None normalize_frequency bool Whether to normalize each topic's frequency individually False custom_labels bool Whether to use custom topic labels that were defined using topic_model.set_topic_labels . False title str Title of the plot. '<b>Topics over Time</b>' width int The width of the figure. 1250 height int The height of the figure. 450 Returns: Type Description Figure A plotly.graph_objects.Figure including all traces Examples: To visualize the topics over time, simply run: topics_over_time = topic_model . topics_over_time ( docs , timestamps ) topic_model . visualize_topics_over_time ( topics_over_time ) Or if you want to save the resulting figure: fig = topic_model . visualize_topics_over_time ( topics_over_time ) fig . write_html ( \"path/to/file.html\" ) Source code in bertopic\\plotting\\_topics_over_time.py def visualize_topics_over_time ( topic_model , topics_over_time : pd . DataFrame , top_n_topics : int = None , topics : List [ int ] = None , normalize_frequency : bool = False , custom_labels : bool = False , title : str = \"<b>Topics over Time</b>\" , width : int = 1250 , height : int = 450 ) -> go . Figure : \"\"\" Visualize topics over time Arguments: topic_model: A fitted BERTopic instance. topics_over_time: The topics you would like to be visualized with the corresponding topic representation top_n_topics: To visualize the most frequent topics instead of all topics: Select which topics you would like to be visualized normalize_frequency: Whether to normalize each topic's frequency individually custom_labels: Whether to use custom topic labels that were defined using `topic_model.set_topic_labels`. title: Title of the plot. width: The width of the figure. height: The height of the figure. Returns: A plotly.graph_objects.Figure including all traces Examples: To visualize the topics over time, simply run: ```python topics_over_time = topic_model.topics_over_time(docs, timestamps) topic_model.visualize_topics_over_time(topics_over_time) ``` Or if you want to save the resulting figure: ```python fig = topic_model.visualize_topics_over_time(topics_over_time) fig.write_html(\"path/to/file.html\") ``` <iframe src=\"../../getting_started/visualization/trump.html\" style=\"width:1000px; height: 680px; border: 0px;\"\"></iframe> \"\"\" colors = [ \"#E69F00\" , \"#56B4E9\" , \"#009E73\" , \"#F0E442\" , \"#D55E00\" , \"#0072B2\" , \"#CC79A7\" ] # Select topics based on top_n and topics args freq_df = topic_model . get_topic_freq () freq_df = freq_df . loc [ freq_df . Topic != - 1 , :] if topics is not None : selected_topics = list ( topics ) elif top_n_topics is not None : selected_topics = sorted ( freq_df . Topic . to_list ()[: top_n_topics ]) else : selected_topics = sorted ( freq_df . Topic . to_list ()) # Prepare data if topic_model . custom_labels_ is not None and custom_labels : topic_names = { key : topic_model . custom_labels_ [ key + topic_model . _outliers ] for key , _ in topic_model . topic_labels_ . items ()} else : topic_names = { key : value [: 40 ] + \"...\" if len ( value ) > 40 else value for key , value in topic_model . topic_labels_ . items ()} topics_over_time [ \"Name\" ] = topics_over_time . Topic . map ( topic_names ) data = topics_over_time . loc [ topics_over_time . Topic . isin ( selected_topics ), :] . sort_values ([ \"Topic\" , \"Timestamp\" ]) # Add traces fig = go . Figure () for index , topic in enumerate ( data . Topic . unique ()): trace_data = data . loc [ data . Topic == topic , :] topic_name = trace_data . Name . values [ 0 ] words = trace_data . Words . values if normalize_frequency : y = normalize ( trace_data . Frequency . values . reshape ( 1 , - 1 ))[ 0 ] else : y = trace_data . Frequency fig . add_trace ( go . Scatter ( x = trace_data . Timestamp , y = y , mode = 'lines' , marker_color = colors [ index % 7 ], hoverinfo = \"text\" , name = topic_name , hovertext = [ f '<b>Topic { topic } </b><br>Words: { word } ' for word in words ])) # Styling of the visualization fig . update_xaxes ( showgrid = True ) fig . update_yaxes ( showgrid = True ) fig . update_layout ( yaxis_title = \"Normalized Frequency\" if normalize_frequency else \"Frequency\" , title = { 'text' : f \" { title } \" , 'y' : .95 , 'x' : 0.40 , 'xanchor' : 'center' , 'yanchor' : 'top' , 'font' : dict ( size = 22 , color = \"Black\" ) }, template = \"simple_white\" , width = width , height = height , hoverlabel = dict ( bgcolor = \"white\" , font_size = 16 , font_family = \"Rockwell\" ), legend = dict ( title = \"<b>Global Topic Representation\" , ) ) return fig","title":"DTM"},{"location":"api/plotting/dtm.html#dtm","text":"Visualize topics over time Parameters: Name Type Description Default topic_model A fitted BERTopic instance. required topics_over_time DataFrame The topics you would like to be visualized with the corresponding topic representation required top_n_topics int To visualize the most frequent topics instead of all None topics List[int] Select which topics you would like to be visualized None normalize_frequency bool Whether to normalize each topic's frequency individually False custom_labels bool Whether to use custom topic labels that were defined using topic_model.set_topic_labels . False title str Title of the plot. '<b>Topics over Time</b>' width int The width of the figure. 1250 height int The height of the figure. 450 Returns: Type Description Figure A plotly.graph_objects.Figure including all traces Examples: To visualize the topics over time, simply run: topics_over_time = topic_model . topics_over_time ( docs , timestamps ) topic_model . visualize_topics_over_time ( topics_over_time ) Or if you want to save the resulting figure: fig = topic_model . visualize_topics_over_time ( topics_over_time ) fig . write_html ( \"path/to/file.html\" ) Source code in bertopic\\plotting\\_topics_over_time.py def visualize_topics_over_time ( topic_model , topics_over_time : pd . DataFrame , top_n_topics : int = None , topics : List [ int ] = None , normalize_frequency : bool = False , custom_labels : bool = False , title : str = \"<b>Topics over Time</b>\" , width : int = 1250 , height : int = 450 ) -> go . Figure : \"\"\" Visualize topics over time Arguments: topic_model: A fitted BERTopic instance. topics_over_time: The topics you would like to be visualized with the corresponding topic representation top_n_topics: To visualize the most frequent topics instead of all topics: Select which topics you would like to be visualized normalize_frequency: Whether to normalize each topic's frequency individually custom_labels: Whether to use custom topic labels that were defined using `topic_model.set_topic_labels`. title: Title of the plot. width: The width of the figure. height: The height of the figure. Returns: A plotly.graph_objects.Figure including all traces Examples: To visualize the topics over time, simply run: ```python topics_over_time = topic_model.topics_over_time(docs, timestamps) topic_model.visualize_topics_over_time(topics_over_time) ``` Or if you want to save the resulting figure: ```python fig = topic_model.visualize_topics_over_time(topics_over_time) fig.write_html(\"path/to/file.html\") ``` <iframe src=\"../../getting_started/visualization/trump.html\" style=\"width:1000px; height: 680px; border: 0px;\"\"></iframe> \"\"\" colors = [ \"#E69F00\" , \"#56B4E9\" , \"#009E73\" , \"#F0E442\" , \"#D55E00\" , \"#0072B2\" , \"#CC79A7\" ] # Select topics based on top_n and topics args freq_df = topic_model . get_topic_freq () freq_df = freq_df . loc [ freq_df . Topic != - 1 , :] if topics is not None : selected_topics = list ( topics ) elif top_n_topics is not None : selected_topics = sorted ( freq_df . Topic . to_list ()[: top_n_topics ]) else : selected_topics = sorted ( freq_df . Topic . to_list ()) # Prepare data if topic_model . custom_labels_ is not None and custom_labels : topic_names = { key : topic_model . custom_labels_ [ key + topic_model . _outliers ] for key , _ in topic_model . topic_labels_ . items ()} else : topic_names = { key : value [: 40 ] + \"...\" if len ( value ) > 40 else value for key , value in topic_model . topic_labels_ . items ()} topics_over_time [ \"Name\" ] = topics_over_time . Topic . map ( topic_names ) data = topics_over_time . loc [ topics_over_time . Topic . isin ( selected_topics ), :] . sort_values ([ \"Topic\" , \"Timestamp\" ]) # Add traces fig = go . Figure () for index , topic in enumerate ( data . Topic . unique ()): trace_data = data . loc [ data . Topic == topic , :] topic_name = trace_data . Name . values [ 0 ] words = trace_data . Words . values if normalize_frequency : y = normalize ( trace_data . Frequency . values . reshape ( 1 , - 1 ))[ 0 ] else : y = trace_data . Frequency fig . add_trace ( go . Scatter ( x = trace_data . Timestamp , y = y , mode = 'lines' , marker_color = colors [ index % 7 ], hoverinfo = \"text\" , name = topic_name , hovertext = [ f '<b>Topic { topic } </b><br>Words: { word } ' for word in words ])) # Styling of the visualization fig . update_xaxes ( showgrid = True ) fig . update_yaxes ( showgrid = True ) fig . update_layout ( yaxis_title = \"Normalized Frequency\" if normalize_frequency else \"Frequency\" , title = { 'text' : f \" { title } \" , 'y' : .95 , 'x' : 0.40 , 'xanchor' : 'center' , 'yanchor' : 'top' , 'font' : dict ( size = 22 , color = \"Black\" ) }, template = \"simple_white\" , width = width , height = height , hoverlabel = dict ( bgcolor = \"white\" , font_size = 16 , font_family = \"Rockwell\" ), legend = dict ( title = \"<b>Global Topic Representation\" , ) ) return fig","title":"DTM"},{"location":"api/plotting/heatmap.html","text":"Heatmap \u00b6 Visualize a heatmap of the topic's similarity matrix Based on the cosine similarity matrix between topic embeddings, a heatmap is created showing the similarity between topics. Parameters: Name Type Description Default topic_model A fitted BERTopic instance. required topics List[int] A selection of topics to visualize. None top_n_topics int Only select the top n most frequent topics. None n_clusters int Create n clusters and order the similarity matrix by those clusters. None custom_labels bool Whether to use custom topic labels that were defined using topic_model.set_topic_labels . False title str Title of the plot. '<b>Similarity Matrix</b>' width int The width of the figure. 800 height int The height of the figure. 800 Returns: Type Description fig A plotly figure Examples: To visualize the similarity matrix of topics simply run: topic_model . visualize_heatmap () Or if you want to save the resulting figure: fig = topic_model . visualize_heatmap () fig . write_html ( \"path/to/file.html\" ) Source code in bertopic\\plotting\\_heatmap.py def visualize_heatmap ( topic_model , topics : List [ int ] = None , top_n_topics : int = None , n_clusters : int = None , custom_labels : bool = False , title : str = \"<b>Similarity Matrix</b>\" , width : int = 800 , height : int = 800 ) -> go . Figure : \"\"\" Visualize a heatmap of the topic's similarity matrix Based on the cosine similarity matrix between topic embeddings, a heatmap is created showing the similarity between topics. Arguments: topic_model: A fitted BERTopic instance. topics: A selection of topics to visualize. top_n_topics: Only select the top n most frequent topics. n_clusters: Create n clusters and order the similarity matrix by those clusters. custom_labels: Whether to use custom topic labels that were defined using `topic_model.set_topic_labels`. title: Title of the plot. width: The width of the figure. height: The height of the figure. Returns: fig: A plotly figure Examples: To visualize the similarity matrix of topics simply run: ```python topic_model.visualize_heatmap() ``` Or if you want to save the resulting figure: ```python fig = topic_model.visualize_heatmap() fig.write_html(\"path/to/file.html\") ``` <iframe src=\"../../getting_started/visualization/heatmap.html\" style=\"width:1000px; height: 720px; border: 0px;\"\"></iframe> \"\"\" # Select topic embeddings if topic_model . topic_embeddings_ is not None : embeddings = np . array ( topic_model . topic_embeddings_ )[ topic_model . _outliers :] else : embeddings = topic_model . c_tf_idf_ [ topic_model . _outliers :] # Select topics based on top_n and topics args freq_df = topic_model . get_topic_freq () freq_df = freq_df . loc [ freq_df . Topic != - 1 , :] if topics is not None : topics = list ( topics ) elif top_n_topics is not None : topics = sorted ( freq_df . Topic . to_list ()[: top_n_topics ]) else : topics = sorted ( freq_df . Topic . to_list ()) # Order heatmap by similar clusters of topics sorted_topics = topics if n_clusters : if n_clusters >= len ( set ( topics )): raise ValueError ( \"Make sure to set `n_clusters` lower than \" \"the total number of unique topics.\" ) distance_matrix = cosine_similarity ( embeddings [ topics ]) Z = linkage ( distance_matrix , 'ward' ) clusters = fcluster ( Z , t = n_clusters , criterion = 'maxclust' ) # Extract new order of topics mapping = { cluster : [] for cluster in clusters } for topic , cluster in zip ( topics , clusters ): mapping [ cluster ] . append ( topic ) mapping = [ cluster for cluster in mapping . values ()] sorted_topics = [ topic for cluster in mapping for topic in cluster ] # Select embeddings indices = np . array ([ topics . index ( topic ) for topic in sorted_topics ]) embeddings = embeddings [ indices ] distance_matrix = cosine_similarity ( embeddings ) # Create labels if topic_model . custom_labels_ is not None and custom_labels : new_labels = [ topic_model . custom_labels_ [ topic + topic_model . _outliers ] for topic in sorted_topics ] else : new_labels = [[[ str ( topic ), None ]] + topic_model . get_topic ( topic ) for topic in sorted_topics ] new_labels = [ \"_\" . join ([ label [ 0 ] for label in labels [: 4 ]]) for labels in new_labels ] new_labels = [ label if len ( label ) < 30 else label [: 27 ] + \"...\" for label in new_labels ] fig = px . imshow ( distance_matrix , labels = dict ( color = \"Similarity Score\" ), x = new_labels , y = new_labels , color_continuous_scale = 'GnBu' ) fig . update_layout ( title = { 'text' : f \" { title } \" , 'y' : .95 , 'x' : 0.55 , 'xanchor' : 'center' , 'yanchor' : 'top' , 'font' : dict ( size = 22 , color = \"Black\" ) }, width = width , height = height , hoverlabel = dict ( bgcolor = \"white\" , font_size = 16 , font_family = \"Rockwell\" ), ) fig . update_layout ( showlegend = True ) fig . update_layout ( legend_title_text = 'Trend' ) return fig","title":"Heatmap"},{"location":"api/plotting/heatmap.html#heatmap","text":"Visualize a heatmap of the topic's similarity matrix Based on the cosine similarity matrix between topic embeddings, a heatmap is created showing the similarity between topics. Parameters: Name Type Description Default topic_model A fitted BERTopic instance. required topics List[int] A selection of topics to visualize. None top_n_topics int Only select the top n most frequent topics. None n_clusters int Create n clusters and order the similarity matrix by those clusters. None custom_labels bool Whether to use custom topic labels that were defined using topic_model.set_topic_labels . False title str Title of the plot. '<b>Similarity Matrix</b>' width int The width of the figure. 800 height int The height of the figure. 800 Returns: Type Description fig A plotly figure Examples: To visualize the similarity matrix of topics simply run: topic_model . visualize_heatmap () Or if you want to save the resulting figure: fig = topic_model . visualize_heatmap () fig . write_html ( \"path/to/file.html\" ) Source code in bertopic\\plotting\\_heatmap.py def visualize_heatmap ( topic_model , topics : List [ int ] = None , top_n_topics : int = None , n_clusters : int = None , custom_labels : bool = False , title : str = \"<b>Similarity Matrix</b>\" , width : int = 800 , height : int = 800 ) -> go . Figure : \"\"\" Visualize a heatmap of the topic's similarity matrix Based on the cosine similarity matrix between topic embeddings, a heatmap is created showing the similarity between topics. Arguments: topic_model: A fitted BERTopic instance. topics: A selection of topics to visualize. top_n_topics: Only select the top n most frequent topics. n_clusters: Create n clusters and order the similarity matrix by those clusters. custom_labels: Whether to use custom topic labels that were defined using `topic_model.set_topic_labels`. title: Title of the plot. width: The width of the figure. height: The height of the figure. Returns: fig: A plotly figure Examples: To visualize the similarity matrix of topics simply run: ```python topic_model.visualize_heatmap() ``` Or if you want to save the resulting figure: ```python fig = topic_model.visualize_heatmap() fig.write_html(\"path/to/file.html\") ``` <iframe src=\"../../getting_started/visualization/heatmap.html\" style=\"width:1000px; height: 720px; border: 0px;\"\"></iframe> \"\"\" # Select topic embeddings if topic_model . topic_embeddings_ is not None : embeddings = np . array ( topic_model . topic_embeddings_ )[ topic_model . _outliers :] else : embeddings = topic_model . c_tf_idf_ [ topic_model . _outliers :] # Select topics based on top_n and topics args freq_df = topic_model . get_topic_freq () freq_df = freq_df . loc [ freq_df . Topic != - 1 , :] if topics is not None : topics = list ( topics ) elif top_n_topics is not None : topics = sorted ( freq_df . Topic . to_list ()[: top_n_topics ]) else : topics = sorted ( freq_df . Topic . to_list ()) # Order heatmap by similar clusters of topics sorted_topics = topics if n_clusters : if n_clusters >= len ( set ( topics )): raise ValueError ( \"Make sure to set `n_clusters` lower than \" \"the total number of unique topics.\" ) distance_matrix = cosine_similarity ( embeddings [ topics ]) Z = linkage ( distance_matrix , 'ward' ) clusters = fcluster ( Z , t = n_clusters , criterion = 'maxclust' ) # Extract new order of topics mapping = { cluster : [] for cluster in clusters } for topic , cluster in zip ( topics , clusters ): mapping [ cluster ] . append ( topic ) mapping = [ cluster for cluster in mapping . values ()] sorted_topics = [ topic for cluster in mapping for topic in cluster ] # Select embeddings indices = np . array ([ topics . index ( topic ) for topic in sorted_topics ]) embeddings = embeddings [ indices ] distance_matrix = cosine_similarity ( embeddings ) # Create labels if topic_model . custom_labels_ is not None and custom_labels : new_labels = [ topic_model . custom_labels_ [ topic + topic_model . _outliers ] for topic in sorted_topics ] else : new_labels = [[[ str ( topic ), None ]] + topic_model . get_topic ( topic ) for topic in sorted_topics ] new_labels = [ \"_\" . join ([ label [ 0 ] for label in labels [: 4 ]]) for labels in new_labels ] new_labels = [ label if len ( label ) < 30 else label [: 27 ] + \"...\" for label in new_labels ] fig = px . imshow ( distance_matrix , labels = dict ( color = \"Similarity Score\" ), x = new_labels , y = new_labels , color_continuous_scale = 'GnBu' ) fig . update_layout ( title = { 'text' : f \" { title } \" , 'y' : .95 , 'x' : 0.55 , 'xanchor' : 'center' , 'yanchor' : 'top' , 'font' : dict ( size = 22 , color = \"Black\" ) }, width = width , height = height , hoverlabel = dict ( bgcolor = \"white\" , font_size = 16 , font_family = \"Rockwell\" ), ) fig . update_layout ( showlegend = True ) fig . update_layout ( legend_title_text = 'Trend' ) return fig","title":"Heatmap"},{"location":"api/plotting/hierarchical_documents.html","text":"Hierarchical Documents \u00b6 Visualize documents and their topics in 2D at different levels of hierarchy Parameters: Name Type Description Default docs List[str] The documents you used when calling either fit or fit_transform required hierarchical_topics DataFrame A dataframe that contains a hierarchy of topics represented by their parents and their children required topics List[int] A selection of topics to visualize. Not to be confused with the topics that you get from .fit_transform . For example, if you want to visualize only topics 1 through 5: topics = [1, 2, 3, 4, 5] . None embeddings ndarray The embeddings of all documents in docs . None reduced_embeddings ndarray The 2D reduced embeddings of all documents in docs . None sample Union[float, int] The percentage of documents in each topic that you would like to keep. Value can be between 0 and 1. Setting this value to, for example, 0.1 (10% of documents in each topic) makes it easier to visualize millions of documents as a subset is chosen. None hide_annotations bool Hide the names of the traces on top of each cluster. False hide_document_hover bool Hide the content of the documents when hovering over specific points. Helps to speed up generation of visualizations. True nr_levels int The number of levels to be visualized in the hierarchy. First, the distances in hierarchical_topics.Distance are split in nr_levels lists of distances with equal length. Then, for each list of distances, the merged topics are selected that have a distance less or equal to the maximum distance of the selected list of distances. NOTE: To get all possible merged steps, make sure that nr_levels is equal to the length of hierarchical_topics . 10 custom_labels bool Whether to use custom topic labels that were defined using topic_model.set_topic_labels . NOTE: Custom labels are only generated for the original un-merged topics. False title str Title of the plot. '<b>Hierarchical Documents and Topics</b>' width int The width of the figure. 1200 height int The height of the figure. 750 Examples: To visualize the topics simply run: topic_model . visualize_hierarchical_documents ( docs , hierarchical_topics ) Do note that this re-calculates the embeddings and reduces them to 2D. The advised and prefered pipeline for using this function is as follows: from sklearn.datasets import fetch_20newsgroups from sentence_transformers import SentenceTransformer from bertopic import BERTopic from umap import UMAP # Prepare embeddings docs = fetch_20newsgroups ( subset = 'all' , remove = ( 'headers' , 'footers' , 'quotes' ))[ 'data' ] sentence_model = SentenceTransformer ( \"all-MiniLM-L6-v2\" ) embeddings = sentence_model . encode ( docs , show_progress_bar = False ) # Train BERTopic and extract hierarchical topics topic_model = BERTopic () . fit ( docs , embeddings ) hierarchical_topics = topic_model . hierarchical_topics ( docs ) # Reduce dimensionality of embeddings, this step is optional # reduced_embeddings = UMAP(n_neighbors=10, n_components=2, min_dist=0.0, metric='cosine').fit_transform(embeddings) # Run the visualization with the original embeddings topic_model . visualize_hierarchical_documents ( docs , hierarchical_topics , embeddings = embeddings ) # Or, if you have reduced the original embeddings already: topic_model . visualize_hierarchical_documents ( docs , hierarchical_topics , reduced_embeddings = reduced_embeddings ) Or if you want to save the resulting figure: fig = topic_model . visualize_hierarchical_documents ( docs , hierarchical_topics , reduced_embeddings = reduced_embeddings ) fig . write_html ( \"path/to/file.html\" ) Note This visualization was inspired by the scatter plot representation of Doc2Map: https://github.com/louisgeisler/Doc2Map Source code in bertopic\\plotting\\_hierarchical_documents.py def visualize_hierarchical_documents ( topic_model , docs : List [ str ], hierarchical_topics : pd . DataFrame , topics : List [ int ] = None , embeddings : np . ndarray = None , reduced_embeddings : np . ndarray = None , sample : Union [ float , int ] = None , hide_annotations : bool = False , hide_document_hover : bool = True , nr_levels : int = 10 , custom_labels : bool = False , title : str = \"<b>Hierarchical Documents and Topics</b>\" , width : int = 1200 , height : int = 750 ) -> go . Figure : \"\"\" Visualize documents and their topics in 2D at different levels of hierarchy Arguments: docs: The documents you used when calling either `fit` or `fit_transform` hierarchical_topics: A dataframe that contains a hierarchy of topics represented by their parents and their children topics: A selection of topics to visualize. Not to be confused with the topics that you get from `.fit_transform`. For example, if you want to visualize only topics 1 through 5: `topics = [1, 2, 3, 4, 5]`. embeddings: The embeddings of all documents in `docs`. reduced_embeddings: The 2D reduced embeddings of all documents in `docs`. sample: The percentage of documents in each topic that you would like to keep. Value can be between 0 and 1. Setting this value to, for example, 0.1 (10% of documents in each topic) makes it easier to visualize millions of documents as a subset is chosen. hide_annotations: Hide the names of the traces on top of each cluster. hide_document_hover: Hide the content of the documents when hovering over specific points. Helps to speed up generation of visualizations. nr_levels: The number of levels to be visualized in the hierarchy. First, the distances in `hierarchical_topics.Distance` are split in `nr_levels` lists of distances with equal length. Then, for each list of distances, the merged topics are selected that have a distance less or equal to the maximum distance of the selected list of distances. NOTE: To get all possible merged steps, make sure that `nr_levels` is equal to the length of `hierarchical_topics`. custom_labels: Whether to use custom topic labels that were defined using `topic_model.set_topic_labels`. NOTE: Custom labels are only generated for the original un-merged topics. title: Title of the plot. width: The width of the figure. height: The height of the figure. Examples: To visualize the topics simply run: ```python topic_model.visualize_hierarchical_documents(docs, hierarchical_topics) ``` Do note that this re-calculates the embeddings and reduces them to 2D. The advised and prefered pipeline for using this function is as follows: ```python from sklearn.datasets import fetch_20newsgroups from sentence_transformers import SentenceTransformer from bertopic import BERTopic from umap import UMAP # Prepare embeddings docs = fetch_20newsgroups(subset='all', remove=('headers', 'footers', 'quotes'))['data'] sentence_model = SentenceTransformer(\"all-MiniLM-L6-v2\") embeddings = sentence_model.encode(docs, show_progress_bar=False) # Train BERTopic and extract hierarchical topics topic_model = BERTopic().fit(docs, embeddings) hierarchical_topics = topic_model.hierarchical_topics(docs) # Reduce dimensionality of embeddings, this step is optional # reduced_embeddings = UMAP(n_neighbors=10, n_components=2, min_dist=0.0, metric='cosine').fit_transform(embeddings) # Run the visualization with the original embeddings topic_model.visualize_hierarchical_documents(docs, hierarchical_topics, embeddings=embeddings) # Or, if you have reduced the original embeddings already: topic_model.visualize_hierarchical_documents(docs, hierarchical_topics, reduced_embeddings=reduced_embeddings) ``` Or if you want to save the resulting figure: ```python fig = topic_model.visualize_hierarchical_documents(docs, hierarchical_topics, reduced_embeddings=reduced_embeddings) fig.write_html(\"path/to/file.html\") ``` NOTE: This visualization was inspired by the scatter plot representation of Doc2Map: https://github.com/louisgeisler/Doc2Map <iframe src=\"../../getting_started/visualization/hierarchical_documents.html\" style=\"width:1000px; height: 770px; border: 0px;\"\"></iframe> \"\"\" topic_per_doc = topic_model . topics_ # Sample the data to optimize for visualization and dimensionality reduction if sample is None or sample > 1 : sample = 1 indices = [] for topic in set ( topic_per_doc ): s = np . where ( np . array ( topic_per_doc ) == topic )[ 0 ] size = len ( s ) if len ( s ) < 100 else int ( len ( s ) * sample ) indices . extend ( np . random . choice ( s , size = size , replace = False )) indices = np . array ( indices ) df = pd . DataFrame ({ \"topic\" : np . array ( topic_per_doc )[ indices ]}) df [ \"doc\" ] = [ docs [ index ] for index in indices ] df [ \"topic\" ] = [ topic_per_doc [ index ] for index in indices ] # Extract embeddings if not already done if sample is None : if embeddings is None and reduced_embeddings is None : embeddings_to_reduce = topic_model . _extract_embeddings ( df . doc . to_list (), method = \"document\" ) else : embeddings_to_reduce = embeddings else : if embeddings is not None : embeddings_to_reduce = embeddings [ indices ] elif embeddings is None and reduced_embeddings is None : embeddings_to_reduce = topic_model . _extract_embeddings ( df . doc . to_list (), method = \"document\" ) # Reduce input embeddings if reduced_embeddings is None : umap_model = UMAP ( n_neighbors = 10 , n_components = 2 , min_dist = 0.0 , metric = 'cosine' ) . fit ( embeddings_to_reduce ) embeddings_2d = umap_model . embedding_ elif sample is not None and reduced_embeddings is not None : embeddings_2d = reduced_embeddings [ indices ] elif sample is None and reduced_embeddings is not None : embeddings_2d = reduced_embeddings # Combine data df [ \"x\" ] = embeddings_2d [:, 0 ] df [ \"y\" ] = embeddings_2d [:, 1 ] # Create topic list for each level, levels are created by calculating the distance distances = hierarchical_topics . Distance . to_list () max_distances = [ distances [ indices [ - 1 ]] for indices in np . array_split ( range ( len ( hierarchical_topics )), nr_levels )][:: - 1 ] for index , max_distance in enumerate ( max_distances ): # Get topics below `max_distance` mapping = { topic : topic for topic in df . topic . unique ()} selection = hierarchical_topics . loc [ hierarchical_topics . Distance <= max_distance , :] selection . Parent_ID = selection . Parent_ID . astype ( int ) selection = selection . sort_values ( \"Parent_ID\" ) for row in selection . iterrows (): for topic in row [ 1 ] . Topics : mapping [ topic ] = row [ 1 ] . Parent_ID # Make sure the mappings are mapped 1:1 mappings = [ True for _ in mapping ] while any ( mappings ): for i , ( key , value ) in enumerate ( mapping . items ()): if value in mapping . keys () and key != value : mapping [ key ] = mapping [ value ] else : mappings [ i ] = False # Create new column df [ f \"level_ { index + 1 } \" ] = df . topic . map ( mapping ) df [ f \"level_ { index + 1 } \" ] = df [ f \"level_ { index + 1 } \" ] . astype ( int ) # Prepare topic names of original and merged topics trace_names = [] topic_names = {} for topic in range ( hierarchical_topics . Parent_ID . astype ( int ) . max ()): if topic < hierarchical_topics . Parent_ID . astype ( int ) . min (): if topic_model . get_topic ( topic ): if topic_model . custom_labels_ is not None and custom_labels : trace_name = topic_model . custom_labels_ [ topic + topic_model . _outliers ] else : trace_name = f \" { topic } _\" + \"_\" . join ([ word [: 20 ] for word , _ in topic_model . get_topic ( topic )][: 3 ]) topic_names [ topic ] = { \"trace_name\" : trace_name [: 40 ], \"plot_text\" : trace_name [: 40 ]} trace_names . append ( trace_name ) else : trace_name = f \" { topic } _\" + hierarchical_topics . loc [ hierarchical_topics . Parent_ID == str ( topic ), \"Parent_Name\" ] . values [ 0 ] plot_text = \"_\" . join ([ name [: 20 ] for name in trace_name . split ( \"_\" )[: 3 ]]) topic_names [ topic ] = { \"trace_name\" : trace_name [: 40 ], \"plot_text\" : plot_text [: 40 ]} trace_names . append ( trace_name ) # Prepare traces all_traces = [] for level in range ( len ( max_distances )): traces = [] # Outliers if topic_model . _outliers : traces . append ( go . Scattergl ( x = df . loc [( df [ f \"level_ { level + 1 } \" ] == - 1 ), \"x\" ], y = df . loc [ df [ f \"level_ { level + 1 } \" ] == - 1 , \"y\" ], mode = 'markers+text' , name = \"other\" , hoverinfo = \"text\" , hovertext = df . loc [( df [ f \"level_ { level + 1 } \" ] == - 1 ), \"doc\" ] if not hide_document_hover else None , showlegend = False , marker = dict ( color = '#CFD8DC' , size = 5 , opacity = 0.5 ) ) ) # Selected topics if topics : selection = df . loc [( df . topic . isin ( topics )), :] unique_topics = sorted ([ int ( topic ) for topic in selection [ f \"level_ { level + 1 } \" ] . unique ()]) else : unique_topics = sorted ([ int ( topic ) for topic in df [ f \"level_ { level + 1 } \" ] . unique ()]) for topic in unique_topics : if topic != - 1 : if topics : selection = df . loc [( df [ f \"level_ { level + 1 } \" ] == topic ) & ( df . topic . isin ( topics )), :] else : selection = df . loc [ df [ f \"level_ { level + 1 } \" ] == topic , :] if not hide_annotations : selection . loc [ len ( selection ), :] = None selection [ \"text\" ] = \"\" selection . loc [ len ( selection ) - 1 , \"x\" ] = selection . x . mean () selection . loc [ len ( selection ) - 1 , \"y\" ] = selection . y . mean () selection . loc [ len ( selection ) - 1 , \"text\" ] = topic_names [ int ( topic )][ \"plot_text\" ] traces . append ( go . Scattergl ( x = selection . x , y = selection . y , text = selection . text if not hide_annotations else None , hovertext = selection . doc if not hide_document_hover else None , hoverinfo = \"text\" , name = topic_names [ int ( topic )][ \"trace_name\" ], mode = 'markers+text' , marker = dict ( size = 5 , opacity = 0.5 ) ) ) all_traces . append ( traces ) # Track and count traces nr_traces_per_set = [ len ( traces ) for traces in all_traces ] trace_indices = [( 0 , nr_traces_per_set [ 0 ])] for index , nr_traces in enumerate ( nr_traces_per_set [ 1 :]): start = trace_indices [ index ][ 1 ] end = nr_traces + start trace_indices . append (( start , end )) # Visualization fig = go . Figure () for traces in all_traces : for trace in traces : fig . add_trace ( trace ) for index in range ( len ( fig . data )): if index >= nr_traces_per_set [ 0 ]: fig . data [ index ] . visible = False # Create and add slider steps = [] for index , indices in enumerate ( trace_indices ): step = dict ( method = \"update\" , label = str ( index ), args = [{ \"visible\" : [ False ] * len ( fig . data )}] ) for index in range ( indices [ 1 ] - indices [ 0 ]): step [ \"args\" ][ 0 ][ \"visible\" ][ index + indices [ 0 ]] = True steps . append ( step ) sliders = [ dict ( currentvalue = { \"prefix\" : \"Level: \" }, pad = { \"t\" : 20 }, steps = steps )] # Add grid in a 'plus' shape x_range = ( df . x . min () - abs (( df . x . min ()) * .15 ), df . x . max () + abs (( df . x . max ()) * .15 )) y_range = ( df . y . min () - abs (( df . y . min ()) * .15 ), df . y . max () + abs (( df . y . max ()) * .15 )) fig . add_shape ( type = \"line\" , x0 = sum ( x_range ) / 2 , y0 = y_range [ 0 ], x1 = sum ( x_range ) / 2 , y1 = y_range [ 1 ], line = dict ( color = \"#CFD8DC\" , width = 2 )) fig . add_shape ( type = \"line\" , x0 = x_range [ 0 ], y0 = sum ( y_range ) / 2 , x1 = x_range [ 1 ], y1 = sum ( y_range ) / 2 , line = dict ( color = \"#9E9E9E\" , width = 2 )) fig . add_annotation ( x = x_range [ 0 ], y = sum ( y_range ) / 2 , text = \"D1\" , showarrow = False , yshift = 10 ) fig . add_annotation ( y = y_range [ 1 ], x = sum ( x_range ) / 2 , text = \"D2\" , showarrow = False , xshift = 10 ) # Stylize layout fig . update_layout ( sliders = sliders , template = \"simple_white\" , title = { 'text' : f \" { title } \" , 'x' : 0.5 , 'xanchor' : 'center' , 'yanchor' : 'top' , 'font' : dict ( size = 22 , color = \"Black\" ) }, width = width , height = height , ) fig . update_xaxes ( visible = False ) fig . update_yaxes ( visible = False ) return fig","title":"Hierarchical documents"},{"location":"api/plotting/hierarchical_documents.html#hierarchical-documents","text":"Visualize documents and their topics in 2D at different levels of hierarchy Parameters: Name Type Description Default docs List[str] The documents you used when calling either fit or fit_transform required hierarchical_topics DataFrame A dataframe that contains a hierarchy of topics represented by their parents and their children required topics List[int] A selection of topics to visualize. Not to be confused with the topics that you get from .fit_transform . For example, if you want to visualize only topics 1 through 5: topics = [1, 2, 3, 4, 5] . None embeddings ndarray The embeddings of all documents in docs . None reduced_embeddings ndarray The 2D reduced embeddings of all documents in docs . None sample Union[float, int] The percentage of documents in each topic that you would like to keep. Value can be between 0 and 1. Setting this value to, for example, 0.1 (10% of documents in each topic) makes it easier to visualize millions of documents as a subset is chosen. None hide_annotations bool Hide the names of the traces on top of each cluster. False hide_document_hover bool Hide the content of the documents when hovering over specific points. Helps to speed up generation of visualizations. True nr_levels int The number of levels to be visualized in the hierarchy. First, the distances in hierarchical_topics.Distance are split in nr_levels lists of distances with equal length. Then, for each list of distances, the merged topics are selected that have a distance less or equal to the maximum distance of the selected list of distances. NOTE: To get all possible merged steps, make sure that nr_levels is equal to the length of hierarchical_topics . 10 custom_labels bool Whether to use custom topic labels that were defined using topic_model.set_topic_labels . NOTE: Custom labels are only generated for the original un-merged topics. False title str Title of the plot. '<b>Hierarchical Documents and Topics</b>' width int The width of the figure. 1200 height int The height of the figure. 750 Examples: To visualize the topics simply run: topic_model . visualize_hierarchical_documents ( docs , hierarchical_topics ) Do note that this re-calculates the embeddings and reduces them to 2D. The advised and prefered pipeline for using this function is as follows: from sklearn.datasets import fetch_20newsgroups from sentence_transformers import SentenceTransformer from bertopic import BERTopic from umap import UMAP # Prepare embeddings docs = fetch_20newsgroups ( subset = 'all' , remove = ( 'headers' , 'footers' , 'quotes' ))[ 'data' ] sentence_model = SentenceTransformer ( \"all-MiniLM-L6-v2\" ) embeddings = sentence_model . encode ( docs , show_progress_bar = False ) # Train BERTopic and extract hierarchical topics topic_model = BERTopic () . fit ( docs , embeddings ) hierarchical_topics = topic_model . hierarchical_topics ( docs ) # Reduce dimensionality of embeddings, this step is optional # reduced_embeddings = UMAP(n_neighbors=10, n_components=2, min_dist=0.0, metric='cosine').fit_transform(embeddings) # Run the visualization with the original embeddings topic_model . visualize_hierarchical_documents ( docs , hierarchical_topics , embeddings = embeddings ) # Or, if you have reduced the original embeddings already: topic_model . visualize_hierarchical_documents ( docs , hierarchical_topics , reduced_embeddings = reduced_embeddings ) Or if you want to save the resulting figure: fig = topic_model . visualize_hierarchical_documents ( docs , hierarchical_topics , reduced_embeddings = reduced_embeddings ) fig . write_html ( \"path/to/file.html\" ) Note This visualization was inspired by the scatter plot representation of Doc2Map: https://github.com/louisgeisler/Doc2Map Source code in bertopic\\plotting\\_hierarchical_documents.py def visualize_hierarchical_documents ( topic_model , docs : List [ str ], hierarchical_topics : pd . DataFrame , topics : List [ int ] = None , embeddings : np . ndarray = None , reduced_embeddings : np . ndarray = None , sample : Union [ float , int ] = None , hide_annotations : bool = False , hide_document_hover : bool = True , nr_levels : int = 10 , custom_labels : bool = False , title : str = \"<b>Hierarchical Documents and Topics</b>\" , width : int = 1200 , height : int = 750 ) -> go . Figure : \"\"\" Visualize documents and their topics in 2D at different levels of hierarchy Arguments: docs: The documents you used when calling either `fit` or `fit_transform` hierarchical_topics: A dataframe that contains a hierarchy of topics represented by their parents and their children topics: A selection of topics to visualize. Not to be confused with the topics that you get from `.fit_transform`. For example, if you want to visualize only topics 1 through 5: `topics = [1, 2, 3, 4, 5]`. embeddings: The embeddings of all documents in `docs`. reduced_embeddings: The 2D reduced embeddings of all documents in `docs`. sample: The percentage of documents in each topic that you would like to keep. Value can be between 0 and 1. Setting this value to, for example, 0.1 (10% of documents in each topic) makes it easier to visualize millions of documents as a subset is chosen. hide_annotations: Hide the names of the traces on top of each cluster. hide_document_hover: Hide the content of the documents when hovering over specific points. Helps to speed up generation of visualizations. nr_levels: The number of levels to be visualized in the hierarchy. First, the distances in `hierarchical_topics.Distance` are split in `nr_levels` lists of distances with equal length. Then, for each list of distances, the merged topics are selected that have a distance less or equal to the maximum distance of the selected list of distances. NOTE: To get all possible merged steps, make sure that `nr_levels` is equal to the length of `hierarchical_topics`. custom_labels: Whether to use custom topic labels that were defined using `topic_model.set_topic_labels`. NOTE: Custom labels are only generated for the original un-merged topics. title: Title of the plot. width: The width of the figure. height: The height of the figure. Examples: To visualize the topics simply run: ```python topic_model.visualize_hierarchical_documents(docs, hierarchical_topics) ``` Do note that this re-calculates the embeddings and reduces them to 2D. The advised and prefered pipeline for using this function is as follows: ```python from sklearn.datasets import fetch_20newsgroups from sentence_transformers import SentenceTransformer from bertopic import BERTopic from umap import UMAP # Prepare embeddings docs = fetch_20newsgroups(subset='all', remove=('headers', 'footers', 'quotes'))['data'] sentence_model = SentenceTransformer(\"all-MiniLM-L6-v2\") embeddings = sentence_model.encode(docs, show_progress_bar=False) # Train BERTopic and extract hierarchical topics topic_model = BERTopic().fit(docs, embeddings) hierarchical_topics = topic_model.hierarchical_topics(docs) # Reduce dimensionality of embeddings, this step is optional # reduced_embeddings = UMAP(n_neighbors=10, n_components=2, min_dist=0.0, metric='cosine').fit_transform(embeddings) # Run the visualization with the original embeddings topic_model.visualize_hierarchical_documents(docs, hierarchical_topics, embeddings=embeddings) # Or, if you have reduced the original embeddings already: topic_model.visualize_hierarchical_documents(docs, hierarchical_topics, reduced_embeddings=reduced_embeddings) ``` Or if you want to save the resulting figure: ```python fig = topic_model.visualize_hierarchical_documents(docs, hierarchical_topics, reduced_embeddings=reduced_embeddings) fig.write_html(\"path/to/file.html\") ``` NOTE: This visualization was inspired by the scatter plot representation of Doc2Map: https://github.com/louisgeisler/Doc2Map <iframe src=\"../../getting_started/visualization/hierarchical_documents.html\" style=\"width:1000px; height: 770px; border: 0px;\"\"></iframe> \"\"\" topic_per_doc = topic_model . topics_ # Sample the data to optimize for visualization and dimensionality reduction if sample is None or sample > 1 : sample = 1 indices = [] for topic in set ( topic_per_doc ): s = np . where ( np . array ( topic_per_doc ) == topic )[ 0 ] size = len ( s ) if len ( s ) < 100 else int ( len ( s ) * sample ) indices . extend ( np . random . choice ( s , size = size , replace = False )) indices = np . array ( indices ) df = pd . DataFrame ({ \"topic\" : np . array ( topic_per_doc )[ indices ]}) df [ \"doc\" ] = [ docs [ index ] for index in indices ] df [ \"topic\" ] = [ topic_per_doc [ index ] for index in indices ] # Extract embeddings if not already done if sample is None : if embeddings is None and reduced_embeddings is None : embeddings_to_reduce = topic_model . _extract_embeddings ( df . doc . to_list (), method = \"document\" ) else : embeddings_to_reduce = embeddings else : if embeddings is not None : embeddings_to_reduce = embeddings [ indices ] elif embeddings is None and reduced_embeddings is None : embeddings_to_reduce = topic_model . _extract_embeddings ( df . doc . to_list (), method = \"document\" ) # Reduce input embeddings if reduced_embeddings is None : umap_model = UMAP ( n_neighbors = 10 , n_components = 2 , min_dist = 0.0 , metric = 'cosine' ) . fit ( embeddings_to_reduce ) embeddings_2d = umap_model . embedding_ elif sample is not None and reduced_embeddings is not None : embeddings_2d = reduced_embeddings [ indices ] elif sample is None and reduced_embeddings is not None : embeddings_2d = reduced_embeddings # Combine data df [ \"x\" ] = embeddings_2d [:, 0 ] df [ \"y\" ] = embeddings_2d [:, 1 ] # Create topic list for each level, levels are created by calculating the distance distances = hierarchical_topics . Distance . to_list () max_distances = [ distances [ indices [ - 1 ]] for indices in np . array_split ( range ( len ( hierarchical_topics )), nr_levels )][:: - 1 ] for index , max_distance in enumerate ( max_distances ): # Get topics below `max_distance` mapping = { topic : topic for topic in df . topic . unique ()} selection = hierarchical_topics . loc [ hierarchical_topics . Distance <= max_distance , :] selection . Parent_ID = selection . Parent_ID . astype ( int ) selection = selection . sort_values ( \"Parent_ID\" ) for row in selection . iterrows (): for topic in row [ 1 ] . Topics : mapping [ topic ] = row [ 1 ] . Parent_ID # Make sure the mappings are mapped 1:1 mappings = [ True for _ in mapping ] while any ( mappings ): for i , ( key , value ) in enumerate ( mapping . items ()): if value in mapping . keys () and key != value : mapping [ key ] = mapping [ value ] else : mappings [ i ] = False # Create new column df [ f \"level_ { index + 1 } \" ] = df . topic . map ( mapping ) df [ f \"level_ { index + 1 } \" ] = df [ f \"level_ { index + 1 } \" ] . astype ( int ) # Prepare topic names of original and merged topics trace_names = [] topic_names = {} for topic in range ( hierarchical_topics . Parent_ID . astype ( int ) . max ()): if topic < hierarchical_topics . Parent_ID . astype ( int ) . min (): if topic_model . get_topic ( topic ): if topic_model . custom_labels_ is not None and custom_labels : trace_name = topic_model . custom_labels_ [ topic + topic_model . _outliers ] else : trace_name = f \" { topic } _\" + \"_\" . join ([ word [: 20 ] for word , _ in topic_model . get_topic ( topic )][: 3 ]) topic_names [ topic ] = { \"trace_name\" : trace_name [: 40 ], \"plot_text\" : trace_name [: 40 ]} trace_names . append ( trace_name ) else : trace_name = f \" { topic } _\" + hierarchical_topics . loc [ hierarchical_topics . Parent_ID == str ( topic ), \"Parent_Name\" ] . values [ 0 ] plot_text = \"_\" . join ([ name [: 20 ] for name in trace_name . split ( \"_\" )[: 3 ]]) topic_names [ topic ] = { \"trace_name\" : trace_name [: 40 ], \"plot_text\" : plot_text [: 40 ]} trace_names . append ( trace_name ) # Prepare traces all_traces = [] for level in range ( len ( max_distances )): traces = [] # Outliers if topic_model . _outliers : traces . append ( go . Scattergl ( x = df . loc [( df [ f \"level_ { level + 1 } \" ] == - 1 ), \"x\" ], y = df . loc [ df [ f \"level_ { level + 1 } \" ] == - 1 , \"y\" ], mode = 'markers+text' , name = \"other\" , hoverinfo = \"text\" , hovertext = df . loc [( df [ f \"level_ { level + 1 } \" ] == - 1 ), \"doc\" ] if not hide_document_hover else None , showlegend = False , marker = dict ( color = '#CFD8DC' , size = 5 , opacity = 0.5 ) ) ) # Selected topics if topics : selection = df . loc [( df . topic . isin ( topics )), :] unique_topics = sorted ([ int ( topic ) for topic in selection [ f \"level_ { level + 1 } \" ] . unique ()]) else : unique_topics = sorted ([ int ( topic ) for topic in df [ f \"level_ { level + 1 } \" ] . unique ()]) for topic in unique_topics : if topic != - 1 : if topics : selection = df . loc [( df [ f \"level_ { level + 1 } \" ] == topic ) & ( df . topic . isin ( topics )), :] else : selection = df . loc [ df [ f \"level_ { level + 1 } \" ] == topic , :] if not hide_annotations : selection . loc [ len ( selection ), :] = None selection [ \"text\" ] = \"\" selection . loc [ len ( selection ) - 1 , \"x\" ] = selection . x . mean () selection . loc [ len ( selection ) - 1 , \"y\" ] = selection . y . mean () selection . loc [ len ( selection ) - 1 , \"text\" ] = topic_names [ int ( topic )][ \"plot_text\" ] traces . append ( go . Scattergl ( x = selection . x , y = selection . y , text = selection . text if not hide_annotations else None , hovertext = selection . doc if not hide_document_hover else None , hoverinfo = \"text\" , name = topic_names [ int ( topic )][ \"trace_name\" ], mode = 'markers+text' , marker = dict ( size = 5 , opacity = 0.5 ) ) ) all_traces . append ( traces ) # Track and count traces nr_traces_per_set = [ len ( traces ) for traces in all_traces ] trace_indices = [( 0 , nr_traces_per_set [ 0 ])] for index , nr_traces in enumerate ( nr_traces_per_set [ 1 :]): start = trace_indices [ index ][ 1 ] end = nr_traces + start trace_indices . append (( start , end )) # Visualization fig = go . Figure () for traces in all_traces : for trace in traces : fig . add_trace ( trace ) for index in range ( len ( fig . data )): if index >= nr_traces_per_set [ 0 ]: fig . data [ index ] . visible = False # Create and add slider steps = [] for index , indices in enumerate ( trace_indices ): step = dict ( method = \"update\" , label = str ( index ), args = [{ \"visible\" : [ False ] * len ( fig . data )}] ) for index in range ( indices [ 1 ] - indices [ 0 ]): step [ \"args\" ][ 0 ][ \"visible\" ][ index + indices [ 0 ]] = True steps . append ( step ) sliders = [ dict ( currentvalue = { \"prefix\" : \"Level: \" }, pad = { \"t\" : 20 }, steps = steps )] # Add grid in a 'plus' shape x_range = ( df . x . min () - abs (( df . x . min ()) * .15 ), df . x . max () + abs (( df . x . max ()) * .15 )) y_range = ( df . y . min () - abs (( df . y . min ()) * .15 ), df . y . max () + abs (( df . y . max ()) * .15 )) fig . add_shape ( type = \"line\" , x0 = sum ( x_range ) / 2 , y0 = y_range [ 0 ], x1 = sum ( x_range ) / 2 , y1 = y_range [ 1 ], line = dict ( color = \"#CFD8DC\" , width = 2 )) fig . add_shape ( type = \"line\" , x0 = x_range [ 0 ], y0 = sum ( y_range ) / 2 , x1 = x_range [ 1 ], y1 = sum ( y_range ) / 2 , line = dict ( color = \"#9E9E9E\" , width = 2 )) fig . add_annotation ( x = x_range [ 0 ], y = sum ( y_range ) / 2 , text = \"D1\" , showarrow = False , yshift = 10 ) fig . add_annotation ( y = y_range [ 1 ], x = sum ( x_range ) / 2 , text = \"D2\" , showarrow = False , xshift = 10 ) # Stylize layout fig . update_layout ( sliders = sliders , template = \"simple_white\" , title = { 'text' : f \" { title } \" , 'x' : 0.5 , 'xanchor' : 'center' , 'yanchor' : 'top' , 'font' : dict ( size = 22 , color = \"Black\" ) }, width = width , height = height , ) fig . update_xaxes ( visible = False ) fig . update_yaxes ( visible = False ) return fig","title":"Hierarchical Documents"},{"location":"api/plotting/hierarchy.html","text":"Hierarchy \u00b6 Visualize a hierarchical structure of the topics A ward linkage function is used to perform the hierarchical clustering based on the cosine distance matrix between topic embeddings. Parameters: Name Type Description Default topic_model A fitted BERTopic instance. required orientation str The orientation of the figure. Either 'left' or 'bottom' 'left' topics List[int] A selection of topics to visualize None top_n_topics int Only select the top n most frequent topics None custom_labels bool Whether to use custom topic labels that were defined using topic_model.set_topic_labels . NOTE: Custom labels are only generated for the original un-merged topics. False title str Title of the plot. '<b>Hierarchical Clustering</b>' width int The width of the figure. Only works if orientation is set to 'left' 1000 height int The height of the figure. Only works if orientation is set to 'bottom' 600 hierarchical_topics DataFrame A dataframe that contains a hierarchy of topics represented by their parents and their children. NOTE: The hierarchical topic names are only visualized if both topics and top_n_topics are not set. None linkage_function Callable[[scipy.sparse._csr.csr_matrix], numpy.ndarray] The linkage function to use. Default is: lambda x: sch.linkage(x, 'ward', optimal_ordering=True) NOTE: Make sure to use the same linkage_function as used in topic_model.hierarchical_topics . None distance_function Callable[[scipy.sparse._csr.csr_matrix], scipy.sparse._csr.csr_matrix] The distance function to use on the c-TF-IDF matrix. Default is: lambda x: 1 - cosine_similarity(x) NOTE: Make sure to use the same distance_function as used in topic_model.hierarchical_topics . None color_threshold int Value at which the separation of clusters will be made which will result in different colors for different clusters. A higher value will typically lead in less colored clusters. 1 Returns: Type Description fig A plotly figure Examples: To visualize the hierarchical structure of topics simply run: topic_model . visualize_hierarchy () If you also want the labels visualized of hierarchical topics, run the following: # Extract hierarchical topics and their representations hierarchical_topics = topic_model . hierarchical_topics ( docs ) # Visualize these representations topic_model . visualize_hierarchy ( hierarchical_topics = hierarchical_topics ) If you want to save the resulting figure: fig = topic_model . visualize_hierarchy () fig . write_html ( \"path/to/file.html\" ) Source code in bertopic\\plotting\\_hierarchy.py def visualize_hierarchy ( topic_model , orientation : str = \"left\" , topics : List [ int ] = None , top_n_topics : int = None , custom_labels : bool = False , title : str = \"<b>Hierarchical Clustering</b>\" , width : int = 1000 , height : int = 600 , hierarchical_topics : pd . DataFrame = None , linkage_function : Callable [[ csr_matrix ], np . ndarray ] = None , distance_function : Callable [[ csr_matrix ], csr_matrix ] = None , color_threshold : int = 1 ) -> go . Figure : \"\"\" Visualize a hierarchical structure of the topics A ward linkage function is used to perform the hierarchical clustering based on the cosine distance matrix between topic embeddings. Arguments: topic_model: A fitted BERTopic instance. orientation: The orientation of the figure. Either 'left' or 'bottom' topics: A selection of topics to visualize top_n_topics: Only select the top n most frequent topics custom_labels: Whether to use custom topic labels that were defined using `topic_model.set_topic_labels`. NOTE: Custom labels are only generated for the original un-merged topics. title: Title of the plot. width: The width of the figure. Only works if orientation is set to 'left' height: The height of the figure. Only works if orientation is set to 'bottom' hierarchical_topics: A dataframe that contains a hierarchy of topics represented by their parents and their children. NOTE: The hierarchical topic names are only visualized if both `topics` and `top_n_topics` are not set. linkage_function: The linkage function to use. Default is: `lambda x: sch.linkage(x, 'ward', optimal_ordering=True)` NOTE: Make sure to use the same `linkage_function` as used in `topic_model.hierarchical_topics`. distance_function: The distance function to use on the c-TF-IDF matrix. Default is: `lambda x: 1 - cosine_similarity(x)` NOTE: Make sure to use the same `distance_function` as used in `topic_model.hierarchical_topics`. color_threshold: Value at which the separation of clusters will be made which will result in different colors for different clusters. A higher value will typically lead in less colored clusters. Returns: fig: A plotly figure Examples: To visualize the hierarchical structure of topics simply run: ```python topic_model.visualize_hierarchy() ``` If you also want the labels visualized of hierarchical topics, run the following: ```python # Extract hierarchical topics and their representations hierarchical_topics = topic_model.hierarchical_topics(docs) # Visualize these representations topic_model.visualize_hierarchy(hierarchical_topics=hierarchical_topics) ``` If you want to save the resulting figure: ```python fig = topic_model.visualize_hierarchy() fig.write_html(\"path/to/file.html\") ``` <iframe src=\"../../getting_started/visualization/hierarchy.html\" style=\"width:1000px; height: 680px; border: 0px;\"\"></iframe> \"\"\" if distance_function is None : distance_function = lambda x : 1 - cosine_similarity ( x ) if linkage_function is None : linkage_function = lambda x : sch . linkage ( x , 'ward' , optimal_ordering = True ) # Select topics based on top_n and topics args freq_df = topic_model . get_topic_freq () freq_df = freq_df . loc [ freq_df . Topic != - 1 , :] if topics is not None : topics = list ( topics ) elif top_n_topics is not None : topics = sorted ( freq_df . Topic . to_list ()[: top_n_topics ]) else : topics = sorted ( freq_df . Topic . to_list ()) # Select embeddings all_topics = sorted ( list ( topic_model . get_topics () . keys ())) indices = np . array ([ all_topics . index ( topic ) for topic in topics ]) embeddings = topic_model . c_tf_idf_ [ indices ] # Annotations if hierarchical_topics is not None and len ( topics ) == len ( freq_df . Topic . to_list ()): annotations = _get_annotations ( topic_model = topic_model , hierarchical_topics = hierarchical_topics , embeddings = embeddings , distance_function = distance_function , linkage_function = linkage_function , orientation = orientation , custom_labels = custom_labels ) else : annotations = None # Create dendogram fig = ff . create_dendrogram ( embeddings , orientation = orientation , distfun = distance_function , linkagefun = linkage_function , hovertext = annotations , color_threshold = color_threshold ) # Create nicer labels axis = \"yaxis\" if orientation == \"left\" else \"xaxis\" if topic_model . custom_labels_ is not None and custom_labels : new_labels = [ topic_model . custom_labels_ [ topics [ int ( x )] + topic_model . _outliers ] for x in fig . layout [ axis ][ \"ticktext\" ]] else : new_labels = [[[ str ( topics [ int ( x )]), None ]] + topic_model . get_topic ( topics [ int ( x )]) for x in fig . layout [ axis ][ \"ticktext\" ]] new_labels = [ \"_\" . join ([ label [ 0 ] for label in labels [: 4 ]]) for labels in new_labels ] new_labels = [ label if len ( label ) < 30 else label [: 27 ] + \"...\" for label in new_labels ] # Stylize layout fig . update_layout ( plot_bgcolor = '#ECEFF1' , template = \"plotly_white\" , title = { 'text' : f \" { title } \" , 'x' : 0.5 , 'xanchor' : 'center' , 'yanchor' : 'top' , 'font' : dict ( size = 22 , color = \"Black\" ) }, hoverlabel = dict ( bgcolor = \"white\" , font_size = 16 , font_family = \"Rockwell\" ), ) # Stylize orientation if orientation == \"left\" : fig . update_layout ( height = 200 + ( 15 * len ( topics )), width = width , yaxis = dict ( tickmode = \"array\" , ticktext = new_labels )) # Fix empty space on the bottom of the graph y_max = max ([ trace [ 'y' ] . max () + 5 for trace in fig [ 'data' ]]) y_min = min ([ trace [ 'y' ] . min () - 5 for trace in fig [ 'data' ]]) fig . update_layout ( yaxis = dict ( range = [ y_min , y_max ])) else : fig . update_layout ( width = 200 + ( 15 * len ( topics )), height = height , xaxis = dict ( tickmode = \"array\" , ticktext = new_labels )) if hierarchical_topics is not None : for index in [ 0 , 3 ]: axis = \"x\" if orientation == \"left\" else \"y\" xs = [ data [ \"x\" ][ index ] for data in fig . data if ( data [ \"text\" ] and data [ axis ][ index ] > 0 )] ys = [ data [ \"y\" ][ index ] for data in fig . data if ( data [ \"text\" ] and data [ axis ][ index ] > 0 )] hovertext = [ data [ \"text\" ][ index ] for data in fig . data if ( data [ \"text\" ] and data [ axis ][ index ] > 0 )] fig . add_trace ( go . Scatter ( x = xs , y = ys , marker_color = 'black' , hovertext = hovertext , hoverinfo = \"text\" , mode = 'markers' , showlegend = False )) return fig","title":"Hierarchical topics"},{"location":"api/plotting/hierarchy.html#hierarchy","text":"Visualize a hierarchical structure of the topics A ward linkage function is used to perform the hierarchical clustering based on the cosine distance matrix between topic embeddings. Parameters: Name Type Description Default topic_model A fitted BERTopic instance. required orientation str The orientation of the figure. Either 'left' or 'bottom' 'left' topics List[int] A selection of topics to visualize None top_n_topics int Only select the top n most frequent topics None custom_labels bool Whether to use custom topic labels that were defined using topic_model.set_topic_labels . NOTE: Custom labels are only generated for the original un-merged topics. False title str Title of the plot. '<b>Hierarchical Clustering</b>' width int The width of the figure. Only works if orientation is set to 'left' 1000 height int The height of the figure. Only works if orientation is set to 'bottom' 600 hierarchical_topics DataFrame A dataframe that contains a hierarchy of topics represented by their parents and their children. NOTE: The hierarchical topic names are only visualized if both topics and top_n_topics are not set. None linkage_function Callable[[scipy.sparse._csr.csr_matrix], numpy.ndarray] The linkage function to use. Default is: lambda x: sch.linkage(x, 'ward', optimal_ordering=True) NOTE: Make sure to use the same linkage_function as used in topic_model.hierarchical_topics . None distance_function Callable[[scipy.sparse._csr.csr_matrix], scipy.sparse._csr.csr_matrix] The distance function to use on the c-TF-IDF matrix. Default is: lambda x: 1 - cosine_similarity(x) NOTE: Make sure to use the same distance_function as used in topic_model.hierarchical_topics . None color_threshold int Value at which the separation of clusters will be made which will result in different colors for different clusters. A higher value will typically lead in less colored clusters. 1 Returns: Type Description fig A plotly figure Examples: To visualize the hierarchical structure of topics simply run: topic_model . visualize_hierarchy () If you also want the labels visualized of hierarchical topics, run the following: # Extract hierarchical topics and their representations hierarchical_topics = topic_model . hierarchical_topics ( docs ) # Visualize these representations topic_model . visualize_hierarchy ( hierarchical_topics = hierarchical_topics ) If you want to save the resulting figure: fig = topic_model . visualize_hierarchy () fig . write_html ( \"path/to/file.html\" ) Source code in bertopic\\plotting\\_hierarchy.py def visualize_hierarchy ( topic_model , orientation : str = \"left\" , topics : List [ int ] = None , top_n_topics : int = None , custom_labels : bool = False , title : str = \"<b>Hierarchical Clustering</b>\" , width : int = 1000 , height : int = 600 , hierarchical_topics : pd . DataFrame = None , linkage_function : Callable [[ csr_matrix ], np . ndarray ] = None , distance_function : Callable [[ csr_matrix ], csr_matrix ] = None , color_threshold : int = 1 ) -> go . Figure : \"\"\" Visualize a hierarchical structure of the topics A ward linkage function is used to perform the hierarchical clustering based on the cosine distance matrix between topic embeddings. Arguments: topic_model: A fitted BERTopic instance. orientation: The orientation of the figure. Either 'left' or 'bottom' topics: A selection of topics to visualize top_n_topics: Only select the top n most frequent topics custom_labels: Whether to use custom topic labels that were defined using `topic_model.set_topic_labels`. NOTE: Custom labels are only generated for the original un-merged topics. title: Title of the plot. width: The width of the figure. Only works if orientation is set to 'left' height: The height of the figure. Only works if orientation is set to 'bottom' hierarchical_topics: A dataframe that contains a hierarchy of topics represented by their parents and their children. NOTE: The hierarchical topic names are only visualized if both `topics` and `top_n_topics` are not set. linkage_function: The linkage function to use. Default is: `lambda x: sch.linkage(x, 'ward', optimal_ordering=True)` NOTE: Make sure to use the same `linkage_function` as used in `topic_model.hierarchical_topics`. distance_function: The distance function to use on the c-TF-IDF matrix. Default is: `lambda x: 1 - cosine_similarity(x)` NOTE: Make sure to use the same `distance_function` as used in `topic_model.hierarchical_topics`. color_threshold: Value at which the separation of clusters will be made which will result in different colors for different clusters. A higher value will typically lead in less colored clusters. Returns: fig: A plotly figure Examples: To visualize the hierarchical structure of topics simply run: ```python topic_model.visualize_hierarchy() ``` If you also want the labels visualized of hierarchical topics, run the following: ```python # Extract hierarchical topics and their representations hierarchical_topics = topic_model.hierarchical_topics(docs) # Visualize these representations topic_model.visualize_hierarchy(hierarchical_topics=hierarchical_topics) ``` If you want to save the resulting figure: ```python fig = topic_model.visualize_hierarchy() fig.write_html(\"path/to/file.html\") ``` <iframe src=\"../../getting_started/visualization/hierarchy.html\" style=\"width:1000px; height: 680px; border: 0px;\"\"></iframe> \"\"\" if distance_function is None : distance_function = lambda x : 1 - cosine_similarity ( x ) if linkage_function is None : linkage_function = lambda x : sch . linkage ( x , 'ward' , optimal_ordering = True ) # Select topics based on top_n and topics args freq_df = topic_model . get_topic_freq () freq_df = freq_df . loc [ freq_df . Topic != - 1 , :] if topics is not None : topics = list ( topics ) elif top_n_topics is not None : topics = sorted ( freq_df . Topic . to_list ()[: top_n_topics ]) else : topics = sorted ( freq_df . Topic . to_list ()) # Select embeddings all_topics = sorted ( list ( topic_model . get_topics () . keys ())) indices = np . array ([ all_topics . index ( topic ) for topic in topics ]) embeddings = topic_model . c_tf_idf_ [ indices ] # Annotations if hierarchical_topics is not None and len ( topics ) == len ( freq_df . Topic . to_list ()): annotations = _get_annotations ( topic_model = topic_model , hierarchical_topics = hierarchical_topics , embeddings = embeddings , distance_function = distance_function , linkage_function = linkage_function , orientation = orientation , custom_labels = custom_labels ) else : annotations = None # Create dendogram fig = ff . create_dendrogram ( embeddings , orientation = orientation , distfun = distance_function , linkagefun = linkage_function , hovertext = annotations , color_threshold = color_threshold ) # Create nicer labels axis = \"yaxis\" if orientation == \"left\" else \"xaxis\" if topic_model . custom_labels_ is not None and custom_labels : new_labels = [ topic_model . custom_labels_ [ topics [ int ( x )] + topic_model . _outliers ] for x in fig . layout [ axis ][ \"ticktext\" ]] else : new_labels = [[[ str ( topics [ int ( x )]), None ]] + topic_model . get_topic ( topics [ int ( x )]) for x in fig . layout [ axis ][ \"ticktext\" ]] new_labels = [ \"_\" . join ([ label [ 0 ] for label in labels [: 4 ]]) for labels in new_labels ] new_labels = [ label if len ( label ) < 30 else label [: 27 ] + \"...\" for label in new_labels ] # Stylize layout fig . update_layout ( plot_bgcolor = '#ECEFF1' , template = \"plotly_white\" , title = { 'text' : f \" { title } \" , 'x' : 0.5 , 'xanchor' : 'center' , 'yanchor' : 'top' , 'font' : dict ( size = 22 , color = \"Black\" ) }, hoverlabel = dict ( bgcolor = \"white\" , font_size = 16 , font_family = \"Rockwell\" ), ) # Stylize orientation if orientation == \"left\" : fig . update_layout ( height = 200 + ( 15 * len ( topics )), width = width , yaxis = dict ( tickmode = \"array\" , ticktext = new_labels )) # Fix empty space on the bottom of the graph y_max = max ([ trace [ 'y' ] . max () + 5 for trace in fig [ 'data' ]]) y_min = min ([ trace [ 'y' ] . min () - 5 for trace in fig [ 'data' ]]) fig . update_layout ( yaxis = dict ( range = [ y_min , y_max ])) else : fig . update_layout ( width = 200 + ( 15 * len ( topics )), height = height , xaxis = dict ( tickmode = \"array\" , ticktext = new_labels )) if hierarchical_topics is not None : for index in [ 0 , 3 ]: axis = \"x\" if orientation == \"left\" else \"y\" xs = [ data [ \"x\" ][ index ] for data in fig . data if ( data [ \"text\" ] and data [ axis ][ index ] > 0 )] ys = [ data [ \"y\" ][ index ] for data in fig . data if ( data [ \"text\" ] and data [ axis ][ index ] > 0 )] hovertext = [ data [ \"text\" ][ index ] for data in fig . data if ( data [ \"text\" ] and data [ axis ][ index ] > 0 )] fig . add_trace ( go . Scatter ( x = xs , y = ys , marker_color = 'black' , hovertext = hovertext , hoverinfo = \"text\" , mode = 'markers' , showlegend = False )) return fig","title":"Hierarchy"},{"location":"api/plotting/term.html","text":"Term Score Decline \u00b6 Visualize the ranks of all terms across all topics Each topic is represented by a set of words. These words, however, do not all equally represent the topic. This visualization shows how many words are needed to represent a topic and at which point the beneficial effect of adding words starts to decline. Parameters: Name Type Description Default topic_model A fitted BERTopic instance. required topics List[int] A selection of topics to visualize. These will be colored red where all others will be colored black. None log_scale bool Whether to represent the ranking on a log scale False custom_labels bool Whether to use custom topic labels that were defined using topic_model.set_topic_labels . False title str Title of the plot. '<b>Term score decline per Topic</b>' width int The width of the figure. 800 height int The height of the figure. 500 Returns: Type Description fig A plotly figure Examples: To visualize the ranks of all words across all topics simply run: topic_model . visualize_term_rank () Or if you want to save the resulting figure: fig = topic_model . visualize_term_rank () fig . write_html ( \"path/to/file.html\" ) Reference: This visualization was heavily inspired by the \"Term Probability Decline\" visualization found in an analysis by the amazing tmtoolkit . Reference to that specific analysis can be found here . Source code in bertopic\\plotting\\_term_rank.py def visualize_term_rank ( topic_model , topics : List [ int ] = None , log_scale : bool = False , custom_labels : bool = False , title : str = \"<b>Term score decline per Topic</b>\" , width : int = 800 , height : int = 500 ) -> go . Figure : \"\"\" Visualize the ranks of all terms across all topics Each topic is represented by a set of words. These words, however, do not all equally represent the topic. This visualization shows how many words are needed to represent a topic and at which point the beneficial effect of adding words starts to decline. Arguments: topic_model: A fitted BERTopic instance. topics: A selection of topics to visualize. These will be colored red where all others will be colored black. log_scale: Whether to represent the ranking on a log scale custom_labels: Whether to use custom topic labels that were defined using `topic_model.set_topic_labels`. title: Title of the plot. width: The width of the figure. height: The height of the figure. Returns: fig: A plotly figure Examples: To visualize the ranks of all words across all topics simply run: ```python topic_model.visualize_term_rank() ``` Or if you want to save the resulting figure: ```python fig = topic_model.visualize_term_rank() fig.write_html(\"path/to/file.html\") ``` <iframe src=\"../../getting_started/visualization/term_rank.html\" style=\"width:1000px; height: 530px; border: 0px;\"\"></iframe> <iframe src=\"../../getting_started/visualization/term_rank_log.html\" style=\"width:1000px; height: 530px; border: 0px;\"\"></iframe> Reference: This visualization was heavily inspired by the \"Term Probability Decline\" visualization found in an analysis by the amazing [tmtoolkit](https://tmtoolkit.readthedocs.io/). Reference to that specific analysis can be found [here](https://wzbsocialsciencecenter.github.io/tm_corona/tm_analysis.html). \"\"\" topics = [] if topics is None else topics topic_ids = topic_model . get_topic_info () . Topic . unique () . tolist () topic_words = [ topic_model . get_topic ( topic ) for topic in topic_ids ] values = np . array ([[ value [ 1 ] for value in values ] for values in topic_words ]) indices = np . array ([[ value + 1 for value in range ( len ( values ))] for values in topic_words ]) # Create figure lines = [] for topic , x , y in zip ( topic_ids , indices , values ): if not any ( y > 1.5 ): # labels if topic_model . custom_labels_ is not None and custom_labels : label = topic_model . custom_labels_ [ topic + topic_model . _outliers ] else : label = f \"<b>Topic { topic } </b>:\" + \"_\" . join ([ word [ 0 ] for word in topic_model . get_topic ( topic )]) label = label [: 50 ] # line parameters color = \"red\" if topic in topics else \"black\" opacity = 1 if topic in topics else .1 if any ( y == 0 ): y [ y == 0 ] = min ( values [ values > 0 ]) y = np . log10 ( y , out = y , where = y > 0 ) if log_scale else y line = go . Scatter ( x = x , y = y , name = \"\" , hovertext = label , mode = \"lines+lines\" , opacity = opacity , line = dict ( color = color , width = 1.5 )) lines . append ( line ) fig = go . Figure ( data = lines ) # Stylize layout fig . update_xaxes ( range = [ 0 , len ( indices [ 0 ])], tick0 = 1 , dtick = 2 ) fig . update_layout ( showlegend = False , template = \"plotly_white\" , title = { 'text' : f \" { title } \" , 'y' : .9 , 'x' : 0.5 , 'xanchor' : 'center' , 'yanchor' : 'top' , 'font' : dict ( size = 22 , color = \"Black\" ) }, width = width , height = height , hoverlabel = dict ( bgcolor = \"white\" , font_size = 16 , font_family = \"Rockwell\" ), ) fig . update_xaxes ( title_text = 'Term Rank' ) if log_scale : fig . update_yaxes ( title_text = 'c-TF-IDF score (log scale)' ) else : fig . update_yaxes ( title_text = 'c-TF-IDF score' ) return fig","title":"Term Scores"},{"location":"api/plotting/term.html#term-score-decline","text":"Visualize the ranks of all terms across all topics Each topic is represented by a set of words. These words, however, do not all equally represent the topic. This visualization shows how many words are needed to represent a topic and at which point the beneficial effect of adding words starts to decline. Parameters: Name Type Description Default topic_model A fitted BERTopic instance. required topics List[int] A selection of topics to visualize. These will be colored red where all others will be colored black. None log_scale bool Whether to represent the ranking on a log scale False custom_labels bool Whether to use custom topic labels that were defined using topic_model.set_topic_labels . False title str Title of the plot. '<b>Term score decline per Topic</b>' width int The width of the figure. 800 height int The height of the figure. 500 Returns: Type Description fig A plotly figure Examples: To visualize the ranks of all words across all topics simply run: topic_model . visualize_term_rank () Or if you want to save the resulting figure: fig = topic_model . visualize_term_rank () fig . write_html ( \"path/to/file.html\" ) Reference: This visualization was heavily inspired by the \"Term Probability Decline\" visualization found in an analysis by the amazing tmtoolkit . Reference to that specific analysis can be found here . Source code in bertopic\\plotting\\_term_rank.py def visualize_term_rank ( topic_model , topics : List [ int ] = None , log_scale : bool = False , custom_labels : bool = False , title : str = \"<b>Term score decline per Topic</b>\" , width : int = 800 , height : int = 500 ) -> go . Figure : \"\"\" Visualize the ranks of all terms across all topics Each topic is represented by a set of words. These words, however, do not all equally represent the topic. This visualization shows how many words are needed to represent a topic and at which point the beneficial effect of adding words starts to decline. Arguments: topic_model: A fitted BERTopic instance. topics: A selection of topics to visualize. These will be colored red where all others will be colored black. log_scale: Whether to represent the ranking on a log scale custom_labels: Whether to use custom topic labels that were defined using `topic_model.set_topic_labels`. title: Title of the plot. width: The width of the figure. height: The height of the figure. Returns: fig: A plotly figure Examples: To visualize the ranks of all words across all topics simply run: ```python topic_model.visualize_term_rank() ``` Or if you want to save the resulting figure: ```python fig = topic_model.visualize_term_rank() fig.write_html(\"path/to/file.html\") ``` <iframe src=\"../../getting_started/visualization/term_rank.html\" style=\"width:1000px; height: 530px; border: 0px;\"\"></iframe> <iframe src=\"../../getting_started/visualization/term_rank_log.html\" style=\"width:1000px; height: 530px; border: 0px;\"\"></iframe> Reference: This visualization was heavily inspired by the \"Term Probability Decline\" visualization found in an analysis by the amazing [tmtoolkit](https://tmtoolkit.readthedocs.io/). Reference to that specific analysis can be found [here](https://wzbsocialsciencecenter.github.io/tm_corona/tm_analysis.html). \"\"\" topics = [] if topics is None else topics topic_ids = topic_model . get_topic_info () . Topic . unique () . tolist () topic_words = [ topic_model . get_topic ( topic ) for topic in topic_ids ] values = np . array ([[ value [ 1 ] for value in values ] for values in topic_words ]) indices = np . array ([[ value + 1 for value in range ( len ( values ))] for values in topic_words ]) # Create figure lines = [] for topic , x , y in zip ( topic_ids , indices , values ): if not any ( y > 1.5 ): # labels if topic_model . custom_labels_ is not None and custom_labels : label = topic_model . custom_labels_ [ topic + topic_model . _outliers ] else : label = f \"<b>Topic { topic } </b>:\" + \"_\" . join ([ word [ 0 ] for word in topic_model . get_topic ( topic )]) label = label [: 50 ] # line parameters color = \"red\" if topic in topics else \"black\" opacity = 1 if topic in topics else .1 if any ( y == 0 ): y [ y == 0 ] = min ( values [ values > 0 ]) y = np . log10 ( y , out = y , where = y > 0 ) if log_scale else y line = go . Scatter ( x = x , y = y , name = \"\" , hovertext = label , mode = \"lines+lines\" , opacity = opacity , line = dict ( color = color , width = 1.5 )) lines . append ( line ) fig = go . Figure ( data = lines ) # Stylize layout fig . update_xaxes ( range = [ 0 , len ( indices [ 0 ])], tick0 = 1 , dtick = 2 ) fig . update_layout ( showlegend = False , template = \"plotly_white\" , title = { 'text' : f \" { title } \" , 'y' : .9 , 'x' : 0.5 , 'xanchor' : 'center' , 'yanchor' : 'top' , 'font' : dict ( size = 22 , color = \"Black\" ) }, width = width , height = height , hoverlabel = dict ( bgcolor = \"white\" , font_size = 16 , font_family = \"Rockwell\" ), ) fig . update_xaxes ( title_text = 'Term Rank' ) if log_scale : fig . update_yaxes ( title_text = 'c-TF-IDF score (log scale)' ) else : fig . update_yaxes ( title_text = 'c-TF-IDF score' ) return fig","title":"Term Score Decline"},{"location":"api/plotting/topics.html","text":"Topics \u00b6 Visualize topics, their sizes, and their corresponding words This visualization is highly inspired by LDAvis, a great visualization technique typically reserved for LDA. Parameters: Name Type Description Default topic_model A fitted BERTopic instance. required topics List[int] A selection of topics to visualize None top_n_topics int Only select the top n most frequent topics None custom_labels bool Whether to use custom topic labels that were defined using topic_model.set_topic_labels . False title str Title of the plot. '<b>Intertopic Distance Map</b>' width int The width of the figure. 650 height int The height of the figure. 650 Examples: To visualize the topics simply run: topic_model . visualize_topics () Or if you want to save the resulting figure: fig = topic_model . visualize_topics () fig . write_html ( \"path/to/file.html\" ) Source code in bertopic\\plotting\\_topics.py def visualize_topics ( topic_model , topics : List [ int ] = None , top_n_topics : int = None , custom_labels : bool = False , title : str = \"<b>Intertopic Distance Map</b>\" , width : int = 650 , height : int = 650 ) -> go . Figure : \"\"\" Visualize topics, their sizes, and their corresponding words This visualization is highly inspired by LDAvis, a great visualization technique typically reserved for LDA. Arguments: topic_model: A fitted BERTopic instance. topics: A selection of topics to visualize top_n_topics: Only select the top n most frequent topics custom_labels: Whether to use custom topic labels that were defined using `topic_model.set_topic_labels`. title: Title of the plot. width: The width of the figure. height: The height of the figure. Examples: To visualize the topics simply run: ```python topic_model.visualize_topics() ``` Or if you want to save the resulting figure: ```python fig = topic_model.visualize_topics() fig.write_html(\"path/to/file.html\") ``` <iframe src=\"../../getting_started/visualization/viz.html\" style=\"width:1000px; height: 680px; border: 0px;\"\"></iframe> \"\"\" # Select topics based on top_n and topics args freq_df = topic_model . get_topic_freq () freq_df = freq_df . loc [ freq_df . Topic != - 1 , :] if topics is not None : topics = list ( topics ) elif top_n_topics is not None : topics = sorted ( freq_df . Topic . to_list ()[: top_n_topics ]) else : topics = sorted ( freq_df . Topic . to_list ()) # Extract topic words and their frequencies topic_list = sorted ( topics ) frequencies = [ topic_model . topic_sizes_ [ topic ] for topic in topic_list ] if custom_labels and topic_model . custom_labels_ is not None : words = [ topic_model . custom_labels_ [ topic + topic_model . _outliers ] for topic in topic_list ] else : words = [ \" | \" . join ([ word [ 0 ] for word in topic_model . get_topic ( topic )[: 5 ]]) for topic in topic_list ] # Embed c-TF-IDF into 2D all_topics = sorted ( list ( topic_model . get_topics () . keys ())) indices = np . array ([ all_topics . index ( topic ) for topic in topics ]) embeddings = topic_model . c_tf_idf_ . toarray ()[ indices ] embeddings = MinMaxScaler () . fit_transform ( embeddings ) embeddings = UMAP ( n_neighbors = 2 , n_components = 2 , metric = 'hellinger' , random_state = 42 ) . fit_transform ( embeddings ) # Visualize with plotly df = pd . DataFrame ({ \"x\" : embeddings [:, 0 ], \"y\" : embeddings [:, 1 ], \"Topic\" : topic_list , \"Words\" : words , \"Size\" : frequencies }) return _plotly_topic_visualization ( df , topic_list , title , width , height )","title":"Topics"},{"location":"api/plotting/topics.html#topics","text":"Visualize topics, their sizes, and their corresponding words This visualization is highly inspired by LDAvis, a great visualization technique typically reserved for LDA. Parameters: Name Type Description Default topic_model A fitted BERTopic instance. required topics List[int] A selection of topics to visualize None top_n_topics int Only select the top n most frequent topics None custom_labels bool Whether to use custom topic labels that were defined using topic_model.set_topic_labels . False title str Title of the plot. '<b>Intertopic Distance Map</b>' width int The width of the figure. 650 height int The height of the figure. 650 Examples: To visualize the topics simply run: topic_model . visualize_topics () Or if you want to save the resulting figure: fig = topic_model . visualize_topics () fig . write_html ( \"path/to/file.html\" ) Source code in bertopic\\plotting\\_topics.py def visualize_topics ( topic_model , topics : List [ int ] = None , top_n_topics : int = None , custom_labels : bool = False , title : str = \"<b>Intertopic Distance Map</b>\" , width : int = 650 , height : int = 650 ) -> go . Figure : \"\"\" Visualize topics, their sizes, and their corresponding words This visualization is highly inspired by LDAvis, a great visualization technique typically reserved for LDA. Arguments: topic_model: A fitted BERTopic instance. topics: A selection of topics to visualize top_n_topics: Only select the top n most frequent topics custom_labels: Whether to use custom topic labels that were defined using `topic_model.set_topic_labels`. title: Title of the plot. width: The width of the figure. height: The height of the figure. Examples: To visualize the topics simply run: ```python topic_model.visualize_topics() ``` Or if you want to save the resulting figure: ```python fig = topic_model.visualize_topics() fig.write_html(\"path/to/file.html\") ``` <iframe src=\"../../getting_started/visualization/viz.html\" style=\"width:1000px; height: 680px; border: 0px;\"\"></iframe> \"\"\" # Select topics based on top_n and topics args freq_df = topic_model . get_topic_freq () freq_df = freq_df . loc [ freq_df . Topic != - 1 , :] if topics is not None : topics = list ( topics ) elif top_n_topics is not None : topics = sorted ( freq_df . Topic . to_list ()[: top_n_topics ]) else : topics = sorted ( freq_df . Topic . to_list ()) # Extract topic words and their frequencies topic_list = sorted ( topics ) frequencies = [ topic_model . topic_sizes_ [ topic ] for topic in topic_list ] if custom_labels and topic_model . custom_labels_ is not None : words = [ topic_model . custom_labels_ [ topic + topic_model . _outliers ] for topic in topic_list ] else : words = [ \" | \" . join ([ word [ 0 ] for word in topic_model . get_topic ( topic )[: 5 ]]) for topic in topic_list ] # Embed c-TF-IDF into 2D all_topics = sorted ( list ( topic_model . get_topics () . keys ())) indices = np . array ([ all_topics . index ( topic ) for topic in topics ]) embeddings = topic_model . c_tf_idf_ . toarray ()[ indices ] embeddings = MinMaxScaler () . fit_transform ( embeddings ) embeddings = UMAP ( n_neighbors = 2 , n_components = 2 , metric = 'hellinger' , random_state = 42 ) . fit_transform ( embeddings ) # Visualize with plotly df = pd . DataFrame ({ \"x\" : embeddings [:, 0 ], \"y\" : embeddings [:, 1 ], \"Topic\" : topic_list , \"Words\" : words , \"Size\" : frequencies }) return _plotly_topic_visualization ( df , topic_list , title , width , height )","title":"Topics"},{"location":"api/plotting/topics_per_class.html","text":"Topics per Class \u00b6 Visualize topics per class Parameters: Name Type Description Default topic_model A fitted BERTopic instance. required topics_per_class DataFrame The topics you would like to be visualized with the corresponding topic representation required top_n_topics int To visualize the most frequent topics instead of all 10 topics List[int] Select which topics you would like to be visualized None normalize_frequency bool Whether to normalize each topic's frequency individually False custom_labels bool Whether to use custom topic labels that were defined using topic_model.set_topic_labels . False title str Title of the plot. '<b>Topics per Class</b>' width int The width of the figure. 1250 height int The height of the figure. 900 Returns: Type Description Figure A plotly.graph_objects.Figure including all traces Examples: To visualize the topics per class, simply run: topics_per_class = topic_model . topics_per_class ( docs , classes ) topic_model . visualize_topics_per_class ( topics_per_class ) Or if you want to save the resulting figure: fig = topic_model . visualize_topics_per_class ( topics_per_class ) fig . write_html ( \"path/to/file.html\" ) Source code in bertopic\\plotting\\_topics_per_class.py def visualize_topics_per_class ( topic_model , topics_per_class : pd . DataFrame , top_n_topics : int = 10 , topics : List [ int ] = None , normalize_frequency : bool = False , custom_labels : bool = False , title : str = \"<b>Topics per Class</b>\" , width : int = 1250 , height : int = 900 ) -> go . Figure : \"\"\" Visualize topics per class Arguments: topic_model: A fitted BERTopic instance. topics_per_class: The topics you would like to be visualized with the corresponding topic representation top_n_topics: To visualize the most frequent topics instead of all topics: Select which topics you would like to be visualized normalize_frequency: Whether to normalize each topic's frequency individually custom_labels: Whether to use custom topic labels that were defined using `topic_model.set_topic_labels`. title: Title of the plot. width: The width of the figure. height: The height of the figure. Returns: A plotly.graph_objects.Figure including all traces Examples: To visualize the topics per class, simply run: ```python topics_per_class = topic_model.topics_per_class(docs, classes) topic_model.visualize_topics_per_class(topics_per_class) ``` Or if you want to save the resulting figure: ```python fig = topic_model.visualize_topics_per_class(topics_per_class) fig.write_html(\"path/to/file.html\") ``` <iframe src=\"../../getting_started/visualization/topics_per_class.html\" style=\"width:1400px; height: 1000px; border: 0px;\"\"></iframe> \"\"\" colors = [ \"#E69F00\" , \"#56B4E9\" , \"#009E73\" , \"#F0E442\" , \"#D55E00\" , \"#0072B2\" , \"#CC79A7\" ] # Select topics based on top_n and topics args freq_df = topic_model . get_topic_freq () freq_df = freq_df . loc [ freq_df . Topic != - 1 , :] if topics is not None : selected_topics = list ( topics ) elif top_n_topics is not None : selected_topics = sorted ( freq_df . Topic . to_list ()[: top_n_topics ]) else : selected_topics = sorted ( freq_df . Topic . to_list ()) # Prepare data if topic_model . custom_labels_ is not None and custom_labels : topic_names = { key : topic_model . custom_labels_ [ key + topic_model . _outliers ] for key , _ in topic_model . topic_labels_ . items ()} else : topic_names = { key : value [: 40 ] + \"...\" if len ( value ) > 40 else value for key , value in topic_model . topic_labels_ . items ()} topics_per_class [ \"Name\" ] = topics_per_class . Topic . map ( topic_names ) data = topics_per_class . loc [ topics_per_class . Topic . isin ( selected_topics ), :] # Add traces fig = go . Figure () for index , topic in enumerate ( selected_topics ): if index == 0 : visible = True else : visible = \"legendonly\" trace_data = data . loc [ data . Topic == topic , :] topic_name = trace_data . Name . values [ 0 ] words = trace_data . Words . values if normalize_frequency : x = normalize ( trace_data . Frequency . values . reshape ( 1 , - 1 ))[ 0 ] else : x = trace_data . Frequency fig . add_trace ( go . Bar ( y = trace_data . Class , x = x , visible = visible , marker_color = colors [ index % 7 ], hoverinfo = \"text\" , name = topic_name , orientation = \"h\" , hovertext = [ f '<b>Topic { topic } </b><br>Words: { word } ' for word in words ])) # Styling of the visualization fig . update_xaxes ( showgrid = True ) fig . update_yaxes ( showgrid = True ) fig . update_layout ( xaxis_title = \"Normalized Frequency\" if normalize_frequency else \"Frequency\" , yaxis_title = \"Class\" , title = { 'text' : f \" { title } \" , 'y' : .95 , 'x' : 0.40 , 'xanchor' : 'center' , 'yanchor' : 'top' , 'font' : dict ( size = 22 , color = \"Black\" ) }, template = \"simple_white\" , width = width , height = height , hoverlabel = dict ( bgcolor = \"white\" , font_size = 16 , font_family = \"Rockwell\" ), legend = dict ( title = \"<b>Global Topic Representation\" , ) ) return fig","title":"Topics per Class"},{"location":"api/plotting/topics_per_class.html#topics-per-class","text":"Visualize topics per class Parameters: Name Type Description Default topic_model A fitted BERTopic instance. required topics_per_class DataFrame The topics you would like to be visualized with the corresponding topic representation required top_n_topics int To visualize the most frequent topics instead of all 10 topics List[int] Select which topics you would like to be visualized None normalize_frequency bool Whether to normalize each topic's frequency individually False custom_labels bool Whether to use custom topic labels that were defined using topic_model.set_topic_labels . False title str Title of the plot. '<b>Topics per Class</b>' width int The width of the figure. 1250 height int The height of the figure. 900 Returns: Type Description Figure A plotly.graph_objects.Figure including all traces Examples: To visualize the topics per class, simply run: topics_per_class = topic_model . topics_per_class ( docs , classes ) topic_model . visualize_topics_per_class ( topics_per_class ) Or if you want to save the resulting figure: fig = topic_model . visualize_topics_per_class ( topics_per_class ) fig . write_html ( \"path/to/file.html\" ) Source code in bertopic\\plotting\\_topics_per_class.py def visualize_topics_per_class ( topic_model , topics_per_class : pd . DataFrame , top_n_topics : int = 10 , topics : List [ int ] = None , normalize_frequency : bool = False , custom_labels : bool = False , title : str = \"<b>Topics per Class</b>\" , width : int = 1250 , height : int = 900 ) -> go . Figure : \"\"\" Visualize topics per class Arguments: topic_model: A fitted BERTopic instance. topics_per_class: The topics you would like to be visualized with the corresponding topic representation top_n_topics: To visualize the most frequent topics instead of all topics: Select which topics you would like to be visualized normalize_frequency: Whether to normalize each topic's frequency individually custom_labels: Whether to use custom topic labels that were defined using `topic_model.set_topic_labels`. title: Title of the plot. width: The width of the figure. height: The height of the figure. Returns: A plotly.graph_objects.Figure including all traces Examples: To visualize the topics per class, simply run: ```python topics_per_class = topic_model.topics_per_class(docs, classes) topic_model.visualize_topics_per_class(topics_per_class) ``` Or if you want to save the resulting figure: ```python fig = topic_model.visualize_topics_per_class(topics_per_class) fig.write_html(\"path/to/file.html\") ``` <iframe src=\"../../getting_started/visualization/topics_per_class.html\" style=\"width:1400px; height: 1000px; border: 0px;\"\"></iframe> \"\"\" colors = [ \"#E69F00\" , \"#56B4E9\" , \"#009E73\" , \"#F0E442\" , \"#D55E00\" , \"#0072B2\" , \"#CC79A7\" ] # Select topics based on top_n and topics args freq_df = topic_model . get_topic_freq () freq_df = freq_df . loc [ freq_df . Topic != - 1 , :] if topics is not None : selected_topics = list ( topics ) elif top_n_topics is not None : selected_topics = sorted ( freq_df . Topic . to_list ()[: top_n_topics ]) else : selected_topics = sorted ( freq_df . Topic . to_list ()) # Prepare data if topic_model . custom_labels_ is not None and custom_labels : topic_names = { key : topic_model . custom_labels_ [ key + topic_model . _outliers ] for key , _ in topic_model . topic_labels_ . items ()} else : topic_names = { key : value [: 40 ] + \"...\" if len ( value ) > 40 else value for key , value in topic_model . topic_labels_ . items ()} topics_per_class [ \"Name\" ] = topics_per_class . Topic . map ( topic_names ) data = topics_per_class . loc [ topics_per_class . Topic . isin ( selected_topics ), :] # Add traces fig = go . Figure () for index , topic in enumerate ( selected_topics ): if index == 0 : visible = True else : visible = \"legendonly\" trace_data = data . loc [ data . Topic == topic , :] topic_name = trace_data . Name . values [ 0 ] words = trace_data . Words . values if normalize_frequency : x = normalize ( trace_data . Frequency . values . reshape ( 1 , - 1 ))[ 0 ] else : x = trace_data . Frequency fig . add_trace ( go . Bar ( y = trace_data . Class , x = x , visible = visible , marker_color = colors [ index % 7 ], hoverinfo = \"text\" , name = topic_name , orientation = \"h\" , hovertext = [ f '<b>Topic { topic } </b><br>Words: { word } ' for word in words ])) # Styling of the visualization fig . update_xaxes ( showgrid = True ) fig . update_yaxes ( showgrid = True ) fig . update_layout ( xaxis_title = \"Normalized Frequency\" if normalize_frequency else \"Frequency\" , yaxis_title = \"Class\" , title = { 'text' : f \" { title } \" , 'y' : .95 , 'x' : 0.40 , 'xanchor' : 'center' , 'yanchor' : 'top' , 'font' : dict ( size = 22 , color = \"Black\" ) }, template = \"simple_white\" , width = width , height = height , hoverlabel = dict ( bgcolor = \"white\" , font_size = 16 , font_family = \"Rockwell\" ), legend = dict ( title = \"<b>Global Topic Representation\" , ) ) return fig","title":"Topics per Class"},{"location":"api/representation/base.html","text":"BaseRepresentation \u00b6 The base representation model for fine-tuning topic representations Source code in bertopic\\representation\\_base.py class BaseRepresentation ( BaseEstimator ): \"\"\" The base representation model for fine-tuning topic representations \"\"\" def extract_topics ( self , topic_model , documents : pd . DataFrame , c_tf_idf : csr_matrix , topics : Mapping [ str , List [ Tuple [ str , float ]]] ) -> Mapping [ str , List [ Tuple [ str , float ]]]: \"\"\" Extract topics Each representation model that inherits this class will have its arguments (topic_model, documents, c_tf_idf, topics) automatically passed. Therefore, the representation model will only have access to the information about topics related to those arguments. Arguments: topic_model: The BERTopic model that is fitted until topic representations are calculated. documents: A dataframe with columns \"Document\" and \"Topic\" that contains all documents with each corresponding topic. c_tf_idf: A c-TF-IDF representation that is typically identical to `topic_model.c_tf_idf_` except for dynamic, class-based, and hierarchical topic modeling where it is calculated on a subset of the documents. topics: A dictionary with topic (key) and tuple of word and weight (value) as calculated by c-TF-IDF. This is the default topics that are returned if no representation model is used. \"\"\" return topic_model . topic_representations_ extract_topics ( self , topic_model , documents , c_tf_idf , topics ) \u00b6 Extract topics Each representation model that inherits this class will have its arguments (topic_model, documents, c_tf_idf, topics) automatically passed. Therefore, the representation model will only have access to the information about topics related to those arguments. Parameters: Name Type Description Default topic_model The BERTopic model that is fitted until topic representations are calculated. required documents DataFrame A dataframe with columns \"Document\" and \"Topic\" that contains all documents with each corresponding topic. required c_tf_idf csr_matrix A c-TF-IDF representation that is typically identical to topic_model.c_tf_idf_ except for dynamic, class-based, and hierarchical topic modeling where it is calculated on a subset of the documents. required topics Mapping[str, List[Tuple[str, float]]] A dictionary with topic (key) and tuple of word and weight (value) as calculated by c-TF-IDF. This is the default topics that are returned if no representation model is used. required Source code in bertopic\\representation\\_base.py def extract_topics ( self , topic_model , documents : pd . DataFrame , c_tf_idf : csr_matrix , topics : Mapping [ str , List [ Tuple [ str , float ]]] ) -> Mapping [ str , List [ Tuple [ str , float ]]]: \"\"\" Extract topics Each representation model that inherits this class will have its arguments (topic_model, documents, c_tf_idf, topics) automatically passed. Therefore, the representation model will only have access to the information about topics related to those arguments. Arguments: topic_model: The BERTopic model that is fitted until topic representations are calculated. documents: A dataframe with columns \"Document\" and \"Topic\" that contains all documents with each corresponding topic. c_tf_idf: A c-TF-IDF representation that is typically identical to `topic_model.c_tf_idf_` except for dynamic, class-based, and hierarchical topic modeling where it is calculated on a subset of the documents. topics: A dictionary with topic (key) and tuple of word and weight (value) as calculated by c-TF-IDF. This is the default topics that are returned if no representation model is used. \"\"\" return topic_model . topic_representations_","title":"Base"},{"location":"api/representation/base.html#baserepresentation","text":"The base representation model for fine-tuning topic representations Source code in bertopic\\representation\\_base.py class BaseRepresentation ( BaseEstimator ): \"\"\" The base representation model for fine-tuning topic representations \"\"\" def extract_topics ( self , topic_model , documents : pd . DataFrame , c_tf_idf : csr_matrix , topics : Mapping [ str , List [ Tuple [ str , float ]]] ) -> Mapping [ str , List [ Tuple [ str , float ]]]: \"\"\" Extract topics Each representation model that inherits this class will have its arguments (topic_model, documents, c_tf_idf, topics) automatically passed. Therefore, the representation model will only have access to the information about topics related to those arguments. Arguments: topic_model: The BERTopic model that is fitted until topic representations are calculated. documents: A dataframe with columns \"Document\" and \"Topic\" that contains all documents with each corresponding topic. c_tf_idf: A c-TF-IDF representation that is typically identical to `topic_model.c_tf_idf_` except for dynamic, class-based, and hierarchical topic modeling where it is calculated on a subset of the documents. topics: A dictionary with topic (key) and tuple of word and weight (value) as calculated by c-TF-IDF. This is the default topics that are returned if no representation model is used. \"\"\" return topic_model . topic_representations_","title":"BaseRepresentation"},{"location":"api/representation/base.html#bertopic.representation._base.BaseRepresentation.extract_topics","text":"Extract topics Each representation model that inherits this class will have its arguments (topic_model, documents, c_tf_idf, topics) automatically passed. Therefore, the representation model will only have access to the information about topics related to those arguments. Parameters: Name Type Description Default topic_model The BERTopic model that is fitted until topic representations are calculated. required documents DataFrame A dataframe with columns \"Document\" and \"Topic\" that contains all documents with each corresponding topic. required c_tf_idf csr_matrix A c-TF-IDF representation that is typically identical to topic_model.c_tf_idf_ except for dynamic, class-based, and hierarchical topic modeling where it is calculated on a subset of the documents. required topics Mapping[str, List[Tuple[str, float]]] A dictionary with topic (key) and tuple of word and weight (value) as calculated by c-TF-IDF. This is the default topics that are returned if no representation model is used. required Source code in bertopic\\representation\\_base.py def extract_topics ( self , topic_model , documents : pd . DataFrame , c_tf_idf : csr_matrix , topics : Mapping [ str , List [ Tuple [ str , float ]]] ) -> Mapping [ str , List [ Tuple [ str , float ]]]: \"\"\" Extract topics Each representation model that inherits this class will have its arguments (topic_model, documents, c_tf_idf, topics) automatically passed. Therefore, the representation model will only have access to the information about topics related to those arguments. Arguments: topic_model: The BERTopic model that is fitted until topic representations are calculated. documents: A dataframe with columns \"Document\" and \"Topic\" that contains all documents with each corresponding topic. c_tf_idf: A c-TF-IDF representation that is typically identical to `topic_model.c_tf_idf_` except for dynamic, class-based, and hierarchical topic modeling where it is calculated on a subset of the documents. topics: A dictionary with topic (key) and tuple of word and weight (value) as calculated by c-TF-IDF. This is the default topics that are returned if no representation model is used. \"\"\" return topic_model . topic_representations_","title":"extract_topics()"},{"location":"api/representation/cohere.html","text":"Cohere \u00b6 Use the Cohere API to generate topic labels based on their generative model. Find more about their models here: https://docs.cohere.ai/docs Parameters: Name Type Description Default client A cohere.Client required model str Model to use within Cohere, defaults to \"xlarge\" . 'xlarge' prompt str The prompt to be used in the model. If no prompt is given, self.default_prompt_ is used instead. NOTE: Use \"[KEYWORDS]\" and \"[DOCUMENTS]\" in the prompt to decide where the keywords and documents need to be inserted. None delay_in_seconds float The delay in seconds between consecutive prompts in order to prevent RateLimitErrors. None Usage: To use this, you will need to install cohere first: pip install cohere Then, get yourself an API key and use Cohere's API as follows: import cohere from bertopic.representation import Cohere from bertopic import BERTopic # Create your representation model co = cohere . Client ( my_api_key ) representation_model = Cohere ( co ) # Use the representation model in BERTopic on top of the default pipeline topic_model = BERTopic ( representation_model = representation_model ) You can also use a custom prompt: prompt = \"I have the following documents: [DOCUMENTS]. What topic do they contain?\" representation_model = Cohere ( co , prompt = prompt ) Source code in bertopic\\representation\\_cohere.py class Cohere ( BaseRepresentation ): \"\"\" Use the Cohere API to generate topic labels based on their generative model. Find more about their models here: https://docs.cohere.ai/docs Arguments: client: A cohere.Client model: Model to use within Cohere, defaults to `\"xlarge\"`. prompt: The prompt to be used in the model. If no prompt is given, `self.default_prompt_` is used instead. NOTE: Use `\"[KEYWORDS]\"` and `\"[DOCUMENTS]\"` in the prompt to decide where the keywords and documents need to be inserted. delay_in_seconds: The delay in seconds between consecutive prompts in order to prevent RateLimitErrors. Usage: To use this, you will need to install cohere first: `pip install cohere` Then, get yourself an API key and use Cohere's API as follows: ```python import cohere from bertopic.representation import Cohere from bertopic import BERTopic # Create your representation model co = cohere.Client(my_api_key) representation_model = Cohere(co) # Use the representation model in BERTopic on top of the default pipeline topic_model = BERTopic(representation_model=representation_model) ``` You can also use a custom prompt: ```python prompt = \"I have the following documents: [DOCUMENTS]. What topic do they contain?\" representation_model = Cohere(co, prompt=prompt) ``` \"\"\" def __init__ ( self , client , model : str = \"xlarge\" , prompt : str = None , delay_in_seconds : float = None , ): self . client = client self . model = model self . prompt = prompt if prompt is not None else DEFAULT_PROMPT self . default_prompt_ = DEFAULT_PROMPT self . delay_in_seconds = delay_in_seconds def extract_topics ( self , topic_model , documents : pd . DataFrame , c_tf_idf : csr_matrix , topics : Mapping [ str , List [ Tuple [ str , float ]]] ) -> Mapping [ str , List [ Tuple [ str , float ]]]: \"\"\" Extract topics Arguments: topic_model: Not used documents: Not used c_tf_idf: Not used topics: The candidate topics as calculated with c-TF-IDF Returns: updated_topics: Updated topic representations \"\"\" # Extract the top 4 representative documents per topic repr_docs_mappings , _ , _ = topic_model . _extract_representative_docs ( c_tf_idf , documents , topics , 500 , 4 ) # Generate using Cohere's Language Model updated_topics = {} for topic , docs in repr_docs_mappings . items (): prompt = self . _create_prompt ( docs , topic , topics ) # Delay if self . delay_in_seconds : time . sleep ( self . delay_in_seconds ) request = self . client . generate ( model = self . model , prompt = prompt , max_tokens = 50 , num_generations = 1 , stop_sequences = [ \" \\n \" ]) label = request . generations [ 0 ] . text . strip () updated_topics [ topic ] = [( label , 1 )] + [( \"\" , 0 ) for _ in range ( 9 )] return updated_topics def _create_prompt ( self , docs , topic , topics ): keywords = list ( zip ( * topics [ topic ]))[ 0 ] # Use the Default Chat Prompt if self . prompt == self . prompt == DEFAULT_PROMPT : prompt = self . prompt . replace ( \"[KEYWORDS]\" , \" \" . join ( keywords )) prompt = self . _replace_documents ( prompt , docs ) # Use a custom prompt that leverages keywords, documents or both using # custom tags, namely [KEYWORDS] and [DOCUMENTS] respectively else : prompt = self . prompt if \"[KEYWORDS]\" in prompt : prompt = prompt . replace ( \"[KEYWORDS]\" , \" \" . join ( keywords )) if \"[DOCUMENTS]\" in prompt : prompt = self . _replace_documents ( prompt , docs ) return prompt @staticmethod def _replace_documents ( prompt , docs ): to_replace = \"\" for doc in docs : to_replace += f \"- { doc [: 255 ] } \\n \" prompt = prompt . replace ( \"[DOCUMENTS]\" , to_replace ) return prompt extract_topics ( self , topic_model , documents , c_tf_idf , topics ) \u00b6 Extract topics Parameters: Name Type Description Default topic_model Not used required documents DataFrame Not used required c_tf_idf csr_matrix Not used required topics Mapping[str, List[Tuple[str, float]]] The candidate topics as calculated with c-TF-IDF required Returns: Type Description updated_topics Updated topic representations Source code in bertopic\\representation\\_cohere.py def extract_topics ( self , topic_model , documents : pd . DataFrame , c_tf_idf : csr_matrix , topics : Mapping [ str , List [ Tuple [ str , float ]]] ) -> Mapping [ str , List [ Tuple [ str , float ]]]: \"\"\" Extract topics Arguments: topic_model: Not used documents: Not used c_tf_idf: Not used topics: The candidate topics as calculated with c-TF-IDF Returns: updated_topics: Updated topic representations \"\"\" # Extract the top 4 representative documents per topic repr_docs_mappings , _ , _ = topic_model . _extract_representative_docs ( c_tf_idf , documents , topics , 500 , 4 ) # Generate using Cohere's Language Model updated_topics = {} for topic , docs in repr_docs_mappings . items (): prompt = self . _create_prompt ( docs , topic , topics ) # Delay if self . delay_in_seconds : time . sleep ( self . delay_in_seconds ) request = self . client . generate ( model = self . model , prompt = prompt , max_tokens = 50 , num_generations = 1 , stop_sequences = [ \" \\n \" ]) label = request . generations [ 0 ] . text . strip () updated_topics [ topic ] = [( label , 1 )] + [( \"\" , 0 ) for _ in range ( 9 )] return updated_topics","title":"Cohere"},{"location":"api/representation/cohere.html#cohere","text":"Use the Cohere API to generate topic labels based on their generative model. Find more about their models here: https://docs.cohere.ai/docs Parameters: Name Type Description Default client A cohere.Client required model str Model to use within Cohere, defaults to \"xlarge\" . 'xlarge' prompt str The prompt to be used in the model. If no prompt is given, self.default_prompt_ is used instead. NOTE: Use \"[KEYWORDS]\" and \"[DOCUMENTS]\" in the prompt to decide where the keywords and documents need to be inserted. None delay_in_seconds float The delay in seconds between consecutive prompts in order to prevent RateLimitErrors. None Usage: To use this, you will need to install cohere first: pip install cohere Then, get yourself an API key and use Cohere's API as follows: import cohere from bertopic.representation import Cohere from bertopic import BERTopic # Create your representation model co = cohere . Client ( my_api_key ) representation_model = Cohere ( co ) # Use the representation model in BERTopic on top of the default pipeline topic_model = BERTopic ( representation_model = representation_model ) You can also use a custom prompt: prompt = \"I have the following documents: [DOCUMENTS]. What topic do they contain?\" representation_model = Cohere ( co , prompt = prompt ) Source code in bertopic\\representation\\_cohere.py class Cohere ( BaseRepresentation ): \"\"\" Use the Cohere API to generate topic labels based on their generative model. Find more about their models here: https://docs.cohere.ai/docs Arguments: client: A cohere.Client model: Model to use within Cohere, defaults to `\"xlarge\"`. prompt: The prompt to be used in the model. If no prompt is given, `self.default_prompt_` is used instead. NOTE: Use `\"[KEYWORDS]\"` and `\"[DOCUMENTS]\"` in the prompt to decide where the keywords and documents need to be inserted. delay_in_seconds: The delay in seconds between consecutive prompts in order to prevent RateLimitErrors. Usage: To use this, you will need to install cohere first: `pip install cohere` Then, get yourself an API key and use Cohere's API as follows: ```python import cohere from bertopic.representation import Cohere from bertopic import BERTopic # Create your representation model co = cohere.Client(my_api_key) representation_model = Cohere(co) # Use the representation model in BERTopic on top of the default pipeline topic_model = BERTopic(representation_model=representation_model) ``` You can also use a custom prompt: ```python prompt = \"I have the following documents: [DOCUMENTS]. What topic do they contain?\" representation_model = Cohere(co, prompt=prompt) ``` \"\"\" def __init__ ( self , client , model : str = \"xlarge\" , prompt : str = None , delay_in_seconds : float = None , ): self . client = client self . model = model self . prompt = prompt if prompt is not None else DEFAULT_PROMPT self . default_prompt_ = DEFAULT_PROMPT self . delay_in_seconds = delay_in_seconds def extract_topics ( self , topic_model , documents : pd . DataFrame , c_tf_idf : csr_matrix , topics : Mapping [ str , List [ Tuple [ str , float ]]] ) -> Mapping [ str , List [ Tuple [ str , float ]]]: \"\"\" Extract topics Arguments: topic_model: Not used documents: Not used c_tf_idf: Not used topics: The candidate topics as calculated with c-TF-IDF Returns: updated_topics: Updated topic representations \"\"\" # Extract the top 4 representative documents per topic repr_docs_mappings , _ , _ = topic_model . _extract_representative_docs ( c_tf_idf , documents , topics , 500 , 4 ) # Generate using Cohere's Language Model updated_topics = {} for topic , docs in repr_docs_mappings . items (): prompt = self . _create_prompt ( docs , topic , topics ) # Delay if self . delay_in_seconds : time . sleep ( self . delay_in_seconds ) request = self . client . generate ( model = self . model , prompt = prompt , max_tokens = 50 , num_generations = 1 , stop_sequences = [ \" \\n \" ]) label = request . generations [ 0 ] . text . strip () updated_topics [ topic ] = [( label , 1 )] + [( \"\" , 0 ) for _ in range ( 9 )] return updated_topics def _create_prompt ( self , docs , topic , topics ): keywords = list ( zip ( * topics [ topic ]))[ 0 ] # Use the Default Chat Prompt if self . prompt == self . prompt == DEFAULT_PROMPT : prompt = self . prompt . replace ( \"[KEYWORDS]\" , \" \" . join ( keywords )) prompt = self . _replace_documents ( prompt , docs ) # Use a custom prompt that leverages keywords, documents or both using # custom tags, namely [KEYWORDS] and [DOCUMENTS] respectively else : prompt = self . prompt if \"[KEYWORDS]\" in prompt : prompt = prompt . replace ( \"[KEYWORDS]\" , \" \" . join ( keywords )) if \"[DOCUMENTS]\" in prompt : prompt = self . _replace_documents ( prompt , docs ) return prompt @staticmethod def _replace_documents ( prompt , docs ): to_replace = \"\" for doc in docs : to_replace += f \"- { doc [: 255 ] } \\n \" prompt = prompt . replace ( \"[DOCUMENTS]\" , to_replace ) return prompt","title":"Cohere"},{"location":"api/representation/cohere.html#bertopic.representation._cohere.Cohere.extract_topics","text":"Extract topics Parameters: Name Type Description Default topic_model Not used required documents DataFrame Not used required c_tf_idf csr_matrix Not used required topics Mapping[str, List[Tuple[str, float]]] The candidate topics as calculated with c-TF-IDF required Returns: Type Description updated_topics Updated topic representations Source code in bertopic\\representation\\_cohere.py def extract_topics ( self , topic_model , documents : pd . DataFrame , c_tf_idf : csr_matrix , topics : Mapping [ str , List [ Tuple [ str , float ]]] ) -> Mapping [ str , List [ Tuple [ str , float ]]]: \"\"\" Extract topics Arguments: topic_model: Not used documents: Not used c_tf_idf: Not used topics: The candidate topics as calculated with c-TF-IDF Returns: updated_topics: Updated topic representations \"\"\" # Extract the top 4 representative documents per topic repr_docs_mappings , _ , _ = topic_model . _extract_representative_docs ( c_tf_idf , documents , topics , 500 , 4 ) # Generate using Cohere's Language Model updated_topics = {} for topic , docs in repr_docs_mappings . items (): prompt = self . _create_prompt ( docs , topic , topics ) # Delay if self . delay_in_seconds : time . sleep ( self . delay_in_seconds ) request = self . client . generate ( model = self . model , prompt = prompt , max_tokens = 50 , num_generations = 1 , stop_sequences = [ \" \\n \" ]) label = request . generations [ 0 ] . text . strip () updated_topics [ topic ] = [( label , 1 )] + [( \"\" , 0 ) for _ in range ( 9 )] return updated_topics","title":"extract_topics()"},{"location":"api/representation/generation.html","text":"TextGeneration \u00b6 Text2Text or text generation with transformers Parameters: Name Type Description Default model Union[str, pipeline] A transformers pipeline that should be initialized as \"text-generation\" for gpt-like models or \"text2text-generation\" for T5-like models. For example, pipeline('text-generation', model='gpt2') . If a string is passed, \"text-generation\" will be selected by default. required prompt str The prompt to be used in the model. If no prompt is given, self.default_prompt_ is used instead. NOTE: Use \"[KEYWORDS]\" and \"[DOCUMENTS]\" in the prompt to decide where the keywords and documents need to be inserted. None pipeline_kwargs Mapping[str, Any] Kwargs that you can pass to the transformers.pipeline when it is called. {} random_state int A random state to be passed to transformers.set_seed 42 Usage: To use a gpt-like model: from bertopic.representation import TextGeneration from bertopic import BERTopic # Create your representation model generator = pipeline ( 'text-generation' , model = 'gpt2' ) representation_model = TextGeneration ( generator ) # Use the representation model in BERTopic on top of the default pipeline topic_model = BERTo pic ( representation_model = representation_model ) You can use a custom prompt and decide where the keywords should be inserted by using the [KEYWORDS] or documents with thte [DOCUMENTS] tag: from bertopic.representation import TextGeneration prompt = \"I have a topic described by the following keywords: [KEYWORDS]. Based on the previous keywords, what is this topic about?\"\" # Create your representation model generator = pipeline ( 'text2text-generation' , model = 'google/flan-t5-base' ) representation_model = TextGeneration ( generator ) Source code in bertopic\\representation\\_textgeneration.py class TextGeneration ( BaseRepresentation ): \"\"\" Text2Text or text generation with transformers Arguments: model: A transformers pipeline that should be initialized as \"text-generation\" for gpt-like models or \"text2text-generation\" for T5-like models. For example, `pipeline('text-generation', model='gpt2')`. If a string is passed, \"text-generation\" will be selected by default. prompt: The prompt to be used in the model. If no prompt is given, `self.default_prompt_` is used instead. NOTE: Use `\"[KEYWORDS]\"` and `\"[DOCUMENTS]\"` in the prompt to decide where the keywords and documents need to be inserted. pipeline_kwargs: Kwargs that you can pass to the transformers.pipeline when it is called. random_state: A random state to be passed to `transformers.set_seed` Usage: To use a gpt-like model: ```python from bertopic.representation import TextGeneration from bertopic import BERTopic # Create your representation model generator = pipeline('text-generation', model='gpt2') representation_model = TextGeneration(generator) # Use the representation model in BERTopic on top of the default pipeline topic_model = BERTo pic(representation_model=representation_model) ``` You can use a custom prompt and decide where the keywords should be inserted by using the `[KEYWORDS]` or documents with thte `[DOCUMENTS]` tag: ```python from bertopic.representation import TextGeneration prompt = \"I have a topic described by the following keywords: [KEYWORDS]. Based on the previous keywords, what is this topic about?\"\" # Create your representation model generator = pipeline('text2text-generation', model='google/flan-t5-base') representation_model = TextGeneration(generator) ``` \"\"\" def __init__ ( self , model : Union [ str , pipeline ], prompt : str = None , pipeline_kwargs : Mapping [ str , Any ] = {}, random_state : int = 42 ): set_seed ( random_state ) if isinstance ( model , str ): self . model = pipeline ( \"text-generation\" , model = model ) elif isinstance ( model , Pipeline ): self . model = model else : raise ValueError ( \"Make sure that the HF model that you\" \"pass is either a string referring to a\" \"HF model or a `transformers.pipeline` object.\" ) self . prompt = prompt if prompt is not None else DEFAULT_PROMPT self . default_prompt_ = DEFAULT_PROMPT self . pipeline_kwargs = pipeline_kwargs def extract_topics ( self , topic_model , documents : pd . DataFrame , c_tf_idf : csr_matrix , topics : Mapping [ str , List [ Tuple [ str , float ]]] ) -> Mapping [ str , List [ Tuple [ str , float ]]]: \"\"\" Extract topic representations and return a single label Arguments: topic_model: A BERTopic model documents: Not used c_tf_idf: Not used topics: The candidate topics as calculated with c-TF-IDF Returns: updated_topics: Updated topic representations \"\"\" # Extract the top 4 representative documents per topic if self . prompt != DEFAULT_PROMPT and \"[DOCUMENTS]\" in self . prompt : repr_docs_mappings , _ , _ = topic_model . _extract_representative_docs ( c_tf_idf , documents , topics , 500 , 4 ) else : repr_docs_mappings = { topic : None for topic in topics . keys ()} updated_topics = {} for topic , topic_words in tqdm ( topics . items (), disable = not topic_model . verbose ): # Prepare prompt prompt = self . _create_prompt ( repr_docs_mappings [ topic ], topic , topics ) # Extract result from generator and use that as label topic_description = self . model ( prompt , ** self . pipeline_kwargs ) topic_description = [( description [ \"generated_text\" ] . replace ( prompt , \"\" ), 1 ) for description in topic_description ] if len ( topic_description ) < 10 : topic_description += [( \"\" , 0 ) for _ in range ( 10 - len ( topic_description ))] updated_topics [ topic ] = topic_description return updated_topics def _create_prompt ( self , docs , topic , topics ): keywords = \", \" . join ( list ( zip ( * topics [ topic ]))[ 0 ]) prompt = \"\" # Use the default prompt and replace keywords if self . prompt == DEFAULT_PROMPT : prompt += self . prompt . replace ( \"[KEYWORDS]\" , keywords ) # Use a prompt that leverages either keywords or documents in # a custom location else : if \"[KEYWORDS]\" in self . prompt : prompt += self . prompt . replace ( \"[KEYWORDS]\" , keywords ) if \"[DOCUMENTS]\" in self . prompt : to_replace = \"\" for doc in docs : to_replace += f \"- { doc [: 255 ] } \\n \" prompt += self . prompt . replace ( \"[DOCUMENTS]\" , to_replace ) return prompt extract_topics ( self , topic_model , documents , c_tf_idf , topics ) \u00b6 Extract topic representations and return a single label Parameters: Name Type Description Default topic_model A BERTopic model required documents DataFrame Not used required c_tf_idf csr_matrix Not used required topics Mapping[str, List[Tuple[str, float]]] The candidate topics as calculated with c-TF-IDF required Returns: Type Description updated_topics Updated topic representations Source code in bertopic\\representation\\_textgeneration.py def extract_topics ( self , topic_model , documents : pd . DataFrame , c_tf_idf : csr_matrix , topics : Mapping [ str , List [ Tuple [ str , float ]]] ) -> Mapping [ str , List [ Tuple [ str , float ]]]: \"\"\" Extract topic representations and return a single label Arguments: topic_model: A BERTopic model documents: Not used c_tf_idf: Not used topics: The candidate topics as calculated with c-TF-IDF Returns: updated_topics: Updated topic representations \"\"\" # Extract the top 4 representative documents per topic if self . prompt != DEFAULT_PROMPT and \"[DOCUMENTS]\" in self . prompt : repr_docs_mappings , _ , _ = topic_model . _extract_representative_docs ( c_tf_idf , documents , topics , 500 , 4 ) else : repr_docs_mappings = { topic : None for topic in topics . keys ()} updated_topics = {} for topic , topic_words in tqdm ( topics . items (), disable = not topic_model . verbose ): # Prepare prompt prompt = self . _create_prompt ( repr_docs_mappings [ topic ], topic , topics ) # Extract result from generator and use that as label topic_description = self . model ( prompt , ** self . pipeline_kwargs ) topic_description = [( description [ \"generated_text\" ] . replace ( prompt , \"\" ), 1 ) for description in topic_description ] if len ( topic_description ) < 10 : topic_description += [( \"\" , 0 ) for _ in range ( 10 - len ( topic_description ))] updated_topics [ topic ] = topic_description return updated_topics","title":"\ud83e\udd17 Transformers"},{"location":"api/representation/generation.html#textgeneration","text":"Text2Text or text generation with transformers Parameters: Name Type Description Default model Union[str, pipeline] A transformers pipeline that should be initialized as \"text-generation\" for gpt-like models or \"text2text-generation\" for T5-like models. For example, pipeline('text-generation', model='gpt2') . If a string is passed, \"text-generation\" will be selected by default. required prompt str The prompt to be used in the model. If no prompt is given, self.default_prompt_ is used instead. NOTE: Use \"[KEYWORDS]\" and \"[DOCUMENTS]\" in the prompt to decide where the keywords and documents need to be inserted. None pipeline_kwargs Mapping[str, Any] Kwargs that you can pass to the transformers.pipeline when it is called. {} random_state int A random state to be passed to transformers.set_seed 42 Usage: To use a gpt-like model: from bertopic.representation import TextGeneration from bertopic import BERTopic # Create your representation model generator = pipeline ( 'text-generation' , model = 'gpt2' ) representation_model = TextGeneration ( generator ) # Use the representation model in BERTopic on top of the default pipeline topic_model = BERTo pic ( representation_model = representation_model ) You can use a custom prompt and decide where the keywords should be inserted by using the [KEYWORDS] or documents with thte [DOCUMENTS] tag: from bertopic.representation import TextGeneration prompt = \"I have a topic described by the following keywords: [KEYWORDS]. Based on the previous keywords, what is this topic about?\"\" # Create your representation model generator = pipeline ( 'text2text-generation' , model = 'google/flan-t5-base' ) representation_model = TextGeneration ( generator ) Source code in bertopic\\representation\\_textgeneration.py class TextGeneration ( BaseRepresentation ): \"\"\" Text2Text or text generation with transformers Arguments: model: A transformers pipeline that should be initialized as \"text-generation\" for gpt-like models or \"text2text-generation\" for T5-like models. For example, `pipeline('text-generation', model='gpt2')`. If a string is passed, \"text-generation\" will be selected by default. prompt: The prompt to be used in the model. If no prompt is given, `self.default_prompt_` is used instead. NOTE: Use `\"[KEYWORDS]\"` and `\"[DOCUMENTS]\"` in the prompt to decide where the keywords and documents need to be inserted. pipeline_kwargs: Kwargs that you can pass to the transformers.pipeline when it is called. random_state: A random state to be passed to `transformers.set_seed` Usage: To use a gpt-like model: ```python from bertopic.representation import TextGeneration from bertopic import BERTopic # Create your representation model generator = pipeline('text-generation', model='gpt2') representation_model = TextGeneration(generator) # Use the representation model in BERTopic on top of the default pipeline topic_model = BERTo pic(representation_model=representation_model) ``` You can use a custom prompt and decide where the keywords should be inserted by using the `[KEYWORDS]` or documents with thte `[DOCUMENTS]` tag: ```python from bertopic.representation import TextGeneration prompt = \"I have a topic described by the following keywords: [KEYWORDS]. Based on the previous keywords, what is this topic about?\"\" # Create your representation model generator = pipeline('text2text-generation', model='google/flan-t5-base') representation_model = TextGeneration(generator) ``` \"\"\" def __init__ ( self , model : Union [ str , pipeline ], prompt : str = None , pipeline_kwargs : Mapping [ str , Any ] = {}, random_state : int = 42 ): set_seed ( random_state ) if isinstance ( model , str ): self . model = pipeline ( \"text-generation\" , model = model ) elif isinstance ( model , Pipeline ): self . model = model else : raise ValueError ( \"Make sure that the HF model that you\" \"pass is either a string referring to a\" \"HF model or a `transformers.pipeline` object.\" ) self . prompt = prompt if prompt is not None else DEFAULT_PROMPT self . default_prompt_ = DEFAULT_PROMPT self . pipeline_kwargs = pipeline_kwargs def extract_topics ( self , topic_model , documents : pd . DataFrame , c_tf_idf : csr_matrix , topics : Mapping [ str , List [ Tuple [ str , float ]]] ) -> Mapping [ str , List [ Tuple [ str , float ]]]: \"\"\" Extract topic representations and return a single label Arguments: topic_model: A BERTopic model documents: Not used c_tf_idf: Not used topics: The candidate topics as calculated with c-TF-IDF Returns: updated_topics: Updated topic representations \"\"\" # Extract the top 4 representative documents per topic if self . prompt != DEFAULT_PROMPT and \"[DOCUMENTS]\" in self . prompt : repr_docs_mappings , _ , _ = topic_model . _extract_representative_docs ( c_tf_idf , documents , topics , 500 , 4 ) else : repr_docs_mappings = { topic : None for topic in topics . keys ()} updated_topics = {} for topic , topic_words in tqdm ( topics . items (), disable = not topic_model . verbose ): # Prepare prompt prompt = self . _create_prompt ( repr_docs_mappings [ topic ], topic , topics ) # Extract result from generator and use that as label topic_description = self . model ( prompt , ** self . pipeline_kwargs ) topic_description = [( description [ \"generated_text\" ] . replace ( prompt , \"\" ), 1 ) for description in topic_description ] if len ( topic_description ) < 10 : topic_description += [( \"\" , 0 ) for _ in range ( 10 - len ( topic_description ))] updated_topics [ topic ] = topic_description return updated_topics def _create_prompt ( self , docs , topic , topics ): keywords = \", \" . join ( list ( zip ( * topics [ topic ]))[ 0 ]) prompt = \"\" # Use the default prompt and replace keywords if self . prompt == DEFAULT_PROMPT : prompt += self . prompt . replace ( \"[KEYWORDS]\" , keywords ) # Use a prompt that leverages either keywords or documents in # a custom location else : if \"[KEYWORDS]\" in self . prompt : prompt += self . prompt . replace ( \"[KEYWORDS]\" , keywords ) if \"[DOCUMENTS]\" in self . prompt : to_replace = \"\" for doc in docs : to_replace += f \"- { doc [: 255 ] } \\n \" prompt += self . prompt . replace ( \"[DOCUMENTS]\" , to_replace ) return prompt","title":"TextGeneration"},{"location":"api/representation/generation.html#bertopic.representation._textgeneration.TextGeneration.extract_topics","text":"Extract topic representations and return a single label Parameters: Name Type Description Default topic_model A BERTopic model required documents DataFrame Not used required c_tf_idf csr_matrix Not used required topics Mapping[str, List[Tuple[str, float]]] The candidate topics as calculated with c-TF-IDF required Returns: Type Description updated_topics Updated topic representations Source code in bertopic\\representation\\_textgeneration.py def extract_topics ( self , topic_model , documents : pd . DataFrame , c_tf_idf : csr_matrix , topics : Mapping [ str , List [ Tuple [ str , float ]]] ) -> Mapping [ str , List [ Tuple [ str , float ]]]: \"\"\" Extract topic representations and return a single label Arguments: topic_model: A BERTopic model documents: Not used c_tf_idf: Not used topics: The candidate topics as calculated with c-TF-IDF Returns: updated_topics: Updated topic representations \"\"\" # Extract the top 4 representative documents per topic if self . prompt != DEFAULT_PROMPT and \"[DOCUMENTS]\" in self . prompt : repr_docs_mappings , _ , _ = topic_model . _extract_representative_docs ( c_tf_idf , documents , topics , 500 , 4 ) else : repr_docs_mappings = { topic : None for topic in topics . keys ()} updated_topics = {} for topic , topic_words in tqdm ( topics . items (), disable = not topic_model . verbose ): # Prepare prompt prompt = self . _create_prompt ( repr_docs_mappings [ topic ], topic , topics ) # Extract result from generator and use that as label topic_description = self . model ( prompt , ** self . pipeline_kwargs ) topic_description = [( description [ \"generated_text\" ] . replace ( prompt , \"\" ), 1 ) for description in topic_description ] if len ( topic_description ) < 10 : topic_description += [( \"\" , 0 ) for _ in range ( 10 - len ( topic_description ))] updated_topics [ topic ] = topic_description return updated_topics","title":"extract_topics()"},{"location":"api/representation/keybert.html","text":"KeyBERTInspired \u00b6 Source code in bertopic\\representation\\_keybert.py class KeyBERTInspired ( BaseRepresentation ): def __init__ ( self , top_n_words : int = 10 , nr_repr_docs : int = 5 , nr_samples : int = 500 , nr_candidate_words : int = 100 , random_state : int = 42 ): \"\"\" Use a KeyBERT-like model to fine-tune the topic representations The algorithm follows KeyBERT but does some optimization in order to speed up inference. The steps are as follows. First, we extract the top n representative documents per topic. To extract the representative documents, we randomly sample a number of candidate documents per cluster which is controlled by the `nr_samples` parameter. Then, the top n representative documents are extracted by calculating the c-TF-IDF representation for the candidate documents and finding, through cosine similarity, which are closest to the topic c-TF-IDF representation. Next, the top n words per topic are extracted based on their c-TF-IDF representation, which is controlled by the `nr_repr_docs` parameter. Then, we extract the embeddings for words and representative documents and create topic embeddings by averaging the representative documents. Finally, the most similar words to each topic are extracted by calculating the cosine similarity between word and topic embeddings. Arguments: top_n_words: The top n words to extract per topic. nr_repr_docs: The number of representative documents to extract per cluster. nr_samples: The number of candidate documents to extract per cluster. nr_candidate_words: The number of candidate words per cluster. random_state: The random state for randomly sampling candidate documents. Usage: ```python from bertopic.representation import KeyBERTInspired from bertopic import BERTopic # Create your representation model representation_model = KeyBERTInspired() # Use the representation model in BERTopic on top of the default pipeline topic_model = BERTopic(representation_model=representation_model) ``` \"\"\" self . top_n_words = top_n_words self . nr_repr_docs = nr_repr_docs self . nr_samples = nr_samples self . nr_candidate_words = nr_candidate_words self . random_state = random_state def extract_topics ( self , topic_model , documents : pd . DataFrame , c_tf_idf : csr_matrix , topics : Mapping [ str , List [ Tuple [ str , float ]]] ) -> Mapping [ str , List [ Tuple [ str , float ]]]: \"\"\" Extract topics Arguments: topic_model: A BERTopic model documents: All input documents c_tf_idf: The topic c-TF-IDF representation topics: The candidate topics as calculated with c-TF-IDF Returns: updated_topics: Updated topic representations \"\"\" # We extract the top n representative documents per class _ , representative_docs , repr_doc_indices = topic_model . _extract_representative_docs ( c_tf_idf , documents , topics , self . nr_samples , self . nr_repr_docs ) # We extract the top n words per class topics = self . _extract_candidate_words ( topic_model , c_tf_idf , topics ) # We calculate the similarity between word and document embeddings and create # topic embeddings from the representative document embeddings sim_matrix , words = self . _extract_embeddings ( topic_model , topics , representative_docs , repr_doc_indices ) # Find the best matching words based on the similarity matrix for each topic updated_topics = self . _extract_top_words ( words , topics , sim_matrix ) return updated_topics def _extract_candidate_words ( self , topic_model , c_tf_idf : csr_matrix , topics : Mapping [ str , List [ Tuple [ str , float ]]] ) -> Mapping [ str , List [ Tuple [ str , float ]]]: \"\"\" For each topic, extract candidate words based on the c-TF-IDF representation. Arguments: topic_model: A BERTopic model c_tf_idf: The topic c-TF-IDF representation topics: The top words per topic Returns: topics: The `self.top_n_words` per topic \"\"\" labels = [ int ( label ) for label in sorted ( list ( topics . keys ()))] # Scikit-Learn Deprecation: get_feature_names is deprecated in 1.0 # and will be removed in 1.2. Please use get_feature_names_out instead. if version . parse ( sklearn_version ) >= version . parse ( \"1.0.0\" ): words = topic_model . vectorizer_model . get_feature_names_out () else : words = topic_model . vectorizer_model . get_feature_names () indices = topic_model . _top_n_idx_sparse ( c_tf_idf , self . nr_candidate_words ) scores = topic_model . _top_n_values_sparse ( c_tf_idf , indices ) sorted_indices = np . argsort ( scores , 1 ) indices = np . take_along_axis ( indices , sorted_indices , axis = 1 ) scores = np . take_along_axis ( scores , sorted_indices , axis = 1 ) # Get top 30 words per topic based on c-TF-IDF score topics = { label : [( words [ word_index ], score ) if word_index is not None and score > 0 else ( \"\" , 0.00001 ) for word_index , score in zip ( indices [ index ][:: - 1 ], scores [ index ][:: - 1 ]) ] for index , label in enumerate ( labels )} topics = { label : list ( zip ( * values [: self . nr_candidate_words ]))[ 0 ] for label , values in topics . items ()} return topics def _extract_embeddings ( self , topic_model , topics : Mapping [ str , List [ Tuple [ str , float ]]], representative_docs : List [ str ], repr_doc_indices : List [ List [ int ]] ) -> Union [ np . ndarray , List [ str ]]: \"\"\" Extract the representative document embeddings and create topic embeddings. Then extract word embeddings and calculate the cosine similarity between topic embeddings and the word embeddings. Topic embeddings are the average of representative document embeddings. Arguments: topic_model: A BERTopic model topics: The top words per topic representative_docs: A flat list of representative documents repr_doc_indices: The indices of representative documents that belong to each topic Returns: sim: The similarity matrix between word and topic embeddings vocab: The complete vocabulary of input documents \"\"\" # Calculate representative docs embeddings and create topic embeddings repr_embeddings = topic_model . _extract_embeddings ( representative_docs , method = \"document\" , verbose = False ) topic_embeddings = [ np . mean ( repr_embeddings [ i [ 0 ]: i [ - 1 ] + 1 ], axis = 0 ) for i in repr_doc_indices ] # Calculate word embeddings and extract best matching with updated topic_embeddings vocab = list ( set ([ word for words in topics . values () for word in words ])) word_embeddings = topic_model . _extract_embeddings ( vocab , method = \"document\" , verbose = False ) sim = cosine_similarity ( topic_embeddings , word_embeddings ) return sim , vocab def _extract_top_words ( self , vocab : List [ str ], topics : Mapping [ str , List [ Tuple [ str , float ]]], sim : np . ndarray ) -> Mapping [ str , List [ Tuple [ str , float ]]]: \"\"\" Extract the top n words per topic based on the similarity matrix between topics and words. Arguments: vocab: The complete vocabulary of input documents labels: All topic labels topics: The top words per topic sim: The similarity matrix between word and topic embeddings Returns: updated_topics: The updated topic representations \"\"\" labels = [ int ( label ) for label in sorted ( list ( topics . keys ()))] updated_topics = {} for i , topic in enumerate ( labels ): indices = [ vocab . index ( word ) for word in topics [ topic ]] values = sim [:, indices ][ i ] word_indices = [ indices [ index ] for index in np . argsort ( values )[ - self . top_n_words :]] updated_topics [ topic ] = [( vocab [ index ], val ) for val , index in zip ( np . sort ( values )[ - self . top_n_words :], word_indices )][:: - 1 ] return updated_topics __init__ ( self , top_n_words = 10 , nr_repr_docs = 5 , nr_samples = 500 , nr_candidate_words = 100 , random_state = 42 ) special \u00b6 Use a KeyBERT-like model to fine-tune the topic representations The algorithm follows KeyBERT but does some optimization in order to speed up inference. The steps are as follows. First, we extract the top n representative documents per topic. To extract the representative documents, we randomly sample a number of candidate documents per cluster which is controlled by the nr_samples parameter. Then, the top n representative documents are extracted by calculating the c-TF-IDF representation for the candidate documents and finding, through cosine similarity, which are closest to the topic c-TF-IDF representation. Next, the top n words per topic are extracted based on their c-TF-IDF representation, which is controlled by the nr_repr_docs parameter. Then, we extract the embeddings for words and representative documents and create topic embeddings by averaging the representative documents. Finally, the most similar words to each topic are extracted by calculating the cosine similarity between word and topic embeddings. Parameters: Name Type Description Default top_n_words int The top n words to extract per topic. 10 nr_repr_docs int The number of representative documents to extract per cluster. 5 nr_samples int The number of candidate documents to extract per cluster. 500 nr_candidate_words int The number of candidate words per cluster. 100 random_state int The random state for randomly sampling candidate documents. 42 Usage: from bertopic.representation import KeyBERTInspired from bertopic import BERTopic # Create your representation model representation_model = KeyBERTInspired () # Use the representation model in BERTopic on top of the default pipeline topic_model = BERTopic ( representation_model = representation_model ) Source code in bertopic\\representation\\_keybert.py def __init__ ( self , top_n_words : int = 10 , nr_repr_docs : int = 5 , nr_samples : int = 500 , nr_candidate_words : int = 100 , random_state : int = 42 ): \"\"\" Use a KeyBERT-like model to fine-tune the topic representations The algorithm follows KeyBERT but does some optimization in order to speed up inference. The steps are as follows. First, we extract the top n representative documents per topic. To extract the representative documents, we randomly sample a number of candidate documents per cluster which is controlled by the `nr_samples` parameter. Then, the top n representative documents are extracted by calculating the c-TF-IDF representation for the candidate documents and finding, through cosine similarity, which are closest to the topic c-TF-IDF representation. Next, the top n words per topic are extracted based on their c-TF-IDF representation, which is controlled by the `nr_repr_docs` parameter. Then, we extract the embeddings for words and representative documents and create topic embeddings by averaging the representative documents. Finally, the most similar words to each topic are extracted by calculating the cosine similarity between word and topic embeddings. Arguments: top_n_words: The top n words to extract per topic. nr_repr_docs: The number of representative documents to extract per cluster. nr_samples: The number of candidate documents to extract per cluster. nr_candidate_words: The number of candidate words per cluster. random_state: The random state for randomly sampling candidate documents. Usage: ```python from bertopic.representation import KeyBERTInspired from bertopic import BERTopic # Create your representation model representation_model = KeyBERTInspired() # Use the representation model in BERTopic on top of the default pipeline topic_model = BERTopic(representation_model=representation_model) ``` \"\"\" self . top_n_words = top_n_words self . nr_repr_docs = nr_repr_docs self . nr_samples = nr_samples self . nr_candidate_words = nr_candidate_words self . random_state = random_state extract_topics ( self , topic_model , documents , c_tf_idf , topics ) \u00b6 Extract topics Parameters: Name Type Description Default topic_model A BERTopic model required documents DataFrame All input documents required c_tf_idf csr_matrix The topic c-TF-IDF representation required topics Mapping[str, List[Tuple[str, float]]] The candidate topics as calculated with c-TF-IDF required Returns: Type Description updated_topics Updated topic representations Source code in bertopic\\representation\\_keybert.py def extract_topics ( self , topic_model , documents : pd . DataFrame , c_tf_idf : csr_matrix , topics : Mapping [ str , List [ Tuple [ str , float ]]] ) -> Mapping [ str , List [ Tuple [ str , float ]]]: \"\"\" Extract topics Arguments: topic_model: A BERTopic model documents: All input documents c_tf_idf: The topic c-TF-IDF representation topics: The candidate topics as calculated with c-TF-IDF Returns: updated_topics: Updated topic representations \"\"\" # We extract the top n representative documents per class _ , representative_docs , repr_doc_indices = topic_model . _extract_representative_docs ( c_tf_idf , documents , topics , self . nr_samples , self . nr_repr_docs ) # We extract the top n words per class topics = self . _extract_candidate_words ( topic_model , c_tf_idf , topics ) # We calculate the similarity between word and document embeddings and create # topic embeddings from the representative document embeddings sim_matrix , words = self . _extract_embeddings ( topic_model , topics , representative_docs , repr_doc_indices ) # Find the best matching words based on the similarity matrix for each topic updated_topics = self . _extract_top_words ( words , topics , sim_matrix ) return updated_topics","title":"KeyBERT"},{"location":"api/representation/keybert.html#keybertinspired","text":"Source code in bertopic\\representation\\_keybert.py class KeyBERTInspired ( BaseRepresentation ): def __init__ ( self , top_n_words : int = 10 , nr_repr_docs : int = 5 , nr_samples : int = 500 , nr_candidate_words : int = 100 , random_state : int = 42 ): \"\"\" Use a KeyBERT-like model to fine-tune the topic representations The algorithm follows KeyBERT but does some optimization in order to speed up inference. The steps are as follows. First, we extract the top n representative documents per topic. To extract the representative documents, we randomly sample a number of candidate documents per cluster which is controlled by the `nr_samples` parameter. Then, the top n representative documents are extracted by calculating the c-TF-IDF representation for the candidate documents and finding, through cosine similarity, which are closest to the topic c-TF-IDF representation. Next, the top n words per topic are extracted based on their c-TF-IDF representation, which is controlled by the `nr_repr_docs` parameter. Then, we extract the embeddings for words and representative documents and create topic embeddings by averaging the representative documents. Finally, the most similar words to each topic are extracted by calculating the cosine similarity between word and topic embeddings. Arguments: top_n_words: The top n words to extract per topic. nr_repr_docs: The number of representative documents to extract per cluster. nr_samples: The number of candidate documents to extract per cluster. nr_candidate_words: The number of candidate words per cluster. random_state: The random state for randomly sampling candidate documents. Usage: ```python from bertopic.representation import KeyBERTInspired from bertopic import BERTopic # Create your representation model representation_model = KeyBERTInspired() # Use the representation model in BERTopic on top of the default pipeline topic_model = BERTopic(representation_model=representation_model) ``` \"\"\" self . top_n_words = top_n_words self . nr_repr_docs = nr_repr_docs self . nr_samples = nr_samples self . nr_candidate_words = nr_candidate_words self . random_state = random_state def extract_topics ( self , topic_model , documents : pd . DataFrame , c_tf_idf : csr_matrix , topics : Mapping [ str , List [ Tuple [ str , float ]]] ) -> Mapping [ str , List [ Tuple [ str , float ]]]: \"\"\" Extract topics Arguments: topic_model: A BERTopic model documents: All input documents c_tf_idf: The topic c-TF-IDF representation topics: The candidate topics as calculated with c-TF-IDF Returns: updated_topics: Updated topic representations \"\"\" # We extract the top n representative documents per class _ , representative_docs , repr_doc_indices = topic_model . _extract_representative_docs ( c_tf_idf , documents , topics , self . nr_samples , self . nr_repr_docs ) # We extract the top n words per class topics = self . _extract_candidate_words ( topic_model , c_tf_idf , topics ) # We calculate the similarity between word and document embeddings and create # topic embeddings from the representative document embeddings sim_matrix , words = self . _extract_embeddings ( topic_model , topics , representative_docs , repr_doc_indices ) # Find the best matching words based on the similarity matrix for each topic updated_topics = self . _extract_top_words ( words , topics , sim_matrix ) return updated_topics def _extract_candidate_words ( self , topic_model , c_tf_idf : csr_matrix , topics : Mapping [ str , List [ Tuple [ str , float ]]] ) -> Mapping [ str , List [ Tuple [ str , float ]]]: \"\"\" For each topic, extract candidate words based on the c-TF-IDF representation. Arguments: topic_model: A BERTopic model c_tf_idf: The topic c-TF-IDF representation topics: The top words per topic Returns: topics: The `self.top_n_words` per topic \"\"\" labels = [ int ( label ) for label in sorted ( list ( topics . keys ()))] # Scikit-Learn Deprecation: get_feature_names is deprecated in 1.0 # and will be removed in 1.2. Please use get_feature_names_out instead. if version . parse ( sklearn_version ) >= version . parse ( \"1.0.0\" ): words = topic_model . vectorizer_model . get_feature_names_out () else : words = topic_model . vectorizer_model . get_feature_names () indices = topic_model . _top_n_idx_sparse ( c_tf_idf , self . nr_candidate_words ) scores = topic_model . _top_n_values_sparse ( c_tf_idf , indices ) sorted_indices = np . argsort ( scores , 1 ) indices = np . take_along_axis ( indices , sorted_indices , axis = 1 ) scores = np . take_along_axis ( scores , sorted_indices , axis = 1 ) # Get top 30 words per topic based on c-TF-IDF score topics = { label : [( words [ word_index ], score ) if word_index is not None and score > 0 else ( \"\" , 0.00001 ) for word_index , score in zip ( indices [ index ][:: - 1 ], scores [ index ][:: - 1 ]) ] for index , label in enumerate ( labels )} topics = { label : list ( zip ( * values [: self . nr_candidate_words ]))[ 0 ] for label , values in topics . items ()} return topics def _extract_embeddings ( self , topic_model , topics : Mapping [ str , List [ Tuple [ str , float ]]], representative_docs : List [ str ], repr_doc_indices : List [ List [ int ]] ) -> Union [ np . ndarray , List [ str ]]: \"\"\" Extract the representative document embeddings and create topic embeddings. Then extract word embeddings and calculate the cosine similarity between topic embeddings and the word embeddings. Topic embeddings are the average of representative document embeddings. Arguments: topic_model: A BERTopic model topics: The top words per topic representative_docs: A flat list of representative documents repr_doc_indices: The indices of representative documents that belong to each topic Returns: sim: The similarity matrix between word and topic embeddings vocab: The complete vocabulary of input documents \"\"\" # Calculate representative docs embeddings and create topic embeddings repr_embeddings = topic_model . _extract_embeddings ( representative_docs , method = \"document\" , verbose = False ) topic_embeddings = [ np . mean ( repr_embeddings [ i [ 0 ]: i [ - 1 ] + 1 ], axis = 0 ) for i in repr_doc_indices ] # Calculate word embeddings and extract best matching with updated topic_embeddings vocab = list ( set ([ word for words in topics . values () for word in words ])) word_embeddings = topic_model . _extract_embeddings ( vocab , method = \"document\" , verbose = False ) sim = cosine_similarity ( topic_embeddings , word_embeddings ) return sim , vocab def _extract_top_words ( self , vocab : List [ str ], topics : Mapping [ str , List [ Tuple [ str , float ]]], sim : np . ndarray ) -> Mapping [ str , List [ Tuple [ str , float ]]]: \"\"\" Extract the top n words per topic based on the similarity matrix between topics and words. Arguments: vocab: The complete vocabulary of input documents labels: All topic labels topics: The top words per topic sim: The similarity matrix between word and topic embeddings Returns: updated_topics: The updated topic representations \"\"\" labels = [ int ( label ) for label in sorted ( list ( topics . keys ()))] updated_topics = {} for i , topic in enumerate ( labels ): indices = [ vocab . index ( word ) for word in topics [ topic ]] values = sim [:, indices ][ i ] word_indices = [ indices [ index ] for index in np . argsort ( values )[ - self . top_n_words :]] updated_topics [ topic ] = [( vocab [ index ], val ) for val , index in zip ( np . sort ( values )[ - self . top_n_words :], word_indices )][:: - 1 ] return updated_topics","title":"KeyBERTInspired"},{"location":"api/representation/keybert.html#bertopic.representation._keybert.KeyBERTInspired.__init__","text":"Use a KeyBERT-like model to fine-tune the topic representations The algorithm follows KeyBERT but does some optimization in order to speed up inference. The steps are as follows. First, we extract the top n representative documents per topic. To extract the representative documents, we randomly sample a number of candidate documents per cluster which is controlled by the nr_samples parameter. Then, the top n representative documents are extracted by calculating the c-TF-IDF representation for the candidate documents and finding, through cosine similarity, which are closest to the topic c-TF-IDF representation. Next, the top n words per topic are extracted based on their c-TF-IDF representation, which is controlled by the nr_repr_docs parameter. Then, we extract the embeddings for words and representative documents and create topic embeddings by averaging the representative documents. Finally, the most similar words to each topic are extracted by calculating the cosine similarity between word and topic embeddings. Parameters: Name Type Description Default top_n_words int The top n words to extract per topic. 10 nr_repr_docs int The number of representative documents to extract per cluster. 5 nr_samples int The number of candidate documents to extract per cluster. 500 nr_candidate_words int The number of candidate words per cluster. 100 random_state int The random state for randomly sampling candidate documents. 42 Usage: from bertopic.representation import KeyBERTInspired from bertopic import BERTopic # Create your representation model representation_model = KeyBERTInspired () # Use the representation model in BERTopic on top of the default pipeline topic_model = BERTopic ( representation_model = representation_model ) Source code in bertopic\\representation\\_keybert.py def __init__ ( self , top_n_words : int = 10 , nr_repr_docs : int = 5 , nr_samples : int = 500 , nr_candidate_words : int = 100 , random_state : int = 42 ): \"\"\" Use a KeyBERT-like model to fine-tune the topic representations The algorithm follows KeyBERT but does some optimization in order to speed up inference. The steps are as follows. First, we extract the top n representative documents per topic. To extract the representative documents, we randomly sample a number of candidate documents per cluster which is controlled by the `nr_samples` parameter. Then, the top n representative documents are extracted by calculating the c-TF-IDF representation for the candidate documents and finding, through cosine similarity, which are closest to the topic c-TF-IDF representation. Next, the top n words per topic are extracted based on their c-TF-IDF representation, which is controlled by the `nr_repr_docs` parameter. Then, we extract the embeddings for words and representative documents and create topic embeddings by averaging the representative documents. Finally, the most similar words to each topic are extracted by calculating the cosine similarity between word and topic embeddings. Arguments: top_n_words: The top n words to extract per topic. nr_repr_docs: The number of representative documents to extract per cluster. nr_samples: The number of candidate documents to extract per cluster. nr_candidate_words: The number of candidate words per cluster. random_state: The random state for randomly sampling candidate documents. Usage: ```python from bertopic.representation import KeyBERTInspired from bertopic import BERTopic # Create your representation model representation_model = KeyBERTInspired() # Use the representation model in BERTopic on top of the default pipeline topic_model = BERTopic(representation_model=representation_model) ``` \"\"\" self . top_n_words = top_n_words self . nr_repr_docs = nr_repr_docs self . nr_samples = nr_samples self . nr_candidate_words = nr_candidate_words self . random_state = random_state","title":"__init__()"},{"location":"api/representation/keybert.html#bertopic.representation._keybert.KeyBERTInspired.extract_topics","text":"Extract topics Parameters: Name Type Description Default topic_model A BERTopic model required documents DataFrame All input documents required c_tf_idf csr_matrix The topic c-TF-IDF representation required topics Mapping[str, List[Tuple[str, float]]] The candidate topics as calculated with c-TF-IDF required Returns: Type Description updated_topics Updated topic representations Source code in bertopic\\representation\\_keybert.py def extract_topics ( self , topic_model , documents : pd . DataFrame , c_tf_idf : csr_matrix , topics : Mapping [ str , List [ Tuple [ str , float ]]] ) -> Mapping [ str , List [ Tuple [ str , float ]]]: \"\"\" Extract topics Arguments: topic_model: A BERTopic model documents: All input documents c_tf_idf: The topic c-TF-IDF representation topics: The candidate topics as calculated with c-TF-IDF Returns: updated_topics: Updated topic representations \"\"\" # We extract the top n representative documents per class _ , representative_docs , repr_doc_indices = topic_model . _extract_representative_docs ( c_tf_idf , documents , topics , self . nr_samples , self . nr_repr_docs ) # We extract the top n words per class topics = self . _extract_candidate_words ( topic_model , c_tf_idf , topics ) # We calculate the similarity between word and document embeddings and create # topic embeddings from the representative document embeddings sim_matrix , words = self . _extract_embeddings ( topic_model , topics , representative_docs , repr_doc_indices ) # Find the best matching words based on the similarity matrix for each topic updated_topics = self . _extract_top_words ( words , topics , sim_matrix ) return updated_topics","title":"extract_topics()"},{"location":"api/representation/langchain.html","text":"LangChain \u00b6 Using chains in langchain to generate topic labels. Currently, only chains from question answering is implemented. See: https://langchain.readthedocs.io/en/latest/modules/chains/combine_docs_examples/question_answering.html Parameters: Name Type Description Default chain A langchain chain that has two input parameters, input_documents and query . required prompt str The prompt to be used in the model. If no prompt is given, self.default_prompt_ is used instead. None Usage: To use this, you will need to install the langchain package first. Additionally, you will need an underlying LLM to support langchain, like openai: pip install langchain pip install openai Then, you can create your chain as follows: from langchain.chains.question_answering import load_qa_chain from langchain.llms import OpenAI chain = load_qa_chain ( OpenAI ( temperature = 0 , openai_api_key = my_openai_api_key ), chain_type = \"stuff\" ) Finally, you can pass the chain to BERTopic as follows: from bertopic.representation import LangChain # Create your representation model representation_model = LangChain ( chain ) # Use the representation model in BERTopic on top of the default pipeline topic_model = BERTopic ( representation_model = representation_model ) You can also use a custom prompt: prompt = \"What are these documents about? Please give a single label.\" representation_model = LangChain ( chain , prompt = prompt ) Source code in bertopic\\representation\\_langchain.py class LangChain ( BaseRepresentation ): \"\"\" Using chains in langchain to generate topic labels. Currently, only chains from question answering is implemented. See: https://langchain.readthedocs.io/en/latest/modules/chains/combine_docs_examples/question_answering.html Arguments: chain: A langchain chain that has two input parameters, `input_documents` and `query`. prompt: The prompt to be used in the model. If no prompt is given, `self.default_prompt_` is used instead. Usage: To use this, you will need to install the langchain package first. Additionally, you will need an underlying LLM to support langchain, like openai: `pip install langchain` `pip install openai` Then, you can create your chain as follows: ```python from langchain.chains.question_answering import load_qa_chain from langchain.llms import OpenAI chain = load_qa_chain(OpenAI(temperature=0, openai_api_key=my_openai_api_key), chain_type=\"stuff\") ``` Finally, you can pass the chain to BERTopic as follows: ```python from bertopic.representation import LangChain # Create your representation model representation_model = LangChain(chain) # Use the representation model in BERTopic on top of the default pipeline topic_model = BERTopic(representation_model=representation_model) ``` You can also use a custom prompt: ```python prompt = \"What are these documents about? Please give a single label.\" representation_model = LangChain(chain, prompt=prompt) ``` \"\"\" def __init__ ( self , chain , prompt : str = None , ): self . chain = chain self . prompt = prompt if prompt is not None else DEFAULT_PROMPT self . default_prompt_ = DEFAULT_PROMPT def extract_topics ( self , topic_model , documents : pd . DataFrame , c_tf_idf : csr_matrix , topics : Mapping [ str , List [ Tuple [ str , float ]]] ) -> Mapping [ str , List [ Tuple [ str , float ]]]: \"\"\" Extract topics Arguments: topic_model: A BERTopic model documents: All input documents c_tf_idf: The topic c-TF-IDF representation topics: The candidate topics as calculated with c-TF-IDF Returns: updated_topics: Updated topic representations \"\"\" # Extract the top 4 representative documents per topic repr_docs_mappings , _ , _ = topic_model . _extract_representative_docs ( c_tf_idf , documents , topics , 500 , 4 ) # Generate label using langchain updated_topics = {} for topic , docs in repr_docs_mappings . items (): chain_docs = [ Document ( page_content = doc [: 1000 ]) for doc in docs ] label = self . chain . run ( input_documents = chain_docs , question = self . prompt ) . strip () updated_topics [ topic ] = [( label , 1 )] + [( \"\" , 0 ) for _ in range ( 9 )] return updated_topics extract_topics ( self , topic_model , documents , c_tf_idf , topics ) \u00b6 Extract topics Parameters: Name Type Description Default topic_model A BERTopic model required documents DataFrame All input documents required c_tf_idf csr_matrix The topic c-TF-IDF representation required topics Mapping[str, List[Tuple[str, float]]] The candidate topics as calculated with c-TF-IDF required Returns: Type Description updated_topics Updated topic representations Source code in bertopic\\representation\\_langchain.py def extract_topics ( self , topic_model , documents : pd . DataFrame , c_tf_idf : csr_matrix , topics : Mapping [ str , List [ Tuple [ str , float ]]] ) -> Mapping [ str , List [ Tuple [ str , float ]]]: \"\"\" Extract topics Arguments: topic_model: A BERTopic model documents: All input documents c_tf_idf: The topic c-TF-IDF representation topics: The candidate topics as calculated with c-TF-IDF Returns: updated_topics: Updated topic representations \"\"\" # Extract the top 4 representative documents per topic repr_docs_mappings , _ , _ = topic_model . _extract_representative_docs ( c_tf_idf , documents , topics , 500 , 4 ) # Generate label using langchain updated_topics = {} for topic , docs in repr_docs_mappings . items (): chain_docs = [ Document ( page_content = doc [: 1000 ]) for doc in docs ] label = self . chain . run ( input_documents = chain_docs , question = self . prompt ) . strip () updated_topics [ topic ] = [( label , 1 )] + [( \"\" , 0 ) for _ in range ( 9 )] return updated_topics","title":"LangChain"},{"location":"api/representation/langchain.html#langchain","text":"Using chains in langchain to generate topic labels. Currently, only chains from question answering is implemented. See: https://langchain.readthedocs.io/en/latest/modules/chains/combine_docs_examples/question_answering.html Parameters: Name Type Description Default chain A langchain chain that has two input parameters, input_documents and query . required prompt str The prompt to be used in the model. If no prompt is given, self.default_prompt_ is used instead. None Usage: To use this, you will need to install the langchain package first. Additionally, you will need an underlying LLM to support langchain, like openai: pip install langchain pip install openai Then, you can create your chain as follows: from langchain.chains.question_answering import load_qa_chain from langchain.llms import OpenAI chain = load_qa_chain ( OpenAI ( temperature = 0 , openai_api_key = my_openai_api_key ), chain_type = \"stuff\" ) Finally, you can pass the chain to BERTopic as follows: from bertopic.representation import LangChain # Create your representation model representation_model = LangChain ( chain ) # Use the representation model in BERTopic on top of the default pipeline topic_model = BERTopic ( representation_model = representation_model ) You can also use a custom prompt: prompt = \"What are these documents about? Please give a single label.\" representation_model = LangChain ( chain , prompt = prompt ) Source code in bertopic\\representation\\_langchain.py class LangChain ( BaseRepresentation ): \"\"\" Using chains in langchain to generate topic labels. Currently, only chains from question answering is implemented. See: https://langchain.readthedocs.io/en/latest/modules/chains/combine_docs_examples/question_answering.html Arguments: chain: A langchain chain that has two input parameters, `input_documents` and `query`. prompt: The prompt to be used in the model. If no prompt is given, `self.default_prompt_` is used instead. Usage: To use this, you will need to install the langchain package first. Additionally, you will need an underlying LLM to support langchain, like openai: `pip install langchain` `pip install openai` Then, you can create your chain as follows: ```python from langchain.chains.question_answering import load_qa_chain from langchain.llms import OpenAI chain = load_qa_chain(OpenAI(temperature=0, openai_api_key=my_openai_api_key), chain_type=\"stuff\") ``` Finally, you can pass the chain to BERTopic as follows: ```python from bertopic.representation import LangChain # Create your representation model representation_model = LangChain(chain) # Use the representation model in BERTopic on top of the default pipeline topic_model = BERTopic(representation_model=representation_model) ``` You can also use a custom prompt: ```python prompt = \"What are these documents about? Please give a single label.\" representation_model = LangChain(chain, prompt=prompt) ``` \"\"\" def __init__ ( self , chain , prompt : str = None , ): self . chain = chain self . prompt = prompt if prompt is not None else DEFAULT_PROMPT self . default_prompt_ = DEFAULT_PROMPT def extract_topics ( self , topic_model , documents : pd . DataFrame , c_tf_idf : csr_matrix , topics : Mapping [ str , List [ Tuple [ str , float ]]] ) -> Mapping [ str , List [ Tuple [ str , float ]]]: \"\"\" Extract topics Arguments: topic_model: A BERTopic model documents: All input documents c_tf_idf: The topic c-TF-IDF representation topics: The candidate topics as calculated with c-TF-IDF Returns: updated_topics: Updated topic representations \"\"\" # Extract the top 4 representative documents per topic repr_docs_mappings , _ , _ = topic_model . _extract_representative_docs ( c_tf_idf , documents , topics , 500 , 4 ) # Generate label using langchain updated_topics = {} for topic , docs in repr_docs_mappings . items (): chain_docs = [ Document ( page_content = doc [: 1000 ]) for doc in docs ] label = self . chain . run ( input_documents = chain_docs , question = self . prompt ) . strip () updated_topics [ topic ] = [( label , 1 )] + [( \"\" , 0 ) for _ in range ( 9 )] return updated_topics","title":"LangChain"},{"location":"api/representation/langchain.html#bertopic.representation._langchain.LangChain.extract_topics","text":"Extract topics Parameters: Name Type Description Default topic_model A BERTopic model required documents DataFrame All input documents required c_tf_idf csr_matrix The topic c-TF-IDF representation required topics Mapping[str, List[Tuple[str, float]]] The candidate topics as calculated with c-TF-IDF required Returns: Type Description updated_topics Updated topic representations Source code in bertopic\\representation\\_langchain.py def extract_topics ( self , topic_model , documents : pd . DataFrame , c_tf_idf : csr_matrix , topics : Mapping [ str , List [ Tuple [ str , float ]]] ) -> Mapping [ str , List [ Tuple [ str , float ]]]: \"\"\" Extract topics Arguments: topic_model: A BERTopic model documents: All input documents c_tf_idf: The topic c-TF-IDF representation topics: The candidate topics as calculated with c-TF-IDF Returns: updated_topics: Updated topic representations \"\"\" # Extract the top 4 representative documents per topic repr_docs_mappings , _ , _ = topic_model . _extract_representative_docs ( c_tf_idf , documents , topics , 500 , 4 ) # Generate label using langchain updated_topics = {} for topic , docs in repr_docs_mappings . items (): chain_docs = [ Document ( page_content = doc [: 1000 ]) for doc in docs ] label = self . chain . run ( input_documents = chain_docs , question = self . prompt ) . strip () updated_topics [ topic ] = [( label , 1 )] + [( \"\" , 0 ) for _ in range ( 9 )] return updated_topics","title":"extract_topics()"},{"location":"api/representation/mmr.html","text":"MaximalMarginalRelevance \u00b6 Calculate Maximal Marginal Relevance (MMR) between candidate keywords and the document. MMR considers the similarity of keywords/keyphrases with the document, along with the similarity of already selected keywords and keyphrases. This results in a selection of keywords that maximize their within diversity with respect to the document. Parameters: Name Type Description Default diversity float How diverse the select keywords/keyphrases are. Values range between 0 and 1 with 0 being not diverse at all and 1 being most diverse. 0.1 top_n_words int The number of keywords/keyhprases to return 10 Usage: from bertopic.representation import MaximalMarginalRelevance from bertopic import BERTopic # Create your representation model representation_model = MaximalMarginalRelevance ( diversity = 0.3 ) # Use the representation model in BERTopic on top of the default pipeline topic_model = BERTopic ( representation_model = representation_model ) Source code in bertopic\\representation\\_mmr.py class MaximalMarginalRelevance ( BaseRepresentation ): \"\"\" Calculate Maximal Marginal Relevance (MMR) between candidate keywords and the document. MMR considers the similarity of keywords/keyphrases with the document, along with the similarity of already selected keywords and keyphrases. This results in a selection of keywords that maximize their within diversity with respect to the document. Arguments: diversity: How diverse the select keywords/keyphrases are. Values range between 0 and 1 with 0 being not diverse at all and 1 being most diverse. top_n_words: The number of keywords/keyhprases to return Usage: ```python from bertopic.representation import MaximalMarginalRelevance from bertopic import BERTopic # Create your representation model representation_model = MaximalMarginalRelevance(diversity=0.3) # Use the representation model in BERTopic on top of the default pipeline topic_model = BERTopic(representation_model=representation_model) ``` \"\"\" def __init__ ( self , diversity : float = 0.1 , top_n_words : int = 10 ): self . diversity = diversity self . top_n_words = top_n_words def extract_topics ( self , topic_model , documents : pd . DataFrame , c_tf_idf : csr_matrix , topics : Mapping [ str , List [ Tuple [ str , float ]]] ) -> Mapping [ str , List [ Tuple [ str , float ]]]: \"\"\" Extract topic representations Arguments: topic_model: The BERTopic model documents: Not used c_tf_idf: Not used topics: The candidate topics as calculated with c-TF-IDF Returns: updated_topics: Updated topic representations \"\"\" if topic_model . embedding_model is None : warnings . warn ( \"MaximalMarginalRelevance can only be used BERTopic was instantiated\" \"with the `embedding_model` parameter.\" ) return topics updated_topics = {} for topic , topic_words in topics . items (): words = [ word [ 0 ] for word in topic_words ] word_embeddings = topic_model . _extract_embeddings ( words , method = \"word\" , verbose = False ) topic_embedding = topic_model . _extract_embeddings ( \" \" . join ( words ), method = \"word\" , verbose = False ) . reshape ( 1 , - 1 ) topic_words = self . _mmr ( topic_embedding , word_embeddings , words ) updated_topics [ topic ] = [( word , value ) for word , value in topics [ topic ] if word in topic_words ] return updated_topics def _mmr ( self , doc_embedding : np . ndarray , word_embeddings : np . ndarray , words : List [ str ]) -> List [ str ]: \"\"\" Arguments: doc_embedding: The document embeddings word_embeddings: The embeddings of the selected candidate keywords/phrases words: The selected candidate keywords/keyphrases Returns: List[str]: The selected keywords/keyphrases \"\"\" # Extract similarity within words, and between words and the document word_doc_similarity = cosine_similarity ( word_embeddings , doc_embedding ) word_similarity = cosine_similarity ( word_embeddings ) # Initialize candidates and already choose best keyword/keyphras keywords_idx = [ np . argmax ( word_doc_similarity )] candidates_idx = [ i for i in range ( len ( words )) if i != keywords_idx [ 0 ]] for _ in range ( self . top_n_words - 1 ): # Extract similarities within candidates and # between candidates and selected keywords/phrases candidate_similarities = word_doc_similarity [ candidates_idx , :] target_similarities = np . max ( word_similarity [ candidates_idx ][:, keywords_idx ], axis = 1 ) # Calculate MMR mmr = ( 1 - self . diversity ) * candidate_similarities - self . diversity * target_similarities . reshape ( - 1 , 1 ) mmr_idx = candidates_idx [ np . argmax ( mmr )] # Update keywords & candidates keywords_idx . append ( mmr_idx ) candidates_idx . remove ( mmr_idx ) return [ words [ idx ] for idx in keywords_idx ] extract_topics ( self , topic_model , documents , c_tf_idf , topics ) \u00b6 Extract topic representations Parameters: Name Type Description Default topic_model The BERTopic model required documents DataFrame Not used required c_tf_idf csr_matrix Not used required topics Mapping[str, List[Tuple[str, float]]] The candidate topics as calculated with c-TF-IDF required Returns: Type Description updated_topics Updated topic representations Source code in bertopic\\representation\\_mmr.py def extract_topics ( self , topic_model , documents : pd . DataFrame , c_tf_idf : csr_matrix , topics : Mapping [ str , List [ Tuple [ str , float ]]] ) -> Mapping [ str , List [ Tuple [ str , float ]]]: \"\"\" Extract topic representations Arguments: topic_model: The BERTopic model documents: Not used c_tf_idf: Not used topics: The candidate topics as calculated with c-TF-IDF Returns: updated_topics: Updated topic representations \"\"\" if topic_model . embedding_model is None : warnings . warn ( \"MaximalMarginalRelevance can only be used BERTopic was instantiated\" \"with the `embedding_model` parameter.\" ) return topics updated_topics = {} for topic , topic_words in topics . items (): words = [ word [ 0 ] for word in topic_words ] word_embeddings = topic_model . _extract_embeddings ( words , method = \"word\" , verbose = False ) topic_embedding = topic_model . _extract_embeddings ( \" \" . join ( words ), method = \"word\" , verbose = False ) . reshape ( 1 , - 1 ) topic_words = self . _mmr ( topic_embedding , word_embeddings , words ) updated_topics [ topic ] = [( word , value ) for word , value in topics [ topic ] if word in topic_words ] return updated_topics","title":"MaximalMarginalRelevance"},{"location":"api/representation/mmr.html#maximalmarginalrelevance","text":"Calculate Maximal Marginal Relevance (MMR) between candidate keywords and the document. MMR considers the similarity of keywords/keyphrases with the document, along with the similarity of already selected keywords and keyphrases. This results in a selection of keywords that maximize their within diversity with respect to the document. Parameters: Name Type Description Default diversity float How diverse the select keywords/keyphrases are. Values range between 0 and 1 with 0 being not diverse at all and 1 being most diverse. 0.1 top_n_words int The number of keywords/keyhprases to return 10 Usage: from bertopic.representation import MaximalMarginalRelevance from bertopic import BERTopic # Create your representation model representation_model = MaximalMarginalRelevance ( diversity = 0.3 ) # Use the representation model in BERTopic on top of the default pipeline topic_model = BERTopic ( representation_model = representation_model ) Source code in bertopic\\representation\\_mmr.py class MaximalMarginalRelevance ( BaseRepresentation ): \"\"\" Calculate Maximal Marginal Relevance (MMR) between candidate keywords and the document. MMR considers the similarity of keywords/keyphrases with the document, along with the similarity of already selected keywords and keyphrases. This results in a selection of keywords that maximize their within diversity with respect to the document. Arguments: diversity: How diverse the select keywords/keyphrases are. Values range between 0 and 1 with 0 being not diverse at all and 1 being most diverse. top_n_words: The number of keywords/keyhprases to return Usage: ```python from bertopic.representation import MaximalMarginalRelevance from bertopic import BERTopic # Create your representation model representation_model = MaximalMarginalRelevance(diversity=0.3) # Use the representation model in BERTopic on top of the default pipeline topic_model = BERTopic(representation_model=representation_model) ``` \"\"\" def __init__ ( self , diversity : float = 0.1 , top_n_words : int = 10 ): self . diversity = diversity self . top_n_words = top_n_words def extract_topics ( self , topic_model , documents : pd . DataFrame , c_tf_idf : csr_matrix , topics : Mapping [ str , List [ Tuple [ str , float ]]] ) -> Mapping [ str , List [ Tuple [ str , float ]]]: \"\"\" Extract topic representations Arguments: topic_model: The BERTopic model documents: Not used c_tf_idf: Not used topics: The candidate topics as calculated with c-TF-IDF Returns: updated_topics: Updated topic representations \"\"\" if topic_model . embedding_model is None : warnings . warn ( \"MaximalMarginalRelevance can only be used BERTopic was instantiated\" \"with the `embedding_model` parameter.\" ) return topics updated_topics = {} for topic , topic_words in topics . items (): words = [ word [ 0 ] for word in topic_words ] word_embeddings = topic_model . _extract_embeddings ( words , method = \"word\" , verbose = False ) topic_embedding = topic_model . _extract_embeddings ( \" \" . join ( words ), method = \"word\" , verbose = False ) . reshape ( 1 , - 1 ) topic_words = self . _mmr ( topic_embedding , word_embeddings , words ) updated_topics [ topic ] = [( word , value ) for word , value in topics [ topic ] if word in topic_words ] return updated_topics def _mmr ( self , doc_embedding : np . ndarray , word_embeddings : np . ndarray , words : List [ str ]) -> List [ str ]: \"\"\" Arguments: doc_embedding: The document embeddings word_embeddings: The embeddings of the selected candidate keywords/phrases words: The selected candidate keywords/keyphrases Returns: List[str]: The selected keywords/keyphrases \"\"\" # Extract similarity within words, and between words and the document word_doc_similarity = cosine_similarity ( word_embeddings , doc_embedding ) word_similarity = cosine_similarity ( word_embeddings ) # Initialize candidates and already choose best keyword/keyphras keywords_idx = [ np . argmax ( word_doc_similarity )] candidates_idx = [ i for i in range ( len ( words )) if i != keywords_idx [ 0 ]] for _ in range ( self . top_n_words - 1 ): # Extract similarities within candidates and # between candidates and selected keywords/phrases candidate_similarities = word_doc_similarity [ candidates_idx , :] target_similarities = np . max ( word_similarity [ candidates_idx ][:, keywords_idx ], axis = 1 ) # Calculate MMR mmr = ( 1 - self . diversity ) * candidate_similarities - self . diversity * target_similarities . reshape ( - 1 , 1 ) mmr_idx = candidates_idx [ np . argmax ( mmr )] # Update keywords & candidates keywords_idx . append ( mmr_idx ) candidates_idx . remove ( mmr_idx ) return [ words [ idx ] for idx in keywords_idx ]","title":"MaximalMarginalRelevance"},{"location":"api/representation/mmr.html#bertopic.representation._mmr.MaximalMarginalRelevance.extract_topics","text":"Extract topic representations Parameters: Name Type Description Default topic_model The BERTopic model required documents DataFrame Not used required c_tf_idf csr_matrix Not used required topics Mapping[str, List[Tuple[str, float]]] The candidate topics as calculated with c-TF-IDF required Returns: Type Description updated_topics Updated topic representations Source code in bertopic\\representation\\_mmr.py def extract_topics ( self , topic_model , documents : pd . DataFrame , c_tf_idf : csr_matrix , topics : Mapping [ str , List [ Tuple [ str , float ]]] ) -> Mapping [ str , List [ Tuple [ str , float ]]]: \"\"\" Extract topic representations Arguments: topic_model: The BERTopic model documents: Not used c_tf_idf: Not used topics: The candidate topics as calculated with c-TF-IDF Returns: updated_topics: Updated topic representations \"\"\" if topic_model . embedding_model is None : warnings . warn ( \"MaximalMarginalRelevance can only be used BERTopic was instantiated\" \"with the `embedding_model` parameter.\" ) return topics updated_topics = {} for topic , topic_words in topics . items (): words = [ word [ 0 ] for word in topic_words ] word_embeddings = topic_model . _extract_embeddings ( words , method = \"word\" , verbose = False ) topic_embedding = topic_model . _extract_embeddings ( \" \" . join ( words ), method = \"word\" , verbose = False ) . reshape ( 1 , - 1 ) topic_words = self . _mmr ( topic_embedding , word_embeddings , words ) updated_topics [ topic ] = [( word , value ) for word , value in topics [ topic ] if word in topic_words ] return updated_topics","title":"extract_topics()"},{"location":"api/representation/openai.html","text":"OpenAI \u00b6","title":"OpenAI"},{"location":"api/representation/openai.html#openai","text":"","title":"OpenAI"},{"location":"api/representation/pos.html","text":"PartOfSpeech \u00b6 Extract Topic Keywords based on their Part-of-Speech DEFAULT_PATTERNS = [ [{'POS': 'ADJ'}, {'POS': 'NOUN'}], [{'POS': 'NOUN'}], [{'POS': 'ADJ'}] ] From candidate topics, as extracted with c-TF-IDF, find documents that contain keywords found in the candidate topics. These candidate documents then serve as the representative set of documents from which the Spacy model can extract a set of candidate keywords for each topic. These candidate keywords are first judged by whether they fall within the DEFAULT_PATTERNS or the user-defined pattern. Then, the resulting keywords are sorted by their respective c-TF-IDF values. Parameters: Name Type Description Default model Union[str, spacy.language.Language] The Spacy model to use 'en_core_web_sm' top_n_words int The top n words to extract 10 pos_patterns List[str] Patterns for Spacy to use. See https://spacy.io/usage/rule-based-matching None Usage: from bertopic.representation import PartOfSpeech from bertopic import BERTopic # Create your representation model representation_model = PartOfSpeech ( \"en_core_web_sm\" ) # Use the representation model in BERTopic on top of the default pipeline topic_model = BERTopic ( representation_model = representation_model ) You can define custom POS patterns to be extracted: pos_patterns = [ [{ 'POS' : 'ADJ' }, { 'POS' : 'NOUN' }], [{ 'POS' : 'NOUN' }], [{ 'POS' : 'ADJ' }] ] representation_model = PartOfSpeech ( \"en_core_web_sm\" , pos_patterns = pos_patterns ) Source code in bertopic\\representation\\_pos.py class PartOfSpeech ( BaseRepresentation ): \"\"\" Extract Topic Keywords based on their Part-of-Speech DEFAULT_PATTERNS = [ [{'POS': 'ADJ'}, {'POS': 'NOUN'}], [{'POS': 'NOUN'}], [{'POS': 'ADJ'}] ] From candidate topics, as extracted with c-TF-IDF, find documents that contain keywords found in the candidate topics. These candidate documents then serve as the representative set of documents from which the Spacy model can extract a set of candidate keywords for each topic. These candidate keywords are first judged by whether they fall within the DEFAULT_PATTERNS or the user-defined pattern. Then, the resulting keywords are sorted by their respective c-TF-IDF values. Arguments: model: The Spacy model to use top_n_words: The top n words to extract pos_patterns: Patterns for Spacy to use. See https://spacy.io/usage/rule-based-matching Usage: ```python from bertopic.representation import PartOfSpeech from bertopic import BERTopic # Create your representation model representation_model = PartOfSpeech(\"en_core_web_sm\") # Use the representation model in BERTopic on top of the default pipeline topic_model = BERTopic(representation_model=representation_model) ``` You can define custom POS patterns to be extracted: ```python pos_patterns = [ [{'POS': 'ADJ'}, {'POS': 'NOUN'}], [{'POS': 'NOUN'}], [{'POS': 'ADJ'}] ] representation_model = PartOfSpeech(\"en_core_web_sm\", pos_patterns=pos_patterns) ``` \"\"\" def __init__ ( self , model : Union [ str , Language ] = \"en_core_web_sm\" , top_n_words : int = 10 , pos_patterns : List [ str ] = None ): if isinstance ( model , str ): self . model = spacy . load ( model ) elif isinstance ( model , Language ): self . model = model else : raise ValueError ( \"Make sure that the Spacy model that you\" \"pass is either a string referring to a\" \"Spacy model or a Spacy nlp object.\" ) self . top_n_words = top_n_words if pos_patterns is None : self . pos_patterns = [ [{ 'POS' : 'ADJ' }, { 'POS' : 'NOUN' }], [{ 'POS' : 'NOUN' }], [{ 'POS' : 'ADJ' }] ] else : self . pos_patterns = pos_patterns def extract_topics ( self , topic_model , documents : pd . DataFrame , c_tf_idf : csr_matrix , topics : Mapping [ str , List [ Tuple [ str , float ]]] ) -> Mapping [ str , List [ Tuple [ str , float ]]]: \"\"\" Extract topics Arguments: topic_model: A BERTopic model documents: All input documents c_tf_idf: Not used topics: The candidate topics as calculated with c-TF-IDF Returns: updated_topics: Updated topic representations \"\"\" matcher = Matcher ( self . model . vocab ) matcher . add ( \"Pattern\" , self . pos_patterns ) candidate_topics = {} for topic , values in topics . items (): keywords = list ( zip ( * values ))[ 0 ] # Extract candidate documents candidate_documents = [] for keyword in keywords : selection = documents . loc [ documents . Topic == topic , :] selection = selection . loc [ selection . Document . str . contains ( keyword ), \"Document\" ] if len ( selection ) > 0 : for document in selection [: 2 ]: candidate_documents . append ( document ) candidate_documents = list ( set ( candidate_documents )) # Extract keywords docs_pipeline = self . model . pipe ( candidate_documents ) updated_keywords = [] for doc in docs_pipeline : matches = matcher ( doc ) for _ , start , end in matches : updated_keywords . append ( doc [ start : end ] . text ) candidate_topics [ topic ] = list ( set ( updated_keywords )) # Scikit-Learn Deprecation: get_feature_names is deprecated in 1.0 # and will be removed in 1.2. Please use get_feature_names_out instead. if version . parse ( sklearn_version ) >= version . parse ( \"1.0.0\" ): words = list ( topic_model . vectorizer_model . get_feature_names_out ()) else : words = list ( topic_model . vectorizer_model . get_feature_names ()) # Match updated keywords with c-TF-IDF values words_lookup = dict ( zip ( words , range ( len ( words )))) updated_topics = { topic : [] for topic in topics . keys ()} for topic , candidate_keywords in candidate_topics . items (): word_indices = [ words_lookup . get ( keyword ) for keyword in candidate_keywords if words_lookup . get ( keyword )] vals = topic_model . c_tf_idf_ [:, np . array ( word_indices )][ topic + topic_model . _outliers ] indices = np . argsort ( np . array ( vals . todense () . reshape ( 1 , - 1 ))[ 0 ])[ - 10 :][:: - 1 ] vals = np . sort ( np . array ( vals . todense () . reshape ( 1 , - 1 ))[ 0 ])[ - 10 :][:: - 1 ] topic_words = [( words [ word_indices [ index ]], val ) for index , val in zip ( indices , vals )] updated_topics [ topic ] = topic_words if len ( updated_topics [ topic ]) < self . top_n_words : updated_topics [ topic ] += [( \"\" , 0 ) for _ in range ( self . top_n_words - len ( updated_topics [ topic ]))] return updated_topics extract_topics ( self , topic_model , documents , c_tf_idf , topics ) \u00b6 Extract topics Parameters: Name Type Description Default topic_model A BERTopic model required documents DataFrame All input documents required c_tf_idf csr_matrix Not used required topics Mapping[str, List[Tuple[str, float]]] The candidate topics as calculated with c-TF-IDF required Returns: Type Description updated_topics Updated topic representations Source code in bertopic\\representation\\_pos.py def extract_topics ( self , topic_model , documents : pd . DataFrame , c_tf_idf : csr_matrix , topics : Mapping [ str , List [ Tuple [ str , float ]]] ) -> Mapping [ str , List [ Tuple [ str , float ]]]: \"\"\" Extract topics Arguments: topic_model: A BERTopic model documents: All input documents c_tf_idf: Not used topics: The candidate topics as calculated with c-TF-IDF Returns: updated_topics: Updated topic representations \"\"\" matcher = Matcher ( self . model . vocab ) matcher . add ( \"Pattern\" , self . pos_patterns ) candidate_topics = {} for topic , values in topics . items (): keywords = list ( zip ( * values ))[ 0 ] # Extract candidate documents candidate_documents = [] for keyword in keywords : selection = documents . loc [ documents . Topic == topic , :] selection = selection . loc [ selection . Document . str . contains ( keyword ), \"Document\" ] if len ( selection ) > 0 : for document in selection [: 2 ]: candidate_documents . append ( document ) candidate_documents = list ( set ( candidate_documents )) # Extract keywords docs_pipeline = self . model . pipe ( candidate_documents ) updated_keywords = [] for doc in docs_pipeline : matches = matcher ( doc ) for _ , start , end in matches : updated_keywords . append ( doc [ start : end ] . text ) candidate_topics [ topic ] = list ( set ( updated_keywords )) # Scikit-Learn Deprecation: get_feature_names is deprecated in 1.0 # and will be removed in 1.2. Please use get_feature_names_out instead. if version . parse ( sklearn_version ) >= version . parse ( \"1.0.0\" ): words = list ( topic_model . vectorizer_model . get_feature_names_out ()) else : words = list ( topic_model . vectorizer_model . get_feature_names ()) # Match updated keywords with c-TF-IDF values words_lookup = dict ( zip ( words , range ( len ( words )))) updated_topics = { topic : [] for topic in topics . keys ()} for topic , candidate_keywords in candidate_topics . items (): word_indices = [ words_lookup . get ( keyword ) for keyword in candidate_keywords if words_lookup . get ( keyword )] vals = topic_model . c_tf_idf_ [:, np . array ( word_indices )][ topic + topic_model . _outliers ] indices = np . argsort ( np . array ( vals . todense () . reshape ( 1 , - 1 ))[ 0 ])[ - 10 :][:: - 1 ] vals = np . sort ( np . array ( vals . todense () . reshape ( 1 , - 1 ))[ 0 ])[ - 10 :][:: - 1 ] topic_words = [( words [ word_indices [ index ]], val ) for index , val in zip ( indices , vals )] updated_topics [ topic ] = topic_words if len ( updated_topics [ topic ]) < self . top_n_words : updated_topics [ topic ] += [( \"\" , 0 ) for _ in range ( self . top_n_words - len ( updated_topics [ topic ]))] return updated_topics","title":"PartOfSpeech"},{"location":"api/representation/pos.html#partofspeech","text":"Extract Topic Keywords based on their Part-of-Speech DEFAULT_PATTERNS = [ [{'POS': 'ADJ'}, {'POS': 'NOUN'}], [{'POS': 'NOUN'}], [{'POS': 'ADJ'}] ] From candidate topics, as extracted with c-TF-IDF, find documents that contain keywords found in the candidate topics. These candidate documents then serve as the representative set of documents from which the Spacy model can extract a set of candidate keywords for each topic. These candidate keywords are first judged by whether they fall within the DEFAULT_PATTERNS or the user-defined pattern. Then, the resulting keywords are sorted by their respective c-TF-IDF values. Parameters: Name Type Description Default model Union[str, spacy.language.Language] The Spacy model to use 'en_core_web_sm' top_n_words int The top n words to extract 10 pos_patterns List[str] Patterns for Spacy to use. See https://spacy.io/usage/rule-based-matching None Usage: from bertopic.representation import PartOfSpeech from bertopic import BERTopic # Create your representation model representation_model = PartOfSpeech ( \"en_core_web_sm\" ) # Use the representation model in BERTopic on top of the default pipeline topic_model = BERTopic ( representation_model = representation_model ) You can define custom POS patterns to be extracted: pos_patterns = [ [{ 'POS' : 'ADJ' }, { 'POS' : 'NOUN' }], [{ 'POS' : 'NOUN' }], [{ 'POS' : 'ADJ' }] ] representation_model = PartOfSpeech ( \"en_core_web_sm\" , pos_patterns = pos_patterns ) Source code in bertopic\\representation\\_pos.py class PartOfSpeech ( BaseRepresentation ): \"\"\" Extract Topic Keywords based on their Part-of-Speech DEFAULT_PATTERNS = [ [{'POS': 'ADJ'}, {'POS': 'NOUN'}], [{'POS': 'NOUN'}], [{'POS': 'ADJ'}] ] From candidate topics, as extracted with c-TF-IDF, find documents that contain keywords found in the candidate topics. These candidate documents then serve as the representative set of documents from which the Spacy model can extract a set of candidate keywords for each topic. These candidate keywords are first judged by whether they fall within the DEFAULT_PATTERNS or the user-defined pattern. Then, the resulting keywords are sorted by their respective c-TF-IDF values. Arguments: model: The Spacy model to use top_n_words: The top n words to extract pos_patterns: Patterns for Spacy to use. See https://spacy.io/usage/rule-based-matching Usage: ```python from bertopic.representation import PartOfSpeech from bertopic import BERTopic # Create your representation model representation_model = PartOfSpeech(\"en_core_web_sm\") # Use the representation model in BERTopic on top of the default pipeline topic_model = BERTopic(representation_model=representation_model) ``` You can define custom POS patterns to be extracted: ```python pos_patterns = [ [{'POS': 'ADJ'}, {'POS': 'NOUN'}], [{'POS': 'NOUN'}], [{'POS': 'ADJ'}] ] representation_model = PartOfSpeech(\"en_core_web_sm\", pos_patterns=pos_patterns) ``` \"\"\" def __init__ ( self , model : Union [ str , Language ] = \"en_core_web_sm\" , top_n_words : int = 10 , pos_patterns : List [ str ] = None ): if isinstance ( model , str ): self . model = spacy . load ( model ) elif isinstance ( model , Language ): self . model = model else : raise ValueError ( \"Make sure that the Spacy model that you\" \"pass is either a string referring to a\" \"Spacy model or a Spacy nlp object.\" ) self . top_n_words = top_n_words if pos_patterns is None : self . pos_patterns = [ [{ 'POS' : 'ADJ' }, { 'POS' : 'NOUN' }], [{ 'POS' : 'NOUN' }], [{ 'POS' : 'ADJ' }] ] else : self . pos_patterns = pos_patterns def extract_topics ( self , topic_model , documents : pd . DataFrame , c_tf_idf : csr_matrix , topics : Mapping [ str , List [ Tuple [ str , float ]]] ) -> Mapping [ str , List [ Tuple [ str , float ]]]: \"\"\" Extract topics Arguments: topic_model: A BERTopic model documents: All input documents c_tf_idf: Not used topics: The candidate topics as calculated with c-TF-IDF Returns: updated_topics: Updated topic representations \"\"\" matcher = Matcher ( self . model . vocab ) matcher . add ( \"Pattern\" , self . pos_patterns ) candidate_topics = {} for topic , values in topics . items (): keywords = list ( zip ( * values ))[ 0 ] # Extract candidate documents candidate_documents = [] for keyword in keywords : selection = documents . loc [ documents . Topic == topic , :] selection = selection . loc [ selection . Document . str . contains ( keyword ), \"Document\" ] if len ( selection ) > 0 : for document in selection [: 2 ]: candidate_documents . append ( document ) candidate_documents = list ( set ( candidate_documents )) # Extract keywords docs_pipeline = self . model . pipe ( candidate_documents ) updated_keywords = [] for doc in docs_pipeline : matches = matcher ( doc ) for _ , start , end in matches : updated_keywords . append ( doc [ start : end ] . text ) candidate_topics [ topic ] = list ( set ( updated_keywords )) # Scikit-Learn Deprecation: get_feature_names is deprecated in 1.0 # and will be removed in 1.2. Please use get_feature_names_out instead. if version . parse ( sklearn_version ) >= version . parse ( \"1.0.0\" ): words = list ( topic_model . vectorizer_model . get_feature_names_out ()) else : words = list ( topic_model . vectorizer_model . get_feature_names ()) # Match updated keywords with c-TF-IDF values words_lookup = dict ( zip ( words , range ( len ( words )))) updated_topics = { topic : [] for topic in topics . keys ()} for topic , candidate_keywords in candidate_topics . items (): word_indices = [ words_lookup . get ( keyword ) for keyword in candidate_keywords if words_lookup . get ( keyword )] vals = topic_model . c_tf_idf_ [:, np . array ( word_indices )][ topic + topic_model . _outliers ] indices = np . argsort ( np . array ( vals . todense () . reshape ( 1 , - 1 ))[ 0 ])[ - 10 :][:: - 1 ] vals = np . sort ( np . array ( vals . todense () . reshape ( 1 , - 1 ))[ 0 ])[ - 10 :][:: - 1 ] topic_words = [( words [ word_indices [ index ]], val ) for index , val in zip ( indices , vals )] updated_topics [ topic ] = topic_words if len ( updated_topics [ topic ]) < self . top_n_words : updated_topics [ topic ] += [( \"\" , 0 ) for _ in range ( self . top_n_words - len ( updated_topics [ topic ]))] return updated_topics","title":"PartOfSpeech"},{"location":"api/representation/pos.html#bertopic.representation._pos.PartOfSpeech.extract_topics","text":"Extract topics Parameters: Name Type Description Default topic_model A BERTopic model required documents DataFrame All input documents required c_tf_idf csr_matrix Not used required topics Mapping[str, List[Tuple[str, float]]] The candidate topics as calculated with c-TF-IDF required Returns: Type Description updated_topics Updated topic representations Source code in bertopic\\representation\\_pos.py def extract_topics ( self , topic_model , documents : pd . DataFrame , c_tf_idf : csr_matrix , topics : Mapping [ str , List [ Tuple [ str , float ]]] ) -> Mapping [ str , List [ Tuple [ str , float ]]]: \"\"\" Extract topics Arguments: topic_model: A BERTopic model documents: All input documents c_tf_idf: Not used topics: The candidate topics as calculated with c-TF-IDF Returns: updated_topics: Updated topic representations \"\"\" matcher = Matcher ( self . model . vocab ) matcher . add ( \"Pattern\" , self . pos_patterns ) candidate_topics = {} for topic , values in topics . items (): keywords = list ( zip ( * values ))[ 0 ] # Extract candidate documents candidate_documents = [] for keyword in keywords : selection = documents . loc [ documents . Topic == topic , :] selection = selection . loc [ selection . Document . str . contains ( keyword ), \"Document\" ] if len ( selection ) > 0 : for document in selection [: 2 ]: candidate_documents . append ( document ) candidate_documents = list ( set ( candidate_documents )) # Extract keywords docs_pipeline = self . model . pipe ( candidate_documents ) updated_keywords = [] for doc in docs_pipeline : matches = matcher ( doc ) for _ , start , end in matches : updated_keywords . append ( doc [ start : end ] . text ) candidate_topics [ topic ] = list ( set ( updated_keywords )) # Scikit-Learn Deprecation: get_feature_names is deprecated in 1.0 # and will be removed in 1.2. Please use get_feature_names_out instead. if version . parse ( sklearn_version ) >= version . parse ( \"1.0.0\" ): words = list ( topic_model . vectorizer_model . get_feature_names_out ()) else : words = list ( topic_model . vectorizer_model . get_feature_names ()) # Match updated keywords with c-TF-IDF values words_lookup = dict ( zip ( words , range ( len ( words )))) updated_topics = { topic : [] for topic in topics . keys ()} for topic , candidate_keywords in candidate_topics . items (): word_indices = [ words_lookup . get ( keyword ) for keyword in candidate_keywords if words_lookup . get ( keyword )] vals = topic_model . c_tf_idf_ [:, np . array ( word_indices )][ topic + topic_model . _outliers ] indices = np . argsort ( np . array ( vals . todense () . reshape ( 1 , - 1 ))[ 0 ])[ - 10 :][:: - 1 ] vals = np . sort ( np . array ( vals . todense () . reshape ( 1 , - 1 ))[ 0 ])[ - 10 :][:: - 1 ] topic_words = [( words [ word_indices [ index ]], val ) for index , val in zip ( indices , vals )] updated_topics [ topic ] = topic_words if len ( updated_topics [ topic ]) < self . top_n_words : updated_topics [ topic ] += [( \"\" , 0 ) for _ in range ( self . top_n_words - len ( updated_topics [ topic ]))] return updated_topics","title":"extract_topics()"},{"location":"api/representation/zeroshot.html","text":"ZeroShotClassification \u00b6 Zero-shot Classification on topic keywords with candidate labels Parameters: Name Type Description Default candidate_topics List[str] A list of labels to assign to the topics if they exceed min_prob required model str A transformers pipeline that should be initialized as \"zero-shot-classification\". For example, pipeline(\"zero-shot-classification\", model=\"facebook/bart-large-mnli\") 'facebook/bart-large-mnli' pipeline_kwargs Mapping[str, Any] Kwargs that you can pass to the transformers.pipeline when it is called. NOTE: Use {\"multi_label\": True} to extract multiple labels for each topic. {} min_prob float The minimum probability to assign a candidate label to a topic 0.8 Usage: from bertopic.representation import ZeroShotClassification from bertopic import BERTopic # Create your representation model candidate_topics = [ \"space and nasa\" , \"bicycles\" , \"sports\" ] representation_model = ZeroShotClassification ( candidate_topics , model = \"facebook/bart-large-mnli\" ) # Use the representation model in BERTopic on top of the default pipeline topic_model = BERTopic ( representation_model = representation_model ) Source code in bertopic\\representation\\_zeroshot.py class ZeroShotClassification ( BaseRepresentation ): \"\"\" Zero-shot Classification on topic keywords with candidate labels Arguments: candidate_topics: A list of labels to assign to the topics if they exceed `min_prob` model: A transformers pipeline that should be initialized as \"zero-shot-classification\". For example, `pipeline(\"zero-shot-classification\", model=\"facebook/bart-large-mnli\")` pipeline_kwargs: Kwargs that you can pass to the transformers.pipeline when it is called. NOTE: Use `{\"multi_label\": True}` to extract multiple labels for each topic. min_prob: The minimum probability to assign a candidate label to a topic Usage: ```python from bertopic.representation import ZeroShotClassification from bertopic import BERTopic # Create your representation model candidate_topics = [\"space and nasa\", \"bicycles\", \"sports\"] representation_model = ZeroShotClassification(candidate_topics, model=\"facebook/bart-large-mnli\") # Use the representation model in BERTopic on top of the default pipeline topic_model = BERTopic(representation_model=representation_model) ``` \"\"\" def __init__ ( self , candidate_topics : List [ str ], model : str = \"facebook/bart-large-mnli\" , pipeline_kwargs : Mapping [ str , Any ] = {}, min_prob : float = 0.8 ): self . candidate_topics = candidate_topics if isinstance ( model , str ): self . model = pipeline ( \"zero-shot-classification\" , model = model ) elif isinstance ( model , Pipeline ): self . model = model else : raise ValueError ( \"Make sure that the HF model that you\" \"pass is either a string referring to a\" \"HF model or a `transformers.pipeline` object.\" ) self . pipeline_kwargs = pipeline_kwargs self . min_prob = min_prob def extract_topics ( self , topic_model , documents : pd . DataFrame , c_tf_idf : csr_matrix , topics : Mapping [ str , List [ Tuple [ str , float ]]] ) -> Mapping [ str , List [ Tuple [ str , float ]]]: \"\"\" Extract topics Arguments: topic_model: Not used documents: Not used c_tf_idf: Not used topics: The candidate topics as calculated with c-TF-IDF Returns: updated_topics: Updated topic representations \"\"\" # Classify topics topic_descriptions = [ \" \" . join ( list ( zip ( * topics [ topic ]))[ 0 ]) for topic in topics . keys ()] classifications = self . model ( topic_descriptions , self . candidate_topics , ** self . pipeline_kwargs ) # Extract labels updated_topics = {} for topic , classification in zip ( topics . keys (), classifications ): topic_description = topics [ topic ] # Multi-label assignment if self . pipeline_kwargs . get ( \"multi_label\" ): topic_description = [] for label , score in zip ( classification [ \"labels\" ], classification [ \"scores\" ]): if score > self . min_prob : topic_description . append (( label , score )) # Single label assignment elif classification [ \"scores\" ][ 0 ] > self . min_prob : topic_description = [( classification [ \"labels\" ][ 0 ], classification [ \"scores\" ][ 0 ])] # Make sure that 10 items are returned if len ( topic_description ) == 0 : topic_description = topics [ topic ] elif len ( topic_description ) < 10 : topic_description += [( \"\" , 0 ) for _ in range ( 10 - len ( topic_description ))] updated_topics [ topic ] = topic_description return updated_topics extract_topics ( self , topic_model , documents , c_tf_idf , topics ) \u00b6 Extract topics Parameters: Name Type Description Default topic_model Not used required documents DataFrame Not used required c_tf_idf csr_matrix Not used required topics Mapping[str, List[Tuple[str, float]]] The candidate topics as calculated with c-TF-IDF required Returns: Type Description updated_topics Updated topic representations Source code in bertopic\\representation\\_zeroshot.py def extract_topics ( self , topic_model , documents : pd . DataFrame , c_tf_idf : csr_matrix , topics : Mapping [ str , List [ Tuple [ str , float ]]] ) -> Mapping [ str , List [ Tuple [ str , float ]]]: \"\"\" Extract topics Arguments: topic_model: Not used documents: Not used c_tf_idf: Not used topics: The candidate topics as calculated with c-TF-IDF Returns: updated_topics: Updated topic representations \"\"\" # Classify topics topic_descriptions = [ \" \" . join ( list ( zip ( * topics [ topic ]))[ 0 ]) for topic in topics . keys ()] classifications = self . model ( topic_descriptions , self . candidate_topics , ** self . pipeline_kwargs ) # Extract labels updated_topics = {} for topic , classification in zip ( topics . keys (), classifications ): topic_description = topics [ topic ] # Multi-label assignment if self . pipeline_kwargs . get ( \"multi_label\" ): topic_description = [] for label , score in zip ( classification [ \"labels\" ], classification [ \"scores\" ]): if score > self . min_prob : topic_description . append (( label , score )) # Single label assignment elif classification [ \"scores\" ][ 0 ] > self . min_prob : topic_description = [( classification [ \"labels\" ][ 0 ], classification [ \"scores\" ][ 0 ])] # Make sure that 10 items are returned if len ( topic_description ) == 0 : topic_description = topics [ topic ] elif len ( topic_description ) < 10 : topic_description += [( \"\" , 0 ) for _ in range ( 10 - len ( topic_description ))] updated_topics [ topic ] = topic_description return updated_topics","title":"Zero-shot Classification"},{"location":"api/representation/zeroshot.html#zeroshotclassification","text":"Zero-shot Classification on topic keywords with candidate labels Parameters: Name Type Description Default candidate_topics List[str] A list of labels to assign to the topics if they exceed min_prob required model str A transformers pipeline that should be initialized as \"zero-shot-classification\". For example, pipeline(\"zero-shot-classification\", model=\"facebook/bart-large-mnli\") 'facebook/bart-large-mnli' pipeline_kwargs Mapping[str, Any] Kwargs that you can pass to the transformers.pipeline when it is called. NOTE: Use {\"multi_label\": True} to extract multiple labels for each topic. {} min_prob float The minimum probability to assign a candidate label to a topic 0.8 Usage: from bertopic.representation import ZeroShotClassification from bertopic import BERTopic # Create your representation model candidate_topics = [ \"space and nasa\" , \"bicycles\" , \"sports\" ] representation_model = ZeroShotClassification ( candidate_topics , model = \"facebook/bart-large-mnli\" ) # Use the representation model in BERTopic on top of the default pipeline topic_model = BERTopic ( representation_model = representation_model ) Source code in bertopic\\representation\\_zeroshot.py class ZeroShotClassification ( BaseRepresentation ): \"\"\" Zero-shot Classification on topic keywords with candidate labels Arguments: candidate_topics: A list of labels to assign to the topics if they exceed `min_prob` model: A transformers pipeline that should be initialized as \"zero-shot-classification\". For example, `pipeline(\"zero-shot-classification\", model=\"facebook/bart-large-mnli\")` pipeline_kwargs: Kwargs that you can pass to the transformers.pipeline when it is called. NOTE: Use `{\"multi_label\": True}` to extract multiple labels for each topic. min_prob: The minimum probability to assign a candidate label to a topic Usage: ```python from bertopic.representation import ZeroShotClassification from bertopic import BERTopic # Create your representation model candidate_topics = [\"space and nasa\", \"bicycles\", \"sports\"] representation_model = ZeroShotClassification(candidate_topics, model=\"facebook/bart-large-mnli\") # Use the representation model in BERTopic on top of the default pipeline topic_model = BERTopic(representation_model=representation_model) ``` \"\"\" def __init__ ( self , candidate_topics : List [ str ], model : str = \"facebook/bart-large-mnli\" , pipeline_kwargs : Mapping [ str , Any ] = {}, min_prob : float = 0.8 ): self . candidate_topics = candidate_topics if isinstance ( model , str ): self . model = pipeline ( \"zero-shot-classification\" , model = model ) elif isinstance ( model , Pipeline ): self . model = model else : raise ValueError ( \"Make sure that the HF model that you\" \"pass is either a string referring to a\" \"HF model or a `transformers.pipeline` object.\" ) self . pipeline_kwargs = pipeline_kwargs self . min_prob = min_prob def extract_topics ( self , topic_model , documents : pd . DataFrame , c_tf_idf : csr_matrix , topics : Mapping [ str , List [ Tuple [ str , float ]]] ) -> Mapping [ str , List [ Tuple [ str , float ]]]: \"\"\" Extract topics Arguments: topic_model: Not used documents: Not used c_tf_idf: Not used topics: The candidate topics as calculated with c-TF-IDF Returns: updated_topics: Updated topic representations \"\"\" # Classify topics topic_descriptions = [ \" \" . join ( list ( zip ( * topics [ topic ]))[ 0 ]) for topic in topics . keys ()] classifications = self . model ( topic_descriptions , self . candidate_topics , ** self . pipeline_kwargs ) # Extract labels updated_topics = {} for topic , classification in zip ( topics . keys (), classifications ): topic_description = topics [ topic ] # Multi-label assignment if self . pipeline_kwargs . get ( \"multi_label\" ): topic_description = [] for label , score in zip ( classification [ \"labels\" ], classification [ \"scores\" ]): if score > self . min_prob : topic_description . append (( label , score )) # Single label assignment elif classification [ \"scores\" ][ 0 ] > self . min_prob : topic_description = [( classification [ \"labels\" ][ 0 ], classification [ \"scores\" ][ 0 ])] # Make sure that 10 items are returned if len ( topic_description ) == 0 : topic_description = topics [ topic ] elif len ( topic_description ) < 10 : topic_description += [( \"\" , 0 ) for _ in range ( 10 - len ( topic_description ))] updated_topics [ topic ] = topic_description return updated_topics","title":"ZeroShotClassification"},{"location":"api/representation/zeroshot.html#bertopic.representation._zeroshot.ZeroShotClassification.extract_topics","text":"Extract topics Parameters: Name Type Description Default topic_model Not used required documents DataFrame Not used required c_tf_idf csr_matrix Not used required topics Mapping[str, List[Tuple[str, float]]] The candidate topics as calculated with c-TF-IDF required Returns: Type Description updated_topics Updated topic representations Source code in bertopic\\representation\\_zeroshot.py def extract_topics ( self , topic_model , documents : pd . DataFrame , c_tf_idf : csr_matrix , topics : Mapping [ str , List [ Tuple [ str , float ]]] ) -> Mapping [ str , List [ Tuple [ str , float ]]]: \"\"\" Extract topics Arguments: topic_model: Not used documents: Not used c_tf_idf: Not used topics: The candidate topics as calculated with c-TF-IDF Returns: updated_topics: Updated topic representations \"\"\" # Classify topics topic_descriptions = [ \" \" . join ( list ( zip ( * topics [ topic ]))[ 0 ]) for topic in topics . keys ()] classifications = self . model ( topic_descriptions , self . candidate_topics , ** self . pipeline_kwargs ) # Extract labels updated_topics = {} for topic , classification in zip ( topics . keys (), classifications ): topic_description = topics [ topic ] # Multi-label assignment if self . pipeline_kwargs . get ( \"multi_label\" ): topic_description = [] for label , score in zip ( classification [ \"labels\" ], classification [ \"scores\" ]): if score > self . min_prob : topic_description . append (( label , score )) # Single label assignment elif classification [ \"scores\" ][ 0 ] > self . min_prob : topic_description = [( classification [ \"labels\" ][ 0 ], classification [ \"scores\" ][ 0 ])] # Make sure that 10 items are returned if len ( topic_description ) == 0 : topic_description = topics [ topic ] elif len ( topic_description ) < 10 : topic_description += [( \"\" , 0 ) for _ in range ( 10 - len ( topic_description ))] updated_topics [ topic ] = topic_description return updated_topics","title":"extract_topics()"},{"location":"getting_started/clustering/clustering.html","text":"After reducing the dimensionality of our input embeddings, we need to cluster them into groups of similar embeddings to extract our topics. This process of clustering is quite important because the more performant our clustering technique the more accurate our topic representations are. In BERTopic, we typically use HDBSCAN as it is quite capable of capturing structures with different densities. However, there is not one perfect clustering model and you might want to be using something entirely different for your use case. Moreover, what if a new state-of-the-art model is released tomorrow? We would like to be able to use that in BERTopic, right? Since BERTopic assumes some independence among steps, we can allow for this modularity: As a result, the hdbscan_model parameter in BERTopic now allows for a variety of clustering models. To do so, the class should have the following attributes: .fit(X) A function that can be used to fit the model .predict(X) A predict function that transforms the input to cluster labels .labels_ The labels after fitting the model In other words, it should have the following structure: class ClusterModel : def fit ( self , X ): self . labels_ = None return self def predict ( self , X ): return X In this section, we will go through several examples of clustering algorithms and how they can be implemented. HDBSCAN \u00b6 As a default, BERTopic uses HDBSCAN to perform its clustering. To use a HDBSCAN model with custom parameters, we simply define it and pass it to BERTopic: from bertopic import BERTopic from hdbscan import HDBSCAN hdbscan_model = HDBSCAN ( min_cluster_size = 15 , metric = 'euclidean' , cluster_selection_method = 'eom' , prediction_data = True ) topic_model = BERTopic ( hdbscan_model = hdbscan_model ) Here, we can define any parameters in HDBSCAN to optimize for the best performance based on whatever validation metrics you are using. k-Means \u00b6 Although HDBSCAN works quite well in BERTopic and is typically advised, you might want to be using k-Means instead. It allows you to select how many clusters you would like and forces every single point to be in a cluster. Therefore, no outliers will be created. This also has disadvantages. When you force every single point in a cluster, it will mean that the cluster is highly likely to contain noise which can hurt the topic representations. As a small tip, using the vectorizer_model=CountVectorizer(stop_words=\"english\") helps quite a bit to then improve the topic representation. Having said that, using k-Means is quite straightforward: from bertopic import BERTopic from sklearn.cluster import KMeans cluster_model = KMeans ( n_clusters = 50 ) topic_model = BERTopic ( hdbscan_model = cluster_model ) Note As you might have noticed, the cluster_model is passed to hdbscan_model which might be a bit confusing considering you are not passing an HDBSCAN model. For now, the name of the parameter is kept the same to adhere to the current state of the API. Changing the name could lead to deprecation issues, which I want to prevent as much as possible. Agglomerative Clustering \u00b6 Like k-Means, there are a bunch more clustering algorithms in sklearn that you can be using. Some of these models do not have a .predict() method but still can be used in BERTopic. However, using BERTopic's .transform() function will then give errors. Here, we will demonstrate Agglomerative Clustering: from bertopic import BERTopic from sklearn.cluster import AgglomerativeClustering cluster_model = AgglomerativeClustering ( n_clusters = 50 ) topic_model = BERTopic ( hdbscan_model = cluster_model ) cuML HDBSCAN \u00b6 Although the original HDBSCAN implementation is an amazing technique, it may have difficulty handling large amounts of data. Instead, we can use cuML to speed up HDBSCAN through GPU acceleration: from bertopic import BERTopic from cuml.cluster import HDBSCAN hdbscan_model = HDBSCAN ( min_samples = 10 , gen_min_span_tree = True , prediction_data = True ) topic_model = BERTopic ( hdbscan_model = hdbscan_model ) The great thing about using cuML's HDBSCAN implementation is that it supports many features of the original implementation. In other words, calculate_probabilities=True also works! Note As of the v0.13 release, it is not yet possible to calculate the topic-document probability matrix for unseen data (i.e., .transform ) using cuML's HDBSCAN. However, it is still possible to calculate the topic-document probability matrix for the data on which the model was trained (i.e., .fit and .fit_transform ). Note If you want to install cuML together with BERTopic using Google Colab, you can run the following code: !pip install bertopic !pip install cudf-cu11 dask-cudf-cu11 --extra-index-url = https://pypi.ngc.nvidia.com !pip install cuml-cu11 --extra-index-url = https://pypi.ngc.nvidia.com !pip install cugraph-cu11 --extra-index-url = https://pypi.ngc.nvidia.com !pip uninstall cupy-cuda115 -y !pip uninstall cupy-cuda11x -y !pip install cupy-cuda11x -f https://pip.cupy.dev/aarch64","title":"Clustering"},{"location":"getting_started/clustering/clustering.html#hdbscan","text":"As a default, BERTopic uses HDBSCAN to perform its clustering. To use a HDBSCAN model with custom parameters, we simply define it and pass it to BERTopic: from bertopic import BERTopic from hdbscan import HDBSCAN hdbscan_model = HDBSCAN ( min_cluster_size = 15 , metric = 'euclidean' , cluster_selection_method = 'eom' , prediction_data = True ) topic_model = BERTopic ( hdbscan_model = hdbscan_model ) Here, we can define any parameters in HDBSCAN to optimize for the best performance based on whatever validation metrics you are using.","title":"HDBSCAN"},{"location":"getting_started/clustering/clustering.html#k-means","text":"Although HDBSCAN works quite well in BERTopic and is typically advised, you might want to be using k-Means instead. It allows you to select how many clusters you would like and forces every single point to be in a cluster. Therefore, no outliers will be created. This also has disadvantages. When you force every single point in a cluster, it will mean that the cluster is highly likely to contain noise which can hurt the topic representations. As a small tip, using the vectorizer_model=CountVectorizer(stop_words=\"english\") helps quite a bit to then improve the topic representation. Having said that, using k-Means is quite straightforward: from bertopic import BERTopic from sklearn.cluster import KMeans cluster_model = KMeans ( n_clusters = 50 ) topic_model = BERTopic ( hdbscan_model = cluster_model ) Note As you might have noticed, the cluster_model is passed to hdbscan_model which might be a bit confusing considering you are not passing an HDBSCAN model. For now, the name of the parameter is kept the same to adhere to the current state of the API. Changing the name could lead to deprecation issues, which I want to prevent as much as possible.","title":"k-Means"},{"location":"getting_started/clustering/clustering.html#agglomerative-clustering","text":"Like k-Means, there are a bunch more clustering algorithms in sklearn that you can be using. Some of these models do not have a .predict() method but still can be used in BERTopic. However, using BERTopic's .transform() function will then give errors. Here, we will demonstrate Agglomerative Clustering: from bertopic import BERTopic from sklearn.cluster import AgglomerativeClustering cluster_model = AgglomerativeClustering ( n_clusters = 50 ) topic_model = BERTopic ( hdbscan_model = cluster_model )","title":"Agglomerative Clustering"},{"location":"getting_started/clustering/clustering.html#cuml-hdbscan","text":"Although the original HDBSCAN implementation is an amazing technique, it may have difficulty handling large amounts of data. Instead, we can use cuML to speed up HDBSCAN through GPU acceleration: from bertopic import BERTopic from cuml.cluster import HDBSCAN hdbscan_model = HDBSCAN ( min_samples = 10 , gen_min_span_tree = True , prediction_data = True ) topic_model = BERTopic ( hdbscan_model = hdbscan_model ) The great thing about using cuML's HDBSCAN implementation is that it supports many features of the original implementation. In other words, calculate_probabilities=True also works! Note As of the v0.13 release, it is not yet possible to calculate the topic-document probability matrix for unseen data (i.e., .transform ) using cuML's HDBSCAN. However, it is still possible to calculate the topic-document probability matrix for the data on which the model was trained (i.e., .fit and .fit_transform ). Note If you want to install cuML together with BERTopic using Google Colab, you can run the following code: !pip install bertopic !pip install cudf-cu11 dask-cudf-cu11 --extra-index-url = https://pypi.ngc.nvidia.com !pip install cuml-cu11 --extra-index-url = https://pypi.ngc.nvidia.com !pip install cugraph-cu11 --extra-index-url = https://pypi.ngc.nvidia.com !pip uninstall cupy-cuda115 -y !pip uninstall cupy-cuda11x -y !pip install cupy-cuda11x -f https://pip.cupy.dev/aarch64","title":"cuML HDBSCAN"},{"location":"getting_started/ctfidf/ctfidf.html","text":"c-TF-IDF \u00b6 In BERTopic, in order to get an accurate representation of the topics from our bag-of-words matrix, TF-IDF was adjusted to work on a cluster/categorical/topic level instead of a document level. This adjusted TF-IDF representation is called c-TF-IDF and takes into account what makes the documents in one cluster different from documents in another cluster: Each cluster is converted to a single document instead of a set of documents. Then, we extract the frequency of word x in class c , where c refers to the cluster we created before. This results in our class-based tf representation. This representation is L1-normalized to account for the differences in topic sizes. Then, we take the logarithm of one plus the average number of words per class A divided by the frequency of word x across all classes. We add plus one within the logarithm to force values to be positive. This results in our class-based idf representation. Like with the classic TF-IDF, we then multiply tf with idf to get the importance score per word in each class. In other words, the classical TF-IDF procedure is not used here but a modified version of the algorithm that allows for a much better representation. Since the topic representation is somewhat independent of the clustering step, we can change how the c-TF-IDF representation will look like. This can be in the form of parameter tuning, different weighting schemes, or using a diversity metric on top of it. This allows for some modularity concerning the weighting scheme: This class-based TF-IDF representation is enabled by default in BERTopic. However, we can explicitly pass it to BERTopic through the ctfidf_model allowing for parameter tuning and the customization of the topic extraction technique: from bertopic import BERTopic from bertopic.vectorizers import ClassTfidfTransformer ctfidf_model = ClassTfidfTransformer () topic_model = BERTopic ( ctfidf_model = ctfidf_model ) Parameters \u00b6 There are two parameters worth exploring in the ClassTfidfTransformer , namely bm25_weighting and reduce_frequent_words . bm25_weighting \u00b6 The bm25_weighting is a boolean parameter that indicates whether a class-based BM-25 weighting measure is used instead of the default method as defined in the formula at the beginning of this page. Instead of using the following weighting scheme: the class-based BM-25 weighting is used instead: At smaller datasets, this variant can be more robust to stop words that appear in your data. It can be enabled as follows: from bertopic import BERTopic from bertopic.vectorizers import ClassTfidfTransformer ctfidf_model = ClassTfidfTransformer ( bm25_weighting = True ) topic_model = BERTopic ( ctfidf_model = ctfidf_model ) reduce_frequent_words \u00b6 Some words appear quite often in every topic but are generally not considered stop words as found in the CountVectorizer(stop_words=\"english\") list. To further reduce these frequent words, we can use reduce_frequent_words to take the square root of the term frequency after applying the weighting scheme. Instead of the default term frequency: we take the square root of the term frequency after normalizing the frequency matrix: Although seemingly a small change, it can have quite a large effect on the number of stop words in the resulting topic representations. It can be enabled as follows: from bertopic import BERTopic from bertopic.vectorizers import ClassTfidfTransformer ctfidf_model = ClassTfidfTransformer ( reduce_frequent_words = True ) topic_model = BERTopic ( ctfidf_model = ctfidf_model ) Tip Both parameters can be used simultaneously: ClassTfidfTransformer(bm25_weighting=True, reduce_frequent_words=True)","title":"c-TF-IDF"},{"location":"getting_started/ctfidf/ctfidf.html#c-tf-idf","text":"In BERTopic, in order to get an accurate representation of the topics from our bag-of-words matrix, TF-IDF was adjusted to work on a cluster/categorical/topic level instead of a document level. This adjusted TF-IDF representation is called c-TF-IDF and takes into account what makes the documents in one cluster different from documents in another cluster: Each cluster is converted to a single document instead of a set of documents. Then, we extract the frequency of word x in class c , where c refers to the cluster we created before. This results in our class-based tf representation. This representation is L1-normalized to account for the differences in topic sizes. Then, we take the logarithm of one plus the average number of words per class A divided by the frequency of word x across all classes. We add plus one within the logarithm to force values to be positive. This results in our class-based idf representation. Like with the classic TF-IDF, we then multiply tf with idf to get the importance score per word in each class. In other words, the classical TF-IDF procedure is not used here but a modified version of the algorithm that allows for a much better representation. Since the topic representation is somewhat independent of the clustering step, we can change how the c-TF-IDF representation will look like. This can be in the form of parameter tuning, different weighting schemes, or using a diversity metric on top of it. This allows for some modularity concerning the weighting scheme: This class-based TF-IDF representation is enabled by default in BERTopic. However, we can explicitly pass it to BERTopic through the ctfidf_model allowing for parameter tuning and the customization of the topic extraction technique: from bertopic import BERTopic from bertopic.vectorizers import ClassTfidfTransformer ctfidf_model = ClassTfidfTransformer () topic_model = BERTopic ( ctfidf_model = ctfidf_model )","title":"c-TF-IDF"},{"location":"getting_started/ctfidf/ctfidf.html#parameters","text":"There are two parameters worth exploring in the ClassTfidfTransformer , namely bm25_weighting and reduce_frequent_words .","title":"Parameters"},{"location":"getting_started/ctfidf/ctfidf.html#bm25_weighting","text":"The bm25_weighting is a boolean parameter that indicates whether a class-based BM-25 weighting measure is used instead of the default method as defined in the formula at the beginning of this page. Instead of using the following weighting scheme: the class-based BM-25 weighting is used instead: At smaller datasets, this variant can be more robust to stop words that appear in your data. It can be enabled as follows: from bertopic import BERTopic from bertopic.vectorizers import ClassTfidfTransformer ctfidf_model = ClassTfidfTransformer ( bm25_weighting = True ) topic_model = BERTopic ( ctfidf_model = ctfidf_model )","title":"bm25_weighting"},{"location":"getting_started/ctfidf/ctfidf.html#reduce_frequent_words","text":"Some words appear quite often in every topic but are generally not considered stop words as found in the CountVectorizer(stop_words=\"english\") list. To further reduce these frequent words, we can use reduce_frequent_words to take the square root of the term frequency after applying the weighting scheme. Instead of the default term frequency: we take the square root of the term frequency after normalizing the frequency matrix: Although seemingly a small change, it can have quite a large effect on the number of stop words in the resulting topic representations. It can be enabled as follows: from bertopic import BERTopic from bertopic.vectorizers import ClassTfidfTransformer ctfidf_model = ClassTfidfTransformer ( reduce_frequent_words = True ) topic_model = BERTopic ( ctfidf_model = ctfidf_model ) Tip Both parameters can be used simultaneously: ClassTfidfTransformer(bm25_weighting=True, reduce_frequent_words=True)","title":"reduce_frequent_words"},{"location":"getting_started/dim_reduction/dim_reduction.html","text":"An important aspect of BERTopic is the dimensionality reduction of the input embeddings. As embeddings are often high in dimensionality, clustering becomes difficult due to the curse of dimensionality. A solution is to reduce the dimensionality of the embeddings to a workable dimensional space (e.g., 5) for clustering algorithms to work with. UMAP is used as a default in BERTopic since it can capture both the local and global high-dimensional space in lower dimensions. However, there are other solutions out there, such as PCA that users might be interested in trying out. Since BERTopic allows assumes some independency between steps, we can use any other dimensionality reduction algorithm. The image below illustrates this modularity: As a result, the umap_model parameter in BERTopic now allows for a variety of dimensionality reduction models. To do so, the class should have the following attributes: .fit(X) A function that can be used to fit the model .transform(X) A transform function that transforms the input to a lower dimensional size In other words, it should have the following structure: class DimensionalityReduction : def fit ( self , X ): return self def transform ( self , X ): return X In this section, we will go through several examples of dimensionality reduction techniques and how they can be implemented. UMAP \u00b6 As a default, BERTopic uses UMAP to perform its dimensionality reduction. To use a UMAP model with custom parameters, we simply define it and pass it to BERTopic: from bertopic import BERTopic from umap import UMAP umap_model = UMAP ( n_neighbors = 15 , n_components = 5 , min_dist = 0.0 , metric = 'cosine' ) topic_model = BERTopic ( umap_model = umap_model ) Here, we can define any parameters in UMAP to optimize for the best performance based on whatever validation metrics you are using. PCA \u00b6 Although UMAP works quite well in BERTopic and is typically advised, you might want to be using PCA instead. It can be faster to train and perform inference. To use PCA, we can simply import it from sklearn and pass it to the umap_model parameter: from bertopic import BERTopic from sklearn.decomposition import PCA dim_model = PCA ( n_components = 5 ) topic_model = BERTopic ( umap_model = dim_model ) As a small note, PCA and k-Means have worked quite well in my experiments and might be interesting to use instead of PCA and HDBSCAN. Note As you might have noticed, the dim_model is passed to umap_model which might be a bit confusing considering you are not passing a UMAP model. For now, the name of the parameter is kept the same to adhere to the current state of the API. Changing the name could lead to deprecation issues, which I want to prevent as much as possible. Truncated SVD \u00b6 Like PCA, there are a bunch more dimensionality reduction techniques in sklearn that you can be using. Here, we will demonstrate Truncated SVD but any model can be used as long as it has both a .fit() and .transform() method: from bertopic import BERTopic from sklearn.decomposition import TruncatedSVD dim_model = TruncatedSVD ( n_components = 5 ) topic_model = BERTopic ( umap_model = dim_model ) cuML UMAP \u00b6 Although the original UMAP implementation is an amazing technique, it may have difficulty handling large amounts of data. Instead, we can use cuML to speed up UMAP through GPU acceleration: from bertopic import BERTopic from cuml.manifold import UMAP umap_model = UMAP ( n_components = 5 , n_neighbors = 15 , min_dist = 0.0 ) topic_model = BERTopic ( umap_model = umap_model ) Note If you want to install cuML together with BERTopic using Google Colab, you can run the following code: !pip install bertopic !pip install cudf-cu11 dask-cudf-cu11 --extra-index-url = https://pypi.ngc.nvidia.com !pip install cuml-cu11 --extra-index-url = https://pypi.ngc.nvidia.com !pip install cugraph-cu11 --extra-index-url = https://pypi.ngc.nvidia.com !pip uninstall cupy-cuda115 -y !pip uninstall cupy-cuda11x -y !pip install cupy-cuda11x -f https://pip.cupy.dev/aarch64 Skip dimensionality reduction \u00b6 Although BERTopic applies dimensionality reduction as a default in its pipeline, this is a step that you might want to skip. We generate an \"empty\" model that simply returns the data pass it to: from bertopic import BERTopic from bertopic.dimensionality import BaseDimensionalityReduction # Fit BERTopic without actually performing any dimensionality reduction empty_dimensionality_model = BaseDimensionalityReduction () topic_model = BERTopic ( umap_model = empty_dimensionality_model ) In other words, we go from this pipeline: SBERT UMAP HDBSCAN c-TF-IDF Embeddings Dimensionality reduction Clustering Topic representation To the following pipeline: SBERT HDBSCAN c-TF-IDF Embeddings Clustering Topic representation","title":"Dimensionality Reduction"},{"location":"getting_started/dim_reduction/dim_reduction.html#umap","text":"As a default, BERTopic uses UMAP to perform its dimensionality reduction. To use a UMAP model with custom parameters, we simply define it and pass it to BERTopic: from bertopic import BERTopic from umap import UMAP umap_model = UMAP ( n_neighbors = 15 , n_components = 5 , min_dist = 0.0 , metric = 'cosine' ) topic_model = BERTopic ( umap_model = umap_model ) Here, we can define any parameters in UMAP to optimize for the best performance based on whatever validation metrics you are using.","title":"UMAP"},{"location":"getting_started/dim_reduction/dim_reduction.html#pca","text":"Although UMAP works quite well in BERTopic and is typically advised, you might want to be using PCA instead. It can be faster to train and perform inference. To use PCA, we can simply import it from sklearn and pass it to the umap_model parameter: from bertopic import BERTopic from sklearn.decomposition import PCA dim_model = PCA ( n_components = 5 ) topic_model = BERTopic ( umap_model = dim_model ) As a small note, PCA and k-Means have worked quite well in my experiments and might be interesting to use instead of PCA and HDBSCAN. Note As you might have noticed, the dim_model is passed to umap_model which might be a bit confusing considering you are not passing a UMAP model. For now, the name of the parameter is kept the same to adhere to the current state of the API. Changing the name could lead to deprecation issues, which I want to prevent as much as possible.","title":"PCA"},{"location":"getting_started/dim_reduction/dim_reduction.html#truncated-svd","text":"Like PCA, there are a bunch more dimensionality reduction techniques in sklearn that you can be using. Here, we will demonstrate Truncated SVD but any model can be used as long as it has both a .fit() and .transform() method: from bertopic import BERTopic from sklearn.decomposition import TruncatedSVD dim_model = TruncatedSVD ( n_components = 5 ) topic_model = BERTopic ( umap_model = dim_model )","title":"Truncated SVD"},{"location":"getting_started/dim_reduction/dim_reduction.html#cuml-umap","text":"Although the original UMAP implementation is an amazing technique, it may have difficulty handling large amounts of data. Instead, we can use cuML to speed up UMAP through GPU acceleration: from bertopic import BERTopic from cuml.manifold import UMAP umap_model = UMAP ( n_components = 5 , n_neighbors = 15 , min_dist = 0.0 ) topic_model = BERTopic ( umap_model = umap_model ) Note If you want to install cuML together with BERTopic using Google Colab, you can run the following code: !pip install bertopic !pip install cudf-cu11 dask-cudf-cu11 --extra-index-url = https://pypi.ngc.nvidia.com !pip install cuml-cu11 --extra-index-url = https://pypi.ngc.nvidia.com !pip install cugraph-cu11 --extra-index-url = https://pypi.ngc.nvidia.com !pip uninstall cupy-cuda115 -y !pip uninstall cupy-cuda11x -y !pip install cupy-cuda11x -f https://pip.cupy.dev/aarch64","title":"cuML UMAP"},{"location":"getting_started/dim_reduction/dim_reduction.html#skip-dimensionality-reduction","text":"Although BERTopic applies dimensionality reduction as a default in its pipeline, this is a step that you might want to skip. We generate an \"empty\" model that simply returns the data pass it to: from bertopic import BERTopic from bertopic.dimensionality import BaseDimensionalityReduction # Fit BERTopic without actually performing any dimensionality reduction empty_dimensionality_model = BaseDimensionalityReduction () topic_model = BERTopic ( umap_model = empty_dimensionality_model ) In other words, we go from this pipeline: SBERT UMAP HDBSCAN c-TF-IDF Embeddings Dimensionality reduction Clustering Topic representation To the following pipeline: SBERT HDBSCAN c-TF-IDF Embeddings Clustering Topic representation","title":"Skip dimensionality reduction"},{"location":"getting_started/distribution/distribution.html","text":"BERTopic approaches topic modeling as a cluster task and attempts to cluster semantically similar documents to extract common topics. A disadvantage of using such a method is that each document is assigned to a single cluster and therefore also a single topic. In practice, documents may contain a mixture of topics. This can be accounted for by splitting up the documents into sentences and feeding those to BERTopic. Another option is to use a cluster model that can perform soft clustering, like HDBSCAN. As BERTopic focuses on modularity, we may still want to model that mixture of topics even when we are using a hard-clustering model, like k-Means without the need to split up our documents. This is where .approximate_distribution comes in! the right problem is difficult Solving right the Solving the right problem right problem is problem is difficult create token sets topic-token set similarity document-topic distribution multi-topic assignment on a token level solving topic 2 topic 1 topic 3 topic 4 the right problem is difficult 0.75 0.32 0.16 0.21 0.29 0.81 0.47 0.26 0.12 0.33 To perform this approximation, each document is split into tokens according to the provided tokenizer in the CountVectorizer . Then, a sliding window is applied on each document creating subsets of the document. For example, with a window size of 3 and stride of 1, the document: Solving the right problem is difficult. can be split up into solving the right , the right problem , right problem is , and problem is difficult . These are called token sets. For each of these token sets, we calculate their c-TF-IDF representation and find out how similar they are to the previously generated topics. Then, the similarities to the topics for each token set are summed to create a topic distribution for the entire document. Although it is often said that documents can contain a mixture of topics, these are often modeled by assigning each word to a single topic. With this approach, we take into account that there may be multiple topics for a single word. We can make this multiple-topic word assignment a bit more accurate by then splitting these token sets up into individual tokens and assigning the topic distributions for each token set to each individual token. That way, we can visualize the extent to which a certain word contributes to a document's topic distribution. Example \u00b6 To calculate our topic distributions, we first need to fit a basic topic model: from bertopic import BERTopic from sklearn.datasets import fetch_20newsgroups docs = fetch_20newsgroups ( subset = 'all' , remove = ( 'headers' , 'footers' , 'quotes' ))[ 'data' ] topic_model = BERTopic () . fit ( docs ) After doing so, we can approximate the topic distributions for your documents: topic_distr , _ = topic_model . approximate_distribution ( docs ) The resulting topic_distr is a n x m matrix where n are the topics and m the documents. We can then visualize the distribution of topics in a document: topic_model . visualize_distribution ( topic_distr [ 1 ]) Although a topic distribution is nice, we may want to see how each token contributes to a specific topic. To do so, we need to first calculate topic distributions on a token level and then visualize the results: # Calculate the topic distributions on a token-level topic_distr , topic_token_distr = topic_model . approximate_distribution ( docs , calculate_tokens = True ) # Visualize the token-level distributions df = topic_model . visualize_approximate_distribution ( docs [ 1 ], topic_token_distr [ 1 ]) df Tip You can also approximate the topic distributions for unseen documents. It will not be as accurate as .transform but it is quite fast and can serve you well in a production setting. Note To get the stylized dataframe for .visualize_approximate_distribution you will need to have Jinja installed. If you do not have this installed, an unstylized dataframe will be returned instead. You can install Jinja via pip install jinja2 Parameters \u00b6 There are a few parameters that are of interest which will be discussed below. batch_size \u00b6 Creating token sets for each document can result in quite a large list of token sets. The similarity of these token sets with the topics can result a large matrix that might not fit into memory anymore. To circumvent this, we can process batches of documents instead to minimize the memory overload. The value for batch_size indicates the number of documents that will be processed at once: topic_distr , _ = topic_model . approximate_distribution ( docs , batch_size = 500 ) window \u00b6 The number of tokens that are combined into token sets are defined by the window parameter. Seeing as we are performing a sliding window, we can change the size of the window. A larger window takes more tokens into account but setting it too large can result in considering too much information. Personally, I like to have this window between 4 and 8: topic_distr , _ = topic_model . approximate_distribution ( docs , window = 4 ) stride \u00b6 The sliding window that is performed on a document shifts, as a default, 1 token to the right each time to create its token sets. As a result, especially with large windows, a single token gets judged several times. We can use the stride parameter to increase the number of tokens the window shifts to the right. By increasing this value, we are judging each token less frequently which often results in a much faster calculation. Combining this parameter with window is preferred. For example, if we have a very large dataset, we can set stride=4 and window=8 to judge token sets that contain 8 tokens but that are shifted with 4 steps each time. As a result, this increases the computational speed quite a bit: topic_distr , _ = topic_model . approximate_distribution ( docs , window = 4 ) use_embedding_model \u00b6 As a default, we compare the c-TF-IDF calculations between the token sets and all topics. Due to its bag-of-word representation, this is quite fast. However, you might want to use the selected embedding_model instead to do this comparison. Do note that due to the many token sets, it is often computationally quite a bit slower: topic_distr , _ = topic_model . approximate_distribution ( docs , use_embedding_model = True )","title":"Topic Distributions"},{"location":"getting_started/distribution/distribution.html#example","text":"To calculate our topic distributions, we first need to fit a basic topic model: from bertopic import BERTopic from sklearn.datasets import fetch_20newsgroups docs = fetch_20newsgroups ( subset = 'all' , remove = ( 'headers' , 'footers' , 'quotes' ))[ 'data' ] topic_model = BERTopic () . fit ( docs ) After doing so, we can approximate the topic distributions for your documents: topic_distr , _ = topic_model . approximate_distribution ( docs ) The resulting topic_distr is a n x m matrix where n are the topics and m the documents. We can then visualize the distribution of topics in a document: topic_model . visualize_distribution ( topic_distr [ 1 ]) Although a topic distribution is nice, we may want to see how each token contributes to a specific topic. To do so, we need to first calculate topic distributions on a token level and then visualize the results: # Calculate the topic distributions on a token-level topic_distr , topic_token_distr = topic_model . approximate_distribution ( docs , calculate_tokens = True ) # Visualize the token-level distributions df = topic_model . visualize_approximate_distribution ( docs [ 1 ], topic_token_distr [ 1 ]) df Tip You can also approximate the topic distributions for unseen documents. It will not be as accurate as .transform but it is quite fast and can serve you well in a production setting. Note To get the stylized dataframe for .visualize_approximate_distribution you will need to have Jinja installed. If you do not have this installed, an unstylized dataframe will be returned instead. You can install Jinja via pip install jinja2","title":"Example"},{"location":"getting_started/distribution/distribution.html#parameters","text":"There are a few parameters that are of interest which will be discussed below.","title":"Parameters"},{"location":"getting_started/distribution/distribution.html#batch_size","text":"Creating token sets for each document can result in quite a large list of token sets. The similarity of these token sets with the topics can result a large matrix that might not fit into memory anymore. To circumvent this, we can process batches of documents instead to minimize the memory overload. The value for batch_size indicates the number of documents that will be processed at once: topic_distr , _ = topic_model . approximate_distribution ( docs , batch_size = 500 )","title":"batch_size"},{"location":"getting_started/distribution/distribution.html#window","text":"The number of tokens that are combined into token sets are defined by the window parameter. Seeing as we are performing a sliding window, we can change the size of the window. A larger window takes more tokens into account but setting it too large can result in considering too much information. Personally, I like to have this window between 4 and 8: topic_distr , _ = topic_model . approximate_distribution ( docs , window = 4 )","title":"window"},{"location":"getting_started/distribution/distribution.html#stride","text":"The sliding window that is performed on a document shifts, as a default, 1 token to the right each time to create its token sets. As a result, especially with large windows, a single token gets judged several times. We can use the stride parameter to increase the number of tokens the window shifts to the right. By increasing this value, we are judging each token less frequently which often results in a much faster calculation. Combining this parameter with window is preferred. For example, if we have a very large dataset, we can set stride=4 and window=8 to judge token sets that contain 8 tokens but that are shifted with 4 steps each time. As a result, this increases the computational speed quite a bit: topic_distr , _ = topic_model . approximate_distribution ( docs , window = 4 )","title":"stride"},{"location":"getting_started/distribution/distribution.html#use_embedding_model","text":"As a default, we compare the c-TF-IDF calculations between the token sets and all topics. Due to its bag-of-word representation, this is quite fast. However, you might want to use the selected embedding_model instead to do this comparison. Do note that due to the many token sets, it is often computationally quite a bit slower: topic_distr , _ = topic_model . approximate_distribution ( docs , use_embedding_model = True )","title":"use_embedding_model"},{"location":"getting_started/embeddings/embeddings.html","text":"Embedding Models \u00b6 BERTopic starts with transforming our input documents into numerical representations. Although there are many ways this can be achieved, we typically use sentence-transformers ( \"all-MiniLM-L6-v2\" ) as it is quite capable of capturing the semantic similarity between documents. However, there is not one perfect embedding model and you might want to be using something entirely different for your use case. Since BERTopic assumes some independence among steps, we can allow for this modularity: This modularity allows us not only to choose any embedding model to convert our documents into numerical representations, we can use essentially any data to perform our clustering. When new state-of-the-art pre-trained embedding models are released, BERTopic will be able to use them. As a result, BERTopic grows with any new models being released. Out of the box, BERTopic supports several embedding techniques. In this section, we will go through several of them and how they can be implemented. Sentence Transformers \u00b6 You can select any model from sentence-transformers here and pass it through BERTopic with embedding_model : from bertopic import BERTopic topic_model = BERTopic ( embedding_model = \"all-MiniLM-L6-v2\" ) Or select a SentenceTransformer model with your parameters: from sentence_transformers import SentenceTransformer sentence_model = SentenceTransformer ( \"all-MiniLM-L6-v2\" ) topic_model = BERTopic ( embedding_model = sentence_model ) Tip! This embedding back-end was put here first for a reason, sentence-transformers works amazing out of the box! Playing around with different models can give you great results. Also, make sure to frequently visit this page as new models are often released. \ud83e\udd17 Hugging Face Transformers \u00b6 To use a Hugging Face transformers model, load in a pipeline and point to any model found on their model hub (https://huggingface.co/models): from transformers.pipelines import pipeline embedding_model = pipeline ( \"feature-extraction\" , model = \"distilbert-base-cased\" ) topic_model = BERTopic ( embedding_model = embedding_model ) Tip! These transformers also work quite well using sentence-transformers which has great optimizations tricks that make using it a bit faster. Flair \u00b6 Flair allows you to choose almost any embedding model that is publicly available. Flair can be used as follows: from flair.embeddings import TransformerDocumentEmbeddings roberta = TransformerDocumentEmbeddings ( 'roberta-base' ) topic_model = BERTopic ( embedding_model = roberta ) You can select any \ud83e\udd17 transformers model here . Moreover, you can also use Flair to use word embeddings and pool them to create document embeddings. Under the hood, Flair simply averages all word embeddings in a document. Then, we can easily pass it to BERTopic to use those word embeddings as document embeddings: from flair.embeddings import WordEmbeddings , DocumentPoolEmbeddings glove_embedding = WordEmbeddings ( 'crawl' ) document_glove_embeddings = DocumentPoolEmbeddings ([ glove_embedding ]) topic_model = BERTopic ( embedding_model = document_glove_embeddings ) Spacy \u00b6 Spacy is an amazing framework for processing text. There are many models available across many languages for modeling text. To use Spacy's non-transformer models in BERTopic: import spacy nlp = spacy . load ( \"en_core_web_md\" , exclude = [ 'tagger' , 'parser' , 'ner' , 'attribute_ruler' , 'lemmatizer' ]) topic_model = BERTopic ( embedding_model = nlp ) Using spacy-transformer models: import spacy spacy . prefer_gpu () nlp = spacy . load ( \"en_core_web_trf\" , exclude = [ 'tagger' , 'parser' , 'ner' , 'attribute_ruler' , 'lemmatizer' ]) topic_model = BERTopic ( embedding_model = nlp ) If you run into memory issues with spacy-transformer models, try: import spacy from thinc.api import set_gpu_allocator , require_gpu nlp = spacy . load ( \"en_core_web_trf\" , exclude = [ 'tagger' , 'parser' , 'ner' , 'attribute_ruler' , 'lemmatizer' ]) set_gpu_allocator ( \"pytorch\" ) require_gpu ( 0 ) topic_model = BERTopic ( embedding_model = nlp ) Universal Sentence Encoder (USE) \u00b6 The Universal Sentence Encoder encodes text into high-dimensional vectors that are used here for embedding the documents. The model is trained and optimized for greater-than-word length text, such as sentences, phrases, or short paragraphs. Using USE in BERTopic is rather straightforward: import tensorflow_hub embedding_model = tensorflow_hub . load ( \"https://tfhub.dev/google/universal-sentence-encoder/4\" ) topic_model = BERTopic ( embedding_model = embedding_model ) Gensim \u00b6 BERTopic supports the gensim.downloader module, which allows it to download any word embedding model supported by Gensim. Typically, these are Glove, Word2Vec, or FastText embeddings: import gensim.downloader as api ft = api . load ( 'fasttext-wiki-news-subwords-300' ) topic_model = BERTopic ( embedding_model = ft ) Tip! Gensim is primarily used for Word Embedding models. This works typically best for short documents since the word embeddings are pooled. Scikit-Learn Embeddings \u00b6 Scikit-Learn is a framework for more than just machine learning. It offers many preprocessing tools, some of which can be used to create representations for text. Many of these tools are relatively lightweight and do not require a GPU. While the representations may be less expressive than many BERT models, the fact that it runs much faster can make it a relevant candidate to consider. If you have a scikit-learn compatible pipeline that you'd like to use to embed text then you can also pass this to BERTopic. from sklearn.pipeline import make_pipeline from sklearn.decomposition import TruncatedSVD from sklearn.feature_extraction.text import TfidfVectorizer pipe = make_pipeline ( TfidfVectorizer (), TruncatedSVD ( 100 ) ) topic_model = BERTopic ( embedding_model = pipe ) Warning One caveat to be aware of is that scikit-learns base Pipeline class does not support the .partial_fit() -API. If you have a pipeline that theoretically should be able to support online learning then you might want to explore the scikit-partial project. Moreover, since this backend does not generate representations on a word level, it does not support the bertopic.representation models. Custom Backend \u00b6 If your backend or model cannot be found in the ones currently available, you can use the bertopic.backend.BaseEmbedder class to create your backend. Below, you will find an example of creating a SentenceTransformer backend for BERTopic: from bertopic.backend import BaseEmbedder from sentence_transformers import SentenceTransformer class CustomEmbedder ( BaseEmbedder ): def __init__ ( self , embedding_model ): super () . __init__ () self . embedding_model = embedding_model def embed ( self , documents , verbose = False ): embeddings = self . embedding_model . encode ( documents , show_progress_bar = verbose ) return embeddings # Create custom backend embedding_model = SentenceTransformer ( \"all-MiniLM-L6-v2\" ) custom_embedder = CustomEmbedder ( embedding_model = embedding_model ) # Pass custom backend to bertopic topic_model = BERTopic ( embedding_model = custom_embedder ) Custom Embeddings \u00b6 The base models in BERTopic are BERT-based models that work well with document similarity tasks. Your documents, however, might be too specific for a general pre-trained model to be used. Fortunately, you can use the embedding model in BERTopic to create document features. You only need to prepare the document embeddings yourself and pass them through fit_transform of BERTopic: from sklearn.datasets import fetch_20newsgroups from sentence_transformers import SentenceTransformer # Prepare embeddings docs = fetch_20newsgroups ( subset = 'all' , remove = ( 'headers' , 'footers' , 'quotes' ))[ 'data' ] sentence_model = SentenceTransformer ( \"all-MiniLM-L6-v2\" ) embeddings = sentence_model . encode ( docs , show_progress_bar = False ) # Train our topic model using our pre-trained sentence-transformers embeddings topic_model = BERTopic () topics , probs = topic_model . fit_transform ( docs , embeddings ) As you can see above, we used a SentenceTransformer model to create the embedding. You could also have used \ud83e\udd17 transformers , Doc2Vec , or any other embedding method. TF-IDF \u00b6 As mentioned above, any embedding technique can be used. However, when running UMAP, the typical distance metric is cosine which does not work quite well for a TF-IDF matrix. Instead, BERTopic will recognize that a sparse matrix is passed and use hellinger instead which works quite well for the similarity between probability distributions. We simply create a TF-IDF matrix and use them as embeddings in our fit_transform method: from sklearn.datasets import fetch_20newsgroups from sklearn.feature_extraction.text import TfidfVectorizer # Create TF-IDF sparse matrix docs = fetch_20newsgroups ( subset = 'all' , remove = ( 'headers' , 'footers' , 'quotes' ))[ 'data' ] vectorizer = TfidfVectorizer ( min_df = 5 ) embeddings = vectorizer . fit_transform ( docs ) # Train our topic model using TF-IDF vectors topic_model = BERTopic ( stop_words = \"english\" ) topics , probs = topic_model . fit_transform ( docs , embeddings ) Here, you will probably notice that creating the embeddings is quite fast whereas fit_transform is quite slow. This is to be expected as reducing the dimensionality of a large sparse matrix takes some time. The inverse of using transformer embeddings is true: creating the embeddings is slow whereas fit_transform is quite fast.","title":"Embeddings"},{"location":"getting_started/embeddings/embeddings.html#embedding-models","text":"BERTopic starts with transforming our input documents into numerical representations. Although there are many ways this can be achieved, we typically use sentence-transformers ( \"all-MiniLM-L6-v2\" ) as it is quite capable of capturing the semantic similarity between documents. However, there is not one perfect embedding model and you might want to be using something entirely different for your use case. Since BERTopic assumes some independence among steps, we can allow for this modularity: This modularity allows us not only to choose any embedding model to convert our documents into numerical representations, we can use essentially any data to perform our clustering. When new state-of-the-art pre-trained embedding models are released, BERTopic will be able to use them. As a result, BERTopic grows with any new models being released. Out of the box, BERTopic supports several embedding techniques. In this section, we will go through several of them and how they can be implemented.","title":"Embedding Models"},{"location":"getting_started/embeddings/embeddings.html#sentence-transformers","text":"You can select any model from sentence-transformers here and pass it through BERTopic with embedding_model : from bertopic import BERTopic topic_model = BERTopic ( embedding_model = \"all-MiniLM-L6-v2\" ) Or select a SentenceTransformer model with your parameters: from sentence_transformers import SentenceTransformer sentence_model = SentenceTransformer ( \"all-MiniLM-L6-v2\" ) topic_model = BERTopic ( embedding_model = sentence_model ) Tip! This embedding back-end was put here first for a reason, sentence-transformers works amazing out of the box! Playing around with different models can give you great results. Also, make sure to frequently visit this page as new models are often released.","title":"Sentence Transformers"},{"location":"getting_started/embeddings/embeddings.html#hugging-face-transformers","text":"To use a Hugging Face transformers model, load in a pipeline and point to any model found on their model hub (https://huggingface.co/models): from transformers.pipelines import pipeline embedding_model = pipeline ( \"feature-extraction\" , model = \"distilbert-base-cased\" ) topic_model = BERTopic ( embedding_model = embedding_model ) Tip! These transformers also work quite well using sentence-transformers which has great optimizations tricks that make using it a bit faster.","title":"\ud83e\udd17 Hugging Face Transformers"},{"location":"getting_started/embeddings/embeddings.html#flair","text":"Flair allows you to choose almost any embedding model that is publicly available. Flair can be used as follows: from flair.embeddings import TransformerDocumentEmbeddings roberta = TransformerDocumentEmbeddings ( 'roberta-base' ) topic_model = BERTopic ( embedding_model = roberta ) You can select any \ud83e\udd17 transformers model here . Moreover, you can also use Flair to use word embeddings and pool them to create document embeddings. Under the hood, Flair simply averages all word embeddings in a document. Then, we can easily pass it to BERTopic to use those word embeddings as document embeddings: from flair.embeddings import WordEmbeddings , DocumentPoolEmbeddings glove_embedding = WordEmbeddings ( 'crawl' ) document_glove_embeddings = DocumentPoolEmbeddings ([ glove_embedding ]) topic_model = BERTopic ( embedding_model = document_glove_embeddings )","title":"Flair"},{"location":"getting_started/embeddings/embeddings.html#spacy","text":"Spacy is an amazing framework for processing text. There are many models available across many languages for modeling text. To use Spacy's non-transformer models in BERTopic: import spacy nlp = spacy . load ( \"en_core_web_md\" , exclude = [ 'tagger' , 'parser' , 'ner' , 'attribute_ruler' , 'lemmatizer' ]) topic_model = BERTopic ( embedding_model = nlp ) Using spacy-transformer models: import spacy spacy . prefer_gpu () nlp = spacy . load ( \"en_core_web_trf\" , exclude = [ 'tagger' , 'parser' , 'ner' , 'attribute_ruler' , 'lemmatizer' ]) topic_model = BERTopic ( embedding_model = nlp ) If you run into memory issues with spacy-transformer models, try: import spacy from thinc.api import set_gpu_allocator , require_gpu nlp = spacy . load ( \"en_core_web_trf\" , exclude = [ 'tagger' , 'parser' , 'ner' , 'attribute_ruler' , 'lemmatizer' ]) set_gpu_allocator ( \"pytorch\" ) require_gpu ( 0 ) topic_model = BERTopic ( embedding_model = nlp )","title":"Spacy"},{"location":"getting_started/embeddings/embeddings.html#universal-sentence-encoder-use","text":"The Universal Sentence Encoder encodes text into high-dimensional vectors that are used here for embedding the documents. The model is trained and optimized for greater-than-word length text, such as sentences, phrases, or short paragraphs. Using USE in BERTopic is rather straightforward: import tensorflow_hub embedding_model = tensorflow_hub . load ( \"https://tfhub.dev/google/universal-sentence-encoder/4\" ) topic_model = BERTopic ( embedding_model = embedding_model )","title":"Universal Sentence Encoder (USE)"},{"location":"getting_started/embeddings/embeddings.html#gensim","text":"BERTopic supports the gensim.downloader module, which allows it to download any word embedding model supported by Gensim. Typically, these are Glove, Word2Vec, or FastText embeddings: import gensim.downloader as api ft = api . load ( 'fasttext-wiki-news-subwords-300' ) topic_model = BERTopic ( embedding_model = ft ) Tip! Gensim is primarily used for Word Embedding models. This works typically best for short documents since the word embeddings are pooled.","title":"Gensim"},{"location":"getting_started/embeddings/embeddings.html#scikit-learn-embeddings","text":"Scikit-Learn is a framework for more than just machine learning. It offers many preprocessing tools, some of which can be used to create representations for text. Many of these tools are relatively lightweight and do not require a GPU. While the representations may be less expressive than many BERT models, the fact that it runs much faster can make it a relevant candidate to consider. If you have a scikit-learn compatible pipeline that you'd like to use to embed text then you can also pass this to BERTopic. from sklearn.pipeline import make_pipeline from sklearn.decomposition import TruncatedSVD from sklearn.feature_extraction.text import TfidfVectorizer pipe = make_pipeline ( TfidfVectorizer (), TruncatedSVD ( 100 ) ) topic_model = BERTopic ( embedding_model = pipe ) Warning One caveat to be aware of is that scikit-learns base Pipeline class does not support the .partial_fit() -API. If you have a pipeline that theoretically should be able to support online learning then you might want to explore the scikit-partial project. Moreover, since this backend does not generate representations on a word level, it does not support the bertopic.representation models.","title":"Scikit-Learn Embeddings"},{"location":"getting_started/embeddings/embeddings.html#custom-backend","text":"If your backend or model cannot be found in the ones currently available, you can use the bertopic.backend.BaseEmbedder class to create your backend. Below, you will find an example of creating a SentenceTransformer backend for BERTopic: from bertopic.backend import BaseEmbedder from sentence_transformers import SentenceTransformer class CustomEmbedder ( BaseEmbedder ): def __init__ ( self , embedding_model ): super () . __init__ () self . embedding_model = embedding_model def embed ( self , documents , verbose = False ): embeddings = self . embedding_model . encode ( documents , show_progress_bar = verbose ) return embeddings # Create custom backend embedding_model = SentenceTransformer ( \"all-MiniLM-L6-v2\" ) custom_embedder = CustomEmbedder ( embedding_model = embedding_model ) # Pass custom backend to bertopic topic_model = BERTopic ( embedding_model = custom_embedder )","title":"Custom Backend"},{"location":"getting_started/embeddings/embeddings.html#custom-embeddings","text":"The base models in BERTopic are BERT-based models that work well with document similarity tasks. Your documents, however, might be too specific for a general pre-trained model to be used. Fortunately, you can use the embedding model in BERTopic to create document features. You only need to prepare the document embeddings yourself and pass them through fit_transform of BERTopic: from sklearn.datasets import fetch_20newsgroups from sentence_transformers import SentenceTransformer # Prepare embeddings docs = fetch_20newsgroups ( subset = 'all' , remove = ( 'headers' , 'footers' , 'quotes' ))[ 'data' ] sentence_model = SentenceTransformer ( \"all-MiniLM-L6-v2\" ) embeddings = sentence_model . encode ( docs , show_progress_bar = False ) # Train our topic model using our pre-trained sentence-transformers embeddings topic_model = BERTopic () topics , probs = topic_model . fit_transform ( docs , embeddings ) As you can see above, we used a SentenceTransformer model to create the embedding. You could also have used \ud83e\udd17 transformers , Doc2Vec , or any other embedding method.","title":"Custom Embeddings"},{"location":"getting_started/embeddings/embeddings.html#tf-idf","text":"As mentioned above, any embedding technique can be used. However, when running UMAP, the typical distance metric is cosine which does not work quite well for a TF-IDF matrix. Instead, BERTopic will recognize that a sparse matrix is passed and use hellinger instead which works quite well for the similarity between probability distributions. We simply create a TF-IDF matrix and use them as embeddings in our fit_transform method: from sklearn.datasets import fetch_20newsgroups from sklearn.feature_extraction.text import TfidfVectorizer # Create TF-IDF sparse matrix docs = fetch_20newsgroups ( subset = 'all' , remove = ( 'headers' , 'footers' , 'quotes' ))[ 'data' ] vectorizer = TfidfVectorizer ( min_df = 5 ) embeddings = vectorizer . fit_transform ( docs ) # Train our topic model using TF-IDF vectors topic_model = BERTopic ( stop_words = \"english\" ) topics , probs = topic_model . fit_transform ( docs , embeddings ) Here, you will probably notice that creating the embeddings is quite fast whereas fit_transform is quite slow. This is to be expected as reducing the dimensionality of a large sparse matrix takes some time. The inverse of using transformer embeddings is true: creating the embeddings is slow whereas fit_transform is quite fast.","title":"TF-IDF"},{"location":"getting_started/guided/guided.html","text":"Guided Topic Modeling or Seeded Topic Modeling is a collection of techniques that guides the topic modeling approach by setting several seed topics to which the model will converge to. These techniques allow the user to set a predefined number of topic representations that are sure to be in documents. For example, take an IT business that has a ticket system for the software their clients use. Those tickets may typically contain information about a specific bug regarding login issues that the IT business is aware of. To model that bug, we can create a seed topic representation containing the words bug , login , password , and username . By defining those words, a Guided Topic Modeling approach will try to converge at least one topic to those words. \"drug cancer drugs doctor\" \"windows drive dos file\" \"space launch orbit lunar\" Concatenate and embed the keywords/keyphrases using the embedding model. For each document, generate labels by finding which seeded topic fits best based on cosine similarity between embeddings. Average the embedding of each document with the selected seeded topic. Define seed topics through keywords or keyphrases. \"drug\", \"cancer\", \"drugs\", \"doctor\" Seed topic 1 Seed topic 2 Seed topic 3 \"windows\", \"drive\", \"dos\", \"file\" \"space\", \"launch\", \"orbit\", \"lunar\" Seed topic 3 Seed topic 2 No seed topic match found Seed topic 2 seed topic embedding document embedding + 2 Mutiply the IDF values of the seeded keywords across all topics with 1.2. Word IDF Multiplier Adjusted IDF drug 1.2 .55 .66 1.2 doctor .78 .94 cat 1 .22 .22 1 dog .11 .11 space 1.2 .35 .42 1.2 launch .89 1.07 Guided BERTopic has two main steps: First, we create embeddings for each seeded topic by joining them and passing them through the document embedder. These embeddings will be compared with the existing document embeddings through cosine similarity and assigned a label. If the document is most similar to a seeded topic, then it will get that topic's label. If it is most similar to the average document embedding, it will get the -1 label. These labels are then passed through UMAP to create a semi-supervised approach that should nudge the topic creation to the seeded topics. Second, we take all words in seed_topic_list and assign them a multiplier larger than 1. Those multipliers will be used to increase the IDF values of the words across all topics thereby increasing the likelihood that a seeded topic word will appear in a topic. This does, however, also increase the chance of an irrelevant topic having unrelated words. In practice, this should not be an issue since the IDF value is likely to remain low regardless of the multiplier. The multiplier is now a fixed value but may change to something more elegant, like taking the distribution of IDF values and its position into account when defining the multiplier. Example \u00b6 To demonstrate Guided BERTopic, we use the 20 Newsgroups dataset as our example. We have frequently used this dataset in BERTopic examples and we sometimes see a topic generated about health with words such as drug and cancer being important. However, due to the stochastic nature of UMAP, this topic is not always found. In order to guide BERTopic to that topic, we create a seed topic list that we pass through our model. However, there may be several other topics that we know should be in the documents. Let's also initialize those: from bertopic import BERTopic from sklearn.datasets import fetch_20newsgroups docs = fetch_20newsgroups ( subset = 'all' , remove = ( 'headers' , 'footers' , 'quotes' ))[ \"data\" ] seed_topic_list = [[ \"drug\" , \"cancer\" , \"drugs\" , \"doctor\" ], [ \"windows\" , \"drive\" , \"dos\" , \"file\" ], [ \"space\" , \"launch\" , \"orbit\" , \"lunar\" ]] topic_model = BERTopic ( seed_topic_list = seed_topic_list ) topics , probs = topic_model . fit_transform ( docs ) As you can see above, the seed_topic_list contains a list of topic representations. By defining the above topics BERTopic is more likely to model the defined seeded topics. However, BERTopic is merely nudged towards creating those topics. In practice, if the seeded topics do not exist or might be divided into smaller topics, then they will not be modeled. Thus, seed topics need to be accurate to accurately converge towards them.","title":"Guided Topic Modeling"},{"location":"getting_started/guided/guided.html#example","text":"To demonstrate Guided BERTopic, we use the 20 Newsgroups dataset as our example. We have frequently used this dataset in BERTopic examples and we sometimes see a topic generated about health with words such as drug and cancer being important. However, due to the stochastic nature of UMAP, this topic is not always found. In order to guide BERTopic to that topic, we create a seed topic list that we pass through our model. However, there may be several other topics that we know should be in the documents. Let's also initialize those: from bertopic import BERTopic from sklearn.datasets import fetch_20newsgroups docs = fetch_20newsgroups ( subset = 'all' , remove = ( 'headers' , 'footers' , 'quotes' ))[ \"data\" ] seed_topic_list = [[ \"drug\" , \"cancer\" , \"drugs\" , \"doctor\" ], [ \"windows\" , \"drive\" , \"dos\" , \"file\" ], [ \"space\" , \"launch\" , \"orbit\" , \"lunar\" ]] topic_model = BERTopic ( seed_topic_list = seed_topic_list ) topics , probs = topic_model . fit_transform ( docs ) As you can see above, the seed_topic_list contains a list of topic representations. By defining the above topics BERTopic is more likely to model the defined seeded topics. However, BERTopic is merely nudged towards creating those topics. In practice, if the seeded topics do not exist or might be divided into smaller topics, then they will not be modeled. Thus, seed topics need to be accurate to accurately converge towards them.","title":"Example"},{"location":"getting_started/hierarchicaltopics/hierarchicaltopics.html","text":"When tweaking your topic model, the number of topics that are generated has a large effect on the quality of the topic representations. Some topics could be merged and having an understanding of the effect will help you understand which topics should and which should not be merged. That is where hierarchical topic modeling comes in. It tries to model the possible hierarchical nature of the topics you have created to understand which topics are similar to each other. Moreover, you will have more insight into sub-topics that might exist in your data. Create a distance matrix by calculating the cosine similarity between c-TF-IDF representations of each topic. Apply a linkage function of choice on the distance matrix to model the hierarchical structure of topics. Topic 26 Topic 1 Topic 38 Topic 42 re-calculate c-TF-IDF Update the c-TF-IDF representation based on the collection of documents across the merged topics. Topic 1 .12 .12 .53 .53 .74 .74 .89 .89 .24 .24 .01 .01 1 1 1 1 ... ... ... ... ... ... ... ... 1 2 3 1 2 3 n ... . . . n In BERTopic, we can approximate this potential hierarchy by making use of our topic-term matrix (c-TF-IDF matrix). This matrix contains information about the importance of every word in every topic and makes for a nice numerical representation of our topics. The smaller the distance between two c-TF-IDF representations, the more similar we assume they are. In practice, this process of merging topics is done through the hierarchical clustering capabilities of scipy (see here ). It allows for several linkage methods through which we can approximate our topic hierarchy. As a default, we are using the ward but many others are available. Whenever we merge two topics, we can calculate the c-TF-IDF representation of these two merged by summing their bag-of-words representation. We assume that two sets of topics are merged and that all others are kept the same, regardless of their location in the hierarchy. This helps us isolate the potential effect of merging sets of topics. As a result, we can see the topic representation at each level in the tree. Example \u00b6 To demonstrate hierarchical topic modeling with BERTopic, we use the 20 Newsgroups dataset to see how the topics that we uncover are represented in the 20 categories of documents. First, we train a basic BERTopic model: from bertopic import BERTopic from sklearn.datasets import fetch_20newsgroups docs = fetch_20newsgroups ( subset = 'all' , remove = ( 'headers' , 'footers' , 'quotes' ))[ \"data\" ] topic_model = BERTopic ( verbose = True ) topics , probs = topic_model . fit_transform ( docs ) Next, we can use our fitted BERTopic model to extract possible hierarchies from our c-TF-IDF matrix: hierarchical_topics = topic_model . hierarchical_topics ( docs ) The resulting hierarchical_topics is a dataframe in which merged topics are described. For example, if you would merge two topics, what would the topic representation of the new topic be? Linkage functions \u00b6 When creating the potential hierarchical nature of topics, we use Scipy's ward linkage function as a default to generate the hierarchy. However, you might want to use a different linkage function for your use case, such as single , complete , average , centroid , or median . In BERTopic, you can define the linkage function yourself, including the distance function that you would like to use: from scipy.cluster import hierarchy as sch from bertopic import BERTopic topic_model = BERTopic () topics , probs = topic_model . fit_transform ( docs ) # Hierarchical topics linkage_function = lambda x : sch . linkage ( x , 'single' , optimal_ordering = True ) hierarchical_topics = topic_model . hierarchical_topics ( docs , linkage_function = linkage_function ) Visualizations \u00b6 To visualize these results, we can start by running a familiar function, namely topic_model.visualize_hierarchy : topic_model . visualize_hierarchy ( hierarchical_topics = hierarchical_topics ) If you hover over the black circles, you will see the topic representation at that level of the hierarchy. These representations help you understand the effect of merging certain topics. Some might be logical to merge whilst others might not. Moreover, we can now see which sub-topics can be found within certain larger themes. Although this gives a nice overview of the potential hierarchy, hovering over all black circles can be tiresome. Instead, we can use topic_model.get_topic_tree to create a text-based representation of this hierarchy. Although the general structure is more difficult to view, we can see better which topics could be logically merged: >>> tree = topic_model . get_topic_tree ( hierarchical_topics ) >>> print ( tree ) . \u2514\u2500 atheists_atheism_god_moral_atheist \u251c\u2500 atheists_atheism_god_atheist_argument \u2502 \u251c\u2500\u25a0\u2500\u2500 atheists_atheism_god_atheist_argument \u2500\u2500 Topic : 21 \u2502 \u2514\u2500\u25a0\u2500\u2500 br_god_exist_genetic_existence \u2500\u2500 Topic : 124 \u2514\u2500\u25a0\u2500\u2500 moral_morality_objective_immoral_morals \u2500\u2500 Topic : 29 Click here to view the full tree. . \u251c\u2500people_armenian_said_god_armenians \u2502 \u251c\u2500god_jesus_jehovah_lord_christ \u2502 \u2502 \u251c\u2500god_jesus_jehovah_lord_christ \u2502 \u2502 \u2502 \u251c\u2500jehovah_lord_mormon_mcconkie_god \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500ra_satan_thou_god_lucifer \u2500\u2500 Topic: 94 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500jehovah_lord_mormon_mcconkie_unto \u2500\u2500 Topic: 78 \u2502 \u2502 \u2502 \u2514\u2500jesus_mary_god_hell_sin \u2502 \u2502 \u2502 \u251c\u2500jesus_hell_god_eternal_heaven \u2502 \u2502 \u2502 \u2502 \u251c\u2500hell_jesus_eternal_god_heaven \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500jesus_tomb_disciples_resurrection_john \u2500\u2500 Topic: 69 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500hell_eternal_god_jesus_heaven \u2500\u2500 Topic: 53 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500aaron_baptism_sin_law_god \u2500\u2500 Topic: 89 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500mary_sin_maria_priest_conception \u2500\u2500 Topic: 56 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500marriage_married_marry_ceremony_marriages \u2500\u2500 Topic: 110 \u2502 \u2514\u2500people_armenian_armenians_said_mr \u2502 \u251c\u2500people_armenian_armenians_said_israel \u2502 \u2502 \u251c\u2500god_homosexual_homosexuality_atheists_sex \u2502 \u2502 \u2502 \u251c\u2500homosexual_homosexuality_sex_gay_homosexuals \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500kinsey_sex_gay_men_sexual \u2500\u2500 Topic: 44 \u2502 \u2502 \u2502 \u2502 \u2514\u2500homosexuality_homosexual_sin_homosexuals_gay \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500gay_homosexual_homosexuals_sexual_cramer \u2500\u2500 Topic: 50 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500homosexuality_homosexual_sin_paul_sex \u2500\u2500 Topic: 27 \u2502 \u2502 \u2502 \u2514\u2500god_atheists_atheism_moral_atheist \u2502 \u2502 \u2502 \u251c\u2500islam_quran_judas_islamic_book \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500jim_context_challenges_articles_quote \u2500\u2500 Topic: 36 \u2502 \u2502 \u2502 \u2502 \u2514\u2500islam_quran_judas_islamic_book \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500islam_quran_islamic_rushdie_muslims \u2500\u2500 Topic: 31 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500judas_scripture_bible_books_greek \u2500\u2500 Topic: 33 \u2502 \u2502 \u2502 \u2514\u2500atheists_atheism_god_moral_atheist \u2502 \u2502 \u2502 \u251c\u2500atheists_atheism_god_atheist_argument \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500atheists_atheism_god_atheist_argument \u2500\u2500 Topic: 21 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500br_god_exist_genetic_existence \u2500\u2500 Topic: 124 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500moral_morality_objective_immoral_morals \u2500\u2500 Topic: 29 \u2502 \u2502 \u2514\u2500armenian_armenians_people_israel_said \u2502 \u2502 \u251c\u2500armenian_armenians_israel_people_jews \u2502 \u2502 \u2502 \u251c\u2500tax_rights_government_income_taxes \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500rights_right_slavery_slaves_residence \u2500\u2500 Topic: 106 \u2502 \u2502 \u2502 \u2502 \u2514\u2500tax_government_taxes_income_libertarians \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500government_libertarians_libertarian_regulation_party \u2500\u2500 Topic: 58 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500tax_taxes_income_billion_deficit \u2500\u2500 Topic: 41 \u2502 \u2502 \u2502 \u2514\u2500armenian_armenians_israel_people_jews \u2502 \u2502 \u2502 \u251c\u2500gun_guns_militia_firearms_amendment \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500blacks_penalty_death_cruel_punishment \u2500\u2500 Topic: 55 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500gun_guns_militia_firearms_amendment \u2500\u2500 Topic: 7 \u2502 \u2502 \u2502 \u2514\u2500armenian_armenians_israel_jews_turkish \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500israel_israeli_jews_arab_jewish \u2500\u2500 Topic: 4 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500armenian_armenians_turkish_armenia_azerbaijan \u2500\u2500 Topic: 15 \u2502 \u2502 \u2514\u2500stephanopoulos_president_mr_myers_ms \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500serbs_muslims_stephanopoulos_mr_bosnia \u2500\u2500 Topic: 35 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500myers_stephanopoulos_president_ms_mr \u2500\u2500 Topic: 87 \u2502 \u2514\u2500batf_fbi_koresh_compound_gas \u2502 \u251c\u2500\u25a0\u2500\u2500reno_workers_janet_clinton_waco \u2500\u2500 Topic: 77 \u2502 \u2514\u2500batf_fbi_koresh_gas_compound \u2502 \u251c\u2500batf_koresh_fbi_warrant_compound \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500batf_warrant_raid_compound_fbi \u2500\u2500 Topic: 42 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500koresh_batf_fbi_children_compound \u2500\u2500 Topic: 61 \u2502 \u2514\u2500\u25a0\u2500\u2500fbi_gas_tear_bds_building \u2500\u2500 Topic: 23 \u2514\u2500use_like_just_dont_new \u251c\u2500game_team_year_games_like \u2502 \u251c\u2500game_team_games_25_year \u2502 \u2502 \u251c\u2500game_team_games_25_season \u2502 \u2502 \u2502 \u251c\u2500window_printer_use_problem_mhz \u2502 \u2502 \u2502 \u2502 \u251c\u2500mhz_wire_simms_wiring_battery \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500simms_mhz_battery_cpu_heat \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500simms_pds_simm_vram_lc \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500pds_nubus_lc_slot_card \u2500\u2500 Topic: 119 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500simms_simm_vram_meg_dram \u2500\u2500 Topic: 32 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500mhz_battery_cpu_heat_speed \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500mhz_cpu_speed_heat_fan \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500mhz_cpu_speed_heat_fan \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500fan_cpu_heat_sink_fans \u2500\u2500 Topic: 92 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500mhz_speed_cpu_fpu_clock \u2500\u2500 Topic: 22 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500monitor_turn_power_computer_electricity \u2500\u2500 Topic: 91 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500battery_batteries_concrete_duo_discharge \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500duo_battery_apple_230_problem \u2500\u2500 Topic: 121 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500battery_batteries_concrete_discharge_temperature \u2500\u2500 Topic: 75 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500wire_wiring_ground_neutral_outlets \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500wire_wiring_ground_neutral_outlets \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500wire_wiring_ground_neutral_outlets \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500leds_uv_blue_light_boards \u2500\u2500 Topic: 66 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500wire_wiring_ground_neutral_outlets \u2500\u2500 Topic: 120 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500scope_scopes_phone_dial_number \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500dial_number_phone_line_output \u2500\u2500 Topic: 93 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500scope_scopes_motorola_generator_oscilloscope \u2500\u2500 Topic: 113 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500celp_dsp_sampling_antenna_digital \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500antenna_antennas_receiver_cable_transmitter \u2500\u2500 Topic: 70 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500celp_dsp_sampling_speech_voice \u2500\u2500 Topic: 52 \u2502 \u2502 \u2502 \u2502 \u2514\u2500window_printer_xv_mouse_windows \u2502 \u2502 \u2502 \u2502 \u251c\u2500window_xv_error_widget_problem \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500error_symbol_undefined_xterm_rx \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500symbol_error_undefined_doug_parse \u2500\u2500 Topic: 63 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500rx_remote_server_xdm_xterm \u2500\u2500 Topic: 45 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500window_xv_widget_application_expose \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500window_widget_expose_application_event \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500gc_mydisplay_draw_gxxor_drawing \u2500\u2500 Topic: 103 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500window_widget_application_expose_event \u2500\u2500 Topic: 25 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500xv_den_polygon_points_algorithm \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500den_polygon_points_algorithm_polygons \u2500\u2500 Topic: 28 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500xv_24bit_image_bit_images \u2500\u2500 Topic: 57 \u2502 \u2502 \u2502 \u2502 \u2514\u2500printer_fonts_print_mouse_postscript \u2502 \u2502 \u2502 \u2502 \u251c\u2500printer_fonts_print_font_deskjet \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500scanner_logitech_grayscale_ocr_scanman \u2500\u2500 Topic: 108 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500printer_fonts_print_font_deskjet \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500printer_print_deskjet_hp_ink \u2500\u2500 Topic: 18 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500fonts_font_truetype_tt_atm \u2500\u2500 Topic: 49 \u2502 \u2502 \u2502 \u2502 \u2514\u2500mouse_ghostscript_midi_driver_postscript \u2502 \u2502 \u2502 \u2502 \u251c\u2500ghostscript_midi_postscript_files_file \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500ghostscript_postscript_pageview_ghostview_dsc \u2500\u2500 Topic: 104 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500midi_sound_file_windows_driver \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500location_mar_file_host_rwrr \u2500\u2500 Topic: 83 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500midi_sound_driver_blaster_soundblaster \u2500\u2500 Topic: 98 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500mouse_driver_mice_ball_problem \u2500\u2500 Topic: 68 \u2502 \u2502 \u2502 \u2514\u2500game_team_games_25_season \u2502 \u2502 \u2502 \u251c\u25001st_sale_condition_comics_hulk \u2502 \u2502 \u2502 \u2502 \u251c\u2500sale_condition_offer_asking_cd \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500condition_stereo_amp_speakers_asking \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500miles_car_amfm_toyota_cassette \u2500\u2500 Topic: 62 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500amp_speakers_condition_stereo_audio \u2500\u2500 Topic: 24 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500games_sale_pom_cds_shipping \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500pom_cds_sale_shipping_cd \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500size_shipping_sale_condition_mattress \u2500\u2500 Topic: 100 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500pom_cds_cd_sale_picture \u2500\u2500 Topic: 37 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500games_game_snes_sega_genesis \u2500\u2500 Topic: 40 \u2502 \u2502 \u2502 \u2502 \u2514\u25001st_hulk_comics_art_appears \u2502 \u2502 \u2502 \u2502 \u251c\u25001st_hulk_comics_art_appears \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500lens_tape_camera_backup_lenses \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500tape_backup_tapes_drive_4mm \u2500\u2500 Topic: 107 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500lens_camera_lenses_zoom_pouch \u2500\u2500 Topic: 114 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u25001st_hulk_comics_art_appears \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u25001st_hulk_comics_art_appears \u2500\u2500 Topic: 105 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500books_book_cover_trek_chemistry \u2500\u2500 Topic: 125 \u2502 \u2502 \u2502 \u2502 \u2514\u2500tickets_hotel_ticket_voucher_package \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500hotel_voucher_package_vacation_room \u2500\u2500 Topic: 74 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500tickets_ticket_june_airlines_july \u2500\u2500 Topic: 84 \u2502 \u2502 \u2502 \u2514\u2500game_team_games_season_hockey \u2502 \u2502 \u2502 \u251c\u2500game_hockey_team_25_550 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500espn_pt_pts_game_la \u2500\u2500 Topic: 17 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500team_25_game_hockey_550 \u2500\u2500 Topic: 2 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500year_game_hit_baseball_players \u2500\u2500 Topic: 0 \u2502 \u2502 \u2514\u2500bike_car_greek_insurance_msg \u2502 \u2502 \u251c\u2500car_bike_insurance_cars_engine \u2502 \u2502 \u2502 \u251c\u2500car_insurance_cars_radar_engine \u2502 \u2502 \u2502 \u2502 \u251c\u2500insurance_health_private_care_canada \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500insurance_health_private_care_canada \u2500\u2500 Topic: 99 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500insurance_car_accident_rates_sue \u2500\u2500 Topic: 82 \u2502 \u2502 \u2502 \u2502 \u2514\u2500car_cars_radar_engine_detector \u2502 \u2502 \u2502 \u2502 \u251c\u2500car_radar_cars_detector_engine \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500radar_detector_detectors_ka_alarm \u2500\u2500 Topic: 39 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500car_cars_mustang_ford_engine \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500clutch_shift_shifting_transmission_gear \u2500\u2500 Topic: 88 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500car_cars_mustang_ford_v8 \u2500\u2500 Topic: 14 \u2502 \u2502 \u2502 \u2502 \u2514\u2500oil_diesel_odometer_diesels_car \u2502 \u2502 \u2502 \u2502 \u251c\u2500odometer_oil_sensor_car_drain \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500odometer_sensor_speedo_gauge_mileage \u2500\u2500 Topic: 96 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500oil_drain_car_leaks_taillights \u2500\u2500 Topic: 102 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500diesel_diesels_emissions_fuel_oil \u2500\u2500 Topic: 79 \u2502 \u2502 \u2502 \u2514\u2500bike_riding_ride_bikes_motorcycle \u2502 \u2502 \u2502 \u251c\u2500bike_ride_riding_bikes_lane \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500bike_ride_riding_lane_car \u2500\u2500 Topic: 11 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500bike_bikes_miles_honda_motorcycle \u2500\u2500 Topic: 19 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500countersteering_bike_motorcycle_rear_shaft \u2500\u2500 Topic: 46 \u2502 \u2502 \u2514\u2500greek_msg_kuwait_greece_water \u2502 \u2502 \u251c\u2500greek_msg_kuwait_greece_water \u2502 \u2502 \u2502 \u251c\u2500greek_msg_kuwait_greece_dog \u2502 \u2502 \u2502 \u2502 \u251c\u2500greek_msg_kuwait_greece_dog \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500greek_kuwait_greece_turkish_greeks \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500greek_greece_turkish_greeks_cyprus \u2500\u2500 Topic: 71 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500kuwait_iraq_iran_gulf_arabia \u2500\u2500 Topic: 76 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500msg_dog_drugs_drug_food \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500dog_dogs_cooper_trial_weaver \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500clinton_bush_quayle_reagan_panicking \u2500\u2500 Topic: 101 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500dog_dogs_cooper_trial_weaver \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500cooper_trial_weaver_spence_witnesses \u2500\u2500 Topic: 90 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500dog_dogs_bike_trained_springer \u2500\u2500 Topic: 67 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500msg_drugs_drug_food_chinese \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500msg_food_chinese_foods_taste \u2500\u2500 Topic: 30 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500drugs_drug_marijuana_cocaine_alcohol \u2500\u2500 Topic: 72 \u2502 \u2502 \u2502 \u2502 \u2514\u2500water_theory_universe_science_larsons \u2502 \u2502 \u2502 \u2502 \u251c\u2500water_nuclear_cooling_steam_dept \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500rocketry_rockets_engines_nuclear_plutonium \u2500\u2500 Topic: 115 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500water_cooling_steam_dept_plants \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500water_dept_phd_environmental_atmospheric \u2500\u2500 Topic: 97 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500cooling_water_steam_towers_plants \u2500\u2500 Topic: 109 \u2502 \u2502 \u2502 \u2502 \u2514\u2500theory_universe_larsons_larson_science \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500theory_universe_larsons_larson_science \u2500\u2500 Topic: 54 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500oort_cloud_grbs_gamma_burst \u2500\u2500 Topic: 80 \u2502 \u2502 \u2502 \u2514\u2500helmet_kirlian_photography_lock_wax \u2502 \u2502 \u2502 \u251c\u2500helmet_kirlian_photography_leaf_mask \u2502 \u2502 \u2502 \u2502 \u251c\u2500kirlian_photography_leaf_pictures_deleted \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500deleted_joke_stuff_maddi_nickname \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500joke_maddi_nickname_nicknames_frank \u2500\u2500 Topic: 43 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500deleted_stuff_bookstore_joke_motto \u2500\u2500 Topic: 81 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500kirlian_photography_leaf_pictures_aura \u2500\u2500 Topic: 85 \u2502 \u2502 \u2502 \u2502 \u2514\u2500helmet_mask_liner_foam_cb \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500helmet_liner_foam_cb_helmets \u2500\u2500 Topic: 112 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500mask_goalies_77_santore_tl \u2500\u2500 Topic: 123 \u2502 \u2502 \u2502 \u2514\u2500lock_wax_paint_plastic_ear \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500lock_cable_locks_bike_600 \u2500\u2500 Topic: 117 \u2502 \u2502 \u2502 \u2514\u2500wax_paint_ear_plastic_skin \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500wax_paint_plastic_scratches_solvent \u2500\u2500 Topic: 65 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500ear_wax_skin_greasy_acne \u2500\u2500 Topic: 116 \u2502 \u2502 \u2514\u2500m4_mp_14_mw_mo \u2502 \u2502 \u251c\u2500m4_mp_14_mw_mo \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500m4_mp_14_mw_mo \u2500\u2500 Topic: 111 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500test_ensign_nameless_deane_deanebinahccbrandeisedu \u2500\u2500 Topic: 118 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500ites_cheek_hello_hi_ken \u2500\u2500 Topic: 3 \u2502 \u2514\u2500space_medical_health_disease_cancer \u2502 \u251c\u2500medical_health_disease_cancer_patients \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500cancer_centers_center_medical_research \u2500\u2500 Topic: 122 \u2502 \u2502 \u2514\u2500health_medical_disease_patients_hiv \u2502 \u2502 \u251c\u2500patients_medical_disease_candida_health \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500candida_yeast_infection_gonorrhea_infections \u2500\u2500 Topic: 48 \u2502 \u2502 \u2502 \u2514\u2500patients_disease_cancer_medical_doctor \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500hiv_medical_cancer_patients_doctor \u2500\u2500 Topic: 34 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500pain_drug_patients_disease_diet \u2500\u2500 Topic: 26 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500health_newsgroup_tobacco_vote_votes \u2500\u2500 Topic: 9 \u2502 \u2514\u2500space_launch_nasa_shuttle_orbit \u2502 \u251c\u2500space_moon_station_nasa_launch \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500sky_advertising_billboard_billboards_space \u2500\u2500 Topic: 59 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500space_station_moon_redesign_nasa \u2500\u2500 Topic: 16 \u2502 \u2514\u2500space_mission_hst_launch_orbit \u2502 \u251c\u2500space_launch_nasa_orbit_propulsion \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500space_launch_nasa_propulsion_astronaut \u2500\u2500 Topic: 47 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500orbit_km_jupiter_probe_earth \u2500\u2500 Topic: 86 \u2502 \u2514\u2500\u25a0\u2500\u2500hst_mission_shuttle_orbit_arrays \u2500\u2500 Topic: 60 \u2514\u2500drive_file_key_windows_use \u251c\u2500key_file_jpeg_encryption_image \u2502 \u251c\u2500key_encryption_clipper_chip_keys \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500key_clipper_encryption_chip_keys \u2500\u2500 Topic: 1 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500entry_file_ripem_entries_key \u2500\u2500 Topic: 73 \u2502 \u2514\u2500jpeg_image_file_gif_images \u2502 \u251c\u2500motif_graphics_ftp_available_3d \u2502 \u2502 \u251c\u2500motif_graphics_openwindows_ftp_available \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500openwindows_motif_xview_windows_mouse \u2500\u2500 Topic: 20 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500graphics_widget_ray_3d_available \u2500\u2500 Topic: 95 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u25003d_machines_version_comments_contact \u2500\u2500 Topic: 38 \u2502 \u2514\u2500jpeg_image_gif_images_format \u2502 \u251c\u2500\u25a0\u2500\u2500gopher_ftp_files_stuffit_images \u2500\u2500 Topic: 51 \u2502 \u2514\u2500\u25a0\u2500\u2500jpeg_image_gif_format_images \u2500\u2500 Topic: 13 \u2514\u2500drive_db_card_scsi_windows \u251c\u2500db_windows_dos_mov_os2 \u2502 \u251c\u2500\u25a0\u2500\u2500copy_protection_program_software_disk \u2500\u2500 Topic: 64 \u2502 \u2514\u2500\u25a0\u2500\u2500db_windows_dos_mov_os2 \u2500\u2500 Topic: 8 \u2514\u2500drive_card_scsi_drives_ide \u251c\u2500drive_scsi_drives_ide_disk \u2502 \u251c\u2500\u25a0\u2500\u2500drive_scsi_drives_ide_disk \u2500\u2500 Topic: 6 \u2502 \u2514\u2500\u25a0\u2500\u2500meg_sale_ram_drive_shipping \u2500\u2500 Topic: 12 \u2514\u2500card_modem_monitor_video_drivers \u251c\u2500\u25a0\u2500\u2500card_monitor_video_drivers_vga \u2500\u2500 Topic: 5 \u2514\u2500\u25a0\u2500\u2500modem_port_serial_irq_com \u2500\u2500 Topic: 10 Merge topics \u00b6 After seeing the potential hierarchy of your topic, you might want to merge specific topics. For example, if topic 1 is 1_space_launch_moon_nasa and topic 2 is 2_spacecraft_solar_space_orbit it might make sense to merge those two topics as they are quite similar in meaning. In BERTopic, you can use .merge_topics to manually select and merge those topics. Doing so will update their topic representation which in turn updates the entire model: topics_to_merge = [ 1 , 2 ] topic_model . merge_topics ( docs , topics_to_merge ) If you have several groups of topics you want to merge, create a list of lists instead: topics_to_merge = [[ 1 , 2 ], [ 3 , 4 ]] topic_model . merge_topics ( docs , topics_to_merge )","title":"Hierarchical Topic Modeling"},{"location":"getting_started/hierarchicaltopics/hierarchicaltopics.html#example","text":"To demonstrate hierarchical topic modeling with BERTopic, we use the 20 Newsgroups dataset to see how the topics that we uncover are represented in the 20 categories of documents. First, we train a basic BERTopic model: from bertopic import BERTopic from sklearn.datasets import fetch_20newsgroups docs = fetch_20newsgroups ( subset = 'all' , remove = ( 'headers' , 'footers' , 'quotes' ))[ \"data\" ] topic_model = BERTopic ( verbose = True ) topics , probs = topic_model . fit_transform ( docs ) Next, we can use our fitted BERTopic model to extract possible hierarchies from our c-TF-IDF matrix: hierarchical_topics = topic_model . hierarchical_topics ( docs ) The resulting hierarchical_topics is a dataframe in which merged topics are described. For example, if you would merge two topics, what would the topic representation of the new topic be?","title":"Example"},{"location":"getting_started/hierarchicaltopics/hierarchicaltopics.html#linkage-functions","text":"When creating the potential hierarchical nature of topics, we use Scipy's ward linkage function as a default to generate the hierarchy. However, you might want to use a different linkage function for your use case, such as single , complete , average , centroid , or median . In BERTopic, you can define the linkage function yourself, including the distance function that you would like to use: from scipy.cluster import hierarchy as sch from bertopic import BERTopic topic_model = BERTopic () topics , probs = topic_model . fit_transform ( docs ) # Hierarchical topics linkage_function = lambda x : sch . linkage ( x , 'single' , optimal_ordering = True ) hierarchical_topics = topic_model . hierarchical_topics ( docs , linkage_function = linkage_function )","title":"Linkage functions"},{"location":"getting_started/hierarchicaltopics/hierarchicaltopics.html#visualizations","text":"To visualize these results, we can start by running a familiar function, namely topic_model.visualize_hierarchy : topic_model . visualize_hierarchy ( hierarchical_topics = hierarchical_topics ) If you hover over the black circles, you will see the topic representation at that level of the hierarchy. These representations help you understand the effect of merging certain topics. Some might be logical to merge whilst others might not. Moreover, we can now see which sub-topics can be found within certain larger themes. Although this gives a nice overview of the potential hierarchy, hovering over all black circles can be tiresome. Instead, we can use topic_model.get_topic_tree to create a text-based representation of this hierarchy. Although the general structure is more difficult to view, we can see better which topics could be logically merged: >>> tree = topic_model . get_topic_tree ( hierarchical_topics ) >>> print ( tree ) . \u2514\u2500 atheists_atheism_god_moral_atheist \u251c\u2500 atheists_atheism_god_atheist_argument \u2502 \u251c\u2500\u25a0\u2500\u2500 atheists_atheism_god_atheist_argument \u2500\u2500 Topic : 21 \u2502 \u2514\u2500\u25a0\u2500\u2500 br_god_exist_genetic_existence \u2500\u2500 Topic : 124 \u2514\u2500\u25a0\u2500\u2500 moral_morality_objective_immoral_morals \u2500\u2500 Topic : 29 Click here to view the full tree. . \u251c\u2500people_armenian_said_god_armenians \u2502 \u251c\u2500god_jesus_jehovah_lord_christ \u2502 \u2502 \u251c\u2500god_jesus_jehovah_lord_christ \u2502 \u2502 \u2502 \u251c\u2500jehovah_lord_mormon_mcconkie_god \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500ra_satan_thou_god_lucifer \u2500\u2500 Topic: 94 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500jehovah_lord_mormon_mcconkie_unto \u2500\u2500 Topic: 78 \u2502 \u2502 \u2502 \u2514\u2500jesus_mary_god_hell_sin \u2502 \u2502 \u2502 \u251c\u2500jesus_hell_god_eternal_heaven \u2502 \u2502 \u2502 \u2502 \u251c\u2500hell_jesus_eternal_god_heaven \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500jesus_tomb_disciples_resurrection_john \u2500\u2500 Topic: 69 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500hell_eternal_god_jesus_heaven \u2500\u2500 Topic: 53 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500aaron_baptism_sin_law_god \u2500\u2500 Topic: 89 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500mary_sin_maria_priest_conception \u2500\u2500 Topic: 56 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500marriage_married_marry_ceremony_marriages \u2500\u2500 Topic: 110 \u2502 \u2514\u2500people_armenian_armenians_said_mr \u2502 \u251c\u2500people_armenian_armenians_said_israel \u2502 \u2502 \u251c\u2500god_homosexual_homosexuality_atheists_sex \u2502 \u2502 \u2502 \u251c\u2500homosexual_homosexuality_sex_gay_homosexuals \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500kinsey_sex_gay_men_sexual \u2500\u2500 Topic: 44 \u2502 \u2502 \u2502 \u2502 \u2514\u2500homosexuality_homosexual_sin_homosexuals_gay \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500gay_homosexual_homosexuals_sexual_cramer \u2500\u2500 Topic: 50 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500homosexuality_homosexual_sin_paul_sex \u2500\u2500 Topic: 27 \u2502 \u2502 \u2502 \u2514\u2500god_atheists_atheism_moral_atheist \u2502 \u2502 \u2502 \u251c\u2500islam_quran_judas_islamic_book \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500jim_context_challenges_articles_quote \u2500\u2500 Topic: 36 \u2502 \u2502 \u2502 \u2502 \u2514\u2500islam_quran_judas_islamic_book \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500islam_quran_islamic_rushdie_muslims \u2500\u2500 Topic: 31 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500judas_scripture_bible_books_greek \u2500\u2500 Topic: 33 \u2502 \u2502 \u2502 \u2514\u2500atheists_atheism_god_moral_atheist \u2502 \u2502 \u2502 \u251c\u2500atheists_atheism_god_atheist_argument \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500atheists_atheism_god_atheist_argument \u2500\u2500 Topic: 21 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500br_god_exist_genetic_existence \u2500\u2500 Topic: 124 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500moral_morality_objective_immoral_morals \u2500\u2500 Topic: 29 \u2502 \u2502 \u2514\u2500armenian_armenians_people_israel_said \u2502 \u2502 \u251c\u2500armenian_armenians_israel_people_jews \u2502 \u2502 \u2502 \u251c\u2500tax_rights_government_income_taxes \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500rights_right_slavery_slaves_residence \u2500\u2500 Topic: 106 \u2502 \u2502 \u2502 \u2502 \u2514\u2500tax_government_taxes_income_libertarians \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500government_libertarians_libertarian_regulation_party \u2500\u2500 Topic: 58 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500tax_taxes_income_billion_deficit \u2500\u2500 Topic: 41 \u2502 \u2502 \u2502 \u2514\u2500armenian_armenians_israel_people_jews \u2502 \u2502 \u2502 \u251c\u2500gun_guns_militia_firearms_amendment \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500blacks_penalty_death_cruel_punishment \u2500\u2500 Topic: 55 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500gun_guns_militia_firearms_amendment \u2500\u2500 Topic: 7 \u2502 \u2502 \u2502 \u2514\u2500armenian_armenians_israel_jews_turkish \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500israel_israeli_jews_arab_jewish \u2500\u2500 Topic: 4 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500armenian_armenians_turkish_armenia_azerbaijan \u2500\u2500 Topic: 15 \u2502 \u2502 \u2514\u2500stephanopoulos_president_mr_myers_ms \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500serbs_muslims_stephanopoulos_mr_bosnia \u2500\u2500 Topic: 35 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500myers_stephanopoulos_president_ms_mr \u2500\u2500 Topic: 87 \u2502 \u2514\u2500batf_fbi_koresh_compound_gas \u2502 \u251c\u2500\u25a0\u2500\u2500reno_workers_janet_clinton_waco \u2500\u2500 Topic: 77 \u2502 \u2514\u2500batf_fbi_koresh_gas_compound \u2502 \u251c\u2500batf_koresh_fbi_warrant_compound \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500batf_warrant_raid_compound_fbi \u2500\u2500 Topic: 42 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500koresh_batf_fbi_children_compound \u2500\u2500 Topic: 61 \u2502 \u2514\u2500\u25a0\u2500\u2500fbi_gas_tear_bds_building \u2500\u2500 Topic: 23 \u2514\u2500use_like_just_dont_new \u251c\u2500game_team_year_games_like \u2502 \u251c\u2500game_team_games_25_year \u2502 \u2502 \u251c\u2500game_team_games_25_season \u2502 \u2502 \u2502 \u251c\u2500window_printer_use_problem_mhz \u2502 \u2502 \u2502 \u2502 \u251c\u2500mhz_wire_simms_wiring_battery \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500simms_mhz_battery_cpu_heat \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500simms_pds_simm_vram_lc \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500pds_nubus_lc_slot_card \u2500\u2500 Topic: 119 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500simms_simm_vram_meg_dram \u2500\u2500 Topic: 32 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500mhz_battery_cpu_heat_speed \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500mhz_cpu_speed_heat_fan \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500mhz_cpu_speed_heat_fan \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500fan_cpu_heat_sink_fans \u2500\u2500 Topic: 92 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500mhz_speed_cpu_fpu_clock \u2500\u2500 Topic: 22 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500monitor_turn_power_computer_electricity \u2500\u2500 Topic: 91 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500battery_batteries_concrete_duo_discharge \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500duo_battery_apple_230_problem \u2500\u2500 Topic: 121 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500battery_batteries_concrete_discharge_temperature \u2500\u2500 Topic: 75 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500wire_wiring_ground_neutral_outlets \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500wire_wiring_ground_neutral_outlets \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500wire_wiring_ground_neutral_outlets \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500leds_uv_blue_light_boards \u2500\u2500 Topic: 66 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500wire_wiring_ground_neutral_outlets \u2500\u2500 Topic: 120 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500scope_scopes_phone_dial_number \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500dial_number_phone_line_output \u2500\u2500 Topic: 93 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500scope_scopes_motorola_generator_oscilloscope \u2500\u2500 Topic: 113 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500celp_dsp_sampling_antenna_digital \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500antenna_antennas_receiver_cable_transmitter \u2500\u2500 Topic: 70 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500celp_dsp_sampling_speech_voice \u2500\u2500 Topic: 52 \u2502 \u2502 \u2502 \u2502 \u2514\u2500window_printer_xv_mouse_windows \u2502 \u2502 \u2502 \u2502 \u251c\u2500window_xv_error_widget_problem \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500error_symbol_undefined_xterm_rx \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500symbol_error_undefined_doug_parse \u2500\u2500 Topic: 63 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500rx_remote_server_xdm_xterm \u2500\u2500 Topic: 45 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500window_xv_widget_application_expose \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500window_widget_expose_application_event \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500gc_mydisplay_draw_gxxor_drawing \u2500\u2500 Topic: 103 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500window_widget_application_expose_event \u2500\u2500 Topic: 25 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500xv_den_polygon_points_algorithm \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500den_polygon_points_algorithm_polygons \u2500\u2500 Topic: 28 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500xv_24bit_image_bit_images \u2500\u2500 Topic: 57 \u2502 \u2502 \u2502 \u2502 \u2514\u2500printer_fonts_print_mouse_postscript \u2502 \u2502 \u2502 \u2502 \u251c\u2500printer_fonts_print_font_deskjet \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500scanner_logitech_grayscale_ocr_scanman \u2500\u2500 Topic: 108 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500printer_fonts_print_font_deskjet \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500printer_print_deskjet_hp_ink \u2500\u2500 Topic: 18 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500fonts_font_truetype_tt_atm \u2500\u2500 Topic: 49 \u2502 \u2502 \u2502 \u2502 \u2514\u2500mouse_ghostscript_midi_driver_postscript \u2502 \u2502 \u2502 \u2502 \u251c\u2500ghostscript_midi_postscript_files_file \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500ghostscript_postscript_pageview_ghostview_dsc \u2500\u2500 Topic: 104 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500midi_sound_file_windows_driver \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500location_mar_file_host_rwrr \u2500\u2500 Topic: 83 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500midi_sound_driver_blaster_soundblaster \u2500\u2500 Topic: 98 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500mouse_driver_mice_ball_problem \u2500\u2500 Topic: 68 \u2502 \u2502 \u2502 \u2514\u2500game_team_games_25_season \u2502 \u2502 \u2502 \u251c\u25001st_sale_condition_comics_hulk \u2502 \u2502 \u2502 \u2502 \u251c\u2500sale_condition_offer_asking_cd \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500condition_stereo_amp_speakers_asking \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500miles_car_amfm_toyota_cassette \u2500\u2500 Topic: 62 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500amp_speakers_condition_stereo_audio \u2500\u2500 Topic: 24 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500games_sale_pom_cds_shipping \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500pom_cds_sale_shipping_cd \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500size_shipping_sale_condition_mattress \u2500\u2500 Topic: 100 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500pom_cds_cd_sale_picture \u2500\u2500 Topic: 37 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500games_game_snes_sega_genesis \u2500\u2500 Topic: 40 \u2502 \u2502 \u2502 \u2502 \u2514\u25001st_hulk_comics_art_appears \u2502 \u2502 \u2502 \u2502 \u251c\u25001st_hulk_comics_art_appears \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500lens_tape_camera_backup_lenses \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500tape_backup_tapes_drive_4mm \u2500\u2500 Topic: 107 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500lens_camera_lenses_zoom_pouch \u2500\u2500 Topic: 114 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u25001st_hulk_comics_art_appears \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u25001st_hulk_comics_art_appears \u2500\u2500 Topic: 105 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500books_book_cover_trek_chemistry \u2500\u2500 Topic: 125 \u2502 \u2502 \u2502 \u2502 \u2514\u2500tickets_hotel_ticket_voucher_package \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500hotel_voucher_package_vacation_room \u2500\u2500 Topic: 74 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500tickets_ticket_june_airlines_july \u2500\u2500 Topic: 84 \u2502 \u2502 \u2502 \u2514\u2500game_team_games_season_hockey \u2502 \u2502 \u2502 \u251c\u2500game_hockey_team_25_550 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500espn_pt_pts_game_la \u2500\u2500 Topic: 17 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500team_25_game_hockey_550 \u2500\u2500 Topic: 2 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500year_game_hit_baseball_players \u2500\u2500 Topic: 0 \u2502 \u2502 \u2514\u2500bike_car_greek_insurance_msg \u2502 \u2502 \u251c\u2500car_bike_insurance_cars_engine \u2502 \u2502 \u2502 \u251c\u2500car_insurance_cars_radar_engine \u2502 \u2502 \u2502 \u2502 \u251c\u2500insurance_health_private_care_canada \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500insurance_health_private_care_canada \u2500\u2500 Topic: 99 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500insurance_car_accident_rates_sue \u2500\u2500 Topic: 82 \u2502 \u2502 \u2502 \u2502 \u2514\u2500car_cars_radar_engine_detector \u2502 \u2502 \u2502 \u2502 \u251c\u2500car_radar_cars_detector_engine \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500radar_detector_detectors_ka_alarm \u2500\u2500 Topic: 39 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500car_cars_mustang_ford_engine \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500clutch_shift_shifting_transmission_gear \u2500\u2500 Topic: 88 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500car_cars_mustang_ford_v8 \u2500\u2500 Topic: 14 \u2502 \u2502 \u2502 \u2502 \u2514\u2500oil_diesel_odometer_diesels_car \u2502 \u2502 \u2502 \u2502 \u251c\u2500odometer_oil_sensor_car_drain \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500odometer_sensor_speedo_gauge_mileage \u2500\u2500 Topic: 96 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500oil_drain_car_leaks_taillights \u2500\u2500 Topic: 102 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500diesel_diesels_emissions_fuel_oil \u2500\u2500 Topic: 79 \u2502 \u2502 \u2502 \u2514\u2500bike_riding_ride_bikes_motorcycle \u2502 \u2502 \u2502 \u251c\u2500bike_ride_riding_bikes_lane \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500bike_ride_riding_lane_car \u2500\u2500 Topic: 11 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500bike_bikes_miles_honda_motorcycle \u2500\u2500 Topic: 19 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500countersteering_bike_motorcycle_rear_shaft \u2500\u2500 Topic: 46 \u2502 \u2502 \u2514\u2500greek_msg_kuwait_greece_water \u2502 \u2502 \u251c\u2500greek_msg_kuwait_greece_water \u2502 \u2502 \u2502 \u251c\u2500greek_msg_kuwait_greece_dog \u2502 \u2502 \u2502 \u2502 \u251c\u2500greek_msg_kuwait_greece_dog \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500greek_kuwait_greece_turkish_greeks \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500greek_greece_turkish_greeks_cyprus \u2500\u2500 Topic: 71 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500kuwait_iraq_iran_gulf_arabia \u2500\u2500 Topic: 76 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500msg_dog_drugs_drug_food \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500dog_dogs_cooper_trial_weaver \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500clinton_bush_quayle_reagan_panicking \u2500\u2500 Topic: 101 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500dog_dogs_cooper_trial_weaver \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500cooper_trial_weaver_spence_witnesses \u2500\u2500 Topic: 90 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500dog_dogs_bike_trained_springer \u2500\u2500 Topic: 67 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500msg_drugs_drug_food_chinese \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500msg_food_chinese_foods_taste \u2500\u2500 Topic: 30 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500drugs_drug_marijuana_cocaine_alcohol \u2500\u2500 Topic: 72 \u2502 \u2502 \u2502 \u2502 \u2514\u2500water_theory_universe_science_larsons \u2502 \u2502 \u2502 \u2502 \u251c\u2500water_nuclear_cooling_steam_dept \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500rocketry_rockets_engines_nuclear_plutonium \u2500\u2500 Topic: 115 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500water_cooling_steam_dept_plants \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500water_dept_phd_environmental_atmospheric \u2500\u2500 Topic: 97 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500cooling_water_steam_towers_plants \u2500\u2500 Topic: 109 \u2502 \u2502 \u2502 \u2502 \u2514\u2500theory_universe_larsons_larson_science \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500theory_universe_larsons_larson_science \u2500\u2500 Topic: 54 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500oort_cloud_grbs_gamma_burst \u2500\u2500 Topic: 80 \u2502 \u2502 \u2502 \u2514\u2500helmet_kirlian_photography_lock_wax \u2502 \u2502 \u2502 \u251c\u2500helmet_kirlian_photography_leaf_mask \u2502 \u2502 \u2502 \u2502 \u251c\u2500kirlian_photography_leaf_pictures_deleted \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500deleted_joke_stuff_maddi_nickname \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500joke_maddi_nickname_nicknames_frank \u2500\u2500 Topic: 43 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500deleted_stuff_bookstore_joke_motto \u2500\u2500 Topic: 81 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500kirlian_photography_leaf_pictures_aura \u2500\u2500 Topic: 85 \u2502 \u2502 \u2502 \u2502 \u2514\u2500helmet_mask_liner_foam_cb \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500helmet_liner_foam_cb_helmets \u2500\u2500 Topic: 112 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500mask_goalies_77_santore_tl \u2500\u2500 Topic: 123 \u2502 \u2502 \u2502 \u2514\u2500lock_wax_paint_plastic_ear \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500lock_cable_locks_bike_600 \u2500\u2500 Topic: 117 \u2502 \u2502 \u2502 \u2514\u2500wax_paint_ear_plastic_skin \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500wax_paint_plastic_scratches_solvent \u2500\u2500 Topic: 65 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500ear_wax_skin_greasy_acne \u2500\u2500 Topic: 116 \u2502 \u2502 \u2514\u2500m4_mp_14_mw_mo \u2502 \u2502 \u251c\u2500m4_mp_14_mw_mo \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500m4_mp_14_mw_mo \u2500\u2500 Topic: 111 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500test_ensign_nameless_deane_deanebinahccbrandeisedu \u2500\u2500 Topic: 118 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500ites_cheek_hello_hi_ken \u2500\u2500 Topic: 3 \u2502 \u2514\u2500space_medical_health_disease_cancer \u2502 \u251c\u2500medical_health_disease_cancer_patients \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500cancer_centers_center_medical_research \u2500\u2500 Topic: 122 \u2502 \u2502 \u2514\u2500health_medical_disease_patients_hiv \u2502 \u2502 \u251c\u2500patients_medical_disease_candida_health \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500candida_yeast_infection_gonorrhea_infections \u2500\u2500 Topic: 48 \u2502 \u2502 \u2502 \u2514\u2500patients_disease_cancer_medical_doctor \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500hiv_medical_cancer_patients_doctor \u2500\u2500 Topic: 34 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500pain_drug_patients_disease_diet \u2500\u2500 Topic: 26 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500health_newsgroup_tobacco_vote_votes \u2500\u2500 Topic: 9 \u2502 \u2514\u2500space_launch_nasa_shuttle_orbit \u2502 \u251c\u2500space_moon_station_nasa_launch \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500sky_advertising_billboard_billboards_space \u2500\u2500 Topic: 59 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500space_station_moon_redesign_nasa \u2500\u2500 Topic: 16 \u2502 \u2514\u2500space_mission_hst_launch_orbit \u2502 \u251c\u2500space_launch_nasa_orbit_propulsion \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500space_launch_nasa_propulsion_astronaut \u2500\u2500 Topic: 47 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500orbit_km_jupiter_probe_earth \u2500\u2500 Topic: 86 \u2502 \u2514\u2500\u25a0\u2500\u2500hst_mission_shuttle_orbit_arrays \u2500\u2500 Topic: 60 \u2514\u2500drive_file_key_windows_use \u251c\u2500key_file_jpeg_encryption_image \u2502 \u251c\u2500key_encryption_clipper_chip_keys \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500key_clipper_encryption_chip_keys \u2500\u2500 Topic: 1 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500entry_file_ripem_entries_key \u2500\u2500 Topic: 73 \u2502 \u2514\u2500jpeg_image_file_gif_images \u2502 \u251c\u2500motif_graphics_ftp_available_3d \u2502 \u2502 \u251c\u2500motif_graphics_openwindows_ftp_available \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500openwindows_motif_xview_windows_mouse \u2500\u2500 Topic: 20 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500graphics_widget_ray_3d_available \u2500\u2500 Topic: 95 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u25003d_machines_version_comments_contact \u2500\u2500 Topic: 38 \u2502 \u2514\u2500jpeg_image_gif_images_format \u2502 \u251c\u2500\u25a0\u2500\u2500gopher_ftp_files_stuffit_images \u2500\u2500 Topic: 51 \u2502 \u2514\u2500\u25a0\u2500\u2500jpeg_image_gif_format_images \u2500\u2500 Topic: 13 \u2514\u2500drive_db_card_scsi_windows \u251c\u2500db_windows_dos_mov_os2 \u2502 \u251c\u2500\u25a0\u2500\u2500copy_protection_program_software_disk \u2500\u2500 Topic: 64 \u2502 \u2514\u2500\u25a0\u2500\u2500db_windows_dos_mov_os2 \u2500\u2500 Topic: 8 \u2514\u2500drive_card_scsi_drives_ide \u251c\u2500drive_scsi_drives_ide_disk \u2502 \u251c\u2500\u25a0\u2500\u2500drive_scsi_drives_ide_disk \u2500\u2500 Topic: 6 \u2502 \u2514\u2500\u25a0\u2500\u2500meg_sale_ram_drive_shipping \u2500\u2500 Topic: 12 \u2514\u2500card_modem_monitor_video_drivers \u251c\u2500\u25a0\u2500\u2500card_monitor_video_drivers_vga \u2500\u2500 Topic: 5 \u2514\u2500\u25a0\u2500\u2500modem_port_serial_irq_com \u2500\u2500 Topic: 10","title":"Visualizations"},{"location":"getting_started/hierarchicaltopics/hierarchicaltopics.html#merge-topics","text":"After seeing the potential hierarchy of your topic, you might want to merge specific topics. For example, if topic 1 is 1_space_launch_moon_nasa and topic 2 is 2_spacecraft_solar_space_orbit it might make sense to merge those two topics as they are quite similar in meaning. In BERTopic, you can use .merge_topics to manually select and merge those topics. Doing so will update their topic representation which in turn updates the entire model: topics_to_merge = [ 1 , 2 ] topic_model . merge_topics ( docs , topics_to_merge ) If you have several groups of topics you want to merge, create a list of lists instead: topics_to_merge = [[ 1 , 2 ], [ 3 , 4 ]] topic_model . merge_topics ( docs , topics_to_merge )","title":"Merge topics"},{"location":"getting_started/manual/manual.html","text":"Although topic modeling is typically done by discovering topics in an unsupervised manner, there might be times when you already have a bunch of clusters or classes from which you want to model the topics. For example, the often used 20 NewsGroups dataset is already split up into 20 classes. Here, we might want to see how we can transform those 20 classes into 20 topics. Instead of using BERTopic to discover previously unknown topics, we are now going to manually pass them to BERTopic without actually learning them. We can view this as a manual topic modeling approach. There is no underlying algorithm for detecting these topics since you already have done that before. Whether that is simply because they are already available, like with the 20 NewsGroups dataset, or maybe because you have created clusters of documents before using packages like human-learn , bulk , thisnotthat or something entirely different. In other words, we can pass our labels to BERTopic and it will try to transform those labels into topics by running the c-TF-IDF representations on the set of documents within each label. This process allows us to model the topics themselves and similarly gives us the option to use everything BERTopic has to offer. Documents Labels c-TF-IDF To do so, we need to skip over the dimensionality reduction and clustering steps since we already know the labels for our documents. We can use the documents and labels from the 20 NewsGroups dataset to create topics from those 20 labels: from sklearn.datasets import fetch_20newsgroups # Get labeled data data = fetch_20newsgroups ( subset = 'all' , remove = ( 'headers' , 'footers' , 'quotes' )) docs = data [ 'data' ] y = data [ 'target' ] Then, we make sure to create empty instances of the dimensionality reduction and clustering steps. We pass those to BERTopic to simply skip over them and go to the topic representation process: from bertopic import BERTopic from bertopic.backend import BaseEmbedder from bertopic.cluster import BaseCluster from bertopic.vectorizers import ClassTfidfTransformer from bertopic.dimensionality import BaseDimensionalityReduction # Prepare our empty sub-models and reduce frequent words while we are at it. empty_embedding_model = BaseEmbedder () empty_dimensionality_model = BaseDimensionalityReduction () empty_cluster_model = BaseCluster () ctfidf_model = ClassTfidfTransformer ( reduce_frequent_words = True ) # Fit BERTopic without actually performing any clustering topic_model = BERTopic ( embedding_model = empty_embedding_model , umap_model = empty_dimensionality_model , hdbscan_model = empty_cluster_model , ctfidf_model = ctfidf_model ) topics , probs = topic_model . fit_transform ( docs , y = y ) Let's take a look at a few topics that we get out of training this way by running topic_model.get_topic_info() : Topic Count Name 0 0 999 0_game_hockey_team_25 1_god_church_jesus_christ 997 1 1 2 2 996 2_bike_dod_ride_bikes 3_baseball_game_he_year 994 3 3 4 4 991 4_key_encryption_db_clipper 5_car_cars_engine_ford 990 5 5 6 6 990 6_medical_patients_cancer_disease 7_window_server_widget_motif 988 7 7 8 8 988 8_space_launch_nasa_orbit We can see several interesting topics appearing here. They seem to relate to the 20 classes we had as input. Now, let's map those topics to our original classes to view their relationship: # Map input `y` to topics mappings = topic_model . topic_mapper_ . get_mappings () mappings = { value : data [ \"target_names\" ][ key ] for key , value in mappings . items ()} # Assign original classes to our topics df = topic_model . get_topic_info () df [ \"Class\" ] = df . Topic . map ( mappings ) df Topic Count Name Class 0 0 999 0_game_hockey_team_25 rec.sport.hockey 1_god_church_jesus_christ 997 1 1 2 2 996 2_bike_dod_ride_bikes 3_baseball_game_he_year 994 3 3 4 4 991 4_key_encryption_db_clipper 5_car_cars_engine_ford 990 5 5 6 6 990 6_medical_patients_cancer_disease 7_window_server_widget_motif 988 7 7 8 8 988 8_space_launch_nasa_orbit sci.space comp.windows.x sci.med rec.autos sci.crypt rec.sport.baseball rec.motorcycles soc.religion.christian We can see that the c-TF-IDF representations nicely extract the words that give a nice representation of our input classes. This is all done without actually embedding and clustering the data. As a result, the entire \"training\" process only takes a couple of seconds. Moreover, we can still perform BERTopic-specific features like dynamic topic modeling, topics per class, hierarchical topic modeling, modeling topic distributions, etc. Note The resulting topics may be a different mapping from the y labels. To map y to topics , we can run the following: mappings = topic_model . topic_mapper_ . get_mappings () y_mapped = [ mappings [ val ] for val in y ]","title":"Manual Topic Modeling"},{"location":"getting_started/online/online.html","text":"Online topic modeling (sometimes called \"incremental topic modeling\") is the ability to learn incrementally from a mini-batch of instances. Essentially, it is a way to update your topic model with data on which it was not trained before. In Scikit-Learn, this technique is often modeled through a .partial_fit function, which is also used in BERTopic. In BERTopic, there are three main goals for using this technique. To reduce the memory necessary for training a topic model. To continuously update the topic model as new data comes in. To continuously find new topics as new data comes in. In BERTopic, online topic modeling can be a bit tricky as there are several steps involved in which online learning needs to be made available. To recap, BERTopic consists of the following 6 steps: Extract embeddings Reduce dimensionality Cluster reduced embeddings Tokenize topics Extract topic words Diversify topic words For some steps, an online variant is more important than others. Typically, in step 1 we use pre-trained language models that are in less need of continuous updates. This means that we can use an embedding model like Sentence-Transformers for extracting the embeddings and still use it in an online setting. Similarly, steps 5 and 6 do not necessarily need online variants since they are built upon step 4, tokenization. If that tokenization is by itself incremental, then so will steps 5 and 6. SBERT IncrementalPCA MiniBatchKMeans Online CountVectorizer Embeddings Dimensionality reduction Clustering Incremental Bag-of-Words c-TF-IDF Topic representation Online variants of these steps in the main BERTopic pipeline are needed in order to enable incremental learning. This means that we will need online variants for steps 2 through 4. Steps 2 and 3, dimensionality reduction and clustering, can be modeled through the use of Scikit-Learn's .partial_fit function. In other words, it supports any algorithm that can be trained using .partial_fit since these algorithms can be trained incrementally. For example, incremental dimensionality reduction can be achieved using Scikit-Learn's IncrementalPCA and incremental clustering with MiniBatchKMeans . Lastly, we need to develop an online variant for step 5, tokenization. In this step, a Bag-of-words representation is created through the CountVectorizer . However, as new data comes in, its vocabulary will need to be updated. For that purpose, bertopic.vectorizers.OnlineCountVectorizer was created that not only updates out-of-vocabulary words but also implements decay and cleaning functions to prevent the sparse bag-of-words matrix to become too large. Most notably, the decay parameter is a value between 0 and 1 to weigh the percentage of frequencies that the previous bag-of-words matrix should be reduced to. For example, a value of .1 will decrease the frequencies in the bag-of-words matrix by 10% at each iteration. This will make sure that recent data has more weight than previous iterations. Similarly, delete_min_df will remove certain words from its vocabulary if their frequency is lower than a set value. This ties together with the decay parameter as some words will decay over time if not used. For more information regarding the OnlineCountVectorizer , please see the vectorizers documentation . Example \u00b6 Online topic modeling in BERTopic is rather straightforward. We first need to have our documents split into chunks such that we can train and update our topic model incrementally. from sklearn.datasets import fetch_20newsgroups # Prepare documents all_docs = fetch_20newsgroups ( subset = subset , remove = ( 'headers' , 'footers' , 'quotes' ))[ \"data\" ] doc_chunks = [ all_docs [ i : i + 1000 ] for i in range ( 0 , len ( all_docs ), 1000 )] Here, we created chunks of 1000 documents to be fed in BERTopic. Then, we will need to define several sub-models that support online learning. Specifically, we are going to be using IncrementalPCA , MiniBatchKMeans , and the OnlineCountVectorizer : from sklearn.cluster import MiniBatchKMeans from sklearn.decomposition import IncrementalPCA from bertopic.vectorizers import OnlineCountVectorizer # Prepare sub-models that support online learning umap_model = IncrementalPCA ( n_components = 5 ) cluster_model = MiniBatchKMeans ( n_clusters = 50 , random_state = 0 ) vectorizer_model = OnlineCountVectorizer ( stop_words = \"english\" , decay = .01 ) After having defined our sub-models, we can start training our topic model incrementally by looping over our document chunks: from bertopic import BERTopic topic_model = BERTopic ( umap_model = umap_model , hdbscan_model = cluster_model , vectorizer_model = vectorizer_model ) # Incrementally fit the topic model by training on 1000 documents at a time for docs in doc_chunks : topic_model . partial_fit ( docs ) And that is it! During each iteration, you can access the predicted topics through the .topics_ attribute. Note Do note that in BERTopic it is not possible to use .partial_fit after the .fit as they work quite differently concerning internally updating topics, frequencies, representations, etc. Tip You can use any other dimensionality reduction and clustering algorithm as long as they have a .partial_fit function. Moreover, you can use dimensionality reduction algorithms that do not support .partial_fit functions but do have a .fit function to first train it on a large amount of data and then continuously add documents. The dimensionality reduction will not be updated but may be trained sufficiently to properly reduce the embeddings without the need to continuously add documents. Warning Only the most recent batch of documents is tracked. If you want to be using online topic modeling for low-memory use cases, then it is advised to also update the .topics_ attribute. Otherwise, variations such as hierarchical topic modeling will not work. # Incrementally fit the topic model by training on 1000 documents at a time and track the topics in each iteration topics = [] for docs in doc_chunks : topic_model . partial_fit ( docs ) topics . extend ( topic_model . topics_ ) topic_model . topics_ = topics River \u00b6 To continuously find new topics as they come in, we can use the package river . It contains several clustering models that can create new clusters as new data comes in. To make sure we can use their models, we first need to create a class that has a .partial_fit function and the option to extract labels through .labels_ : from river import stream from river import cluster class River : def __init__ ( self , model ): self . model = model def partial_fit ( self , umap_embeddings ): for umap_embedding , _ in stream . iter_array ( umap_embeddings ): self . model = self . model . learn_one ( umap_embedding ) labels = [] for umap_embedding , _ in stream . iter_array ( umap_embeddings ): label = self . model . predict_one ( umap_embedding ) labels . append ( label ) self . labels_ = labels return self Then, we can choose any river.cluster model that we are interested in and pass it to the River class before using it in BERTopic: # Using DBSTREAM to detect new topics as they come in cluster_model = River ( cluster . DBSTREAM ()) vectorizer_model = OnlineCountVectorizer ( stop_words = \"english\" ) ctfidf_model = ClassTfidfTransformer ( reduce_frequent_words = True , bm25_weighting = True ) # Prepare model topic_model = BERTopic ( hdbscan_model = cluster_model , vectorizer_model = vectorizer_model , ctfidf_model = ctfidf_model , ) # Incrementally fit the topic model by training on 1000 documents at a time for docs in doc_chunks : topic_model . partial_fit ( docs )","title":"Online Topic Modeling"},{"location":"getting_started/online/online.html#example","text":"Online topic modeling in BERTopic is rather straightforward. We first need to have our documents split into chunks such that we can train and update our topic model incrementally. from sklearn.datasets import fetch_20newsgroups # Prepare documents all_docs = fetch_20newsgroups ( subset = subset , remove = ( 'headers' , 'footers' , 'quotes' ))[ \"data\" ] doc_chunks = [ all_docs [ i : i + 1000 ] for i in range ( 0 , len ( all_docs ), 1000 )] Here, we created chunks of 1000 documents to be fed in BERTopic. Then, we will need to define several sub-models that support online learning. Specifically, we are going to be using IncrementalPCA , MiniBatchKMeans , and the OnlineCountVectorizer : from sklearn.cluster import MiniBatchKMeans from sklearn.decomposition import IncrementalPCA from bertopic.vectorizers import OnlineCountVectorizer # Prepare sub-models that support online learning umap_model = IncrementalPCA ( n_components = 5 ) cluster_model = MiniBatchKMeans ( n_clusters = 50 , random_state = 0 ) vectorizer_model = OnlineCountVectorizer ( stop_words = \"english\" , decay = .01 ) After having defined our sub-models, we can start training our topic model incrementally by looping over our document chunks: from bertopic import BERTopic topic_model = BERTopic ( umap_model = umap_model , hdbscan_model = cluster_model , vectorizer_model = vectorizer_model ) # Incrementally fit the topic model by training on 1000 documents at a time for docs in doc_chunks : topic_model . partial_fit ( docs ) And that is it! During each iteration, you can access the predicted topics through the .topics_ attribute. Note Do note that in BERTopic it is not possible to use .partial_fit after the .fit as they work quite differently concerning internally updating topics, frequencies, representations, etc. Tip You can use any other dimensionality reduction and clustering algorithm as long as they have a .partial_fit function. Moreover, you can use dimensionality reduction algorithms that do not support .partial_fit functions but do have a .fit function to first train it on a large amount of data and then continuously add documents. The dimensionality reduction will not be updated but may be trained sufficiently to properly reduce the embeddings without the need to continuously add documents. Warning Only the most recent batch of documents is tracked. If you want to be using online topic modeling for low-memory use cases, then it is advised to also update the .topics_ attribute. Otherwise, variations such as hierarchical topic modeling will not work. # Incrementally fit the topic model by training on 1000 documents at a time and track the topics in each iteration topics = [] for docs in doc_chunks : topic_model . partial_fit ( docs ) topics . extend ( topic_model . topics_ ) topic_model . topics_ = topics","title":"Example"},{"location":"getting_started/online/online.html#river","text":"To continuously find new topics as they come in, we can use the package river . It contains several clustering models that can create new clusters as new data comes in. To make sure we can use their models, we first need to create a class that has a .partial_fit function and the option to extract labels through .labels_ : from river import stream from river import cluster class River : def __init__ ( self , model ): self . model = model def partial_fit ( self , umap_embeddings ): for umap_embedding , _ in stream . iter_array ( umap_embeddings ): self . model = self . model . learn_one ( umap_embedding ) labels = [] for umap_embedding , _ in stream . iter_array ( umap_embeddings ): label = self . model . predict_one ( umap_embedding ) labels . append ( label ) self . labels_ = labels return self Then, we can choose any river.cluster model that we are interested in and pass it to the River class before using it in BERTopic: # Using DBSTREAM to detect new topics as they come in cluster_model = River ( cluster . DBSTREAM ()) vectorizer_model = OnlineCountVectorizer ( stop_words = \"english\" ) ctfidf_model = ClassTfidfTransformer ( reduce_frequent_words = True , bm25_weighting = True ) # Prepare model topic_model = BERTopic ( hdbscan_model = cluster_model , vectorizer_model = vectorizer_model , ctfidf_model = ctfidf_model , ) # Incrementally fit the topic model by training on 1000 documents at a time for docs in doc_chunks : topic_model . partial_fit ( docs )","title":"River"},{"location":"getting_started/outlier_reduction/outlier_reduction.html","text":"When using HDBSCAN, DBSCAN, or OPTICS, a number of outlier documents might be created that do not fall within any of the created topics. These are labeled as -1. Depending on your use case, you might want to decrease the number of documents that are labeled as outliers. Fortunately, there are a number of strategies one might use to reduce the number of outliers after you have trained your BERTopic model. The main way to reduce your outliers in BERTopic is by using the .reduce_outliers function. To make it work without too much tweaking, you will only need to pass the docs and their corresponding topics . You can pass outlier and non-outlier documents together since it will only try to reduce outlier documents and label them to a non-outlier topic. The following is a minimal example: from bertopic import BERTopic # Train your BERTopic model topic_model = BERTopic () topics , probs = topic_model . fit_transform ( docs ) # Reduce outliers new_topics = topic_model . reduce_outliers ( docs , topics ) Note You can use the threshold parameter to select the minimum distance or similarity when matching outlier documents with non-outlier topics. This allows the user to change the amount of outlier documents are assigned to non-outlier topics. Strategies \u00b6 The default method for reducing outliers is by calculating the c-TF-IDF representations of outlier documents and assigning them to the best matching c-TF-IDF representations of non-outlier topics. However, there are a number of other strategies one can use, either seperately or in conjunction that are worthwhile to explore: * Using the topic-document probabilities to assign topics * Using the topic-document distributions to assign topics * Using c-TF-IDF representations to assign topics * Using document and topic embeddings to assign topics Probabilities \u00b6 This strategy uses the soft-clustering as performed by HDBSCAN to find the best matching topic for each outlier document. To use this, make sure to calculate the probabilities beforehand by instantiating BERTopic with calculate_probabilities=True . from bertopic import BERTopic # Train your BERTopic model and calculate the document-topic probabilities topic_model = BERTopic ( calculate_probabilities = True ) topics , probs = topic_model . fit_transform ( docs ) # Reduce outliers using the `probabilities` strategy new_topics = topic_model . reduce_outliers ( docs , topics , probabilities = probs , strategy = \"probabilities\" ) Topic Distributions \u00b6 Use the topic distributions, as calculated with .approximate_distribution to find the most frequent topic in each outlier document. You can use the distributions_params variable to tweak the parameters of .approximate_distribution . from bertopic import BERTopic # Train your BERTopic model topic_model = BERTopic () topics , probs = topic_model . fit_transform ( docs ) # Reduce outliers using the `distributions` strategy new_topics = topic_model . reduce_outliers ( docs , topics , strategy = \"distributions\" ) c-TF-IDF \u00b6 Calculate the c-TF-IDF representation for each outlier document and find the best matching c-TF-IDF topic representation using cosine similarity. from bertopic import BERTopic # Train your BERTopic model topic_model = BERTopic () topics , probs = topic_model . fit_transform ( docs ) # Reduce outliers using the `c-tf-idf` strategy new_topics = topic_model . reduce_outliers ( docs , topics , strategy = \"c-tf-idf\" ) Embeddings \u00b6 Using the embeddings of each outlier documents, find the best matching topic embedding using cosine similarity. from bertopic import BERTopic # Train your BERTopic model topic_model = BERTopic () topics , probs = topic_model . fit_transform ( docs ) # Reduce outliers using the `embeddings` strategy new_topics = topic_model . reduce_outliers ( docs , topics , strategy = \"embeddings\" ) Note If you have pre-calculated the documents embeddings you can speed up the outlier reduction process for the \"embeddings\" strategy as it will prevent re-calculating the document embeddings. Chain Strategies \u00b6 Since the .reduce_outliers function does not internally update the topics, we can easily try out different strategies but also chain them together. You might want to do a first pass with the \"c-tf-idf\" strategy as it is quite fast. Then, we can perform the \"distributions\" strategy on the outliers that are left since this method is typically much slower: # Use the \"c-TF-IDF\" strategy with a threshold new_topics = topic_model . reduce_outliers ( docs , new_topics , strategy = \"c-tf-idf\" , threshold = 0.1 ) # Reduce all outliers that are left with the \"distributions\" strategy new_topics = topic_model . reduce_outliers ( docs , topics , strategy = \"distributions\" ) Update Topics \u00b6 After generating our updated topics, we can feed them back into BERTopic in one of two ways. We can either update the topic representations themselves based on the documents that now belong to new topics or we can only update the topic frequency without updating the topic representations themselves. Warning In both cases, it is important to realize that updating the topics this way may lead to errors if topic reduction or topic merging techniques are used afterwards. The reason for this is that when you assign a -1 document to topic 1 and another -1 document to topic 2, it is unclear how you map the -1 documents. Is it matched to topic 1 or 2. Update Topic Representation \u00b6 When outlier documents are generated, they are not used when modeling the topic representations. These documents are completely ignored when finding good descriptions of topics. Thus, after having reduced the number of outliers in your topic model, you might want to update the topic representations with the documents that now belong to actual topics. To do so, we can make use of the .update_topics function: topic_model . update_topics ( docs , topics = new_topics ) As seen above, you will only need to pass the documents on which the model was trained including the new topics that were generated using one of the above four strategies. Exploration \u00b6 When you are reducing the number of topics, it might be worthwhile to iteratively visualize the results in order to get an intuitive understanding of the effect of the above four strategies. Making use of .visualize_documents , we can quickly iterate over the different strategies and view their effects. Here, an example will be shown on how to approach such a pipeline. First, we train our model: from umap import UMAP from bertopic import BERTopic from sklearn.datasets import fetch_20newsgroups from sentence_transformers import SentenceTransformer from sklearn.feature_extraction.text import CountVectorizer # Prepare data, extract embeddings, and prepare sub-models docs = fetch_20newsgroups ( subset = 'all' , remove = ( 'headers' , 'footers' , 'quotes' ))[ 'data' ] umap_model = UMAP ( n_neighbors = 15 , n_components = 5 , min_dist = 0.0 , metric = 'cosine' , random_state = 42 ) vectorizer_model = CountVectorizer ( stop_words = \"english\" ) sentence_model = SentenceTransformer ( \"all-MiniLM-L6-v2\" ) embeddings = sentence_model . encode ( docs , show_progress_bar = True ) # We reduce our embeddings to 2D as it will allows us to quickly iterate later on reduced_embeddings = UMAP ( n_neighbors = 10 , n_components = 2 , min_dist = 0.0 , metric = 'cosine' ) . fit_transform ( embeddings ) # Train our topic model topic_model = BERTopic ( embedding_model = sentence_model , umap_model = umap_model , vectorizer_model = vectorizer_model calculate_probabilities = True , nr_topics = 40 ) topics , probs = topic_model . fit_transform ( docs , embeddings ) After having trained our model, let us take a look at the 2D representation of the generated topics: topic_model . visualize_documents ( docs , reduced_embeddings = reduced_embeddings , hide_document_hover = True , hide_annotations = True ) Next, we reduce the number of outliers using the probabilities strategy: new_topics = reduce_outliers ( topic_model , docs , topics , probabilities = probs , threshold = 0.05 , strategy = \"probabilities\" ) topic_model . update_topics ( docs , topics = new_topics ) And finally, we visualize the results: topic_model . visualize_documents ( docs , reduced_embeddings = reduced_embeddings , hide_document_hover = True , hide_annotations = True )","title":"Outlier reduction"},{"location":"getting_started/outlier_reduction/outlier_reduction.html#strategies","text":"The default method for reducing outliers is by calculating the c-TF-IDF representations of outlier documents and assigning them to the best matching c-TF-IDF representations of non-outlier topics. However, there are a number of other strategies one can use, either seperately or in conjunction that are worthwhile to explore: * Using the topic-document probabilities to assign topics * Using the topic-document distributions to assign topics * Using c-TF-IDF representations to assign topics * Using document and topic embeddings to assign topics","title":"Strategies"},{"location":"getting_started/outlier_reduction/outlier_reduction.html#probabilities","text":"This strategy uses the soft-clustering as performed by HDBSCAN to find the best matching topic for each outlier document. To use this, make sure to calculate the probabilities beforehand by instantiating BERTopic with calculate_probabilities=True . from bertopic import BERTopic # Train your BERTopic model and calculate the document-topic probabilities topic_model = BERTopic ( calculate_probabilities = True ) topics , probs = topic_model . fit_transform ( docs ) # Reduce outliers using the `probabilities` strategy new_topics = topic_model . reduce_outliers ( docs , topics , probabilities = probs , strategy = \"probabilities\" )","title":"Probabilities"},{"location":"getting_started/outlier_reduction/outlier_reduction.html#topic-distributions","text":"Use the topic distributions, as calculated with .approximate_distribution to find the most frequent topic in each outlier document. You can use the distributions_params variable to tweak the parameters of .approximate_distribution . from bertopic import BERTopic # Train your BERTopic model topic_model = BERTopic () topics , probs = topic_model . fit_transform ( docs ) # Reduce outliers using the `distributions` strategy new_topics = topic_model . reduce_outliers ( docs , topics , strategy = \"distributions\" )","title":"Topic Distributions"},{"location":"getting_started/outlier_reduction/outlier_reduction.html#c-tf-idf","text":"Calculate the c-TF-IDF representation for each outlier document and find the best matching c-TF-IDF topic representation using cosine similarity. from bertopic import BERTopic # Train your BERTopic model topic_model = BERTopic () topics , probs = topic_model . fit_transform ( docs ) # Reduce outliers using the `c-tf-idf` strategy new_topics = topic_model . reduce_outliers ( docs , topics , strategy = \"c-tf-idf\" )","title":"c-TF-IDF"},{"location":"getting_started/outlier_reduction/outlier_reduction.html#embeddings","text":"Using the embeddings of each outlier documents, find the best matching topic embedding using cosine similarity. from bertopic import BERTopic # Train your BERTopic model topic_model = BERTopic () topics , probs = topic_model . fit_transform ( docs ) # Reduce outliers using the `embeddings` strategy new_topics = topic_model . reduce_outliers ( docs , topics , strategy = \"embeddings\" ) Note If you have pre-calculated the documents embeddings you can speed up the outlier reduction process for the \"embeddings\" strategy as it will prevent re-calculating the document embeddings.","title":"Embeddings"},{"location":"getting_started/outlier_reduction/outlier_reduction.html#chain-strategies","text":"Since the .reduce_outliers function does not internally update the topics, we can easily try out different strategies but also chain them together. You might want to do a first pass with the \"c-tf-idf\" strategy as it is quite fast. Then, we can perform the \"distributions\" strategy on the outliers that are left since this method is typically much slower: # Use the \"c-TF-IDF\" strategy with a threshold new_topics = topic_model . reduce_outliers ( docs , new_topics , strategy = \"c-tf-idf\" , threshold = 0.1 ) # Reduce all outliers that are left with the \"distributions\" strategy new_topics = topic_model . reduce_outliers ( docs , topics , strategy = \"distributions\" )","title":"Chain Strategies"},{"location":"getting_started/outlier_reduction/outlier_reduction.html#update-topics","text":"After generating our updated topics, we can feed them back into BERTopic in one of two ways. We can either update the topic representations themselves based on the documents that now belong to new topics or we can only update the topic frequency without updating the topic representations themselves. Warning In both cases, it is important to realize that updating the topics this way may lead to errors if topic reduction or topic merging techniques are used afterwards. The reason for this is that when you assign a -1 document to topic 1 and another -1 document to topic 2, it is unclear how you map the -1 documents. Is it matched to topic 1 or 2.","title":"Update Topics"},{"location":"getting_started/outlier_reduction/outlier_reduction.html#update-topic-representation","text":"When outlier documents are generated, they are not used when modeling the topic representations. These documents are completely ignored when finding good descriptions of topics. Thus, after having reduced the number of outliers in your topic model, you might want to update the topic representations with the documents that now belong to actual topics. To do so, we can make use of the .update_topics function: topic_model . update_topics ( docs , topics = new_topics ) As seen above, you will only need to pass the documents on which the model was trained including the new topics that were generated using one of the above four strategies.","title":"Update Topic Representation"},{"location":"getting_started/outlier_reduction/outlier_reduction.html#exploration","text":"When you are reducing the number of topics, it might be worthwhile to iteratively visualize the results in order to get an intuitive understanding of the effect of the above four strategies. Making use of .visualize_documents , we can quickly iterate over the different strategies and view their effects. Here, an example will be shown on how to approach such a pipeline. First, we train our model: from umap import UMAP from bertopic import BERTopic from sklearn.datasets import fetch_20newsgroups from sentence_transformers import SentenceTransformer from sklearn.feature_extraction.text import CountVectorizer # Prepare data, extract embeddings, and prepare sub-models docs = fetch_20newsgroups ( subset = 'all' , remove = ( 'headers' , 'footers' , 'quotes' ))[ 'data' ] umap_model = UMAP ( n_neighbors = 15 , n_components = 5 , min_dist = 0.0 , metric = 'cosine' , random_state = 42 ) vectorizer_model = CountVectorizer ( stop_words = \"english\" ) sentence_model = SentenceTransformer ( \"all-MiniLM-L6-v2\" ) embeddings = sentence_model . encode ( docs , show_progress_bar = True ) # We reduce our embeddings to 2D as it will allows us to quickly iterate later on reduced_embeddings = UMAP ( n_neighbors = 10 , n_components = 2 , min_dist = 0.0 , metric = 'cosine' ) . fit_transform ( embeddings ) # Train our topic model topic_model = BERTopic ( embedding_model = sentence_model , umap_model = umap_model , vectorizer_model = vectorizer_model calculate_probabilities = True , nr_topics = 40 ) topics , probs = topic_model . fit_transform ( docs , embeddings ) After having trained our model, let us take a look at the 2D representation of the generated topics: topic_model . visualize_documents ( docs , reduced_embeddings = reduced_embeddings , hide_document_hover = True , hide_annotations = True ) Next, we reduce the number of outliers using the probabilities strategy: new_topics = reduce_outliers ( topic_model , docs , topics , probabilities = probs , threshold = 0.05 , strategy = \"probabilities\" ) topic_model . update_topics ( docs , topics = new_topics ) And finally, we visualize the results: topic_model . visualize_documents ( docs , reduced_embeddings = reduced_embeddings , hide_document_hover = True , hide_annotations = True )","title":"Exploration"},{"location":"getting_started/parameter%20tuning/parametertuning.html","text":"Hyperparameter Tuning \u00b6 Although BERTopic works quite well out of the box, there are a number of hyperparameters to tune according to your use case. This section will focus on important parameters directly accessible in BERTopic but also hyperparameter optimization in sub-models such as HDBSCAN and UMAP. BERTopic \u00b6 When instantiating BERTopic, there are several hyperparameters that you can directly adjust that could significantly improve the performance of your topic model. In this section, we will go through the most impactful parameters in BERTopic and directions on how to optimize them. language \u00b6 The language parameter is used to simplify the selection of models for those who are not familiar with sentence-transformers models. In essence, there are two options to choose from: language = \"english\" or language = \"multilingual\" The English model is \"all-MiniLM-L6-v2\" and can be found here . It is the default model that is used in BERTopic and works great for English documents. The multilingual model is \"paraphrase-multilingual-MiniLM-L12-v2\" and supports over 50+ languages which can be found here . The model is very similar to the base model but is trained on many languages and has a slightly different architecture. top_n_words \u00b6 top_n_words refers to the number of words per topic that you want to be extracted. In practice, I would advise you to keep this value below 30 and preferably between 10 and 20. The reasoning for this is that the more words you put in a topic the less coherent it can become. The top words are the most representative of the topic and should be focused on. n_gram_range \u00b6 The n_gram_range parameter refers to the CountVectorizer used when creating the topic representation. It relates to the number of words you want in your topic representation. For example, \"New\" and \"York\" are two separate words but are often used as \"New York\" which represents an n-gram of 2. Thus, the n_gram_range should be set to (1, 2) if you want \"New York\" in your topic representation. min_topic_size \u00b6 min_topic_size is an important parameter! It is used to specify what the minimum size of a topic can be. The lower this value the more topics are created. If you set this value too high, then it is possible that simply no topics will be created! Set this value too low and you will get many microclusters. It is advised to play around with this value depending on the size of your dataset. If it nears a million documents, then it is advised to set it much higher than the default of 10, for example, 100 or even 500. nr_topics \u00b6 nr_topics can be a tricky parameter. It specifies, after training the topic model, the number of topics that will be reduced. For example, if your topic model results in 100 topics but you have set nr_topics to 20 then the topic model will try to reduce the number of topics from 100 to 20. This reduction can take a while as each reduction in topics activates a c-TF-IDF calculation. If this is set to None, no reduction is applied. Use \"auto\" to automatically reduce topics using HDBSCAN. low_memory \u00b6 low_memory sets UMAP's low_memory to True to make sure that less memory is used in the computation. This slows down computation but allows UMAP to be run on low-memory machines. calculate_probabilities \u00b6 calculate_probabilities lets you calculate the probabilities of each topic in each document. This is computationally quite expensive and is turned off by default. UMAP \u00b6 UMAP is an amazing technique for dimensionality reduction. In BERTopic, it is used to reduce the dimensionality of document embedding into something easier to use with HDBSCAN to create good clusters. However, it does has a significant number of parameters you could take into account. As exposing all parameters in BERTopic would be difficult to manage, we can instantiate our UMAP model and pass it to BERTopic: from umap import UMAP umap_model = UMAP ( n_neighbors = 15 , n_components = 10 , metric = 'cosine' , low_memory = False ) topic_model = BERTopic ( umap_model = umap_model ) . fit ( docs ) n_neighbors \u00b6 n_neighbors is the number of neighboring sample points used when making the manifold approximation. Increasing this value typically results in a more global view of the embedding structure whilst smaller values result in a more local view. Increasing this value often results in larger clusters being created. n_components \u00b6 n_components refers to the dimensionality of the embeddings after reducing them. This is set as a default to 5 to reduce dimensionality as much as possible whilst trying to maximize the information kept in the resulting embeddings. Although lowering or increasing this value influences the quality of embeddings, its effect is largest on the performance of HDBSCAN. Increasing this value too much and HDBSCAN will have a hard time clustering the high-dimensional embeddings. Lower this value too much and too little information in the resulting embeddings are available to create proper clusters. If you want to increase this value, I would advise setting using a metric for HDBSCAN that works well in high dimensional data. metric \u00b6 metric refers to the method used to compute the distances in high dimensional space. The default is cosine as we are dealing with high dimensional data. However, BERTopic is also able to use any input, even regular tabular data, to cluster the documents. Thus, you might want to change the metric to something that fits your use case. low_memory \u00b6 low_memory is used when datasets may consume a lot of memory. Using millions of documents can lead to memory issues and setting this value to True might alleviate some of the issues. HDBSCAN \u00b6 After reducing the embeddings with UMAP, we use HDBSCAN to cluster our documents into clusters of similar documents. Similar to UMAP, HDBSCAN has many parameters that could be tweaked to improve the cluster's quality. from hdbscan import HDBSCAN hdbscan_model = HDBSCAN ( min_cluster_size = 10 , metric = 'euclidean' , prediction_data = True ) topic_model = BERTopic ( hdbscan_model = hdbscan_model ) . fit ( docs ) min_cluster_size \u00b6 min_cluster_size is arguably the most important parameter in HDBSCAN. It controls the minimum size of a cluster and thereby the number of clusters that will be generated. It is set to 10 as a default. Increasing this value results in fewer clusters but of larger size whereas decreasing this value results in more micro clusters being generated. Typically, I would advise increasing this value rather than decreasing it. min_samples \u00b6 min_samples is automatically set to min_cluster_size and controls the number of outliers generated. Setting this value significantly lower than min_cluster_size might help you reduce the amount of noise you will get. Do note that outliers are to be expected and forcing the output to have no outliers may not properly represent the data. metric \u00b6 metric , like with HDBSCAN is used to calculate the distances. Here, we went with euclidean as, after reducing the dimensionality, we have low dimensional data and not much optimization is necessary. However, if you increase n_components in UMAP, then it would be advised to look into metrics that work with high dimensional data. prediction_data \u00b6 Make sure you always set this value to True as it is needed to predict new points later on. You can set this to False if you do not wish to predict any unseen data points.","title":"Parameter tuning"},{"location":"getting_started/parameter%20tuning/parametertuning.html#hyperparameter-tuning","text":"Although BERTopic works quite well out of the box, there are a number of hyperparameters to tune according to your use case. This section will focus on important parameters directly accessible in BERTopic but also hyperparameter optimization in sub-models such as HDBSCAN and UMAP.","title":"Hyperparameter Tuning"},{"location":"getting_started/parameter%20tuning/parametertuning.html#bertopic","text":"When instantiating BERTopic, there are several hyperparameters that you can directly adjust that could significantly improve the performance of your topic model. In this section, we will go through the most impactful parameters in BERTopic and directions on how to optimize them.","title":"BERTopic"},{"location":"getting_started/parameter%20tuning/parametertuning.html#language","text":"The language parameter is used to simplify the selection of models for those who are not familiar with sentence-transformers models. In essence, there are two options to choose from: language = \"english\" or language = \"multilingual\" The English model is \"all-MiniLM-L6-v2\" and can be found here . It is the default model that is used in BERTopic and works great for English documents. The multilingual model is \"paraphrase-multilingual-MiniLM-L12-v2\" and supports over 50+ languages which can be found here . The model is very similar to the base model but is trained on many languages and has a slightly different architecture.","title":"language"},{"location":"getting_started/parameter%20tuning/parametertuning.html#top_n_words","text":"top_n_words refers to the number of words per topic that you want to be extracted. In practice, I would advise you to keep this value below 30 and preferably between 10 and 20. The reasoning for this is that the more words you put in a topic the less coherent it can become. The top words are the most representative of the topic and should be focused on.","title":"top_n_words"},{"location":"getting_started/parameter%20tuning/parametertuning.html#n_gram_range","text":"The n_gram_range parameter refers to the CountVectorizer used when creating the topic representation. It relates to the number of words you want in your topic representation. For example, \"New\" and \"York\" are two separate words but are often used as \"New York\" which represents an n-gram of 2. Thus, the n_gram_range should be set to (1, 2) if you want \"New York\" in your topic representation.","title":"n_gram_range"},{"location":"getting_started/parameter%20tuning/parametertuning.html#min_topic_size","text":"min_topic_size is an important parameter! It is used to specify what the minimum size of a topic can be. The lower this value the more topics are created. If you set this value too high, then it is possible that simply no topics will be created! Set this value too low and you will get many microclusters. It is advised to play around with this value depending on the size of your dataset. If it nears a million documents, then it is advised to set it much higher than the default of 10, for example, 100 or even 500.","title":"min_topic_size"},{"location":"getting_started/parameter%20tuning/parametertuning.html#nr_topics","text":"nr_topics can be a tricky parameter. It specifies, after training the topic model, the number of topics that will be reduced. For example, if your topic model results in 100 topics but you have set nr_topics to 20 then the topic model will try to reduce the number of topics from 100 to 20. This reduction can take a while as each reduction in topics activates a c-TF-IDF calculation. If this is set to None, no reduction is applied. Use \"auto\" to automatically reduce topics using HDBSCAN.","title":"nr_topics"},{"location":"getting_started/parameter%20tuning/parametertuning.html#low_memory","text":"low_memory sets UMAP's low_memory to True to make sure that less memory is used in the computation. This slows down computation but allows UMAP to be run on low-memory machines.","title":"low_memory"},{"location":"getting_started/parameter%20tuning/parametertuning.html#calculate_probabilities","text":"calculate_probabilities lets you calculate the probabilities of each topic in each document. This is computationally quite expensive and is turned off by default.","title":"calculate_probabilities"},{"location":"getting_started/parameter%20tuning/parametertuning.html#umap","text":"UMAP is an amazing technique for dimensionality reduction. In BERTopic, it is used to reduce the dimensionality of document embedding into something easier to use with HDBSCAN to create good clusters. However, it does has a significant number of parameters you could take into account. As exposing all parameters in BERTopic would be difficult to manage, we can instantiate our UMAP model and pass it to BERTopic: from umap import UMAP umap_model = UMAP ( n_neighbors = 15 , n_components = 10 , metric = 'cosine' , low_memory = False ) topic_model = BERTopic ( umap_model = umap_model ) . fit ( docs )","title":"UMAP"},{"location":"getting_started/parameter%20tuning/parametertuning.html#n_neighbors","text":"n_neighbors is the number of neighboring sample points used when making the manifold approximation. Increasing this value typically results in a more global view of the embedding structure whilst smaller values result in a more local view. Increasing this value often results in larger clusters being created.","title":"n_neighbors"},{"location":"getting_started/parameter%20tuning/parametertuning.html#n_components","text":"n_components refers to the dimensionality of the embeddings after reducing them. This is set as a default to 5 to reduce dimensionality as much as possible whilst trying to maximize the information kept in the resulting embeddings. Although lowering or increasing this value influences the quality of embeddings, its effect is largest on the performance of HDBSCAN. Increasing this value too much and HDBSCAN will have a hard time clustering the high-dimensional embeddings. Lower this value too much and too little information in the resulting embeddings are available to create proper clusters. If you want to increase this value, I would advise setting using a metric for HDBSCAN that works well in high dimensional data.","title":"n_components"},{"location":"getting_started/parameter%20tuning/parametertuning.html#metric","text":"metric refers to the method used to compute the distances in high dimensional space. The default is cosine as we are dealing with high dimensional data. However, BERTopic is also able to use any input, even regular tabular data, to cluster the documents. Thus, you might want to change the metric to something that fits your use case.","title":"metric"},{"location":"getting_started/parameter%20tuning/parametertuning.html#low_memory_1","text":"low_memory is used when datasets may consume a lot of memory. Using millions of documents can lead to memory issues and setting this value to True might alleviate some of the issues.","title":"low_memory"},{"location":"getting_started/parameter%20tuning/parametertuning.html#hdbscan","text":"After reducing the embeddings with UMAP, we use HDBSCAN to cluster our documents into clusters of similar documents. Similar to UMAP, HDBSCAN has many parameters that could be tweaked to improve the cluster's quality. from hdbscan import HDBSCAN hdbscan_model = HDBSCAN ( min_cluster_size = 10 , metric = 'euclidean' , prediction_data = True ) topic_model = BERTopic ( hdbscan_model = hdbscan_model ) . fit ( docs )","title":"HDBSCAN"},{"location":"getting_started/parameter%20tuning/parametertuning.html#min_cluster_size","text":"min_cluster_size is arguably the most important parameter in HDBSCAN. It controls the minimum size of a cluster and thereby the number of clusters that will be generated. It is set to 10 as a default. Increasing this value results in fewer clusters but of larger size whereas decreasing this value results in more micro clusters being generated. Typically, I would advise increasing this value rather than decreasing it.","title":"min_cluster_size"},{"location":"getting_started/parameter%20tuning/parametertuning.html#min_samples","text":"min_samples is automatically set to min_cluster_size and controls the number of outliers generated. Setting this value significantly lower than min_cluster_size might help you reduce the amount of noise you will get. Do note that outliers are to be expected and forcing the output to have no outliers may not properly represent the data.","title":"min_samples"},{"location":"getting_started/parameter%20tuning/parametertuning.html#metric_1","text":"metric , like with HDBSCAN is used to calculate the distances. Here, we went with euclidean as, after reducing the dimensionality, we have low dimensional data and not much optimization is necessary. However, if you increase n_components in UMAP, then it would be advised to look into metrics that work with high dimensional data.","title":"metric"},{"location":"getting_started/parameter%20tuning/parametertuning.html#prediction_data","text":"Make sure you always set this value to True as it is needed to predict new points later on. You can set this to False if you do not wish to predict any unseen data points.","title":"prediction_data"},{"location":"getting_started/quickstart/quickstart.html","text":"Installation \u00b6 Installation, with sentence-transformers, can be done using pypi : pip install bertopic You may want to install more depending on the transformers and language backends that you will be using. The possible installations are: pip install bertopic [ flair ] pip install bertopic [ gensim ] pip install bertopic [ spacy ] pip install bertopic [ use ] Quick Start \u00b6 We start by extracting topics from the well-known 20 newsgroups dataset which is comprised of English documents: from bertopic import BERTopic from sklearn.datasets import fetch_20newsgroups docs = fetch_20newsgroups ( subset = 'all' , remove = ( 'headers' , 'footers' , 'quotes' ))[ 'data' ] topic_model = BERTopic () topics , probs = topic_model . fit_transform ( docs ) After generating topics, we can access the frequent topics that were generated: >>> topic_model . get_topic_info () Topic Count Name - 1 4630 - 1 _can_your_will_any 0 693 49 _windows_drive_dos_file 1 466 32 _jesus_bible_christian_faith 2 441 2 _space_launch_orbit_lunar 3 381 22 _key_encryption_keys_encrypted -1 refers to all outliers and should typically be ignored. Next, let's take a look at the most frequent topic that was generated, topic 0: >>> topic_model . get_topic ( 0 ) [( 'windows' , 0.006152228076250982 ), ( 'drive' , 0.004982897610645755 ), ( 'dos' , 0.004845038866360651 ), ( 'file' , 0.004140142872194834 ), ( 'disk' , 0.004131678774810884 ), ( 'mac' , 0.003624848635985097 ), ( 'memory' , 0.0034840976976789903 ), ( 'software' , 0.0034415334250699077 ), ( 'email' , 0.0034239554442333257 ), ( 'pc' , 0.003047105930670237 )] Using .get_document_info , we can also extract information on a document level, such as their corresponding topics, probabilities, whether they are representative documents for a topic, etc.: >>> topic_model . get_document_info ( docs ) Document Topic Name Top_n_words Probability ... I am sure some bashers of Pens ... 0 0 _game_team_games_season game - team - games ... 0.200010 ... My brother is in the market for ... - 1 - 1 _can_your_will_any can - your - will ... 0.420668 ... Finally you said what you dream ... - 1 - 1 _can_your_will_any can - your - will ... 0.807259 ... Think ! It is the SCSI card doing ... 49 49 _windows_drive_dos_file windows - drive - docs ... 0.071746 ... 1 ) I have an old Jasmine drive ... 49 49 _windows_drive_dos_file windows - drive - docs ... 0.038983 ... Tip! Use BERTopic(language=\"multilingual\") to select a model that supports 50+ languages. Visualize Topics \u00b6 After having trained our BERTopic model, we can iteratively go through perhaps a hundred topics to get a good understanding of the topics that were extracted. However, that takes quite some time and lacks a global representation. Instead, we can visualize the topics that were generated in a way very similar to LDAvis : topic_model . visualize_topics () Save/Load BERTopic model \u00b6 We can easily save a trained BERTopic model by calling save : from bertopic import BERTopic topic_model = BERTopic () topic_model . save ( \"my_model\" ) Then, we can load the model in one line: topic_model = BERTopic . load ( \"my_model\" ) Tip! If you do not want to save the embedding model because it is loaded from the cloud, simply run model.save(\"my_model\", save_embedding_model=False) instead. Then, you can load in the model with BERTopic.load(\"my_model\", embedding_model=\"whatever_model_you_used\") . Warning When saving the model, make sure to also keep track of the versions of dependencies and Python used. Loading and saving the model should be done using the same dependencies and Python. Moreover, models saved in one version of BERTopic should not be loaded in other versions.","title":"Quickstart"},{"location":"getting_started/quickstart/quickstart.html#installation","text":"Installation, with sentence-transformers, can be done using pypi : pip install bertopic You may want to install more depending on the transformers and language backends that you will be using. The possible installations are: pip install bertopic [ flair ] pip install bertopic [ gensim ] pip install bertopic [ spacy ] pip install bertopic [ use ]","title":"Installation"},{"location":"getting_started/quickstart/quickstart.html#quick-start","text":"We start by extracting topics from the well-known 20 newsgroups dataset which is comprised of English documents: from bertopic import BERTopic from sklearn.datasets import fetch_20newsgroups docs = fetch_20newsgroups ( subset = 'all' , remove = ( 'headers' , 'footers' , 'quotes' ))[ 'data' ] topic_model = BERTopic () topics , probs = topic_model . fit_transform ( docs ) After generating topics, we can access the frequent topics that were generated: >>> topic_model . get_topic_info () Topic Count Name - 1 4630 - 1 _can_your_will_any 0 693 49 _windows_drive_dos_file 1 466 32 _jesus_bible_christian_faith 2 441 2 _space_launch_orbit_lunar 3 381 22 _key_encryption_keys_encrypted -1 refers to all outliers and should typically be ignored. Next, let's take a look at the most frequent topic that was generated, topic 0: >>> topic_model . get_topic ( 0 ) [( 'windows' , 0.006152228076250982 ), ( 'drive' , 0.004982897610645755 ), ( 'dos' , 0.004845038866360651 ), ( 'file' , 0.004140142872194834 ), ( 'disk' , 0.004131678774810884 ), ( 'mac' , 0.003624848635985097 ), ( 'memory' , 0.0034840976976789903 ), ( 'software' , 0.0034415334250699077 ), ( 'email' , 0.0034239554442333257 ), ( 'pc' , 0.003047105930670237 )] Using .get_document_info , we can also extract information on a document level, such as their corresponding topics, probabilities, whether they are representative documents for a topic, etc.: >>> topic_model . get_document_info ( docs ) Document Topic Name Top_n_words Probability ... I am sure some bashers of Pens ... 0 0 _game_team_games_season game - team - games ... 0.200010 ... My brother is in the market for ... - 1 - 1 _can_your_will_any can - your - will ... 0.420668 ... Finally you said what you dream ... - 1 - 1 _can_your_will_any can - your - will ... 0.807259 ... Think ! It is the SCSI card doing ... 49 49 _windows_drive_dos_file windows - drive - docs ... 0.071746 ... 1 ) I have an old Jasmine drive ... 49 49 _windows_drive_dos_file windows - drive - docs ... 0.038983 ... Tip! Use BERTopic(language=\"multilingual\") to select a model that supports 50+ languages.","title":"Quick Start"},{"location":"getting_started/quickstart/quickstart.html#visualize-topics","text":"After having trained our BERTopic model, we can iteratively go through perhaps a hundred topics to get a good understanding of the topics that were extracted. However, that takes quite some time and lacks a global representation. Instead, we can visualize the topics that were generated in a way very similar to LDAvis : topic_model . visualize_topics ()","title":"Visualize Topics"},{"location":"getting_started/quickstart/quickstart.html#saveload-bertopic-model","text":"We can easily save a trained BERTopic model by calling save : from bertopic import BERTopic topic_model = BERTopic () topic_model . save ( \"my_model\" ) Then, we can load the model in one line: topic_model = BERTopic . load ( \"my_model\" ) Tip! If you do not want to save the embedding model because it is loaded from the cloud, simply run model.save(\"my_model\", save_embedding_model=False) instead. Then, you can load in the model with BERTopic.load(\"my_model\", embedding_model=\"whatever_model_you_used\") . Warning When saving the model, make sure to also keep track of the versions of dependencies and Python used. Loading and saving the model should be done using the same dependencies and Python. Moreover, models saved in one version of BERTopic should not be loaded in other versions.","title":"Save/Load BERTopic model"},{"location":"getting_started/representation/representation.html","text":"One of the core components of BERTopic is its Bag-of-Words representation and weighting with c-TF-IDF. This method is fast and can quickly generate a number of keywords for a topic without depending on the clustering task. As a result, topics can easily and quickly be updated after training the model without the need to re-train it. Although these give good topic representations, we may want to further fine-tune the topic representations. As such, there are a number of representation models implemented in BERTopic that allows for further fine-tuning of the topic representations. These are optional and are not used by default . You are not restrained by the how the representation can be fine-tuned, from GPT-like models to fast keyword extraction with KeyBERT-like models: For each model below, an example will be shown on how it may change or improve upon the default topic keywords that are generated. The dataset used in these examples can be found here . KeyBERTInspired \u00b6 After having generated our topics with c-TF-IDF, we might want to do some fine-tuning based on the semantic relationship between keywords/keyphrases and the set of documents in each topic. Although we can use a centroid-based technique for this, it can be costly and does not take the structure of a cluster into account. Instead, we leverage c-TF-IDF to create a set of representative documents per topic and use those as our updated topic embedding. Then, we calculate the similarity between candidate keywords and the topic embedding using the same embedding model that embedded the documents. n Topic Extract representative documents Embed candidate keywords Compare embedded keywords with embedded documents Embed and average documents Extract candidate keywords Compare c-TF-IDF sampled documents with the topic c-TF-IDF. Extract top n words per topic based on their c-TF-IDF scores Thus, the algorithm follows some principles of KeyBERT but does some optimization in order to speed up inference. Usage is straightforward: from bertopic.representation import KeyBERTInspired from bertopic import BERTopic # Create your representation model representation_model = KeyBERTInspired () # Use the representation model in BERTopic on top of the default pipeline topic_model = BERTopic ( representation_model = representation_model ) meat | organic | food | beef | emissions | eat | of | eating | is the | explosion | atmosphere | eruption | kilometers | of | immune | system | your | cells | my | and | is | the | how | of moon | earth | lunar | tides | the | water | orbit | base | moons eu | european | democratic | vote | parliament | member | union plastic | plastics | tons | pollution | waste | microplastics | polymers Default Representation organic | meat | foods | crops | beef | produce | food | diet | cows | eating explosion | explodes | eruptions | eruption | blast | volcanoes | volcanic immune | immunology | antibodies | disease | cells | infection | cell | system moon | moons | lunar | tides | tidal | gravity | orbit | satellites | earth | orbits eu | democracy | european | democratic | parliament | governments | voting plastics | plastic | pollution | microplastics | environmental | polymers | bpa KeyBERT-Inspired PartOfSpeech \u00b6 Our candidate topics, as extracted with c-TF-IDF, do not take into account a keyword's part of speech as extracting noun-phrases from all documents can be computationally quite expensive. Instead, we can leverage c-TF-IDF to perform part of speech on a subset of keywords and documents that best represent a topic. n Topic Extract documents that contain at least one keyword Sort keywords by their c-TF-IDF value Use the POS matcher on those documents to generate new candidate keywords Extract candidate keywords More specifically, we find documents that contain the keywords from our candidate topics as calculated with c-TF-IDF. These documents serve as the representative set of documents from which the Spacy model can extract a set of candidate keywords for each topic. These candidate keywords are first put through Spacy's POS module to see whether they match with the DEFAULT_PATTERNS : DEFAULT_PATTERNS = [ [{ 'POS' : 'ADJ' }, { 'POS' : 'NOUN' }], [{ 'POS' : 'NOUN' }], [{ 'POS' : 'ADJ' }] ] These patterns follow Spacy's Rule-Based Matching . Then, the resulting keywords are sorted by their respective c-TF-IDF values. from bertopic.representation import PartOfSpeech from bertopic import BERTopic # Create your representation model representation_model = PartOfSpeech ( \"en_core_web_sm\" ) # Use the representation model in BERTopic on top of the default pipeline topic_model = BERTopic ( representation_model = representation_model ) meat | organic | food | beef | emissions | eat | of | eating | is the | explosion | atmosphere | eruption | kilometers | of | immune | system | your | cells | my | and | is | the | how | of moon | earth | lunar | tides | the | water | orbit | base | moons eu | european | democratic | vote | parliament | member | union plastic | plastics | tons | pollution | waste | microplastics | polymers Default Representation meat | organic | food | beef | emissions | most | health | pesticides | production explosion | atmosphere | eruption | kilometers | eruptions | fireball | super immune | system | cells | immunology | adaptive | body | memory | cell moon | earth | lunar | tides | water | orbit | base | moons | surface | gravity democratic | vote | parliament | member | union | states | national | countries plastic | plastics | tons | pollution | waste | microplastics | polymers | bag PartOfSpeech You can define custom POS patterns to be extracted: pos_patterns = [ [{ 'POS' : 'ADJ' }, { 'POS' : 'NOUN' }], [{ 'POS' : 'NOUN' }], [{ 'POS' : 'ADJ' }] ] representation_model = PartOfSpeech ( \"en_core_web_sm\" , pos_patterns = pos_patterns ) MaximalMarginalRelevance \u00b6 When we calculate the weights of keywords, we typically do not consider whether we already have similar keywords in our topic. Words like \"car\" and \"cars\" essentially represent the same information and often redundant. To decrease this redundancy and improve the diversity of keywords, we can use an algorithm called Maximal Marginal Relevance (MMR). MMR considers the similarity of keywords/keyphrases with the document, along with the similarity of already selected keywords and keyphrases. This results in a selection of keywords that maximize their within diversity with respect to the document. from bertopic.representation import MaximalMarginalRelevance from bertopic import BERTopic # Create your representation model representation_model = MaximalMarginalRelevance ( diversity = 0.3 ) # Use the representation model in BERTopic on top of the default pipeline topic_model = BERTopic ( representation_model = representation_model ) meat | organic | food | beef | emissions | eat | of | eating | is the | explosion | atmosphere | eruption | kilometers | of | immune | system | your | cells | my | and | is | the | how | of moon | earth | lunar | tides | the | water | orbit | base | moons eu | european | democratic | vote | parliament | member | union plastic | plastics | tons | pollution | waste | microplastics | polymers Default Representation meat | organic | beef | emissions | health | pesticides | foods | farming | conventional explosion | atmosphere | eruption | eruptions | crust | volcanoes | earthquakes immune | system | cells | immunology | adaptive | body | memory | antibodies moon | lunar | tides | moons | surface | gravity | tide | meters | oceans | dust eu | democratic | vote | parliament | citizen | laws | institutions | influence | nations plastics | tons | pollution | waste | microplastics | polymers | ocean | bpa | cotton MaximalMarginalRelevance Zero-Shot Classification \u00b6 For some use cases, you might already have a set of candidate labels that you would like to automatically assign to some of the topics. Although we can use guided or supervised BERTopic for that, we can also use zero-shot classification to assign labels to our topics. For that, we can make use of \ud83e\udd17 transformers on their models on the model hub . To perform this classification, we feed the model with the keywords as generated through c-TF-IDF and a set of candidate labels. If, for a certain topic, we find a similar enough label, then it is assigned. If not, then we keep the original c-TF-IDF keywords. We use it in BERTopic as follows: from bertopic.representation import ZeroShotClassification from bertopic import BERTopic # Create your representation model candidate_topics = [ \"space and nasa\" , \"bicycles\" , \"sports\" ] representation_model = ZeroShotClassification ( candidate_topics , model = \"facebook/bart-large-mnli\" ) # Use the representation model in BERTopic on top of the default pipeline topic_model = BERTopic ( representation_model = representation_model ) meat | organic | food | beef | emissions | eat | of | eating | is the | explosion | atmosphere | eruption | kilometers | of | immune | system | your | cells | my | and | is | the | how | of moon | earth | lunar | tides | the | water | orbit | base | moons eu | european | democratic | vote | parliament | member | union plastic | plastics | tons | pollution | waste | microplastics | polymers Default Representation Organic food the | explosion | atmosphere | eruption | kilometers | of Your immune system moon | earth | lunar | tides | the | water | orbit | base | moons eu | european | democratic | vote | parliament | member | union plastic | plastics | tons | pollution | waste | microplastics | polymers ZeroShotClassification Text Generation & Prompts \u00b6 Text generation models, like GPT-3 and the well-known ChatGPT, are becoming more and more capable of generating sensible output. For that purpose, a number of models are exposed in BERTopic that allow topic labels to be created based on candidate documents and keywords for each topic. These candidate documents and keywords are created from BERTopic's c-TF-IDF calculation. A huge benefit of this is that we can describe a topic with only a few documents and we therefore do not need to pass all documents to the text generation model. Not only speeds this the generation of topic labels up significantly, you also do not need a massive amount of credits when using an external API, such as Cohere or OpenAI. In most of the examples below, we use certain tags to customize our prompts. There are currently two tags, namely \"[KEYWORDS]\" and \"[DOCUMENTS]\" . These tags indicate where in the prompt they are to be replaced with a topics keywords and top 4 most representative documents respectively. For example, if we have the following prompt: prompt = \"\"\" I have topic that contains the following documents: \\n [DOCUMENTS] The topic is described by the following keywords: [KEYWORDS] Based on the above information, can you give a short label of the topic? \"\"\" then that will be rendered as follows: \"\"\" I have a topic that contains the following documents: - Our videos are also made possible by your support on patreon.co. - If you want to help us make more videos, you can do so on patreon.com or get one of our posters from our shop. - If you want to help us make more videos, you can do so there. - And if you want to support us in our endeavor to survive in the world of online video, and make more videos, you can do so on patreon.com. The topic is described by the following keywords: videos video you our support want this us channel patreon make on we if facebook to patreoncom can for and more watch Based on the above information, can you give a short label of the topic? \"\"\" Tip You can access the default prompts of these models with representation_model.default_prompt_ \ud83e\udd17 Transformers \u00b6 Nearly every week, there are new and improved models released on the \ud83e\udd17 Model Hub that, with some creativity, allow for further fine-tuning of our c-TF-IDF based topics. These models range from text generation to zero-classification. In BERTopic, wrappers around these methods are created as a way to support whatever might be released in the future. Using a GPT-like model from the huggingface hub is rather straightforward: from bertopic.representation import TextGeneration from bertopic import BERTopic # Create your representation model representation_model = TextGeneration ( 'gpt2' ) # Use the representation model in BERTopic on top of the default pipeline topic_model = BERTopic ( representation_model = representation_model ) GPT2, however, is not the most accurate model out there on HuggingFace models. You can get much better results with a flan-T5 like model: from transformers import pipeline from bertopic.representation import TextGeneration prompt = \"I have a topic described by the following keywords: [KEYWORDS]. Based on the previous keywords, what is this topic about?\"\" # Create your representation model generator = pipeline ( 'text2text-generation' , model = 'google/flan-t5-base' ) representation_model = TextGeneration ( generator ) meat | organic | food | beef | emissions | eat | of | eating | is the | explosion | atmosphere | eruption | kilometers | of | immune | system | your | cells | my | and | is | the | how | of moon | earth | lunar | tides | the | water | orbit | base | moons eu | european | democratic | vote | parliament | member | union plastic | plastics | tons | pollution | waste | microplastics | polymers Default Representation beef volcanoes immune system earth european union cotton \ud83e\udd17 Transformers As can be seen from the example above, if you would like to use a text2text-generation model, you will to pass a transformers.pipeline with the \"text2text-generation\" parameter. Moreover, you can use a custom prompt and decide where the keywords should be inserted by using the [KEYWORDS] or documents with the [DOCUMENTS] tag: Cohere \u00b6 Instead of using a language model from \ud83e\udd17 transformers, we can use external APIs instead that do the work for you. Here, we can use Cohere to extract our topic labels from the candidate documents and keywords. To use this, you will need to install cohere first: pip install cohere Then, get yourself an API key and use Cohere's API as follows: import cohere from bertopic.representation import Cohere from bertopic import BERTopic # Create your representation model co = cohere . Client ( my_api_key ) representation_model = Cohere ( co ) # Use the representation model in BERTopic on top of the default pipeline topic_model = BERTopic ( representation_model = representation_model ) meat | organic | food | beef | emissions | eat | of | eating | is the | explosion | atmosphere | eruption | kilometers | of | immune | system | your | cells | my | and | is | the | how | of moon | earth | lunar | tides | the | water | orbit | base | moons eu | european | democratic | vote | parliament | member | union plastic | plastics | tons | pollution | waste | microplastics | polymers Default Representation Organic food Exploding planets How your immune system works How tides work How democratic is the European Union? Plastic pollution Cohere You can also use a custom prompt: prompt = \"\"\" I have topic that contains the following documents: [DOCUMENTS] The topic is described by the following keywords: [KEYWORDS]. Based on the above information, can you give a short label of the topic? \"\"\" representation_model = Cohere ( co , prompt = prompt ) OpenAI \u00b6 Instead of using a language model from \ud83e\udd17 transformers, we can use external APIs instead that do the work for you. Here, we can use OpenAI to extract our topic labels from the candidate documents and keywords. To use this, you will need to install openai first: pip install openai Then, get yourself an API key and use OpenAI's API as follows: import openai from bertopic.representation import OpenAI from bertopic import BERTopic # Create your representation model openai . api_key = MY_API_KEY representation_model = OpenAI () # Use the representation model in BERTopic on top of the default pipeline topic_model = BERTopic ( representation_model = representation_model ) meat | organic | food | beef | emissions | eat | of | eating | is the | explosion | atmosphere | eruption | kilometers | of | immune | system | your | cells | my | and | is | the | how | of moon | earth | lunar | tides | the | water | orbit | base | moons eu | european | democratic | vote | parliament | member | union plastic | plastics | tons | pollution | waste | microplastics | polymers Default Representation Organic vs Conventional Food: Environmental and Health Considerations Volcanic Eruptions and Impacts The Immune System: Understanding and Boosting Immunity The Moon's Tides and Orbit Phenomena Democracy in the European Union Plastic Pollution and its environmental impact OpenAI You can also use a custom prompt: prompt = \"I have the following documents: [DOCUMENTS] \\n These documents are about the following topic: '\" representation_model = OpenAI ( prompt = prompt ) ChatGPT \u00b6 Within OpenAI's API, the ChatGPT models use a different API structure compared to the GPT-3 models. In order to use ChatGPT with BERTopic, we need to define the model and make sure to enable chat : representation_model = OpenAI ( model = \"gpt-3.5-turbo\" , delay_in_seconds = 10 , chat = True ) Prompting with ChatGPT is very satisfying and is customizable as follows: prompt = \"\"\" I have a topic that contains the following documents: [DOCUMENTS] The topic is described by the following keywords: [KEYWORDS] Based on the information above, extract a short topic label in the following format: topic: <topic label> \"\"\" Note Whenever you create a custom prompt, it is important to add Based on the information above, extract a short topic label in the following format: topic: <topic label> at the end of your prompt as BERTopic extracts everything that comes after topic: . Having said that, if topic: is not in the output, then it will simply extract the entire response, so feel free to experiment with the prompts. LangChain \u00b6 Langchain is a package that helps users with chaining large language models. In BERTopic, we can leverage this package in order to more efficiently combine external knowledge. Here, this external knowledge are the most representative documents in each topic. To use langchain, you will need to install the langchain package first. Additionally, you will need an underlying LLM to support langchain, like openai: pip install langchain, openai Then, you can create your chain as follows: from langchain.chains.question_answering import load_qa_chain from langchain.llms import OpenAI chain = load_qa_chain ( OpenAI ( temperature = 0 , openai_api_key = my_openai_api_key ), chain_type = \"stuff\" ) Finally, you can pass the chain to BERTopic as follows: from bertopic.representation import LangChain # Create your representation model representation_model = LangChain ( chain ) # Use the representation model in BERTopic on top of the default pipeline topic_model = BERTopic ( representation_model = representation_model ) You can also use a custom prompt: prompt = \"What are these documents about? Please give a single label.\" representation_model = LangChain ( chain , prompt = prompt ) Note The prompt does not make use of [KEYWORDS] and [DOCUMENTS] tags as the documents are already used within langchain's load_qa_chain . Chain Models \u00b6 All of the above models can make use of the candidate topics, as generated by c-TF-IDF, to further fine-tune the topic representations. For example, MaximalMarginalRelevance takes the keywords in the candidate topics and re-ranks them. Similarly, the keywords in the candidate topic can be used as the input for GPT-prompts in OpenAI . Although the default candidate topics are generated by c-TF-IDF, what if we were to chain these models? For example, we can use MaximalMarginalRelevance to improve upon the keywords in each topic before passing them to OpenAI . This is supported in BERTopic by simply passing a list of representation models when instantation the topic model: from bertopic.representation import MaximalMarginalRelevance , OpenAI from bertopic import BERTopic import openai # Create your representation models openai . api_key = MY_API_KEY openai_generator = OpenAI () mmr = MaximalMarginalRelevance ( diversity = 0.3 ) representation_models = [ mmr , openai_generator ] # Use the chained models topic_model = BERTopic ( representation_model = representation_models ) Custom Model \u00b6 Although several representation models have been implemented in BERTopic, new technologies get released often and we should not have to wait until they get implemented in BERTopic. Therefore, you can create your own representation model and use that to fine-tune the topics. The following is the basic structure for creating your custom model. Note that it returns the same topics as the those calculated with c-TF-IDF: from bertopic.representation._base import BaseRepresentation class CustomRepresentationModel ( BaseRepresentation ): def __init__ ( self ): pass def extract_topics ( self , topic_model , documents , c_tf_idf , topics ) -> Mapping [ str , List [ Tuple [ str , float ]]]: \"\"\" Extract topics Arguments: topic_model: The BERTopic model documents: A dataframe of documents with their related topics c_tf_idf: The c-TF-IDF matrix topics: The candidate topics as calculated with c-TF-IDF Returns: updated_topics: Updated topic representations \"\"\" updated_topics = topics . copy () return updated_topics Then, we can use that model as follows: from bertopic import BERTopic # Create our custom representation model representation_model = CustomRepresentationModel () # Pass our custom representation model to BERTopic topic_model = BERTopic ( representation_model = representation_model ) There are a few things to take into account when creating your custom model: It needs to have the exact same parameter input: topic_model , documents , c_tf_idf , topics . You can change the __init__ however you want, it does not influence the underlying structure Make sure that updated_topics has the exact same structure as topics : For example: updated_topics = {\"1\", [(\"space\", 0.9), (\"nasa\", 0.7)], \"2\": [(\"science\", 0.66), (\"article\", 0.6)] } Thus, it is a dictionary where each topic is represented by a list of keyword,value tuples. Lastly, make sure that updated_topics contains at least 5 keywords, even if they are empty: [(\"\", 0), (\"\", 0), ...]","title":"(Optional) Representation"},{"location":"getting_started/representation/representation.html#keybertinspired","text":"After having generated our topics with c-TF-IDF, we might want to do some fine-tuning based on the semantic relationship between keywords/keyphrases and the set of documents in each topic. Although we can use a centroid-based technique for this, it can be costly and does not take the structure of a cluster into account. Instead, we leverage c-TF-IDF to create a set of representative documents per topic and use those as our updated topic embedding. Then, we calculate the similarity between candidate keywords and the topic embedding using the same embedding model that embedded the documents. n Topic Extract representative documents Embed candidate keywords Compare embedded keywords with embedded documents Embed and average documents Extract candidate keywords Compare c-TF-IDF sampled documents with the topic c-TF-IDF. Extract top n words per topic based on their c-TF-IDF scores Thus, the algorithm follows some principles of KeyBERT but does some optimization in order to speed up inference. Usage is straightforward: from bertopic.representation import KeyBERTInspired from bertopic import BERTopic # Create your representation model representation_model = KeyBERTInspired () # Use the representation model in BERTopic on top of the default pipeline topic_model = BERTopic ( representation_model = representation_model ) meat | organic | food | beef | emissions | eat | of | eating | is the | explosion | atmosphere | eruption | kilometers | of | immune | system | your | cells | my | and | is | the | how | of moon | earth | lunar | tides | the | water | orbit | base | moons eu | european | democratic | vote | parliament | member | union plastic | plastics | tons | pollution | waste | microplastics | polymers Default Representation organic | meat | foods | crops | beef | produce | food | diet | cows | eating explosion | explodes | eruptions | eruption | blast | volcanoes | volcanic immune | immunology | antibodies | disease | cells | infection | cell | system moon | moons | lunar | tides | tidal | gravity | orbit | satellites | earth | orbits eu | democracy | european | democratic | parliament | governments | voting plastics | plastic | pollution | microplastics | environmental | polymers | bpa KeyBERT-Inspired","title":"KeyBERTInspired"},{"location":"getting_started/representation/representation.html#partofspeech","text":"Our candidate topics, as extracted with c-TF-IDF, do not take into account a keyword's part of speech as extracting noun-phrases from all documents can be computationally quite expensive. Instead, we can leverage c-TF-IDF to perform part of speech on a subset of keywords and documents that best represent a topic. n Topic Extract documents that contain at least one keyword Sort keywords by their c-TF-IDF value Use the POS matcher on those documents to generate new candidate keywords Extract candidate keywords More specifically, we find documents that contain the keywords from our candidate topics as calculated with c-TF-IDF. These documents serve as the representative set of documents from which the Spacy model can extract a set of candidate keywords for each topic. These candidate keywords are first put through Spacy's POS module to see whether they match with the DEFAULT_PATTERNS : DEFAULT_PATTERNS = [ [{ 'POS' : 'ADJ' }, { 'POS' : 'NOUN' }], [{ 'POS' : 'NOUN' }], [{ 'POS' : 'ADJ' }] ] These patterns follow Spacy's Rule-Based Matching . Then, the resulting keywords are sorted by their respective c-TF-IDF values. from bertopic.representation import PartOfSpeech from bertopic import BERTopic # Create your representation model representation_model = PartOfSpeech ( \"en_core_web_sm\" ) # Use the representation model in BERTopic on top of the default pipeline topic_model = BERTopic ( representation_model = representation_model ) meat | organic | food | beef | emissions | eat | of | eating | is the | explosion | atmosphere | eruption | kilometers | of | immune | system | your | cells | my | and | is | the | how | of moon | earth | lunar | tides | the | water | orbit | base | moons eu | european | democratic | vote | parliament | member | union plastic | plastics | tons | pollution | waste | microplastics | polymers Default Representation meat | organic | food | beef | emissions | most | health | pesticides | production explosion | atmosphere | eruption | kilometers | eruptions | fireball | super immune | system | cells | immunology | adaptive | body | memory | cell moon | earth | lunar | tides | water | orbit | base | moons | surface | gravity democratic | vote | parliament | member | union | states | national | countries plastic | plastics | tons | pollution | waste | microplastics | polymers | bag PartOfSpeech You can define custom POS patterns to be extracted: pos_patterns = [ [{ 'POS' : 'ADJ' }, { 'POS' : 'NOUN' }], [{ 'POS' : 'NOUN' }], [{ 'POS' : 'ADJ' }] ] representation_model = PartOfSpeech ( \"en_core_web_sm\" , pos_patterns = pos_patterns )","title":"PartOfSpeech"},{"location":"getting_started/representation/representation.html#maximalmarginalrelevance","text":"When we calculate the weights of keywords, we typically do not consider whether we already have similar keywords in our topic. Words like \"car\" and \"cars\" essentially represent the same information and often redundant. To decrease this redundancy and improve the diversity of keywords, we can use an algorithm called Maximal Marginal Relevance (MMR). MMR considers the similarity of keywords/keyphrases with the document, along with the similarity of already selected keywords and keyphrases. This results in a selection of keywords that maximize their within diversity with respect to the document. from bertopic.representation import MaximalMarginalRelevance from bertopic import BERTopic # Create your representation model representation_model = MaximalMarginalRelevance ( diversity = 0.3 ) # Use the representation model in BERTopic on top of the default pipeline topic_model = BERTopic ( representation_model = representation_model ) meat | organic | food | beef | emissions | eat | of | eating | is the | explosion | atmosphere | eruption | kilometers | of | immune | system | your | cells | my | and | is | the | how | of moon | earth | lunar | tides | the | water | orbit | base | moons eu | european | democratic | vote | parliament | member | union plastic | plastics | tons | pollution | waste | microplastics | polymers Default Representation meat | organic | beef | emissions | health | pesticides | foods | farming | conventional explosion | atmosphere | eruption | eruptions | crust | volcanoes | earthquakes immune | system | cells | immunology | adaptive | body | memory | antibodies moon | lunar | tides | moons | surface | gravity | tide | meters | oceans | dust eu | democratic | vote | parliament | citizen | laws | institutions | influence | nations plastics | tons | pollution | waste | microplastics | polymers | ocean | bpa | cotton MaximalMarginalRelevance","title":"MaximalMarginalRelevance"},{"location":"getting_started/representation/representation.html#zero-shot-classification","text":"For some use cases, you might already have a set of candidate labels that you would like to automatically assign to some of the topics. Although we can use guided or supervised BERTopic for that, we can also use zero-shot classification to assign labels to our topics. For that, we can make use of \ud83e\udd17 transformers on their models on the model hub . To perform this classification, we feed the model with the keywords as generated through c-TF-IDF and a set of candidate labels. If, for a certain topic, we find a similar enough label, then it is assigned. If not, then we keep the original c-TF-IDF keywords. We use it in BERTopic as follows: from bertopic.representation import ZeroShotClassification from bertopic import BERTopic # Create your representation model candidate_topics = [ \"space and nasa\" , \"bicycles\" , \"sports\" ] representation_model = ZeroShotClassification ( candidate_topics , model = \"facebook/bart-large-mnli\" ) # Use the representation model in BERTopic on top of the default pipeline topic_model = BERTopic ( representation_model = representation_model ) meat | organic | food | beef | emissions | eat | of | eating | is the | explosion | atmosphere | eruption | kilometers | of | immune | system | your | cells | my | and | is | the | how | of moon | earth | lunar | tides | the | water | orbit | base | moons eu | european | democratic | vote | parliament | member | union plastic | plastics | tons | pollution | waste | microplastics | polymers Default Representation Organic food the | explosion | atmosphere | eruption | kilometers | of Your immune system moon | earth | lunar | tides | the | water | orbit | base | moons eu | european | democratic | vote | parliament | member | union plastic | plastics | tons | pollution | waste | microplastics | polymers ZeroShotClassification","title":"Zero-Shot Classification"},{"location":"getting_started/representation/representation.html#text-generation-prompts","text":"Text generation models, like GPT-3 and the well-known ChatGPT, are becoming more and more capable of generating sensible output. For that purpose, a number of models are exposed in BERTopic that allow topic labels to be created based on candidate documents and keywords for each topic. These candidate documents and keywords are created from BERTopic's c-TF-IDF calculation. A huge benefit of this is that we can describe a topic with only a few documents and we therefore do not need to pass all documents to the text generation model. Not only speeds this the generation of topic labels up significantly, you also do not need a massive amount of credits when using an external API, such as Cohere or OpenAI. In most of the examples below, we use certain tags to customize our prompts. There are currently two tags, namely \"[KEYWORDS]\" and \"[DOCUMENTS]\" . These tags indicate where in the prompt they are to be replaced with a topics keywords and top 4 most representative documents respectively. For example, if we have the following prompt: prompt = \"\"\" I have topic that contains the following documents: \\n [DOCUMENTS] The topic is described by the following keywords: [KEYWORDS] Based on the above information, can you give a short label of the topic? \"\"\" then that will be rendered as follows: \"\"\" I have a topic that contains the following documents: - Our videos are also made possible by your support on patreon.co. - If you want to help us make more videos, you can do so on patreon.com or get one of our posters from our shop. - If you want to help us make more videos, you can do so there. - And if you want to support us in our endeavor to survive in the world of online video, and make more videos, you can do so on patreon.com. The topic is described by the following keywords: videos video you our support want this us channel patreon make on we if facebook to patreoncom can for and more watch Based on the above information, can you give a short label of the topic? \"\"\" Tip You can access the default prompts of these models with representation_model.default_prompt_","title":"Text Generation &amp; Prompts"},{"location":"getting_started/representation/representation.html#transformers","text":"Nearly every week, there are new and improved models released on the \ud83e\udd17 Model Hub that, with some creativity, allow for further fine-tuning of our c-TF-IDF based topics. These models range from text generation to zero-classification. In BERTopic, wrappers around these methods are created as a way to support whatever might be released in the future. Using a GPT-like model from the huggingface hub is rather straightforward: from bertopic.representation import TextGeneration from bertopic import BERTopic # Create your representation model representation_model = TextGeneration ( 'gpt2' ) # Use the representation model in BERTopic on top of the default pipeline topic_model = BERTopic ( representation_model = representation_model ) GPT2, however, is not the most accurate model out there on HuggingFace models. You can get much better results with a flan-T5 like model: from transformers import pipeline from bertopic.representation import TextGeneration prompt = \"I have a topic described by the following keywords: [KEYWORDS]. Based on the previous keywords, what is this topic about?\"\" # Create your representation model generator = pipeline ( 'text2text-generation' , model = 'google/flan-t5-base' ) representation_model = TextGeneration ( generator ) meat | organic | food | beef | emissions | eat | of | eating | is the | explosion | atmosphere | eruption | kilometers | of | immune | system | your | cells | my | and | is | the | how | of moon | earth | lunar | tides | the | water | orbit | base | moons eu | european | democratic | vote | parliament | member | union plastic | plastics | tons | pollution | waste | microplastics | polymers Default Representation beef volcanoes immune system earth european union cotton \ud83e\udd17 Transformers As can be seen from the example above, if you would like to use a text2text-generation model, you will to pass a transformers.pipeline with the \"text2text-generation\" parameter. Moreover, you can use a custom prompt and decide where the keywords should be inserted by using the [KEYWORDS] or documents with the [DOCUMENTS] tag:","title":"\ud83e\udd17 Transformers"},{"location":"getting_started/representation/representation.html#cohere","text":"Instead of using a language model from \ud83e\udd17 transformers, we can use external APIs instead that do the work for you. Here, we can use Cohere to extract our topic labels from the candidate documents and keywords. To use this, you will need to install cohere first: pip install cohere Then, get yourself an API key and use Cohere's API as follows: import cohere from bertopic.representation import Cohere from bertopic import BERTopic # Create your representation model co = cohere . Client ( my_api_key ) representation_model = Cohere ( co ) # Use the representation model in BERTopic on top of the default pipeline topic_model = BERTopic ( representation_model = representation_model ) meat | organic | food | beef | emissions | eat | of | eating | is the | explosion | atmosphere | eruption | kilometers | of | immune | system | your | cells | my | and | is | the | how | of moon | earth | lunar | tides | the | water | orbit | base | moons eu | european | democratic | vote | parliament | member | union plastic | plastics | tons | pollution | waste | microplastics | polymers Default Representation Organic food Exploding planets How your immune system works How tides work How democratic is the European Union? Plastic pollution Cohere You can also use a custom prompt: prompt = \"\"\" I have topic that contains the following documents: [DOCUMENTS] The topic is described by the following keywords: [KEYWORDS]. Based on the above information, can you give a short label of the topic? \"\"\" representation_model = Cohere ( co , prompt = prompt )","title":"Cohere"},{"location":"getting_started/representation/representation.html#openai","text":"Instead of using a language model from \ud83e\udd17 transformers, we can use external APIs instead that do the work for you. Here, we can use OpenAI to extract our topic labels from the candidate documents and keywords. To use this, you will need to install openai first: pip install openai Then, get yourself an API key and use OpenAI's API as follows: import openai from bertopic.representation import OpenAI from bertopic import BERTopic # Create your representation model openai . api_key = MY_API_KEY representation_model = OpenAI () # Use the representation model in BERTopic on top of the default pipeline topic_model = BERTopic ( representation_model = representation_model ) meat | organic | food | beef | emissions | eat | of | eating | is the | explosion | atmosphere | eruption | kilometers | of | immune | system | your | cells | my | and | is | the | how | of moon | earth | lunar | tides | the | water | orbit | base | moons eu | european | democratic | vote | parliament | member | union plastic | plastics | tons | pollution | waste | microplastics | polymers Default Representation Organic vs Conventional Food: Environmental and Health Considerations Volcanic Eruptions and Impacts The Immune System: Understanding and Boosting Immunity The Moon's Tides and Orbit Phenomena Democracy in the European Union Plastic Pollution and its environmental impact OpenAI You can also use a custom prompt: prompt = \"I have the following documents: [DOCUMENTS] \\n These documents are about the following topic: '\" representation_model = OpenAI ( prompt = prompt )","title":"OpenAI"},{"location":"getting_started/representation/representation.html#chatgpt","text":"Within OpenAI's API, the ChatGPT models use a different API structure compared to the GPT-3 models. In order to use ChatGPT with BERTopic, we need to define the model and make sure to enable chat : representation_model = OpenAI ( model = \"gpt-3.5-turbo\" , delay_in_seconds = 10 , chat = True ) Prompting with ChatGPT is very satisfying and is customizable as follows: prompt = \"\"\" I have a topic that contains the following documents: [DOCUMENTS] The topic is described by the following keywords: [KEYWORDS] Based on the information above, extract a short topic label in the following format: topic: <topic label> \"\"\" Note Whenever you create a custom prompt, it is important to add Based on the information above, extract a short topic label in the following format: topic: <topic label> at the end of your prompt as BERTopic extracts everything that comes after topic: . Having said that, if topic: is not in the output, then it will simply extract the entire response, so feel free to experiment with the prompts.","title":"ChatGPT"},{"location":"getting_started/representation/representation.html#langchain","text":"Langchain is a package that helps users with chaining large language models. In BERTopic, we can leverage this package in order to more efficiently combine external knowledge. Here, this external knowledge are the most representative documents in each topic. To use langchain, you will need to install the langchain package first. Additionally, you will need an underlying LLM to support langchain, like openai: pip install langchain, openai Then, you can create your chain as follows: from langchain.chains.question_answering import load_qa_chain from langchain.llms import OpenAI chain = load_qa_chain ( OpenAI ( temperature = 0 , openai_api_key = my_openai_api_key ), chain_type = \"stuff\" ) Finally, you can pass the chain to BERTopic as follows: from bertopic.representation import LangChain # Create your representation model representation_model = LangChain ( chain ) # Use the representation model in BERTopic on top of the default pipeline topic_model = BERTopic ( representation_model = representation_model ) You can also use a custom prompt: prompt = \"What are these documents about? Please give a single label.\" representation_model = LangChain ( chain , prompt = prompt ) Note The prompt does not make use of [KEYWORDS] and [DOCUMENTS] tags as the documents are already used within langchain's load_qa_chain .","title":"LangChain"},{"location":"getting_started/representation/representation.html#chain-models","text":"All of the above models can make use of the candidate topics, as generated by c-TF-IDF, to further fine-tune the topic representations. For example, MaximalMarginalRelevance takes the keywords in the candidate topics and re-ranks them. Similarly, the keywords in the candidate topic can be used as the input for GPT-prompts in OpenAI . Although the default candidate topics are generated by c-TF-IDF, what if we were to chain these models? For example, we can use MaximalMarginalRelevance to improve upon the keywords in each topic before passing them to OpenAI . This is supported in BERTopic by simply passing a list of representation models when instantation the topic model: from bertopic.representation import MaximalMarginalRelevance , OpenAI from bertopic import BERTopic import openai # Create your representation models openai . api_key = MY_API_KEY openai_generator = OpenAI () mmr = MaximalMarginalRelevance ( diversity = 0.3 ) representation_models = [ mmr , openai_generator ] # Use the chained models topic_model = BERTopic ( representation_model = representation_models )","title":"Chain Models"},{"location":"getting_started/representation/representation.html#custom-model","text":"Although several representation models have been implemented in BERTopic, new technologies get released often and we should not have to wait until they get implemented in BERTopic. Therefore, you can create your own representation model and use that to fine-tune the topics. The following is the basic structure for creating your custom model. Note that it returns the same topics as the those calculated with c-TF-IDF: from bertopic.representation._base import BaseRepresentation class CustomRepresentationModel ( BaseRepresentation ): def __init__ ( self ): pass def extract_topics ( self , topic_model , documents , c_tf_idf , topics ) -> Mapping [ str , List [ Tuple [ str , float ]]]: \"\"\" Extract topics Arguments: topic_model: The BERTopic model documents: A dataframe of documents with their related topics c_tf_idf: The c-TF-IDF matrix topics: The candidate topics as calculated with c-TF-IDF Returns: updated_topics: Updated topic representations \"\"\" updated_topics = topics . copy () return updated_topics Then, we can use that model as follows: from bertopic import BERTopic # Create our custom representation model representation_model = CustomRepresentationModel () # Pass our custom representation model to BERTopic topic_model = BERTopic ( representation_model = representation_model ) There are a few things to take into account when creating your custom model: It needs to have the exact same parameter input: topic_model , documents , c_tf_idf , topics . You can change the __init__ however you want, it does not influence the underlying structure Make sure that updated_topics has the exact same structure as topics : For example: updated_topics = {\"1\", [(\"space\", 0.9), (\"nasa\", 0.7)], \"2\": [(\"science\", 0.66), (\"article\", 0.6)] } Thus, it is a dictionary where each topic is represented by a list of keyword,value tuples. Lastly, make sure that updated_topics contains at least 5 keywords, even if they are empty: [(\"\", 0), (\"\", 0), ...]","title":"Custom Model"},{"location":"getting_started/search/search.html","text":"After having created a BERTopic model, you might end up with over a hundred topics. Searching through those can be quite cumbersome especially if you are searching for a specific topic. Fortunately, BERTopic allows you to search for topics using search terms. First, let's create and train a BERTopic model: from bertopic import BERTopic from sklearn.datasets import fetch_20newsgroups # Create topics docs = fetch_20newsgroups ( subset = 'all' , remove = ( 'headers' , 'footers' , 'quotes' ))[ 'data' ] topic_model = BERTopic () topics , probs = topic_model . fit_transform ( docs ) After having trained our model, we can use find_topics to search for topics that are similar to an input search_term. Here, we are going to be searching for topics that closely relate the search term \"motor\". Then, we extract the most similar topic and check the results: >>> similar_topics , similarity = topic_model . find_topics ( \"motor\" , top_n = 5 ) >>> topic_model . get_topic ( similar_topics [ 0 ]) [( 'bike' , 0.02275997701645559 ), ( 'motorcycle' , 0.011391202866080292 ), ( 'bikes' , 0.00981187573649205 ), ( 'dod' , 0.009614623748226669 ), ( 'honda' , 0.008247663662558535 ), ( 'ride' , 0.0064683227888861945 ), ( 'harley' , 0.006355502638631013 ), ( 'riding' , 0.005766601561614182 ), ( 'motorcycles' , 0.005596372493714447 ), ( 'advice' , 0.005534544418830091 )] It definitely seems that a topic was found that closely matches \"motor\". The topic seems to be motorcycle related and therefore matches our \"motor\" input. You can use the similarity variable to see how similar the extracted topics are to the search term. Note You can only use this method if an embedding model was supplied to BERTopic using embedding_model .","title":"Search Topics"},{"location":"getting_started/semisupervised/semisupervised.html","text":"In BERTopic, you have several options to nudge the creation of topics toward certain pre-specified topics. Here, we will be looking at semi-supervised topic modeling with BERTopic. Semi-supervised modeling allows us to steer the dimensionality reduction of the embeddings into a space that closely follows any labels you might already have. SBERT UMAP HDBSCAN c-TF-IDF Embeddings Dimensionality reduction Labels Clustering Topic representation In other words, we use a semi-supervised UMAP instance to reduce the dimensionality of embeddings before clustering the documents with HDBSCAN. First, let us prepare the data needed for our topic model: from bertopic import BERTopic from sklearn.datasets import fetch_20newsgroups data = fetch_20newsgroups ( subset = 'all' , remove = ( 'headers' , 'footers' , 'quotes' )) docs = data [ \"data\" ] categories = data [ \"target\" ] category_names = data [ \"target_names\" ] We are using the popular 20 Newsgroups dataset which contains roughly 18000 newsgroups posts that each is assigned to one of 20 categories. Using this dataset we can try to extract its corresponding topic model whilst taking its underlying categories into account. These categories are here the variable targets . Each document can be put into one of the following categories: >>> category_names [ 'alt.atheism' , 'comp.graphics' , 'comp.os.ms-windows.misc' , 'comp.sys.ibm.pc.hardware' , 'comp.sys.mac.hardware' , 'comp.windows.x' , 'misc.forsale' , 'rec.autos' , 'rec.motorcycles' , 'rec.sport.baseball' , 'rec.sport.hockey' , 'sci.crypt' , 'sci.electronics' , 'sci.med' , 'sci.space' , 'soc.religion.christian' , 'talk.politics.guns' , 'talk.politics.mideast' , 'talk.politics.misc' , 'talk.religion.misc' ] To perform this semi-supervised approach, we can take in some pre-defined topics and simply pass those to the y parameter when fitting BERTopic. These labels can be pre-defined topics or simply documents that you feel belong together regardless of their content. BERTopic will nudge the creation of topics toward these categories using the pre-defined labels. To perform supervised topic modeling, we simply use all categories: topic_model = BERTopic ( verbose = True ) . fit ( docs , y = categories ) The topic model will be much more attuned to the categories that were defined previously. However, this does not mean that only topics for these categories will be found. BERTopic is likely to find more specific topics in those you have already defined. This allows you to discover previously unknown topics! Partial labels \u00b6 At times, you might only have labels for a subset of documents. Fortunately, we can still use those labels to at least nudge the documents for which those labels exist. The documents for which we do not have labels are assigned a -1. For this example, imagine we only the labels of categories that are related to computers and we want to create a topic model using semi-supervised modeling: labels_to_add = [ 'comp.graphics' , 'comp.os.ms-windows.misc' , 'comp.sys.ibm.pc.hardware' , 'comp.sys.mac.hardware' , 'comp.windows.x' ,] indices = [ category_names . index ( label ) for label in labels_to_add ] y = [ label if label in indices else - 1 for label in categories ] The y variable contains many -1 values since we do not know all the categories. Next, we use those newly constructed labels to again BERTopic semi-supervised: topic_model = BERTopic ( verbose = True ) . fit ( docs , y = y ) And that is it! By defining certain classes for our documents, we can steer the topic modeling towards modeling the pre-defined categories.","title":"Semi-supervised Topic Modeling"},{"location":"getting_started/semisupervised/semisupervised.html#partial-labels","text":"At times, you might only have labels for a subset of documents. Fortunately, we can still use those labels to at least nudge the documents for which those labels exist. The documents for which we do not have labels are assigned a -1. For this example, imagine we only the labels of categories that are related to computers and we want to create a topic model using semi-supervised modeling: labels_to_add = [ 'comp.graphics' , 'comp.os.ms-windows.misc' , 'comp.sys.ibm.pc.hardware' , 'comp.sys.mac.hardware' , 'comp.windows.x' ,] indices = [ category_names . index ( label ) for label in labels_to_add ] y = [ label if label in indices else - 1 for label in categories ] The y variable contains many -1 values since we do not know all the categories. Next, we use those newly constructed labels to again BERTopic semi-supervised: topic_model = BERTopic ( verbose = True ) . fit ( docs , y = y ) And that is it! By defining certain classes for our documents, we can steer the topic modeling towards modeling the pre-defined categories.","title":"Partial labels"},{"location":"getting_started/supervised/supervised.html","text":"Although topic modeling is typically done by discovering topics in an unsupervised manner, there might be times when you already have a bunch of clusters or classes from which you want to model the topics. For example, the often used 20 NewsGroups dataset is already split up into 20 classes. Similarly, you might already have created some labels yourself through packages like human-learn , bulk , thisnotthat or something entirely different. Instead of using BERTopic to discover previously unknown topics, we are now going to manually pass them to BERTopic and try to learn the relationship between those topics and the input documents. In other words, we are going to be performing classification instead! We can view this as a supervised topic modeling approach. Instead of using a clustering algorithm, we are going to be using a classification algorithm instead. Generally, we have the following pipeline: SBERT UMAP HDBSCAN c-TF-IDF Embeddings Dimensionality reduction Clustering Topic representation Instead, we are now going to skip over the dimensionality reduction step and replace the clustering step with a classification model: SBERT Logistic Regression c-TF-IDF Embeddings Classifier Topic representation In other words, we can pass our labels to BERTopic and it will not only learn how to predict labels for new instances, but it also transforms those labels into topics by running the c-TF-IDF representations on the set of documents within each label. This process allows us to model the topics themselves and similarly gives us the option to use everything BERTopic has to offer. To do so, we need to skip over the dimensionality reduction step and replace the clustering step with a classification algorithm. We can use the documents and labels from the 20 NewsGroups dataset to create topics from those 20 labels: from sklearn.datasets import fetch_20newsgroups # Get labeled data data = fetch_20newsgroups ( subset = 'all' , remove = ( 'headers' , 'footers' , 'quotes' )) docs = data [ 'data' ] y = data [ 'target' ] Then, we make sure to create empty instances of the dimensionality reduction and clustering steps. We pass those to BERTopic to simply skip over them and go to the topic representation process: from bertopic import BERTopic from bertopic.vectorizers import ClassTfidfTransformer from bertopic.dimensionality import BaseDimensionalityReduction from sklearn.linear_model import LogisticRegression # Get labeled data data = fetch_20newsgroups ( subset = 'all' , remove = ( 'headers' , 'footers' , 'quotes' )) docs = data [ 'data' ] y = data [ 'target' ] # Skip over dimensionality reduction, replace cluster model with classifier, # and reduce frequent words while we are at it. empty_dimensionality_model = BaseDimensionalityReduction () clf = LogisticRegression () ctfidf_model = ClassTfidfTransformer ( reduce_frequent_words = True ) # Create a fully supervised BERTopic instance topic_model = BERTopic ( umap_model = empty_dimensionality_model , hdbscan_model = clf , ctfidf_model = ctfidf_model ) topics , probs = topic_model . fit_transform ( docs , y = y ) Let's take a look at a few topics that we get out of training this way by running topic_model.get_topic_info() : Topic Count Name 0 0 999 0_game_hockey_team_25 1_god_church_jesus_christ 997 1 1 2 2 996 2_bike_dod_ride_bikes 3_baseball_game_he_year 994 3 3 4 4 991 4_key_encryption_db_clipper 5_car_cars_engine_ford 990 5 5 6 6 990 6_medical_patients_cancer_disease 7_window_server_widget_motif 988 7 7 8 8 988 8_space_launch_nasa_orbit We can see several interesting topics appearing here. They seem to relate to the 20 classes we had as input. Now, let's map those topics to our original classes to view their relationship: # Map input `y` to topics mappings = topic_model . topic_mapper_ . get_mappings () mappings = { value : data [ \"target_names\" ][ key ] for key , value in mappings . items ()} # Assign original classes to our topics df = topic_model . get_topic_info () df [ \"Class\" ] = df . Topic . map ( mappings ) df Topic Count Name Class 0 0 999 0_game_hockey_team_25 rec.sport.hockey 1_god_church_jesus_christ 997 1 1 2 2 996 2_bike_dod_ride_bikes 3_baseball_game_he_year 994 3 3 4 4 991 4_key_encryption_db_clipper 5_car_cars_engine_ford 990 5 5 6 6 990 6_medical_patients_cancer_disease 7_window_server_widget_motif 988 7 7 8 8 988 8_space_launch_nasa_orbit sci.space comp.windows.x sci.med rec.autos sci.crypt rec.sport.baseball rec.motorcycles soc.religion.christian We can see that the c-TF-IDF representations extract the words that give a good representation of our input classes. This is all done directly from the labeling. A welcome side-effect is that we now have a classification algorithm that allows us to predict the topics of unseen data: >>> topic , _ = topic_model . transform ( \"this is a document about cars\" ) >>> topic_model . get_topic ( topic ) [( 'car' , 0.4407600315538472 ), ( 'cars' , 0.32348015696446325 ), ( 'engine' , 0.28032518444946686 ), ( 'ford' , 0.2500224508115155 ), ( 'oil' , 0.2325984913598611 ), ( 'dealer' , 0.2310723968585826 ), ( 'my' , 0.22045777551991935 ), ( 'it' , 0.21327993649430219 ), ( 'tires' , 0.20420842634292657 ), ( 'brake' , 0.20246902481367085 )] Moreover, we can still perform BERTopic-specific features like dynamic topic modeling, topics per class, hierarchical topic modeling, modeling topic distributions, etc. Note The resulting topics may be a different mapping from the y labels. To map y to topics , we can run the following: mappings = topic_model . topic_mapper_ . get_mappings () y_mapped = [ mappings [ val ] for val in y ]","title":"Supervised Topic Modeling"},{"location":"getting_started/tips_and_tricks/tips_and_tricks.html","text":"Tips & Tricks \u00b6 Document length \u00b6 As a default, we are using sentence-transformers to embed our documents. However, as the name implies, the embedding model works best for either sentences or paragraphs. This means that whenever you have a set of documents, where each documents contains several paragraphs, the document is truncated and the topic model is only trained on a small part of the data. One way to solve this issue is by splitting up longer documents into either sentences or paragraphs before embedding them. Another solution is to approximate the topic distributions of topics after having trained your topic model. Removing stop words \u00b6 At times, stop words might end up in our topic representations. This is something we typically want to avoid as they contribute little to the interpretation of the topics. However, removing stop words as a preprocessing step is not advised as the transformer-based embedding models that we use need the full context in order to create accurate embeddings. Instead, we can use the CountVectorizer to preprocess our documents after having generated embeddings and clustered our documents. Personally, I have found almost no disadvantages to using the CountVectorizer to remove stopwords and it is something I would strongly advise to try out: from bertopic import BERTopic from sklearn.feature_extraction.text import CountVectorizer vectorizer_model = CountVectorizer ( stop_words = \"english\" ) topic_model = BERTopic ( vectorizer_model = vectorizer_model ) We can also use the ClassTfidfTransformer to reduce the impact of frequent words. The end result is very similar to explictly removing stopwords but this process does this automatically: from bertopic import BERTopic from bertopic.vectorizers import ClassTfidfTransformer ctfidf_model = ClassTfidfTransformer ( reduce_frequent_words = True ) topic_model = BERTopic ( ctfidf_model = ctfidf_model ) Lastly, we can use a KeyBERT-Inspired model to reduce the appearance of stop words. This also often improves the topic representation: from bertopic.representation import KeyBERTInspired from bertopic import BERTopic # Create your representation model representation_model = KeyBERTInspired () # Use the representation model in BERTopic on top of the default pipeline topic_model = BERTopic ( representation_model = representation_model ) Diversify topic representation \u00b6 After having calculated our top n words per topic there might be many words that essentially mean the same thing. As a little bonus, we can use bertopic.representation.MaximalMarginalRelevance in BERTopic to diversity words in each topic such that we limit the number of duplicate words we find in each topic. This is done using an algorithm called Maximal Marginal Relevance which compares word embeddings with the topic embedding. We do this by specifying a value between 0 and 1, with 0 being not at all diverse and 1 being completely diverse: from bertopic import BERTopic from bertopic.representation import MaximalMarginalRelevance representation_model = MaximalMarginalRelevance ( diversity = 0.2 ) topic_model = BERTopic ( representation_model = representation_model ) Since MMR is using word embeddings to diversify the topic representations, it is necessary to pass the embedding model to BERTopic if you are using pre-computed embeddings: from bertopic import BERTopic from bertopic.representation import MaximalMarginalRelevance from sentence_transformers import SentenceTransformer sentence_model = SentenceTransformer ( \"all-MiniLM-L6-v2\" ) embeddings = sentence_model . encode ( docs , show_progress_bar = False ) representation_model = MaximalMarginalRelevance ( diversity = 0.2 ) topic_model = BERTopic ( embedding_model = sentence_model , representation_model = representation_model ) Topic-term matrix \u00b6 Although BERTopic focuses on clustering our documents, the end result does contain a topic-term matrix. This topic-term matrix is calculated using c-TF-IDF, a TF-IDF procedure optimized for class-based analyses. To extract the topic-term matrix (or c-TF-IDF matrix) with the corresponding words, we can simply do the following: topic_term_matrix = topic_model . c_tf_idf_ words = topic_model . vectorizer_model . get_feature_names () Pre-compute embeddings \u00b6 Typically, we want to iterate fast over different versions of our BERTopic model whilst we are trying to optimize it to a specific use case. To speed up this process, we can pre-compute the embeddings, save them, and pass them to BERTopic so it does not need to calculate the embeddings each time: from sklearn.datasets import fetch_20newsgroups from sentence_transformers import SentenceTransformer # Prepare embeddings docs = fetch_20newsgroups ( subset = 'all' , remove = ( 'headers' , 'footers' , 'quotes' ))[ 'data' ] sentence_model = SentenceTransformer ( \"all-MiniLM-L6-v2\" ) embeddings = sentence_model . encode ( docs , show_progress_bar = False ) # Train our topic model using our pre-trained sentence-transformers embeddings topic_model = BERTopic () topics , probs = topic_model . fit_transform ( docs , embeddings ) Speed up UMAP \u00b6 At times, UMAP may take a while to fit on the embeddings that you have. This often happens when you have the embeddings millions of documents that you want to reduce in dimensionality. There is a trick that can speed up this process somewhat: Initializing UMAP with rescaled PCA embeddings. Without going in too much detail (look here for more information), you can reduce the embeddings using PCA and use that as a starting point. This can speed up the dimensionality reduction a bit: import numpy as np from umap import UMAP from bertopic import BERTopic from sklearn.decomposition import PCA def rescale ( x , inplace = False ): \"\"\" Rescale an embedding so optimization will not have convergence issues. \"\"\" if not inplace : x = np . array ( x , copy = True ) x /= np . std ( x [:, 0 ]) * 10000 return x # Initialize and rescale PCA embeddings pca_embeddings = rescale ( PCA ( n_components = 5 ) . fit_transform ( embeddings )) # Start UMAP from PCA embeddings umap_model = UMAP ( n_neighbors = 15 , n_components = 5 , min_dist = 0.0 , metric = \"cosine\" , init = pca_embeddings , ) # Pass the model to BERTopic: topic_model = BERTopic ( umap_model = umap_model ) GPU acceleration \u00b6 You can use cuML to speed up both UMAP and HDBSCAN through GPU acceleration: from bertopic import BERTopic from cuml.cluster import HDBSCAN from cuml.manifold import UMAP # Create instances of GPU-accelerated UMAP and HDBSCAN umap_model = UMAP ( n_components = 5 , n_neighbors = 15 , min_dist = 0.0 ) hdbscan_model = HDBSCAN ( min_samples = 10 , gen_min_span_tree = True , prediction_data = True ) # Pass the above models to be used in BERTopic topic_model = BERTopic ( umap_model = umap_model , hdbscan_model = hdbscan_model ) topics , probs = topic_model . fit_transform ( docs ) Depending on the embeddings you are using, you might want to normalize them first in order to force a cosine-related distance metric in UMAP: from cuml.preprocessing import normalize embeddings = normalize ( embeddings ) Note As of the v0.13 release, it is not yet possible to calculate the topic-document probability matrix for unseen data (i.e., .transform ) using cuML's HDBSCAN. However, it is still possible to calculate the topic-document probability matrix for the data on which the model was trained (i.e., .fit and .fit_tranform ). Note If you want to install cuML together with BERTopic using Google Colab, you can run the following code: !pip install bertopic !pip install cudf-cu11 dask-cudf-cu11 --extra-index-url = https://pypi.ngc.nvidia.com !pip install cuml-cu11 --extra-index-url = https://pypi.ngc.nvidia.com !pip install cugraph-cu11 --extra-index-url = https://pypi.ngc.nvidia.com !pip uninstall cupy-cuda115 -y !pip uninstall cupy-cuda11x -y !pip install cupy-cuda11x -f https://pip.cupy.dev/aarch64 Lightweight installation \u00b6 The default embedding model in BERTopic is one of the amazing sentence-transformers models, namely \"all-MiniLM-L6-v2\" . Although this model performs well out of the box, it typically needs a GPU to transform the documents into embeddings in a reasonable time. Moreover, the installation requires pytorch which often results in a rather large environment, memory-wise. Fortunately, it is possible to install BERTopic without sentence-transformers and use it as a lightweight solution instead. The installation can be done as follows: pip install --no-deps bertopic pip install --upgrade numpy hdbscan umap-learn pandas scikit-learn tqdm plotly pyyaml Then, we can use BERTopic without sentence-transformers as follows using a CPU-based embedding technique: from sklearn.pipeline import make_pipeline from sklearn.decomposition import TruncatedSVD from sklearn.feature_extraction.text import TfidfVectorizer pipe = make_pipeline ( TfidfVectorizer (), TruncatedSVD ( 100 ) ) topic_model = BERTopic ( embedding_model = pipe ) As a result, the entire package and resulting model can be run quickly on the CPU and no GPU is necessary! WordCloud \u00b6 To minimize the number of dependencies in BERTopic, it is not possible to generate wordclouds out-of-the-box. However, there is a minimal script that you can use to generate wordclouds in BERTopic. First, you will need to install the wordcloud package with pip install wordcloud . Then, run the following code to generate the wordcloud for a specific topic: from wordcloud import WordCloud import matplotlib.pyplot as plt def create_wordcloud ( model , topic ): text = { word : value for word , value in model . get_topic ( topic )} wc = WordCloud ( background_color = \"white\" , max_words = 1000 ) wc . generate_from_frequencies ( text ) plt . imshow ( wc , interpolation = \"bilinear\" ) plt . axis ( \"off\" ) plt . show () # Show wordcloud create_wordcloud ( topic_model , topic = 1 ) Tip To increase the number of words shown in the wordcloud, you can increase the top_n_words parameter when instantiating BERTopic. You can also increase the number of words in a topic after training the model using .update_topics() . Finding similar topics between models \u00b6 Whenever you have trained seperate BERTopic models on different datasets, it might be worthful to find the similarities among these models. Is there overlap between topics in model A and topic in model B? In other words, can we find topics in model A that are similar to those in model B? We can compare the topic representations of several models in two ways. First, by comparing the topic embeddings that are created when using the same embedding model across both fitted BERTopic instances. Second, we can compare the c-TF-IDF representations instead assuming we have fixed the vocabulary in both instances. This example will go into the former, using the same embedding model across two BERTopic instances. To do this comparison, let's first create an example where I trained two models, one on an English dataset and one on a Dutch dataset: from datasets import load_dataset from bertopic import BERTopic from sentence_transformers import SentenceTransformer from bertopic import BERTopic from umap import UMAP # The same embedding model needs to be used for both topic models # and since we are dealing with multiple languages, the model needs to be multi-lingual sentence_model = SentenceTransformer ( \"paraphrase-multilingual-MiniLM-L12-v2\" ) # To make this example reproducible umap_model = UMAP ( n_neighbors = 15 , n_components = 5 , min_dist = 0.0 , metric = 'cosine' , random_state = 42 ) # English en_dataset = load_dataset ( \"stsb_multi_mt\" , name = \"en\" , split = \"train\" ) . to_pandas () . sentence1 . tolist () en_model = BERTopic ( embedding_model = sentence_model , umap_model = umap_model ) en_model . fit ( en_dataset ) # Dutch nl_dataset = load_dataset ( \"stsb_multi_mt\" , name = \"nl\" , split = \"train\" ) . to_pandas () . sentence1 . tolist () nl_model = BERTopic ( embedding_model = sentence_model , umap_model = umap_model ) nl_model . fit ( nl_dataset ) In the code above, there is one important thing to note and that is the sentence_model . This model needs to be exactly the same in all BERTopic models, otherwise, it is not possible to compare topic models. Next, we can calculate the similarity between topics in the English topic model en_model and the Dutch model nl_model . To do so, we can simply calculate the cosine similarity between the topic_embedding of both models: from sklearn.metrics.pairwise import cosine_similarity sim_matrix = cosine_similarity ( en_model . topic_embeddings_ , nl_model . topic_embeddings_ ) Now that we know which topics are similar to each other, we can extract the most similar topics. Let's say that we have topic 10 in the en_model which represents a topic related to trains: >>> topic = 10 >>> en_model . get_topic ( topic ) [( 'train' , 0.2588080580844999 ), ( 'tracks' , 0.1392140438801078 ), ( 'station' , 0.12126454635946024 ), ( 'passenger' , 0.058057876475695866 ), ( 'engine' , 0.05123717127783682 ), ( 'railroad' , 0.048142847325312044 ), ( 'waiting' , 0.04098973702226946 ), ( 'track' , 0.03978248702913929 ), ( 'subway' , 0.03834661195748458 ), ( 'steam' , 0.03834661195748458 )] To find the matching topic, we extract the most similar topic in the sim_matrix : >>> most_similar_topic = np . argmax ( sim_matrix [ topic + 1 ]) - 1 >>> nl_model . get_topic ( most_similar_topic ) [( 'trein' , 0.24186603209316418 ), ( 'spoor' , 0.1338118418551581 ), ( 'sporen' , 0.07683661859111401 ), ( 'station' , 0.056990389779394225 ), ( 'stoommachine' , 0.04905829711711234 ), ( 'zilveren' , 0.04083879598477808 ), ( 'treinen' , 0.03534099197032758 ), ( 'treinsporen' , 0.03534099197032758 ), ( 'staat' , 0.03481332997324445 ), ( 'zwarte' , 0.03179591746822408 )] It seems to be working as, for example, trein is a translation of train and sporen a translation of tracks ! You can do this for every single topic to find out which topic in the en_model might belong to a model in the nl_model . Multi-modal data \u00b6 Concept is a variation of BERTopic for multi-modal data, such as images with captions. Although we can use that package for multi-modal data, we can perform a small trick with BERTopic to have a similar feature. BERTopic is a relatively modular approach that attempts to isolate steps from one another. This means, for example, that you can use k-Means instead of HDBSCAN or PCA instead of UMAP as it does not make any assumptions with respect to the nature of the clustering. Similarly, you can pass pre-calculated embeddings to BERTopic that represent the documents that you have. However, it does not make any assumption with respect to the relationship between those embeddings and the documents. This means that we could pass any metadata to BERTopic to cluster on instead of document embeddings. In this example, we can separate our embeddings from our documents so that the embeddings are generated from images instead of their corresponding images. Thus, we will cluster image embeddings but create the topic representation from the related captions. In this example, we first need to fetch our data, namely the Flickr 8k dataset that contains images with captions: import os import glob import zipfile import numpy as np import pandas as pd from tqdm import tqdm from PIL import Image from sentence_transformers import SentenceTransformer , util # Flickr 8k images img_folder = 'photos/' caps_folder = 'captions/' if not os . path . exists ( img_folder ) or len ( os . listdir ( img_folder )) == 0 : os . makedirs ( img_folder , exist_ok = True ) if not os . path . exists ( 'Flickr8k_Dataset.zip' ): #Download dataset if does not exist util . http_get ( 'https://github.com/jbrownlee/Datasets/releases/download/Flickr8k/Flickr8k_Dataset.zip' , 'Flickr8k_Dataset.zip' ) util . http_get ( 'https://github.com/jbrownlee/Datasets/releases/download/Flickr8k/Flickr8k_text.zip' , 'Flickr8k_text.zip' ) for folder , file in [( img_folder , 'Flickr8k_Dataset.zip' ), ( caps_folder , 'Flickr8k_text.zip' )]: with zipfile . ZipFile ( file , 'r' ) as zf : for member in tqdm ( zf . infolist (), desc = 'Extracting' ): zf . extract ( member , folder ) images = list ( glob . glob ( 'photos/Flicker8k_Dataset/*.jpg' )) # Prepare dataframe captions = pd . read_csv ( \"captions/Flickr8k.lemma.token.txt\" , sep = ' \\t ' , names = [ \"img_id\" , \"img_caption\" ]) captions . img_id = captions . apply ( lambda row : \"photos/Flicker8k_Dataset/\" + row . img_id . split ( \".jpg\" )[ 0 ] + \".jpg\" , 1 ) captions = captions . groupby ([ \"img_id\" ])[ \"img_caption\" ] . apply ( ',' . join ) . reset_index () captions = pd . merge ( captions , pd . Series ( images , name = \"img_id\" ), on = \"img_id\" ) # Extract images together with their documents/captions images = captions . img_id . to_list () docs = captions . img_caption . to_list () Now that we have our images and captions, we need to generate our image embeddings: model = SentenceTransformer ( 'clip-ViT-B-32' ) # Prepare images batch_size = 32 nr_iterations = int ( np . ceil ( len ( images ) / batch_size )) # Embed images per batch embeddings = [] for i in tqdm ( range ( nr_iterations )): start_index = i * batch_size end_index = ( i * batch_size ) + batch_size images_to_embed = [ Image . open ( filepath ) for filepath in images [ start_index : end_index ]] img_emb = model . encode ( images_to_embed , show_progress_bar = False ) embeddings . extend ( img_emb . tolist ()) # Close images for image in images_to_embed : image . close () embeddings = np . array ( embeddings ) Finally, we can fit BERTopic the way we are used to, with documents and embeddings: from bertopic import BERTopic from sklearn.cluster import KMeans from sklearn.feature_extraction.text import CountVectorizer vectorizer_model = CountVectorizer ( stop_words = \"english\" ) topic_model = BERTopic ( vectorizer_model = vectorizer_model ) topics , probs = topic_model . fit_transform ( docs , embeddings ) captions [ \"Topic\" ] = topics After fitting our model, let's inspect a topic about skateboarders: >>> topic_model . get_topic ( 2 ) [( 'skateboard' , 0.09592033177340711 ), ( 'skateboarder' , 0.07792520092546491 ), ( 'trick' , 0.07481578896400298 ), ( 'ramp' , 0.056952605147927216 ), ( 'skate' , 0.03745127816149923 ), ( 'perform' , 0.036546213623432654 ), ( 'bicycle' , 0.03453483070441857 ), ( 'bike' , 0.033233021253898994 ), ( 'jump' , 0.026709362981948037 ), ( 'air' , 0.025422798170830936 )] Based on the above output, we can take an image to see if the representation makes sense: image = captions . loc [ captions . Topic == 2 , \"img_id\" ] . values . tolist ()[ 0 ] Image . open ( image ) KeyBERT & BERTopic \u00b6 Although BERTopic focuses on topic extraction methods that does not assume specific structures for the generated clusters, it is possible to do this on a more local level. More specifically, we can use KeyBERT to generate a number of keywords for each document and then build a vocabulary on top of that as the input for BERTopic. This way, we can select words that we know have meaning to a topic, without focusing on the centroid of that cluster. This also allows more frequent words to pop-up regardless of the structure and density of a cluster. To do this, we first need to run KeyBERT on our data and create our vocabulary: from sklearn.datasets import fetch_20newsgroups from keybert import KeyBERT # Prepare documents docs = fetch_20newsgroups ( subset = 'all' , remove = ( 'headers' , 'footers' , 'quotes' ))[ 'data' ] # Extract keywords kw_model = KeyBERT () keywords = kw_model . extract_keywords ( docs ) # Create our vocabulary vocabulary = [ k [ 0 ] for keyword in keywords for k in keyword ] vocabulary = list ( set ( vocabulary )) Then, we pass our vocabulary to BERTopic and train the model: from bertopic import BERTopic from sklearn.feature_extraction.text import CountVectorizer vectorizer_model = CountVectorizer ( vocabulary = vocabulary ) topic_model = BERTopic ( vectorizer_model = vectorizer_model ) topics , probs = topic_model . fit_transform ( docs )","title":"Tips & Tricks"},{"location":"getting_started/tips_and_tricks/tips_and_tricks.html#tips-tricks","text":"","title":"Tips &amp; Tricks"},{"location":"getting_started/tips_and_tricks/tips_and_tricks.html#document-length","text":"As a default, we are using sentence-transformers to embed our documents. However, as the name implies, the embedding model works best for either sentences or paragraphs. This means that whenever you have a set of documents, where each documents contains several paragraphs, the document is truncated and the topic model is only trained on a small part of the data. One way to solve this issue is by splitting up longer documents into either sentences or paragraphs before embedding them. Another solution is to approximate the topic distributions of topics after having trained your topic model.","title":"Document length"},{"location":"getting_started/tips_and_tricks/tips_and_tricks.html#removing-stop-words","text":"At times, stop words might end up in our topic representations. This is something we typically want to avoid as they contribute little to the interpretation of the topics. However, removing stop words as a preprocessing step is not advised as the transformer-based embedding models that we use need the full context in order to create accurate embeddings. Instead, we can use the CountVectorizer to preprocess our documents after having generated embeddings and clustered our documents. Personally, I have found almost no disadvantages to using the CountVectorizer to remove stopwords and it is something I would strongly advise to try out: from bertopic import BERTopic from sklearn.feature_extraction.text import CountVectorizer vectorizer_model = CountVectorizer ( stop_words = \"english\" ) topic_model = BERTopic ( vectorizer_model = vectorizer_model ) We can also use the ClassTfidfTransformer to reduce the impact of frequent words. The end result is very similar to explictly removing stopwords but this process does this automatically: from bertopic import BERTopic from bertopic.vectorizers import ClassTfidfTransformer ctfidf_model = ClassTfidfTransformer ( reduce_frequent_words = True ) topic_model = BERTopic ( ctfidf_model = ctfidf_model ) Lastly, we can use a KeyBERT-Inspired model to reduce the appearance of stop words. This also often improves the topic representation: from bertopic.representation import KeyBERTInspired from bertopic import BERTopic # Create your representation model representation_model = KeyBERTInspired () # Use the representation model in BERTopic on top of the default pipeline topic_model = BERTopic ( representation_model = representation_model )","title":"Removing stop words"},{"location":"getting_started/tips_and_tricks/tips_and_tricks.html#diversify-topic-representation","text":"After having calculated our top n words per topic there might be many words that essentially mean the same thing. As a little bonus, we can use bertopic.representation.MaximalMarginalRelevance in BERTopic to diversity words in each topic such that we limit the number of duplicate words we find in each topic. This is done using an algorithm called Maximal Marginal Relevance which compares word embeddings with the topic embedding. We do this by specifying a value between 0 and 1, with 0 being not at all diverse and 1 being completely diverse: from bertopic import BERTopic from bertopic.representation import MaximalMarginalRelevance representation_model = MaximalMarginalRelevance ( diversity = 0.2 ) topic_model = BERTopic ( representation_model = representation_model ) Since MMR is using word embeddings to diversify the topic representations, it is necessary to pass the embedding model to BERTopic if you are using pre-computed embeddings: from bertopic import BERTopic from bertopic.representation import MaximalMarginalRelevance from sentence_transformers import SentenceTransformer sentence_model = SentenceTransformer ( \"all-MiniLM-L6-v2\" ) embeddings = sentence_model . encode ( docs , show_progress_bar = False ) representation_model = MaximalMarginalRelevance ( diversity = 0.2 ) topic_model = BERTopic ( embedding_model = sentence_model , representation_model = representation_model )","title":"Diversify topic representation"},{"location":"getting_started/tips_and_tricks/tips_and_tricks.html#topic-term-matrix","text":"Although BERTopic focuses on clustering our documents, the end result does contain a topic-term matrix. This topic-term matrix is calculated using c-TF-IDF, a TF-IDF procedure optimized for class-based analyses. To extract the topic-term matrix (or c-TF-IDF matrix) with the corresponding words, we can simply do the following: topic_term_matrix = topic_model . c_tf_idf_ words = topic_model . vectorizer_model . get_feature_names ()","title":"Topic-term matrix"},{"location":"getting_started/tips_and_tricks/tips_and_tricks.html#pre-compute-embeddings","text":"Typically, we want to iterate fast over different versions of our BERTopic model whilst we are trying to optimize it to a specific use case. To speed up this process, we can pre-compute the embeddings, save them, and pass them to BERTopic so it does not need to calculate the embeddings each time: from sklearn.datasets import fetch_20newsgroups from sentence_transformers import SentenceTransformer # Prepare embeddings docs = fetch_20newsgroups ( subset = 'all' , remove = ( 'headers' , 'footers' , 'quotes' ))[ 'data' ] sentence_model = SentenceTransformer ( \"all-MiniLM-L6-v2\" ) embeddings = sentence_model . encode ( docs , show_progress_bar = False ) # Train our topic model using our pre-trained sentence-transformers embeddings topic_model = BERTopic () topics , probs = topic_model . fit_transform ( docs , embeddings )","title":"Pre-compute embeddings"},{"location":"getting_started/tips_and_tricks/tips_and_tricks.html#speed-up-umap","text":"At times, UMAP may take a while to fit on the embeddings that you have. This often happens when you have the embeddings millions of documents that you want to reduce in dimensionality. There is a trick that can speed up this process somewhat: Initializing UMAP with rescaled PCA embeddings. Without going in too much detail (look here for more information), you can reduce the embeddings using PCA and use that as a starting point. This can speed up the dimensionality reduction a bit: import numpy as np from umap import UMAP from bertopic import BERTopic from sklearn.decomposition import PCA def rescale ( x , inplace = False ): \"\"\" Rescale an embedding so optimization will not have convergence issues. \"\"\" if not inplace : x = np . array ( x , copy = True ) x /= np . std ( x [:, 0 ]) * 10000 return x # Initialize and rescale PCA embeddings pca_embeddings = rescale ( PCA ( n_components = 5 ) . fit_transform ( embeddings )) # Start UMAP from PCA embeddings umap_model = UMAP ( n_neighbors = 15 , n_components = 5 , min_dist = 0.0 , metric = \"cosine\" , init = pca_embeddings , ) # Pass the model to BERTopic: topic_model = BERTopic ( umap_model = umap_model )","title":"Speed up UMAP"},{"location":"getting_started/tips_and_tricks/tips_and_tricks.html#gpu-acceleration","text":"You can use cuML to speed up both UMAP and HDBSCAN through GPU acceleration: from bertopic import BERTopic from cuml.cluster import HDBSCAN from cuml.manifold import UMAP # Create instances of GPU-accelerated UMAP and HDBSCAN umap_model = UMAP ( n_components = 5 , n_neighbors = 15 , min_dist = 0.0 ) hdbscan_model = HDBSCAN ( min_samples = 10 , gen_min_span_tree = True , prediction_data = True ) # Pass the above models to be used in BERTopic topic_model = BERTopic ( umap_model = umap_model , hdbscan_model = hdbscan_model ) topics , probs = topic_model . fit_transform ( docs ) Depending on the embeddings you are using, you might want to normalize them first in order to force a cosine-related distance metric in UMAP: from cuml.preprocessing import normalize embeddings = normalize ( embeddings ) Note As of the v0.13 release, it is not yet possible to calculate the topic-document probability matrix for unseen data (i.e., .transform ) using cuML's HDBSCAN. However, it is still possible to calculate the topic-document probability matrix for the data on which the model was trained (i.e., .fit and .fit_tranform ). Note If you want to install cuML together with BERTopic using Google Colab, you can run the following code: !pip install bertopic !pip install cudf-cu11 dask-cudf-cu11 --extra-index-url = https://pypi.ngc.nvidia.com !pip install cuml-cu11 --extra-index-url = https://pypi.ngc.nvidia.com !pip install cugraph-cu11 --extra-index-url = https://pypi.ngc.nvidia.com !pip uninstall cupy-cuda115 -y !pip uninstall cupy-cuda11x -y !pip install cupy-cuda11x -f https://pip.cupy.dev/aarch64","title":"GPU acceleration"},{"location":"getting_started/tips_and_tricks/tips_and_tricks.html#lightweight-installation","text":"The default embedding model in BERTopic is one of the amazing sentence-transformers models, namely \"all-MiniLM-L6-v2\" . Although this model performs well out of the box, it typically needs a GPU to transform the documents into embeddings in a reasonable time. Moreover, the installation requires pytorch which often results in a rather large environment, memory-wise. Fortunately, it is possible to install BERTopic without sentence-transformers and use it as a lightweight solution instead. The installation can be done as follows: pip install --no-deps bertopic pip install --upgrade numpy hdbscan umap-learn pandas scikit-learn tqdm plotly pyyaml Then, we can use BERTopic without sentence-transformers as follows using a CPU-based embedding technique: from sklearn.pipeline import make_pipeline from sklearn.decomposition import TruncatedSVD from sklearn.feature_extraction.text import TfidfVectorizer pipe = make_pipeline ( TfidfVectorizer (), TruncatedSVD ( 100 ) ) topic_model = BERTopic ( embedding_model = pipe ) As a result, the entire package and resulting model can be run quickly on the CPU and no GPU is necessary!","title":"Lightweight installation"},{"location":"getting_started/tips_and_tricks/tips_and_tricks.html#wordcloud","text":"To minimize the number of dependencies in BERTopic, it is not possible to generate wordclouds out-of-the-box. However, there is a minimal script that you can use to generate wordclouds in BERTopic. First, you will need to install the wordcloud package with pip install wordcloud . Then, run the following code to generate the wordcloud for a specific topic: from wordcloud import WordCloud import matplotlib.pyplot as plt def create_wordcloud ( model , topic ): text = { word : value for word , value in model . get_topic ( topic )} wc = WordCloud ( background_color = \"white\" , max_words = 1000 ) wc . generate_from_frequencies ( text ) plt . imshow ( wc , interpolation = \"bilinear\" ) plt . axis ( \"off\" ) plt . show () # Show wordcloud create_wordcloud ( topic_model , topic = 1 ) Tip To increase the number of words shown in the wordcloud, you can increase the top_n_words parameter when instantiating BERTopic. You can also increase the number of words in a topic after training the model using .update_topics() .","title":"WordCloud"},{"location":"getting_started/tips_and_tricks/tips_and_tricks.html#finding-similar-topics-between-models","text":"Whenever you have trained seperate BERTopic models on different datasets, it might be worthful to find the similarities among these models. Is there overlap between topics in model A and topic in model B? In other words, can we find topics in model A that are similar to those in model B? We can compare the topic representations of several models in two ways. First, by comparing the topic embeddings that are created when using the same embedding model across both fitted BERTopic instances. Second, we can compare the c-TF-IDF representations instead assuming we have fixed the vocabulary in both instances. This example will go into the former, using the same embedding model across two BERTopic instances. To do this comparison, let's first create an example where I trained two models, one on an English dataset and one on a Dutch dataset: from datasets import load_dataset from bertopic import BERTopic from sentence_transformers import SentenceTransformer from bertopic import BERTopic from umap import UMAP # The same embedding model needs to be used for both topic models # and since we are dealing with multiple languages, the model needs to be multi-lingual sentence_model = SentenceTransformer ( \"paraphrase-multilingual-MiniLM-L12-v2\" ) # To make this example reproducible umap_model = UMAP ( n_neighbors = 15 , n_components = 5 , min_dist = 0.0 , metric = 'cosine' , random_state = 42 ) # English en_dataset = load_dataset ( \"stsb_multi_mt\" , name = \"en\" , split = \"train\" ) . to_pandas () . sentence1 . tolist () en_model = BERTopic ( embedding_model = sentence_model , umap_model = umap_model ) en_model . fit ( en_dataset ) # Dutch nl_dataset = load_dataset ( \"stsb_multi_mt\" , name = \"nl\" , split = \"train\" ) . to_pandas () . sentence1 . tolist () nl_model = BERTopic ( embedding_model = sentence_model , umap_model = umap_model ) nl_model . fit ( nl_dataset ) In the code above, there is one important thing to note and that is the sentence_model . This model needs to be exactly the same in all BERTopic models, otherwise, it is not possible to compare topic models. Next, we can calculate the similarity between topics in the English topic model en_model and the Dutch model nl_model . To do so, we can simply calculate the cosine similarity between the topic_embedding of both models: from sklearn.metrics.pairwise import cosine_similarity sim_matrix = cosine_similarity ( en_model . topic_embeddings_ , nl_model . topic_embeddings_ ) Now that we know which topics are similar to each other, we can extract the most similar topics. Let's say that we have topic 10 in the en_model which represents a topic related to trains: >>> topic = 10 >>> en_model . get_topic ( topic ) [( 'train' , 0.2588080580844999 ), ( 'tracks' , 0.1392140438801078 ), ( 'station' , 0.12126454635946024 ), ( 'passenger' , 0.058057876475695866 ), ( 'engine' , 0.05123717127783682 ), ( 'railroad' , 0.048142847325312044 ), ( 'waiting' , 0.04098973702226946 ), ( 'track' , 0.03978248702913929 ), ( 'subway' , 0.03834661195748458 ), ( 'steam' , 0.03834661195748458 )] To find the matching topic, we extract the most similar topic in the sim_matrix : >>> most_similar_topic = np . argmax ( sim_matrix [ topic + 1 ]) - 1 >>> nl_model . get_topic ( most_similar_topic ) [( 'trein' , 0.24186603209316418 ), ( 'spoor' , 0.1338118418551581 ), ( 'sporen' , 0.07683661859111401 ), ( 'station' , 0.056990389779394225 ), ( 'stoommachine' , 0.04905829711711234 ), ( 'zilveren' , 0.04083879598477808 ), ( 'treinen' , 0.03534099197032758 ), ( 'treinsporen' , 0.03534099197032758 ), ( 'staat' , 0.03481332997324445 ), ( 'zwarte' , 0.03179591746822408 )] It seems to be working as, for example, trein is a translation of train and sporen a translation of tracks ! You can do this for every single topic to find out which topic in the en_model might belong to a model in the nl_model .","title":"Finding similar topics between models"},{"location":"getting_started/tips_and_tricks/tips_and_tricks.html#multi-modal-data","text":"Concept is a variation of BERTopic for multi-modal data, such as images with captions. Although we can use that package for multi-modal data, we can perform a small trick with BERTopic to have a similar feature. BERTopic is a relatively modular approach that attempts to isolate steps from one another. This means, for example, that you can use k-Means instead of HDBSCAN or PCA instead of UMAP as it does not make any assumptions with respect to the nature of the clustering. Similarly, you can pass pre-calculated embeddings to BERTopic that represent the documents that you have. However, it does not make any assumption with respect to the relationship between those embeddings and the documents. This means that we could pass any metadata to BERTopic to cluster on instead of document embeddings. In this example, we can separate our embeddings from our documents so that the embeddings are generated from images instead of their corresponding images. Thus, we will cluster image embeddings but create the topic representation from the related captions. In this example, we first need to fetch our data, namely the Flickr 8k dataset that contains images with captions: import os import glob import zipfile import numpy as np import pandas as pd from tqdm import tqdm from PIL import Image from sentence_transformers import SentenceTransformer , util # Flickr 8k images img_folder = 'photos/' caps_folder = 'captions/' if not os . path . exists ( img_folder ) or len ( os . listdir ( img_folder )) == 0 : os . makedirs ( img_folder , exist_ok = True ) if not os . path . exists ( 'Flickr8k_Dataset.zip' ): #Download dataset if does not exist util . http_get ( 'https://github.com/jbrownlee/Datasets/releases/download/Flickr8k/Flickr8k_Dataset.zip' , 'Flickr8k_Dataset.zip' ) util . http_get ( 'https://github.com/jbrownlee/Datasets/releases/download/Flickr8k/Flickr8k_text.zip' , 'Flickr8k_text.zip' ) for folder , file in [( img_folder , 'Flickr8k_Dataset.zip' ), ( caps_folder , 'Flickr8k_text.zip' )]: with zipfile . ZipFile ( file , 'r' ) as zf : for member in tqdm ( zf . infolist (), desc = 'Extracting' ): zf . extract ( member , folder ) images = list ( glob . glob ( 'photos/Flicker8k_Dataset/*.jpg' )) # Prepare dataframe captions = pd . read_csv ( \"captions/Flickr8k.lemma.token.txt\" , sep = ' \\t ' , names = [ \"img_id\" , \"img_caption\" ]) captions . img_id = captions . apply ( lambda row : \"photos/Flicker8k_Dataset/\" + row . img_id . split ( \".jpg\" )[ 0 ] + \".jpg\" , 1 ) captions = captions . groupby ([ \"img_id\" ])[ \"img_caption\" ] . apply ( ',' . join ) . reset_index () captions = pd . merge ( captions , pd . Series ( images , name = \"img_id\" ), on = \"img_id\" ) # Extract images together with their documents/captions images = captions . img_id . to_list () docs = captions . img_caption . to_list () Now that we have our images and captions, we need to generate our image embeddings: model = SentenceTransformer ( 'clip-ViT-B-32' ) # Prepare images batch_size = 32 nr_iterations = int ( np . ceil ( len ( images ) / batch_size )) # Embed images per batch embeddings = [] for i in tqdm ( range ( nr_iterations )): start_index = i * batch_size end_index = ( i * batch_size ) + batch_size images_to_embed = [ Image . open ( filepath ) for filepath in images [ start_index : end_index ]] img_emb = model . encode ( images_to_embed , show_progress_bar = False ) embeddings . extend ( img_emb . tolist ()) # Close images for image in images_to_embed : image . close () embeddings = np . array ( embeddings ) Finally, we can fit BERTopic the way we are used to, with documents and embeddings: from bertopic import BERTopic from sklearn.cluster import KMeans from sklearn.feature_extraction.text import CountVectorizer vectorizer_model = CountVectorizer ( stop_words = \"english\" ) topic_model = BERTopic ( vectorizer_model = vectorizer_model ) topics , probs = topic_model . fit_transform ( docs , embeddings ) captions [ \"Topic\" ] = topics After fitting our model, let's inspect a topic about skateboarders: >>> topic_model . get_topic ( 2 ) [( 'skateboard' , 0.09592033177340711 ), ( 'skateboarder' , 0.07792520092546491 ), ( 'trick' , 0.07481578896400298 ), ( 'ramp' , 0.056952605147927216 ), ( 'skate' , 0.03745127816149923 ), ( 'perform' , 0.036546213623432654 ), ( 'bicycle' , 0.03453483070441857 ), ( 'bike' , 0.033233021253898994 ), ( 'jump' , 0.026709362981948037 ), ( 'air' , 0.025422798170830936 )] Based on the above output, we can take an image to see if the representation makes sense: image = captions . loc [ captions . Topic == 2 , \"img_id\" ] . values . tolist ()[ 0 ] Image . open ( image )","title":"Multi-modal data"},{"location":"getting_started/tips_and_tricks/tips_and_tricks.html#keybert-bertopic","text":"Although BERTopic focuses on topic extraction methods that does not assume specific structures for the generated clusters, it is possible to do this on a more local level. More specifically, we can use KeyBERT to generate a number of keywords for each document and then build a vocabulary on top of that as the input for BERTopic. This way, we can select words that we know have meaning to a topic, without focusing on the centroid of that cluster. This also allows more frequent words to pop-up regardless of the structure and density of a cluster. To do this, we first need to run KeyBERT on our data and create our vocabulary: from sklearn.datasets import fetch_20newsgroups from keybert import KeyBERT # Prepare documents docs = fetch_20newsgroups ( subset = 'all' , remove = ( 'headers' , 'footers' , 'quotes' ))[ 'data' ] # Extract keywords kw_model = KeyBERT () keywords = kw_model . extract_keywords ( docs ) # Create our vocabulary vocabulary = [ k [ 0 ] for keyword in keywords for k in keyword ] vocabulary = list ( set ( vocabulary )) Then, we pass our vocabulary to BERTopic and train the model: from bertopic import BERTopic from sklearn.feature_extraction.text import CountVectorizer vectorizer_model = CountVectorizer ( vocabulary = vocabulary ) topic_model = BERTopic ( vectorizer_model = vectorizer_model ) topics , probs = topic_model . fit_transform ( docs )","title":"KeyBERT &amp; BERTopic"},{"location":"getting_started/topicreduction/topicreduction.html","text":"BERTopic uses HDBSCAN for clustering the data and it cannot specify the number of clusters you would want. To a certain extent, this is an advantage, as we can trust HDBSCAN to be better in finding the number of clusters than we are. Instead, we can try to reduce the number of topics that have been created. Below, you will find three methods of doing so. Manual Topic Reduction \u00b6 Each resulting topic has its feature vector constructed from c-TF-IDF. Using those feature vectors, we can find the most similar topics and merge them. If we do this iteratively, starting from the least frequent topic, we can reduce the number of topics quite easily. We do this until we reach the value of nr_topics : from bertopic import BERTopic topic_model = BERTopic ( nr_topics = 20 ) It is also possible to manually select certain topics that you believe should be merged. For example, if topic 1 is 1_space_launch_moon_nasa and topic 2 is 2_spacecraft_solar_space_orbit it might make sense to merge those two topics: topics_to_merge = [ 1 , 2 ] topic_model . merge_topics ( docs , topics_to_merge ) If you have several groups of topics you want to merge, create a list of lists instead: topics_to_merge = [[ 1 , 2 ] [ 3 , 4 ]] topic_model . merge_topics ( docs , topics_to_merge ) Automatic Topic Reduction \u00b6 One issue with the approach above is that it will merge topics regardless of whether they are very similar. They are simply the most similar out of all options. This can be resolved by reducing the number of topics automatically. To do this, we can use HDBSCAN to cluster our topics using each c-TF-IDF representation. Then, we merge topics that are clustered together. Another benefit of HDBSCAN is that it generates outliers. These outliers prevent topics from being merged if no other topics are similar. To use this option, we simply set nr_topics to \"auto\" : from bertopic import BERTopic topic_model = BERTopic ( nr_topics = \"auto\" ) Topic Reduction after Training \u00b6 Finally, we can also reduce the number of topics after having trained a BERTopic model. The advantage of doing so is that you can decide the number of topics after knowing how many are created. It is difficult to predict before training your model how many topics that are in your documents and how many will be extracted. Instead, we can decide afterward how many topics seem realistic: from bertopic import BERTopic from sklearn.datasets import fetch_20newsgroups # Create topics -> Typically over 50 topics docs = fetch_20newsgroups ( subset = 'all' , remove = ( 'headers' , 'footers' , 'quotes' ))[ 'data' ] topic_model = BERTopic () topics , probs = topic_model . fit_transform ( docs ) # Further reduce topics topic_model . reduce_topics ( docs , nr_topics = 30 ) # Access updated topics topics = topic_model . topics_ The reasoning for putting docs as a parameter is that the documents are not saved within BERTopic on purpose. If you were to have a million documents, it is very inefficient to save those in BERTopic instead of a dedicated database.","title":"Topic Reduction"},{"location":"getting_started/topicreduction/topicreduction.html#manual-topic-reduction","text":"Each resulting topic has its feature vector constructed from c-TF-IDF. Using those feature vectors, we can find the most similar topics and merge them. If we do this iteratively, starting from the least frequent topic, we can reduce the number of topics quite easily. We do this until we reach the value of nr_topics : from bertopic import BERTopic topic_model = BERTopic ( nr_topics = 20 ) It is also possible to manually select certain topics that you believe should be merged. For example, if topic 1 is 1_space_launch_moon_nasa and topic 2 is 2_spacecraft_solar_space_orbit it might make sense to merge those two topics: topics_to_merge = [ 1 , 2 ] topic_model . merge_topics ( docs , topics_to_merge ) If you have several groups of topics you want to merge, create a list of lists instead: topics_to_merge = [[ 1 , 2 ] [ 3 , 4 ]] topic_model . merge_topics ( docs , topics_to_merge )","title":"Manual Topic Reduction"},{"location":"getting_started/topicreduction/topicreduction.html#automatic-topic-reduction","text":"One issue with the approach above is that it will merge topics regardless of whether they are very similar. They are simply the most similar out of all options. This can be resolved by reducing the number of topics automatically. To do this, we can use HDBSCAN to cluster our topics using each c-TF-IDF representation. Then, we merge topics that are clustered together. Another benefit of HDBSCAN is that it generates outliers. These outliers prevent topics from being merged if no other topics are similar. To use this option, we simply set nr_topics to \"auto\" : from bertopic import BERTopic topic_model = BERTopic ( nr_topics = \"auto\" )","title":"Automatic Topic Reduction"},{"location":"getting_started/topicreduction/topicreduction.html#topic-reduction-after-training","text":"Finally, we can also reduce the number of topics after having trained a BERTopic model. The advantage of doing so is that you can decide the number of topics after knowing how many are created. It is difficult to predict before training your model how many topics that are in your documents and how many will be extracted. Instead, we can decide afterward how many topics seem realistic: from bertopic import BERTopic from sklearn.datasets import fetch_20newsgroups # Create topics -> Typically over 50 topics docs = fetch_20newsgroups ( subset = 'all' , remove = ( 'headers' , 'footers' , 'quotes' ))[ 'data' ] topic_model = BERTopic () topics , probs = topic_model . fit_transform ( docs ) # Further reduce topics topic_model . reduce_topics ( docs , nr_topics = 30 ) # Access updated topics topics = topic_model . topics_ The reasoning for putting docs as a parameter is that the documents are not saved within BERTopic on purpose. If you were to have a million documents, it is very inefficient to save those in BERTopic instead of a dedicated database.","title":"Topic Reduction after Training"},{"location":"getting_started/topicrepresentation/topicrepresentation.html","text":"The topics that are extracted from BERTopic are represented by words. These words are extracted from the documents occupying their topics using a class-based TF-IDF. This allows us to extract words that are interesting to a topic but less so to another. Update Topic Representation after Training \u00b6 When you have trained a model and viewed the topics and the words that represent them, you might not be satisfied with the representation. Perhaps you forgot to remove stop_words or you want to try out a different n_gram_range. We can use the function update_topics to update the topic representation with new parameters for c-TF-IDF : from bertopic import BERTopic from sklearn.datasets import fetch_20newsgroups # Create topics docs = fetch_20newsgroups ( subset = 'all' , remove = ( 'headers' , 'footers' , 'quotes' ))[ 'data' ] topic_model = BERTopic ( n_gram_range = ( 2 , 3 )) topics , probs = topic_model . fit_transform ( docs ) From the model created above, one of the most frequent topics is the following: >>> topic_model . get_topic ( 31 )[: 10 ] [( 'clipper chip' , 0.007240771542316232 ), ( 'key escrow' , 0.004601603973377443 ), ( 'law enforcement' , 0.004277247929596332 ), ( 'intercon com' , 0.0035961920238955824 ), ( 'amanda walker' , 0.003474856425297157 ), ( 'serial number' , 0.0029876119137150358 ), ( 'com amanda' , 0.002789303096817983 ), ( 'intercon com amanda' , 0.0027386688593327084 ), ( 'amanda intercon' , 0.002585262048515583 ), ( 'amanda intercon com' , 0.002585262048515583 )] Although there does seems to be some relation between words, it is difficult, at least for me, to intuitively understand what the topic is about. Instead, let's simplify the topic representation by setting n_gram_range to (1, 3) to also allow for single words. >>> topic_model . update_topics ( docs , n_gram_range = ( 1 , 3 )) >>> topic_model . get_topic ( 31 )[: 10 ] [( 'encryption' , 0.008021846079148017 ), ( 'clipper' , 0.00789642647602742 ), ( 'chip' , 0.00637127942464045 ), ( 'key' , 0.006363124787175884 ), ( 'escrow' , 0.005030980365244285 ), ( 'clipper chip' , 0.0048271268437973395 ), ( 'keys' , 0.0043245812747907545 ), ( 'crypto' , 0.004311198708675516 ), ( 'intercon' , 0.0038772934659295076 ), ( 'amanda' , 0.003516026493904586 )] To me, the combination of the words above seem a bit more intuitive than the words we previously had! You can play around with n_gram_range or use your own custom sklearn.feature_extraction.text.CountVectorizer and pass that instead: from sklearn.feature_extraction.text import CountVectorizer vectorizer_model = CountVectorizer ( stop_words = \"English\" , ngram_range = ( 1 , 5 )) topic_model . update_topics ( docs , vectorizer_model = vectorizer_model ) Tip! If you want to change the topics to something else, whether that is merging them or removing outliers, you can pass a custom list of topics to update them: topic_model.update_topics(docs, topics=my_updated_topics) Custom labels \u00b6 The topic labels are currently automatically generated by taking the top 3 words and combining them using the _ separator. Although this is an informative label, in practice, this is definitely not the prettiest nor necessarily the most accurate label. For example, although the topic label 1_space_nasa_orbit is informative, but we would prefer to have a bit more intuitive label, such as space travel . The difficulty with creating such topic labels is that much of the interpretation is left to the user. Would space travel be more accurate or perhaps space explorations ? To truly understand which labels are most suited, going into some of the documents in topics is especially helpful. Although we can go through every single topic ourselves and try to label them, we can start by creating an overview of labels that have the length and number of words that we are looking for. To do so, we can generate our list of topic labels with .get_topic_labels and define the number of words, the separator, word length, etc: topic_labels = topic_model . generate_topic_labels ( nr_words = 3 , topic_prefix = False , word_length = 10 , separator = \", \" ) In the above example, 1_space_nasa_orbit would turn into space, nasa, orbit since we selected 3 words, no topic prefix, and the , separator. We can then either change our topic_labels to whatever we want or directly pass them to .set_topic_labels so that they can be used across most visualization functions: topic_model . set_topic_labels ( topic_labels ) It is also possible to only change a few topic labels at a time by passing a dictionary where the key represents the topic ID and the value is the topic label : topic_model . set_topic_labels ({ 1 : \"Space Travel\" , 7 : \"Religion\" }) Then, to make use of those custom topic labels across visualizations, such as .visualize_hierarchy() , we can use the custom_labels=True parameter that is found in most visualizations. fig = topic_model . visualize_barchart ( custom_labels = True ) Optimize labels \u00b6 The great advantage of passing custom labels to BERTopic is that when more accurate zero-shot are released, we can simply use those on top of BERTopic to further fine-tune the labeling. For example, let's say you have a set of potential topic labels that you want to use instead of the ones generated by BERTopic. You could use the bart-large-mnli model to find which user-defined labels best represent the BERTopic-generated labels: from transformers import pipeline classifier = pipeline ( \"zero-shot-classification\" , model = \"facebook/bart-large-mnli\" ) # A selected topic representation # 'god jesus atheists atheism belief atheist believe exist beliefs existence' sequence_to_classify = \" \" . join ([ word for word , _ in topic_model . get_topic ( 1 )]) # Our set of potential topic labels candidate_labels = [ 'cooking' , 'dancing' , 'religion' ] classifier ( sequence_to_classify , candidate_labels ) #{'labels': ['cooking', 'dancing', 'religion'], # 'scores': [0.086, 0.063, 0.850], # 'sequence': 'god jesus atheists atheism belief atheist believe exist beliefs existence'}","title":"Topic Representation"},{"location":"getting_started/topicrepresentation/topicrepresentation.html#update-topic-representation-after-training","text":"When you have trained a model and viewed the topics and the words that represent them, you might not be satisfied with the representation. Perhaps you forgot to remove stop_words or you want to try out a different n_gram_range. We can use the function update_topics to update the topic representation with new parameters for c-TF-IDF : from bertopic import BERTopic from sklearn.datasets import fetch_20newsgroups # Create topics docs = fetch_20newsgroups ( subset = 'all' , remove = ( 'headers' , 'footers' , 'quotes' ))[ 'data' ] topic_model = BERTopic ( n_gram_range = ( 2 , 3 )) topics , probs = topic_model . fit_transform ( docs ) From the model created above, one of the most frequent topics is the following: >>> topic_model . get_topic ( 31 )[: 10 ] [( 'clipper chip' , 0.007240771542316232 ), ( 'key escrow' , 0.004601603973377443 ), ( 'law enforcement' , 0.004277247929596332 ), ( 'intercon com' , 0.0035961920238955824 ), ( 'amanda walker' , 0.003474856425297157 ), ( 'serial number' , 0.0029876119137150358 ), ( 'com amanda' , 0.002789303096817983 ), ( 'intercon com amanda' , 0.0027386688593327084 ), ( 'amanda intercon' , 0.002585262048515583 ), ( 'amanda intercon com' , 0.002585262048515583 )] Although there does seems to be some relation between words, it is difficult, at least for me, to intuitively understand what the topic is about. Instead, let's simplify the topic representation by setting n_gram_range to (1, 3) to also allow for single words. >>> topic_model . update_topics ( docs , n_gram_range = ( 1 , 3 )) >>> topic_model . get_topic ( 31 )[: 10 ] [( 'encryption' , 0.008021846079148017 ), ( 'clipper' , 0.00789642647602742 ), ( 'chip' , 0.00637127942464045 ), ( 'key' , 0.006363124787175884 ), ( 'escrow' , 0.005030980365244285 ), ( 'clipper chip' , 0.0048271268437973395 ), ( 'keys' , 0.0043245812747907545 ), ( 'crypto' , 0.004311198708675516 ), ( 'intercon' , 0.0038772934659295076 ), ( 'amanda' , 0.003516026493904586 )] To me, the combination of the words above seem a bit more intuitive than the words we previously had! You can play around with n_gram_range or use your own custom sklearn.feature_extraction.text.CountVectorizer and pass that instead: from sklearn.feature_extraction.text import CountVectorizer vectorizer_model = CountVectorizer ( stop_words = \"English\" , ngram_range = ( 1 , 5 )) topic_model . update_topics ( docs , vectorizer_model = vectorizer_model ) Tip! If you want to change the topics to something else, whether that is merging them or removing outliers, you can pass a custom list of topics to update them: topic_model.update_topics(docs, topics=my_updated_topics)","title":"Update Topic Representation after Training"},{"location":"getting_started/topicrepresentation/topicrepresentation.html#custom-labels","text":"The topic labels are currently automatically generated by taking the top 3 words and combining them using the _ separator. Although this is an informative label, in practice, this is definitely not the prettiest nor necessarily the most accurate label. For example, although the topic label 1_space_nasa_orbit is informative, but we would prefer to have a bit more intuitive label, such as space travel . The difficulty with creating such topic labels is that much of the interpretation is left to the user. Would space travel be more accurate or perhaps space explorations ? To truly understand which labels are most suited, going into some of the documents in topics is especially helpful. Although we can go through every single topic ourselves and try to label them, we can start by creating an overview of labels that have the length and number of words that we are looking for. To do so, we can generate our list of topic labels with .get_topic_labels and define the number of words, the separator, word length, etc: topic_labels = topic_model . generate_topic_labels ( nr_words = 3 , topic_prefix = False , word_length = 10 , separator = \", \" ) In the above example, 1_space_nasa_orbit would turn into space, nasa, orbit since we selected 3 words, no topic prefix, and the , separator. We can then either change our topic_labels to whatever we want or directly pass them to .set_topic_labels so that they can be used across most visualization functions: topic_model . set_topic_labels ( topic_labels ) It is also possible to only change a few topic labels at a time by passing a dictionary where the key represents the topic ID and the value is the topic label : topic_model . set_topic_labels ({ 1 : \"Space Travel\" , 7 : \"Religion\" }) Then, to make use of those custom topic labels across visualizations, such as .visualize_hierarchy() , we can use the custom_labels=True parameter that is found in most visualizations. fig = topic_model . visualize_barchart ( custom_labels = True )","title":"Custom labels"},{"location":"getting_started/topicrepresentation/topicrepresentation.html#optimize-labels","text":"The great advantage of passing custom labels to BERTopic is that when more accurate zero-shot are released, we can simply use those on top of BERTopic to further fine-tune the labeling. For example, let's say you have a set of potential topic labels that you want to use instead of the ones generated by BERTopic. You could use the bart-large-mnli model to find which user-defined labels best represent the BERTopic-generated labels: from transformers import pipeline classifier = pipeline ( \"zero-shot-classification\" , model = \"facebook/bart-large-mnli\" ) # A selected topic representation # 'god jesus atheists atheism belief atheist believe exist beliefs existence' sequence_to_classify = \" \" . join ([ word for word , _ in topic_model . get_topic ( 1 )]) # Our set of potential topic labels candidate_labels = [ 'cooking' , 'dancing' , 'religion' ] classifier ( sequence_to_classify , candidate_labels ) #{'labels': ['cooking', 'dancing', 'religion'], # 'scores': [0.086, 0.063, 0.850], # 'sequence': 'god jesus atheists atheism belief atheist believe exist beliefs existence'}","title":"Optimize labels"},{"location":"getting_started/topicsovertime/topicsovertime.html","text":"Dynamic topic modeling (DTM) is a collection of techniques aimed at analyzing the evolution of topics over time. These methods allow you to understand how a topic is represented across different times. For example, in 1995 people may talk differently about environmental awareness than those in 2015. Although the topic itself remains the same, environmental awareness, the exact representation of that topic might differ. BERTopic allows for DTM by calculating the topic representation at each timestep without the need to run the entire model several times. To do this, we first need to fit BERTopic as if there were no temporal aspect in the data. Thus, a general topic model will be created. We use the global representation as to the main topics that can be found at, most likely, different timesteps. For each topic and timestep, we calculate the c-TF-IDF representation. This will result in a specific topic representation at each timestep without the need to create clusters from embeddings as they were already created. 1 Topic Timestep 1 m Timestep Timestep 1 Timestep m n Topic c-TF-IDF c-TF-IDF c-TF-IDF c-TF-IDF topic c-TF-IDF c-TF-IDF at t + 2 c-TF-IDF at t c-TF-IDF at t-1 + 2 Global Tuning Split documents by topic Split documents by topic and timestep Apply pre-fitted c-TF-IDF on each subset of documents. Tune the c-TF-IDF at each timestep t by either averaging the representations with the global representation or with the representation at t-1. Evolutionary Tuning Optional tuning of representations Next, there are two main ways to further fine-tune these specific topic representations, namely globally and evolutionary . A topic representation at timestep t can be fine-tuned globally by averaging its c-TF-IDF representation with that of the global representation. This allows each topic representation to move slightly towards the global representation whilst still keeping some of its specific words. A topic representation at timestep t can be fine-tuned evolutionary by averaging its c-TF-IDF representation with that of the c-TF-IDF representation at timestep t-1 . This is done for each topic representation allowing for the representations to evolve over time. Both fine-tuning methods are set to True as a default and allow for interesting representations to be created. Example \u00b6 To demonstrate DTM in BERTopic, we first need to prepare our data. A good example of where DTM is useful is topic modeling on Twitter data. We can analyze how certain people have talked about certain topics in the years they have been on Twitter. Due to the controversial nature of his tweets, we are going to be using all tweets by Donald Trump. First, we need to load the data and do some very basic cleaning. For example, I am not interested in his re-tweets for this use-case: import re import pandas as pd # Prepare data trump = pd . read_csv ( 'https://drive.google.com/uc?export=download&id=1xRKHaP-QwACMydlDnyFPEaFdtskJuBa6' ) trump . text = trump . apply ( lambda row : re . sub ( r \"http\\S+\" , \"\" , row . text ) . lower (), 1 ) trump . text = trump . apply ( lambda row : \" \" . join ( filter ( lambda x : x [ 0 ] != \"@\" , row . text . split ())), 1 ) trump . text = trump . apply ( lambda row : \" \" . join ( re . sub ( \"[^a-zA-Z]+\" , \" \" , row . text ) . split ()), 1 ) trump = trump . loc [( trump . isRetweet == \"f\" ) & ( trump . text != \"\" ), :] timestamps = trump . date . to_list () tweets = trump . text . to_list () Then, we need to extract the global topic representations by simply creating and training a BERTopic model: from bertopic import BERTopic topic_model = BERTopic ( verbose = True ) topics , probs = topic_model . fit_transform ( tweets ) From these topics, we are going to generate the topic representations at each timestamp for each topic. We do this by simply calling topics_over_time and passing the tweets, the corresponding timestamps, and the related topics: topics_over_time = topic_model . topics_over_time ( tweets , timestamps , nr_bins = 20 ) And that is it! Aside from what you always need for BERTopic, you now only need to add timestamps to quickly calculate the topics over time. Parameters \u00b6 There are a few parameters that are of interest which will be discussed below. Tuning \u00b6 Both global_tuning and evolutionary_tuning are set to True as a default, but can easily be changed. Perhaps you do not want the representations to be influenced by the global representation and merely see how they evolved over time: topics_over_time = topic_model . topics_over_time ( tweets , timestamps , global_tuning = True , evolution_tuning = True , nr_bins = 20 ) Bins \u00b6 If you have more than 100 unique timestamps, then there will be topic representations created for each of those timestamps which can negatively affect the topic representations. It is advised to keep the number of unique timestamps below 50. To do this, you can simply set the number of bins that are created when calculating the topic representations. The timestamps will be taken and put into equal-sized bins: topics_over_time = topic_model . topics_over_time ( tweets , timestamps , nr_bins = 20 ) Datetime format \u00b6 If you are passing strings (dates) instead of integers, then BERTopic will try to automatically detect which datetime format your strings have. Unfortunately, this will not always work if they are in an unexpected format. We can use datetime_format to pass the format the timestamps have: topics_over_time = topic_model . topics_over_time ( tweets , timestamps , datetime_format = \"%b%M\" , nr_bins = 20 ) Visualization \u00b6 To me, DTM becomes truly interesting when you have a good way of visualizing how topics have changed over time. A nice way of doing so is by leveraging the interactive abilities of Plotly. Plotly allows us to show the frequency of topics over time whilst giving the option of hovering over the points to show the time-specific topic representations. Simply call visualize_topics_over_time with the newly created topics over time: topic_model . visualize_topics_over_time ( topics_over_time , top_n_topics = 20 ) I used top_n_topics to only show the top 20 most frequent topics. If I were to visualize all topics, which is possible by leaving top_n_topics empty, there is a chance that hundreds of lines will fill the plot. You can also use topics to show specific topics: topic_model . visualize_topics_over_time ( topics_over_time , topics = [ 9 , 10 , 72 , 83 , 87 , 91 ])","title":"Dynamic Topic Modeling"},{"location":"getting_started/topicsovertime/topicsovertime.html#example","text":"To demonstrate DTM in BERTopic, we first need to prepare our data. A good example of where DTM is useful is topic modeling on Twitter data. We can analyze how certain people have talked about certain topics in the years they have been on Twitter. Due to the controversial nature of his tweets, we are going to be using all tweets by Donald Trump. First, we need to load the data and do some very basic cleaning. For example, I am not interested in his re-tweets for this use-case: import re import pandas as pd # Prepare data trump = pd . read_csv ( 'https://drive.google.com/uc?export=download&id=1xRKHaP-QwACMydlDnyFPEaFdtskJuBa6' ) trump . text = trump . apply ( lambda row : re . sub ( r \"http\\S+\" , \"\" , row . text ) . lower (), 1 ) trump . text = trump . apply ( lambda row : \" \" . join ( filter ( lambda x : x [ 0 ] != \"@\" , row . text . split ())), 1 ) trump . text = trump . apply ( lambda row : \" \" . join ( re . sub ( \"[^a-zA-Z]+\" , \" \" , row . text ) . split ()), 1 ) trump = trump . loc [( trump . isRetweet == \"f\" ) & ( trump . text != \"\" ), :] timestamps = trump . date . to_list () tweets = trump . text . to_list () Then, we need to extract the global topic representations by simply creating and training a BERTopic model: from bertopic import BERTopic topic_model = BERTopic ( verbose = True ) topics , probs = topic_model . fit_transform ( tweets ) From these topics, we are going to generate the topic representations at each timestamp for each topic. We do this by simply calling topics_over_time and passing the tweets, the corresponding timestamps, and the related topics: topics_over_time = topic_model . topics_over_time ( tweets , timestamps , nr_bins = 20 ) And that is it! Aside from what you always need for BERTopic, you now only need to add timestamps to quickly calculate the topics over time.","title":"Example"},{"location":"getting_started/topicsovertime/topicsovertime.html#parameters","text":"There are a few parameters that are of interest which will be discussed below.","title":"Parameters"},{"location":"getting_started/topicsovertime/topicsovertime.html#tuning","text":"Both global_tuning and evolutionary_tuning are set to True as a default, but can easily be changed. Perhaps you do not want the representations to be influenced by the global representation and merely see how they evolved over time: topics_over_time = topic_model . topics_over_time ( tweets , timestamps , global_tuning = True , evolution_tuning = True , nr_bins = 20 )","title":"Tuning"},{"location":"getting_started/topicsovertime/topicsovertime.html#bins","text":"If you have more than 100 unique timestamps, then there will be topic representations created for each of those timestamps which can negatively affect the topic representations. It is advised to keep the number of unique timestamps below 50. To do this, you can simply set the number of bins that are created when calculating the topic representations. The timestamps will be taken and put into equal-sized bins: topics_over_time = topic_model . topics_over_time ( tweets , timestamps , nr_bins = 20 )","title":"Bins"},{"location":"getting_started/topicsovertime/topicsovertime.html#datetime-format","text":"If you are passing strings (dates) instead of integers, then BERTopic will try to automatically detect which datetime format your strings have. Unfortunately, this will not always work if they are in an unexpected format. We can use datetime_format to pass the format the timestamps have: topics_over_time = topic_model . topics_over_time ( tweets , timestamps , datetime_format = \"%b%M\" , nr_bins = 20 )","title":"Datetime format"},{"location":"getting_started/topicsovertime/topicsovertime.html#visualization","text":"To me, DTM becomes truly interesting when you have a good way of visualizing how topics have changed over time. A nice way of doing so is by leveraging the interactive abilities of Plotly. Plotly allows us to show the frequency of topics over time whilst giving the option of hovering over the points to show the time-specific topic representations. Simply call visualize_topics_over_time with the newly created topics over time: topic_model . visualize_topics_over_time ( topics_over_time , top_n_topics = 20 ) I used top_n_topics to only show the top 20 most frequent topics. If I were to visualize all topics, which is possible by leaving top_n_topics empty, there is a chance that hundreds of lines will fill the plot. You can also use topics to show specific topics: topic_model . visualize_topics_over_time ( topics_over_time , topics = [ 9 , 10 , 72 , 83 , 87 , 91 ])","title":"Visualization"},{"location":"getting_started/topicsperclass/topicsperclass.html","text":"In some cases, you might be interested in how certain topics are represented over certain categories. Perhaps there are specific groups of users for which you want to see how they talk about certain topics. Instead of running the topic model per class, we can simply create a topic model and then extract, for each topic, its representation per class. This allows you to see how certain topics, calculated over all documents, are represented for certain subgroups. 1 Topic 1 Class m Class 1 Class m Class n Topic c-TF-IDF c-TF-IDF c-TF-IDF c-TF-IDF Split documents by topic Split documents by topic and class Apply pre-fitted c-TF-IDF on each subset of documents. To do so, we use the 20 Newsgroups dataset to see how the topics that we uncover are represented in the 20 categories of documents. First, let's prepare the data: from bertopic import BERTopic from sklearn.datasets import fetch_20newsgroups data = fetch_20newsgroups ( subset = 'all' , remove = ( 'headers' , 'footers' , 'quotes' )) docs = data [ \"data\" ] targets = data [ \"target\" ] target_names = data [ \"target_names\" ] classes = [ data [ \"target_names\" ][ i ] for i in data [ \"target\" ]] Next, we want to extract the topics across all documents without taking the categories into account: topic_model = BERTopic ( verbose = True ) topics , probs = topic_model . fit_transform ( docs ) Now that we have created our global topic model, let us calculate the topic representations across each category: topics_per_class = topic_model . topics_per_class ( docs , classes = classes ) The classes variable contains the class for each document. Then, we simply visualize these topics per class: topic_model . visualize_topics_per_class ( topics_per_class , top_n_topics = 10 ) You can hover over the bars to see the topic representation per class. As you can see in the visualization above, the topics 93_homosexual_homosexuality_sex and 58_bike_bikes_motorcycle are somewhat distributed over all classes. You can see that the topic representation between rec.motorcycles and rec.autos in 58_bike_bikes_motorcycle clearly differs from one another. It seems that BERTopic has tried to combine those two categories into a single topic. However, since they do contain two separate topics, the topic representation in those two categories differs. We see something similar for 93_homosexual_homosexuality_sex , where the topic is distributed among several categories and is represented slightly differently. Thus, you can see that although in certain categories the topic is similar, the way the topic is represented can differ.","title":"Topics per Class"},{"location":"getting_started/vectorizers/vectorizers.html","text":"In topic modeling, the quality of the topic representations is key for interpreting the topics, communicating results, and understanding patterns. It is of utmost importance to make sure that the topic representations fit with your use case. In practice, there is not one correct way of creating topic representations. Some use cases might opt for higher n-grams, whereas others might focus more on single words without any stop words. The diversity in use cases also means that we need to have some flexibility in BERTopic to make sure it can be used across most use cases. The image below illustrates this modularity: In this section, we will go through several examples of vectorization algorithms and how they can be implemented. CountVectorizer \u00b6 One often underestimated component of BERTopic is the CountVectorizer and c-TF-IDF calculation. Together, they are responsible for creating the topic representations and luckily can be quite flexible in parameter tuning. Here, we will go through tips and tricks for tuning your CountVectorizer and see how they might affect the topic representations. Before starting, it should be noted that you can pass the CountVectorizer before and after training your topic model. Passing it before training allows you to minimize the size of the resulting c-TF-IDF matrix: from bertopic import BERTopic from sklearn.feature_extraction.text import CountVectorizer # Train BERTopic with a custom CountVectorizer vectorizer_model = CountVectorizer ( min_df = 10 ) topic_model = BERTopic ( vectorizer_model = vectorizer_model ) topics , probs = topic_model . fit_transform ( docs ) Passing it after training allows you to fine-tune the topic representations by using .update_topics() : from bertopic import BERTopic from sklearn.feature_extraction.text import CountVectorizer # Train a BERTopic model topic_model = BERTopic () topics , probs = topic_model . fit_transform ( docs ) # Fine-tune topic representations after training BERTopic vectorizer_model = CountVectorizer ( stop_words = \"english\" , ngram_range = ( 1 , 3 ), min_df = 10 ) topic_model . update_topics ( docs , vectorizer_model = vectorizer_model ) The great thing about using .update_topics() is that it allows you to tweak the topic representations without re-training your model! Thus, here we will be focusing on fine-tuning our topic representations after training our model. Note The great thing about processing our topic representations with the CountVectorizer is that it does not influence the quality of clusters as that is being performed before generating the topic representations. Basic Usage \u00b6 First, let's start with defining our documents and training our topic model: from bertopic import BERTopic from sklearn.datasets import fetch_20newsgroups # Prepare documents docs = fetch_20newsgroups ( subset = 'all' , remove = ( 'headers' , 'footers' , 'quotes' ))[ 'data' ] # Train a BERTopic model topic_model = BERTopic () topics , probs = topic_model . fit_transform ( docs ) Now, let's see the top 10 most frequent topics that have been generated: >>> topic_model . get_topic_info ()[ 1 : 11 ] Topic Count Name 1 0 1822 0 _game_team_games_he 2 1 580 1 _key_clipper_chip_encryption 3 2 532 2 _ites_hello_cheek_hi 4 3 493 3 _israel_israeli_jews_arab 5 4 453 4 _card_monitor_video_drivers 6 5 438 5 _you_your_post_jim 7 6 314 6 _car_cars_engine_ford 8 7 279 7 _health_newsgroup_cancer_1993 9 8 218 8 _fbi_koresh_fire_gas 10 9 174 9 _amp_audio_condition_asking The topic representations generated already seem quite interpretable! However, I am quite sure we do much better without having to re-train our model. Next, we will go through common parameters in CountVectorizer and focus on the effects that they might have. As a baseline, we will be comparing them to the topic representation above. Parameters \u00b6 There are several basic parameters in the CountVectorizer that we can use to improve upon the quality of the resulting topic representations. ngram_range \u00b6 The ngram_range parameter allows us to decide how many tokens each entity is in a topic representation. For example, we have words like game and team with a length of 1 in a topic but it would also make sense to have words like hockey league with a length of 2. To allow for these words to be generated, we can set the ngram_range parameter: from sklearn.feature_extraction.text import CountVectorizer vectorizer_model = CountVectorizer ( ngram_range = ( 1 , 3 ), stop_words = \"english\" ) topic_model . update_topics ( docs , vectorizer_model = vectorizer_model ) As you might have noticed, I also added stop_words=\"english\" . This is necessary as longer words tend to have many stop words and removing them allows for nicer topic representations: >>> topic_model . get_topic_info ()[ 1 : 11 ] Topic Count Name 1 0 1822 0 _game_team_games_players 2 1 580 1 _key_clipper_chip_encryption 3 2 532 2 _hello ites_forget hello_ites 15 _huh hi 4 3 493 3 _israel_israeli_jews_arab 5 4 453 4 _card_monitor_video_drivers 6 5 438 5 _post_jim_context_forged 7 6 314 6 _car_cars_engine_ford 8 7 279 7 _health_newsgroup_cancer_1993 9 8 218 8 _fbi_koresh_gas_compound 10 9 174 9 _amp_audio_condition_asking Although they look very similar, if we zoom in on topic 8, we can see longer words in our representation: >>> topic_model . get_topic ( 8 ) [( 'fbi' , 0.019637149205975653 ), ( 'koresh' , 0.019054514637064403 ), ( 'gas' , 0.014156057632897179 ), ( 'compound' , 0.012381224868591681 ), ( 'batf' , 0.010349992314076047 ), ( 'children' , 0.009336408916322387 ), ( 'tear gas' , 0.008941747802855279 ), ( 'tear' , 0.008446786597564537 ), ( 'davidians' , 0.007911119583253022 ), ( 'started' , 0.007398687505638955 )] tear and gas have now been combined into a single representation. This helps us understand what those individual words might have been representing. stop_words \u00b6 In some of the topics, we can see stop words appearing like he or the . Stop words are something we typically want to prevent in our topic representations as they do not give additional information to the topic. To prevent those stop words, we can use the stop_words parameter in the CountVectorizer to remove them from the representations: from sklearn.feature_extraction.text import CountVectorizer vectorizer_model = CountVectorizer ( stop_words = \"english\" ) topic_model . update_topics ( docs , vectorizer_model = vectorizer_model ) After running the above, we get the following output: >>> topic_model . get_topic_info ()[ 1 : 11 ] Topic Count Name 1 0 1822 0 _game_team_games_players 2 1 580 1 _key_clipper_chip_encryption 3 2 532 2 _ites_cheek_hello_hi 4 3 493 3 _israel_israeli_jews_arab 5 4 453 4 _monitor_card_video_vga 6 5 438 5 _post_jim_context_forged 7 6 314 6 _car_cars_engine_ford 8 7 279 7 _health_newsgroup_cancer_tobacco 9 8 218 8 _fbi_koresh_gas_compound 10 9 174 9 _amp_audio_condition_stereo As you can see, the topic representations already look much better! Stop words are removed and the representations are more interpretable. We can also pass in a list of stop words if you have multiple languages to take into account. min_df \u00b6 One important parameter to keep in mind is the min_df . This is typically an integer representing how frequent a word must be before being added to our representation. You can imagine that if we have a million documents and a certain word only appears a single time across all of them, then it would be highly unlikely to be representative of a topic. Typically, the c-TF-IDF calculation removes that word from the topic representation but when you have millions of documents, that will also lead to a very large topic-term matrix. To prevent a huge vocabulary, we can set the min_df to only accept words that have a minimum frequency. When you have millions of documents or error issues, I would advise increasing the value of min_df as long as the topic representations might sense: from sklearn.feature_extraction.text import CountVectorizer vectorizer_model = CountVectorizer ( min_df = 10 ) topic_model . update_topics ( docs , vectorizer_model = vectorizer_model ) With the following topic representation: >>> topic_model . get_topic_info ()[ 1 : 11 ] Topic Count Name 1 0 1822 0 _game_team_games_he 2 1 580 1 _key_clipper_chip_encryption 3 2 532 2 _hello_hi_yep_huh 4 3 493 3 _israel_jews_jewish_peace 5 4 453 4 _card_monitor_video_drivers 6 5 438 5 _you_your_post_jim 7 6 314 6 _car_cars_engine_ford 8 7 279 7 _health_newsgroup_cancer_1993 9 8 218 8 _fbi_koresh_fire_gas 10 9 174 9 _audio_condition_stereo_asking As you can see, the output is nearly the same which is what we would like to achieve. All words that appear less than 10 times are now removed from our topic-term matrix (i.e., c-TF-IDF matrix) which drastically lowers the matrix in size. max_features \u00b6 A parameter similar to min_df is max_features which allows you to select the top n most frequent words to be used in the topic representation. Setting this, for example, to 10_000 creates a topic-term matrix with 10_000 terms. This helps you control the size of the topic-term matrix directly without having to fiddle around with the min_df parameter: from sklearn.feature_extraction.text import CountVectorizer vectorizer_model = CountVectorizer ( max_features = 10_000 ) topic_model . update_topics ( docs , vectorizer_model = vectorizer_model ) With the following representation: >>> topic_model . get_topic_info ()[ 1 : 11 ] Topic Count Name 1 0 1822 0 _game_team_games_he 2 1 580 1 _key_clipper_chip_encryption 3 2 532 2 _hello_hi_yep_huh 4 3 493 3 _israel_israeli_jews_arab 5 4 453 4 _card_monitor_video_drivers 6 5 438 5 _you_your_post_jim 7 6 314 6 _car_cars_engine_ford 8 7 279 7 _health_newsgroup_cancer_1993 9 8 218 8 _fbi_koresh_fire_gas 10 9 174 9 _amp_audio_condition_asking As with min_df , we would like the topic representations to be very similar. tokenizer \u00b6 The default tokenizer in the CountVectorizer works well for western languages but fails to tokenize some non-western languages, like Chinese. Fortunately, we can use the tokenizer variable in the CountVectorizer to use jieba , which is a package for Chinese text segmentation. Using it is straightforward: from sklearn.feature_extraction.text import CountVectorizer import jieba def tokenize_zh ( text ): words = jieba . lcut ( text ) return words vectorizer = CountVectorizer ( tokenizer = tokenize_zh ) Then, we can simply pass the vectorizer to update our topic representations: topic_model . update_topics ( docs , vectorizer_model = vectorizer_model ) OnlineCountVectorizer \u00b6 When using the online/incremental variant of BERTopic, we need a CountVectorizer than can incrementally update its representation. For that purpose, OnlineCountVectorizer was created that not only updates out-of-vocabulary words but also implements decay and cleaning functions to prevent the sparse bag-of-words matrix to become too large. It is a class that can be found in bertopic.vectorizers which extends sklearn.feature_extraction.text.CountVectorizer . In other words, you can use the exact same parameter in OnlineCountVectorizer as found in Scikit-Learn's CountVectorizer . We can use it as follows: from bertopic import BERTopic from bertopic.vectorizers import OnlineCountVectorizer # Train BERTopic with a custom OnlineCountVectorizer vectorizer_model = OnlineCountVectorizer () topic_model = BERTopic ( vectorizer_model = vectorizer_model ) Parameters \u00b6 Other than parameters found in CountVectorizer , such as stop_words and ngram_range , we can two parameters in OnlineCountVectorizer to adjust the way old data is processed and kept. decay \u00b6 At each iteration, we sum the bag-of-words representation of the new documents with the bag-of-words representation of all documents processed thus far. In other words, the bag-of-words matrix keeps increasing with each iteration. However, especially in a streaming setting, older documents might become less and less relevant as time goes on. Therefore, a decay parameter was implemented that decays the bag-of-words' frequencies at each iteration before adding the document frequencies of new documents. The decay parameter is a value between 0 and 1 and indicates the percentage of frequencies the previous bag-of-words matrix should be reduced to. For example, a value of .1 will decrease the frequencies in the bag-of-words matrix by 10% at each iteration before adding the new bag-of-words matrix. This will make sure that recent data has more weight than previous iterations. delete_min_df \u00b6 In BERTopic, we might want to remove words from the topic representation that appear infrequently. The min_df in the CountVectorizer works quite well for that. However, when we have a streaming setting, the min_df does not work as well since a word's frequency might start below min_df but will end up higher than that over time. Setting that value high might not always be advised. As a result, the vocabulary of the resulting bag-of-words matrix can become quite large. Similarly, if we implement the decay parameter, then some values will decrease over time until they are below min_df . For these reasons, the delete_min_df parameter was implemented. The parameter takes positive integers and indicates, at each iteration, which words will be removed. If the value is set to 5, it will check after each iteration if the total frequency of a word is exceeded by that value. If so, the word will be removed in its entirety from the bag-of-words matrix. This helps to keep the bag-of-words matrix of a manageable size. Note Although the delete_min_df parameter removes words from the bag-of-words matrix, it is not permanent. If new documents come in where those previously deleted words are used frequently, they get added back to the matrix.","title":"Vectorizers"},{"location":"getting_started/vectorizers/vectorizers.html#countvectorizer","text":"One often underestimated component of BERTopic is the CountVectorizer and c-TF-IDF calculation. Together, they are responsible for creating the topic representations and luckily can be quite flexible in parameter tuning. Here, we will go through tips and tricks for tuning your CountVectorizer and see how they might affect the topic representations. Before starting, it should be noted that you can pass the CountVectorizer before and after training your topic model. Passing it before training allows you to minimize the size of the resulting c-TF-IDF matrix: from bertopic import BERTopic from sklearn.feature_extraction.text import CountVectorizer # Train BERTopic with a custom CountVectorizer vectorizer_model = CountVectorizer ( min_df = 10 ) topic_model = BERTopic ( vectorizer_model = vectorizer_model ) topics , probs = topic_model . fit_transform ( docs ) Passing it after training allows you to fine-tune the topic representations by using .update_topics() : from bertopic import BERTopic from sklearn.feature_extraction.text import CountVectorizer # Train a BERTopic model topic_model = BERTopic () topics , probs = topic_model . fit_transform ( docs ) # Fine-tune topic representations after training BERTopic vectorizer_model = CountVectorizer ( stop_words = \"english\" , ngram_range = ( 1 , 3 ), min_df = 10 ) topic_model . update_topics ( docs , vectorizer_model = vectorizer_model ) The great thing about using .update_topics() is that it allows you to tweak the topic representations without re-training your model! Thus, here we will be focusing on fine-tuning our topic representations after training our model. Note The great thing about processing our topic representations with the CountVectorizer is that it does not influence the quality of clusters as that is being performed before generating the topic representations.","title":"CountVectorizer"},{"location":"getting_started/vectorizers/vectorizers.html#basic-usage","text":"First, let's start with defining our documents and training our topic model: from bertopic import BERTopic from sklearn.datasets import fetch_20newsgroups # Prepare documents docs = fetch_20newsgroups ( subset = 'all' , remove = ( 'headers' , 'footers' , 'quotes' ))[ 'data' ] # Train a BERTopic model topic_model = BERTopic () topics , probs = topic_model . fit_transform ( docs ) Now, let's see the top 10 most frequent topics that have been generated: >>> topic_model . get_topic_info ()[ 1 : 11 ] Topic Count Name 1 0 1822 0 _game_team_games_he 2 1 580 1 _key_clipper_chip_encryption 3 2 532 2 _ites_hello_cheek_hi 4 3 493 3 _israel_israeli_jews_arab 5 4 453 4 _card_monitor_video_drivers 6 5 438 5 _you_your_post_jim 7 6 314 6 _car_cars_engine_ford 8 7 279 7 _health_newsgroup_cancer_1993 9 8 218 8 _fbi_koresh_fire_gas 10 9 174 9 _amp_audio_condition_asking The topic representations generated already seem quite interpretable! However, I am quite sure we do much better without having to re-train our model. Next, we will go through common parameters in CountVectorizer and focus on the effects that they might have. As a baseline, we will be comparing them to the topic representation above.","title":"Basic Usage"},{"location":"getting_started/vectorizers/vectorizers.html#parameters","text":"There are several basic parameters in the CountVectorizer that we can use to improve upon the quality of the resulting topic representations.","title":"Parameters"},{"location":"getting_started/vectorizers/vectorizers.html#ngram_range","text":"The ngram_range parameter allows us to decide how many tokens each entity is in a topic representation. For example, we have words like game and team with a length of 1 in a topic but it would also make sense to have words like hockey league with a length of 2. To allow for these words to be generated, we can set the ngram_range parameter: from sklearn.feature_extraction.text import CountVectorizer vectorizer_model = CountVectorizer ( ngram_range = ( 1 , 3 ), stop_words = \"english\" ) topic_model . update_topics ( docs , vectorizer_model = vectorizer_model ) As you might have noticed, I also added stop_words=\"english\" . This is necessary as longer words tend to have many stop words and removing them allows for nicer topic representations: >>> topic_model . get_topic_info ()[ 1 : 11 ] Topic Count Name 1 0 1822 0 _game_team_games_players 2 1 580 1 _key_clipper_chip_encryption 3 2 532 2 _hello ites_forget hello_ites 15 _huh hi 4 3 493 3 _israel_israeli_jews_arab 5 4 453 4 _card_monitor_video_drivers 6 5 438 5 _post_jim_context_forged 7 6 314 6 _car_cars_engine_ford 8 7 279 7 _health_newsgroup_cancer_1993 9 8 218 8 _fbi_koresh_gas_compound 10 9 174 9 _amp_audio_condition_asking Although they look very similar, if we zoom in on topic 8, we can see longer words in our representation: >>> topic_model . get_topic ( 8 ) [( 'fbi' , 0.019637149205975653 ), ( 'koresh' , 0.019054514637064403 ), ( 'gas' , 0.014156057632897179 ), ( 'compound' , 0.012381224868591681 ), ( 'batf' , 0.010349992314076047 ), ( 'children' , 0.009336408916322387 ), ( 'tear gas' , 0.008941747802855279 ), ( 'tear' , 0.008446786597564537 ), ( 'davidians' , 0.007911119583253022 ), ( 'started' , 0.007398687505638955 )] tear and gas have now been combined into a single representation. This helps us understand what those individual words might have been representing.","title":"ngram_range"},{"location":"getting_started/vectorizers/vectorizers.html#stop_words","text":"In some of the topics, we can see stop words appearing like he or the . Stop words are something we typically want to prevent in our topic representations as they do not give additional information to the topic. To prevent those stop words, we can use the stop_words parameter in the CountVectorizer to remove them from the representations: from sklearn.feature_extraction.text import CountVectorizer vectorizer_model = CountVectorizer ( stop_words = \"english\" ) topic_model . update_topics ( docs , vectorizer_model = vectorizer_model ) After running the above, we get the following output: >>> topic_model . get_topic_info ()[ 1 : 11 ] Topic Count Name 1 0 1822 0 _game_team_games_players 2 1 580 1 _key_clipper_chip_encryption 3 2 532 2 _ites_cheek_hello_hi 4 3 493 3 _israel_israeli_jews_arab 5 4 453 4 _monitor_card_video_vga 6 5 438 5 _post_jim_context_forged 7 6 314 6 _car_cars_engine_ford 8 7 279 7 _health_newsgroup_cancer_tobacco 9 8 218 8 _fbi_koresh_gas_compound 10 9 174 9 _amp_audio_condition_stereo As you can see, the topic representations already look much better! Stop words are removed and the representations are more interpretable. We can also pass in a list of stop words if you have multiple languages to take into account.","title":"stop_words"},{"location":"getting_started/vectorizers/vectorizers.html#min_df","text":"One important parameter to keep in mind is the min_df . This is typically an integer representing how frequent a word must be before being added to our representation. You can imagine that if we have a million documents and a certain word only appears a single time across all of them, then it would be highly unlikely to be representative of a topic. Typically, the c-TF-IDF calculation removes that word from the topic representation but when you have millions of documents, that will also lead to a very large topic-term matrix. To prevent a huge vocabulary, we can set the min_df to only accept words that have a minimum frequency. When you have millions of documents or error issues, I would advise increasing the value of min_df as long as the topic representations might sense: from sklearn.feature_extraction.text import CountVectorizer vectorizer_model = CountVectorizer ( min_df = 10 ) topic_model . update_topics ( docs , vectorizer_model = vectorizer_model ) With the following topic representation: >>> topic_model . get_topic_info ()[ 1 : 11 ] Topic Count Name 1 0 1822 0 _game_team_games_he 2 1 580 1 _key_clipper_chip_encryption 3 2 532 2 _hello_hi_yep_huh 4 3 493 3 _israel_jews_jewish_peace 5 4 453 4 _card_monitor_video_drivers 6 5 438 5 _you_your_post_jim 7 6 314 6 _car_cars_engine_ford 8 7 279 7 _health_newsgroup_cancer_1993 9 8 218 8 _fbi_koresh_fire_gas 10 9 174 9 _audio_condition_stereo_asking As you can see, the output is nearly the same which is what we would like to achieve. All words that appear less than 10 times are now removed from our topic-term matrix (i.e., c-TF-IDF matrix) which drastically lowers the matrix in size.","title":"min_df"},{"location":"getting_started/vectorizers/vectorizers.html#max_features","text":"A parameter similar to min_df is max_features which allows you to select the top n most frequent words to be used in the topic representation. Setting this, for example, to 10_000 creates a topic-term matrix with 10_000 terms. This helps you control the size of the topic-term matrix directly without having to fiddle around with the min_df parameter: from sklearn.feature_extraction.text import CountVectorizer vectorizer_model = CountVectorizer ( max_features = 10_000 ) topic_model . update_topics ( docs , vectorizer_model = vectorizer_model ) With the following representation: >>> topic_model . get_topic_info ()[ 1 : 11 ] Topic Count Name 1 0 1822 0 _game_team_games_he 2 1 580 1 _key_clipper_chip_encryption 3 2 532 2 _hello_hi_yep_huh 4 3 493 3 _israel_israeli_jews_arab 5 4 453 4 _card_monitor_video_drivers 6 5 438 5 _you_your_post_jim 7 6 314 6 _car_cars_engine_ford 8 7 279 7 _health_newsgroup_cancer_1993 9 8 218 8 _fbi_koresh_fire_gas 10 9 174 9 _amp_audio_condition_asking As with min_df , we would like the topic representations to be very similar.","title":"max_features"},{"location":"getting_started/vectorizers/vectorizers.html#tokenizer","text":"The default tokenizer in the CountVectorizer works well for western languages but fails to tokenize some non-western languages, like Chinese. Fortunately, we can use the tokenizer variable in the CountVectorizer to use jieba , which is a package for Chinese text segmentation. Using it is straightforward: from sklearn.feature_extraction.text import CountVectorizer import jieba def tokenize_zh ( text ): words = jieba . lcut ( text ) return words vectorizer = CountVectorizer ( tokenizer = tokenize_zh ) Then, we can simply pass the vectorizer to update our topic representations: topic_model . update_topics ( docs , vectorizer_model = vectorizer_model )","title":"tokenizer"},{"location":"getting_started/vectorizers/vectorizers.html#onlinecountvectorizer","text":"When using the online/incremental variant of BERTopic, we need a CountVectorizer than can incrementally update its representation. For that purpose, OnlineCountVectorizer was created that not only updates out-of-vocabulary words but also implements decay and cleaning functions to prevent the sparse bag-of-words matrix to become too large. It is a class that can be found in bertopic.vectorizers which extends sklearn.feature_extraction.text.CountVectorizer . In other words, you can use the exact same parameter in OnlineCountVectorizer as found in Scikit-Learn's CountVectorizer . We can use it as follows: from bertopic import BERTopic from bertopic.vectorizers import OnlineCountVectorizer # Train BERTopic with a custom OnlineCountVectorizer vectorizer_model = OnlineCountVectorizer () topic_model = BERTopic ( vectorizer_model = vectorizer_model )","title":"OnlineCountVectorizer"},{"location":"getting_started/vectorizers/vectorizers.html#parameters_1","text":"Other than parameters found in CountVectorizer , such as stop_words and ngram_range , we can two parameters in OnlineCountVectorizer to adjust the way old data is processed and kept.","title":"Parameters"},{"location":"getting_started/vectorizers/vectorizers.html#decay","text":"At each iteration, we sum the bag-of-words representation of the new documents with the bag-of-words representation of all documents processed thus far. In other words, the bag-of-words matrix keeps increasing with each iteration. However, especially in a streaming setting, older documents might become less and less relevant as time goes on. Therefore, a decay parameter was implemented that decays the bag-of-words' frequencies at each iteration before adding the document frequencies of new documents. The decay parameter is a value between 0 and 1 and indicates the percentage of frequencies the previous bag-of-words matrix should be reduced to. For example, a value of .1 will decrease the frequencies in the bag-of-words matrix by 10% at each iteration before adding the new bag-of-words matrix. This will make sure that recent data has more weight than previous iterations.","title":"decay"},{"location":"getting_started/vectorizers/vectorizers.html#delete_min_df","text":"In BERTopic, we might want to remove words from the topic representation that appear infrequently. The min_df in the CountVectorizer works quite well for that. However, when we have a streaming setting, the min_df does not work as well since a word's frequency might start below min_df but will end up higher than that over time. Setting that value high might not always be advised. As a result, the vocabulary of the resulting bag-of-words matrix can become quite large. Similarly, if we implement the decay parameter, then some values will decrease over time until they are below min_df . For these reasons, the delete_min_df parameter was implemented. The parameter takes positive integers and indicates, at each iteration, which words will be removed. If the value is set to 5, it will check after each iteration if the total frequency of a word is exceeded by that value. If so, the word will be removed in its entirety from the bag-of-words matrix. This helps to keep the bag-of-words matrix of a manageable size. Note Although the delete_min_df parameter removes words from the bag-of-words matrix, it is not permanent. If new documents come in where those previously deleted words are used frequently, they get added back to the matrix.","title":"delete_min_df"},{"location":"getting_started/visualization/visualization.html","text":"Visualizing BERTopic and its derivatives is important in understanding the model, how it works, and more importantly, where it works. Since topic modeling can be quite a subjective field it is difficult for users to validate their models. Looking at the topics and seeing if they make sense is an important factor in alleviating this issue. Visualize Topics \u00b6 After having trained our BERTopic model, we can iteratively go through hundreds of topics to get a good understanding of the topics that were extracted. However, that takes quite some time and lacks a global representation. Instead, we can visualize the topics that were generated in a way very similar to LDAvis . We embed our c-TF-IDF representation of the topics in 2D using Umap and then visualize the two dimensions using plotly such that we can create an interactive view. First, we need to train our model: from bertopic import BERTopic from sklearn.datasets import fetch_20newsgroups docs = fetch_20newsgroups ( subset = 'all' , remove = ( 'headers' , 'footers' , 'quotes' ))[ 'data' ] topic_model = BERTopic () topics , probs = topic_model . fit_transform ( docs ) Then, we can call .visualize_topics to create a 2D representation of your topics. The resulting graph is a plotly interactive graph which can be converted to HTML: topic_model . visualize_topics () You can use the slider to select the topic which then lights up red. If you hover over a topic, then general information is given about the topic, including the size of the topic and its corresponding words. Visualize Documents \u00b6 Using the previous method, we can visualize the topics and get insight into their relationships. However, you might want a more fine-grained approach where we can visualize the documents inside the topics to see if they were assigned correctly or whether they make sense. To do so, we can use the topic_model.visualize_documents() function. This function recalculates the document embeddings and reduces them to 2-dimensional space for easier visualization purposes. This process can be quite expensive, so it is advised to adhere to the following pipeline: from sklearn.datasets import fetch_20newsgroups from sentence_transformers import SentenceTransformer from bertopic import BERTopic from umap import UMAP # Prepare embeddings docs = fetch_20newsgroups ( subset = 'all' , remove = ( 'headers' , 'footers' , 'quotes' ))[ 'data' ] sentence_model = SentenceTransformer ( \"all-MiniLM-L6-v2\" ) embeddings = sentence_model . encode ( docs , show_progress_bar = False ) # Train BERTopic topic_model = BERTopic () . fit ( docs , embeddings ) # Run the visualization with the original embeddings topic_model . visualize_documents ( docs , embeddings = embeddings ) # Reduce dimensionality of embeddings, this step is optional but much faster to perform iteratively: reduced_embeddings = UMAP ( n_neighbors = 10 , n_components = 2 , min_dist = 0.0 , metric = 'cosine' ) . fit_transform ( embeddings ) topic_model . visualize_documents ( docs , reduced_embeddings = reduced_embeddings ) Note The visualization above was generated with the additional parameter hide_document_hover=True which disables the option to hover over the individual points and see the content of the documents. This was done for demonstration purposes as saving all those documents in the visualization can be quite expensive and result in large files. However, it might be interesting to set hide_document_hover=False in order to hover over the points and see the content of the documents. Custom Hover \u00b6 When you visualize the documents, you might not always want to see the complete document over hover. Many documents have shorter information that might be more interesting to visualize, such as its title. To create the hover based on a documents' title instead of its content, you can simply pass a variable ( titles ) containing the title for each document: topic_model . visualize_documents ( titles , reduced_embeddings = reduced_embeddings ) Visualize Topic Hierarchy \u00b6 The topics that were created can be hierarchically reduced. In order to understand the potential hierarchical structure of the topics, we can use scipy.cluster.hierarchy to create clusters and visualize how they relate to one another. This might help to select an appropriate nr_topics when reducing the number of topics that you have created. To visualize this hierarchy, run the following: topic_model . visualize_hierarchy () Note Do note that this is not the actual procedure of .reduce_topics() when nr_topics is set to auto since HDBSCAN is used to automatically extract topics. The visualization above closely resembles the actual procedure of .reduce_topics() when any number of nr_topics is selected. Hierarchical labels \u00b6 Although visualizing this hierarchy gives us information about the structure, it would be helpful to see what happens to the topic representations when merging topics. To do so, we first need to calculate the representations of the hierarchical topics: First, we train a basic BERTopic model: from bertopic import BERTopic from sklearn.datasets import fetch_20newsgroups docs = fetch_20newsgroups ( subset = 'all' , remove = ( 'headers' , 'footers' , 'quotes' ))[ \"data\" ] topic_model = BERTopic ( verbose = True ) topics , probs = topic_model . fit_transform ( docs ) hierarchical_topics = topic_model . hierarchical_topics ( docs ) To visualize these results, we simply need to pass the resulting hierarchical_topics to our .visualize_hierarchy function: topic_model . visualize_hierarchy ( hierarchical_topics = hierarchical_topics ) If you hover over the black circles, you will see the topic representation at that level of the hierarchy. These representations help you understand the effect of merging certain topics. Some might be logical to merge whilst others might not. Moreover, we can now see which sub-topics can be found within certain larger themes. Text-based topic tree \u00b6 Although this gives a nice overview of the potential hierarchy, hovering over all black circles can be tiresome. Instead, we can use topic_model.get_topic_tree to create a text-based representation of this hierarchy. Although the general structure is more difficult to view, we can see better which topics could be logically merged: >>> tree = topic_model . get_topic_tree ( hierarchical_topics ) >>> print ( tree ) . \u2514\u2500 atheists_atheism_god_moral_atheist \u251c\u2500 atheists_atheism_god_atheist_argument \u2502 \u251c\u2500\u25a0\u2500\u2500 atheists_atheism_god_atheist_argument \u2500\u2500 Topic : 21 \u2502 \u2514\u2500\u25a0\u2500\u2500 br_god_exist_genetic_existence \u2500\u2500 Topic : 124 \u2514\u2500\u25a0\u2500\u2500 moral_morality_objective_immoral_morals \u2500\u2500 Topic : 29 Click here to view the full tree. . \u251c\u2500people_armenian_said_god_armenians \u2502 \u251c\u2500god_jesus_jehovah_lord_christ \u2502 \u2502 \u251c\u2500god_jesus_jehovah_lord_christ \u2502 \u2502 \u2502 \u251c\u2500jehovah_lord_mormon_mcconkie_god \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500ra_satan_thou_god_lucifer \u2500\u2500 Topic: 94 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500jehovah_lord_mormon_mcconkie_unto \u2500\u2500 Topic: 78 \u2502 \u2502 \u2502 \u2514\u2500jesus_mary_god_hell_sin \u2502 \u2502 \u2502 \u251c\u2500jesus_hell_god_eternal_heaven \u2502 \u2502 \u2502 \u2502 \u251c\u2500hell_jesus_eternal_god_heaven \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500jesus_tomb_disciples_resurrection_john \u2500\u2500 Topic: 69 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500hell_eternal_god_jesus_heaven \u2500\u2500 Topic: 53 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500aaron_baptism_sin_law_god \u2500\u2500 Topic: 89 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500mary_sin_maria_priest_conception \u2500\u2500 Topic: 56 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500marriage_married_marry_ceremony_marriages \u2500\u2500 Topic: 110 \u2502 \u2514\u2500people_armenian_armenians_said_mr \u2502 \u251c\u2500people_armenian_armenians_said_israel \u2502 \u2502 \u251c\u2500god_homosexual_homosexuality_atheists_sex \u2502 \u2502 \u2502 \u251c\u2500homosexual_homosexuality_sex_gay_homosexuals \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500kinsey_sex_gay_men_sexual \u2500\u2500 Topic: 44 \u2502 \u2502 \u2502 \u2502 \u2514\u2500homosexuality_homosexual_sin_homosexuals_gay \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500gay_homosexual_homosexuals_sexual_cramer \u2500\u2500 Topic: 50 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500homosexuality_homosexual_sin_paul_sex \u2500\u2500 Topic: 27 \u2502 \u2502 \u2502 \u2514\u2500god_atheists_atheism_moral_atheist \u2502 \u2502 \u2502 \u251c\u2500islam_quran_judas_islamic_book \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500jim_context_challenges_articles_quote \u2500\u2500 Topic: 36 \u2502 \u2502 \u2502 \u2502 \u2514\u2500islam_quran_judas_islamic_book \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500islam_quran_islamic_rushdie_muslims \u2500\u2500 Topic: 31 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500judas_scripture_bible_books_greek \u2500\u2500 Topic: 33 \u2502 \u2502 \u2502 \u2514\u2500atheists_atheism_god_moral_atheist \u2502 \u2502 \u2502 \u251c\u2500atheists_atheism_god_atheist_argument \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500atheists_atheism_god_atheist_argument \u2500\u2500 Topic: 21 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500br_god_exist_genetic_existence \u2500\u2500 Topic: 124 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500moral_morality_objective_immoral_morals \u2500\u2500 Topic: 29 \u2502 \u2502 \u2514\u2500armenian_armenians_people_israel_said \u2502 \u2502 \u251c\u2500armenian_armenians_israel_people_jews \u2502 \u2502 \u2502 \u251c\u2500tax_rights_government_income_taxes \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500rights_right_slavery_slaves_residence \u2500\u2500 Topic: 106 \u2502 \u2502 \u2502 \u2502 \u2514\u2500tax_government_taxes_income_libertarians \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500government_libertarians_libertarian_regulation_party \u2500\u2500 Topic: 58 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500tax_taxes_income_billion_deficit \u2500\u2500 Topic: 41 \u2502 \u2502 \u2502 \u2514\u2500armenian_armenians_israel_people_jews \u2502 \u2502 \u2502 \u251c\u2500gun_guns_militia_firearms_amendment \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500blacks_penalty_death_cruel_punishment \u2500\u2500 Topic: 55 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500gun_guns_militia_firearms_amendment \u2500\u2500 Topic: 7 \u2502 \u2502 \u2502 \u2514\u2500armenian_armenians_israel_jews_turkish \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500israel_israeli_jews_arab_jewish \u2500\u2500 Topic: 4 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500armenian_armenians_turkish_armenia_azerbaijan \u2500\u2500 Topic: 15 \u2502 \u2502 \u2514\u2500stephanopoulos_president_mr_myers_ms \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500serbs_muslims_stephanopoulos_mr_bosnia \u2500\u2500 Topic: 35 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500myers_stephanopoulos_president_ms_mr \u2500\u2500 Topic: 87 \u2502 \u2514\u2500batf_fbi_koresh_compound_gas \u2502 \u251c\u2500\u25a0\u2500\u2500reno_workers_janet_clinton_waco \u2500\u2500 Topic: 77 \u2502 \u2514\u2500batf_fbi_koresh_gas_compound \u2502 \u251c\u2500batf_koresh_fbi_warrant_compound \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500batf_warrant_raid_compound_fbi \u2500\u2500 Topic: 42 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500koresh_batf_fbi_children_compound \u2500\u2500 Topic: 61 \u2502 \u2514\u2500\u25a0\u2500\u2500fbi_gas_tear_bds_building \u2500\u2500 Topic: 23 \u2514\u2500use_like_just_dont_new \u251c\u2500game_team_year_games_like \u2502 \u251c\u2500game_team_games_25_year \u2502 \u2502 \u251c\u2500game_team_games_25_season \u2502 \u2502 \u2502 \u251c\u2500window_printer_use_problem_mhz \u2502 \u2502 \u2502 \u2502 \u251c\u2500mhz_wire_simms_wiring_battery \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500simms_mhz_battery_cpu_heat \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500simms_pds_simm_vram_lc \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500pds_nubus_lc_slot_card \u2500\u2500 Topic: 119 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500simms_simm_vram_meg_dram \u2500\u2500 Topic: 32 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500mhz_battery_cpu_heat_speed \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500mhz_cpu_speed_heat_fan \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500mhz_cpu_speed_heat_fan \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500fan_cpu_heat_sink_fans \u2500\u2500 Topic: 92 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500mhz_speed_cpu_fpu_clock \u2500\u2500 Topic: 22 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500monitor_turn_power_computer_electricity \u2500\u2500 Topic: 91 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500battery_batteries_concrete_duo_discharge \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500duo_battery_apple_230_problem \u2500\u2500 Topic: 121 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500battery_batteries_concrete_discharge_temperature \u2500\u2500 Topic: 75 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500wire_wiring_ground_neutral_outlets \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500wire_wiring_ground_neutral_outlets \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500wire_wiring_ground_neutral_outlets \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500leds_uv_blue_light_boards \u2500\u2500 Topic: 66 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500wire_wiring_ground_neutral_outlets \u2500\u2500 Topic: 120 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500scope_scopes_phone_dial_number \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500dial_number_phone_line_output \u2500\u2500 Topic: 93 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500scope_scopes_motorola_generator_oscilloscope \u2500\u2500 Topic: 113 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500celp_dsp_sampling_antenna_digital \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500antenna_antennas_receiver_cable_transmitter \u2500\u2500 Topic: 70 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500celp_dsp_sampling_speech_voice \u2500\u2500 Topic: 52 \u2502 \u2502 \u2502 \u2502 \u2514\u2500window_printer_xv_mouse_windows \u2502 \u2502 \u2502 \u2502 \u251c\u2500window_xv_error_widget_problem \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500error_symbol_undefined_xterm_rx \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500symbol_error_undefined_doug_parse \u2500\u2500 Topic: 63 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500rx_remote_server_xdm_xterm \u2500\u2500 Topic: 45 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500window_xv_widget_application_expose \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500window_widget_expose_application_event \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500gc_mydisplay_draw_gxxor_drawing \u2500\u2500 Topic: 103 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500window_widget_application_expose_event \u2500\u2500 Topic: 25 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500xv_den_polygon_points_algorithm \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500den_polygon_points_algorithm_polygons \u2500\u2500 Topic: 28 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500xv_24bit_image_bit_images \u2500\u2500 Topic: 57 \u2502 \u2502 \u2502 \u2502 \u2514\u2500printer_fonts_print_mouse_postscript \u2502 \u2502 \u2502 \u2502 \u251c\u2500printer_fonts_print_font_deskjet \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500scanner_logitech_grayscale_ocr_scanman \u2500\u2500 Topic: 108 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500printer_fonts_print_font_deskjet \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500printer_print_deskjet_hp_ink \u2500\u2500 Topic: 18 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500fonts_font_truetype_tt_atm \u2500\u2500 Topic: 49 \u2502 \u2502 \u2502 \u2502 \u2514\u2500mouse_ghostscript_midi_driver_postscript \u2502 \u2502 \u2502 \u2502 \u251c\u2500ghostscript_midi_postscript_files_file \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500ghostscript_postscript_pageview_ghostview_dsc \u2500\u2500 Topic: 104 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500midi_sound_file_windows_driver \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500location_mar_file_host_rwrr \u2500\u2500 Topic: 83 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500midi_sound_driver_blaster_soundblaster \u2500\u2500 Topic: 98 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500mouse_driver_mice_ball_problem \u2500\u2500 Topic: 68 \u2502 \u2502 \u2502 \u2514\u2500game_team_games_25_season \u2502 \u2502 \u2502 \u251c\u25001st_sale_condition_comics_hulk \u2502 \u2502 \u2502 \u2502 \u251c\u2500sale_condition_offer_asking_cd \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500condition_stereo_amp_speakers_asking \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500miles_car_amfm_toyota_cassette \u2500\u2500 Topic: 62 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500amp_speakers_condition_stereo_audio \u2500\u2500 Topic: 24 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500games_sale_pom_cds_shipping \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500pom_cds_sale_shipping_cd \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500size_shipping_sale_condition_mattress \u2500\u2500 Topic: 100 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500pom_cds_cd_sale_picture \u2500\u2500 Topic: 37 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500games_game_snes_sega_genesis \u2500\u2500 Topic: 40 \u2502 \u2502 \u2502 \u2502 \u2514\u25001st_hulk_comics_art_appears \u2502 \u2502 \u2502 \u2502 \u251c\u25001st_hulk_comics_art_appears \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500lens_tape_camera_backup_lenses \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500tape_backup_tapes_drive_4mm \u2500\u2500 Topic: 107 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500lens_camera_lenses_zoom_pouch \u2500\u2500 Topic: 114 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u25001st_hulk_comics_art_appears \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u25001st_hulk_comics_art_appears \u2500\u2500 Topic: 105 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500books_book_cover_trek_chemistry \u2500\u2500 Topic: 125 \u2502 \u2502 \u2502 \u2502 \u2514\u2500tickets_hotel_ticket_voucher_package \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500hotel_voucher_package_vacation_room \u2500\u2500 Topic: 74 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500tickets_ticket_june_airlines_july \u2500\u2500 Topic: 84 \u2502 \u2502 \u2502 \u2514\u2500game_team_games_season_hockey \u2502 \u2502 \u2502 \u251c\u2500game_hockey_team_25_550 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500espn_pt_pts_game_la \u2500\u2500 Topic: 17 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500team_25_game_hockey_550 \u2500\u2500 Topic: 2 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500year_game_hit_baseball_players \u2500\u2500 Topic: 0 \u2502 \u2502 \u2514\u2500bike_car_greek_insurance_msg \u2502 \u2502 \u251c\u2500car_bike_insurance_cars_engine \u2502 \u2502 \u2502 \u251c\u2500car_insurance_cars_radar_engine \u2502 \u2502 \u2502 \u2502 \u251c\u2500insurance_health_private_care_canada \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500insurance_health_private_care_canada \u2500\u2500 Topic: 99 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500insurance_car_accident_rates_sue \u2500\u2500 Topic: 82 \u2502 \u2502 \u2502 \u2502 \u2514\u2500car_cars_radar_engine_detector \u2502 \u2502 \u2502 \u2502 \u251c\u2500car_radar_cars_detector_engine \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500radar_detector_detectors_ka_alarm \u2500\u2500 Topic: 39 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500car_cars_mustang_ford_engine \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500clutch_shift_shifting_transmission_gear \u2500\u2500 Topic: 88 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500car_cars_mustang_ford_v8 \u2500\u2500 Topic: 14 \u2502 \u2502 \u2502 \u2502 \u2514\u2500oil_diesel_odometer_diesels_car \u2502 \u2502 \u2502 \u2502 \u251c\u2500odometer_oil_sensor_car_drain \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500odometer_sensor_speedo_gauge_mileage \u2500\u2500 Topic: 96 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500oil_drain_car_leaks_taillights \u2500\u2500 Topic: 102 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500diesel_diesels_emissions_fuel_oil \u2500\u2500 Topic: 79 \u2502 \u2502 \u2502 \u2514\u2500bike_riding_ride_bikes_motorcycle \u2502 \u2502 \u2502 \u251c\u2500bike_ride_riding_bikes_lane \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500bike_ride_riding_lane_car \u2500\u2500 Topic: 11 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500bike_bikes_miles_honda_motorcycle \u2500\u2500 Topic: 19 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500countersteering_bike_motorcycle_rear_shaft \u2500\u2500 Topic: 46 \u2502 \u2502 \u2514\u2500greek_msg_kuwait_greece_water \u2502 \u2502 \u251c\u2500greek_msg_kuwait_greece_water \u2502 \u2502 \u2502 \u251c\u2500greek_msg_kuwait_greece_dog \u2502 \u2502 \u2502 \u2502 \u251c\u2500greek_msg_kuwait_greece_dog \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500greek_kuwait_greece_turkish_greeks \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500greek_greece_turkish_greeks_cyprus \u2500\u2500 Topic: 71 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500kuwait_iraq_iran_gulf_arabia \u2500\u2500 Topic: 76 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500msg_dog_drugs_drug_food \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500dog_dogs_cooper_trial_weaver \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500clinton_bush_quayle_reagan_panicking \u2500\u2500 Topic: 101 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500dog_dogs_cooper_trial_weaver \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500cooper_trial_weaver_spence_witnesses \u2500\u2500 Topic: 90 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500dog_dogs_bike_trained_springer \u2500\u2500 Topic: 67 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500msg_drugs_drug_food_chinese \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500msg_food_chinese_foods_taste \u2500\u2500 Topic: 30 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500drugs_drug_marijuana_cocaine_alcohol \u2500\u2500 Topic: 72 \u2502 \u2502 \u2502 \u2502 \u2514\u2500water_theory_universe_science_larsons \u2502 \u2502 \u2502 \u2502 \u251c\u2500water_nuclear_cooling_steam_dept \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500rocketry_rockets_engines_nuclear_plutonium \u2500\u2500 Topic: 115 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500water_cooling_steam_dept_plants \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500water_dept_phd_environmental_atmospheric \u2500\u2500 Topic: 97 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500cooling_water_steam_towers_plants \u2500\u2500 Topic: 109 \u2502 \u2502 \u2502 \u2502 \u2514\u2500theory_universe_larsons_larson_science \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500theory_universe_larsons_larson_science \u2500\u2500 Topic: 54 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500oort_cloud_grbs_gamma_burst \u2500\u2500 Topic: 80 \u2502 \u2502 \u2502 \u2514\u2500helmet_kirlian_photography_lock_wax \u2502 \u2502 \u2502 \u251c\u2500helmet_kirlian_photography_leaf_mask \u2502 \u2502 \u2502 \u2502 \u251c\u2500kirlian_photography_leaf_pictures_deleted \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500deleted_joke_stuff_maddi_nickname \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500joke_maddi_nickname_nicknames_frank \u2500\u2500 Topic: 43 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500deleted_stuff_bookstore_joke_motto \u2500\u2500 Topic: 81 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500kirlian_photography_leaf_pictures_aura \u2500\u2500 Topic: 85 \u2502 \u2502 \u2502 \u2502 \u2514\u2500helmet_mask_liner_foam_cb \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500helmet_liner_foam_cb_helmets \u2500\u2500 Topic: 112 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500mask_goalies_77_santore_tl \u2500\u2500 Topic: 123 \u2502 \u2502 \u2502 \u2514\u2500lock_wax_paint_plastic_ear \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500lock_cable_locks_bike_600 \u2500\u2500 Topic: 117 \u2502 \u2502 \u2502 \u2514\u2500wax_paint_ear_plastic_skin \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500wax_paint_plastic_scratches_solvent \u2500\u2500 Topic: 65 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500ear_wax_skin_greasy_acne \u2500\u2500 Topic: 116 \u2502 \u2502 \u2514\u2500m4_mp_14_mw_mo \u2502 \u2502 \u251c\u2500m4_mp_14_mw_mo \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500m4_mp_14_mw_mo \u2500\u2500 Topic: 111 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500test_ensign_nameless_deane_deanebinahccbrandeisedu \u2500\u2500 Topic: 118 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500ites_cheek_hello_hi_ken \u2500\u2500 Topic: 3 \u2502 \u2514\u2500space_medical_health_disease_cancer \u2502 \u251c\u2500medical_health_disease_cancer_patients \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500cancer_centers_center_medical_research \u2500\u2500 Topic: 122 \u2502 \u2502 \u2514\u2500health_medical_disease_patients_hiv \u2502 \u2502 \u251c\u2500patients_medical_disease_candida_health \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500candida_yeast_infection_gonorrhea_infections \u2500\u2500 Topic: 48 \u2502 \u2502 \u2502 \u2514\u2500patients_disease_cancer_medical_doctor \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500hiv_medical_cancer_patients_doctor \u2500\u2500 Topic: 34 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500pain_drug_patients_disease_diet \u2500\u2500 Topic: 26 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500health_newsgroup_tobacco_vote_votes \u2500\u2500 Topic: 9 \u2502 \u2514\u2500space_launch_nasa_shuttle_orbit \u2502 \u251c\u2500space_moon_station_nasa_launch \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500sky_advertising_billboard_billboards_space \u2500\u2500 Topic: 59 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500space_station_moon_redesign_nasa \u2500\u2500 Topic: 16 \u2502 \u2514\u2500space_mission_hst_launch_orbit \u2502 \u251c\u2500space_launch_nasa_orbit_propulsion \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500space_launch_nasa_propulsion_astronaut \u2500\u2500 Topic: 47 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500orbit_km_jupiter_probe_earth \u2500\u2500 Topic: 86 \u2502 \u2514\u2500\u25a0\u2500\u2500hst_mission_shuttle_orbit_arrays \u2500\u2500 Topic: 60 \u2514\u2500drive_file_key_windows_use \u251c\u2500key_file_jpeg_encryption_image \u2502 \u251c\u2500key_encryption_clipper_chip_keys \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500key_clipper_encryption_chip_keys \u2500\u2500 Topic: 1 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500entry_file_ripem_entries_key \u2500\u2500 Topic: 73 \u2502 \u2514\u2500jpeg_image_file_gif_images \u2502 \u251c\u2500motif_graphics_ftp_available_3d \u2502 \u2502 \u251c\u2500motif_graphics_openwindows_ftp_available \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500openwindows_motif_xview_windows_mouse \u2500\u2500 Topic: 20 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500graphics_widget_ray_3d_available \u2500\u2500 Topic: 95 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u25003d_machines_version_comments_contact \u2500\u2500 Topic: 38 \u2502 \u2514\u2500jpeg_image_gif_images_format \u2502 \u251c\u2500\u25a0\u2500\u2500gopher_ftp_files_stuffit_images \u2500\u2500 Topic: 51 \u2502 \u2514\u2500\u25a0\u2500\u2500jpeg_image_gif_format_images \u2500\u2500 Topic: 13 \u2514\u2500drive_db_card_scsi_windows \u251c\u2500db_windows_dos_mov_os2 \u2502 \u251c\u2500\u25a0\u2500\u2500copy_protection_program_software_disk \u2500\u2500 Topic: 64 \u2502 \u2514\u2500\u25a0\u2500\u2500db_windows_dos_mov_os2 \u2500\u2500 Topic: 8 \u2514\u2500drive_card_scsi_drives_ide \u251c\u2500drive_scsi_drives_ide_disk \u2502 \u251c\u2500\u25a0\u2500\u2500drive_scsi_drives_ide_disk \u2500\u2500 Topic: 6 \u2502 \u2514\u2500\u25a0\u2500\u2500meg_sale_ram_drive_shipping \u2500\u2500 Topic: 12 \u2514\u2500card_modem_monitor_video_drivers \u251c\u2500\u25a0\u2500\u2500card_monitor_video_drivers_vga \u2500\u2500 Topic: 5 \u2514\u2500\u25a0\u2500\u2500modem_port_serial_irq_com \u2500\u2500 Topic: 10 Visualize Hierarchical Documents \u00b6 We can extend the previous method by calculating the topic representation at different levels of the hierarchy and plotting them on a 2D plane. To do so, we first need to calculate the hierarchical topics: from sklearn.datasets import fetch_20newsgroups from sentence_transformers import SentenceTransformer from bertopic import BERTopic from umap import UMAP # Prepare embeddings docs = fetch_20newsgroups ( subset = 'all' , remove = ( 'headers' , 'footers' , 'quotes' ))[ 'data' ] sentence_model = SentenceTransformer ( \"all-MiniLM-L6-v2\" ) embeddings = sentence_model . encode ( docs , show_progress_bar = False ) # Train BERTopic and extract hierarchical topics topic_model = BERTopic () . fit ( docs , embeddings ) hierarchical_topics = topic_model . hierarchical_topics ( docs ) Then, we can visualize the hierarchical documents by either supplying it with our embeddings or by reducing their dimensionality ourselves: # Run the visualization with the original embeddings topic_model . visualize_hierarchical_documents ( docs , hierarchical_topics , embeddings = embeddings ) # Reduce dimensionality of embeddings, this step is optional but much faster to perform iteratively: reduced_embeddings = UMAP ( n_neighbors = 10 , n_components = 2 , min_dist = 0.0 , metric = 'cosine' ) . fit_transform ( embeddings ) topic_model . visualize_hierarchical_documents ( docs , hierarchical_topics , reduced_embeddings = reduced_embeddings ) Note The visualization above was generated with the additional parameter hide_document_hover=True which disables the option to hover over the individual points and see the content of the documents. This makes the resulting visualization smaller and fit into your RAM. However, it might be interesting to set hide_document_hover=False to hover over the points and see the content of the documents. Visualize Terms \u00b6 We can visualize the selected terms for a few topics by creating bar charts out of the c-TF-IDF scores for each topic representation. Insights can be gained from the relative c-TF-IDF scores between and within topics. Moreover, you can easily compare topic representations to each other. To visualize this hierarchy, run the following: topic_model . visualize_barchart () Visualize Topic Similarity \u00b6 Having generated topic embeddings, through both c-TF-IDF and embeddings, we can create a similarity matrix by simply applying cosine similarities through those topic embeddings. The result will be a matrix indicating how similar certain topics are to each other. To visualize the heatmap, run the following: topic_model . visualize_heatmap () Note You can set n_clusters in visualize_heatmap to order the topics by their similarity. This will result in blocks being formed in the heatmap indicating which clusters of topics are similar to each other. This step is very much recommended as it will make reading the heatmap easier. Visualize Term Score Decline \u00b6 Topics are represented by a number of words starting with the best representative word. Each word is represented by a c-TF-IDF score. The higher the score, the more representative a word to the topic is. Since the topic words are sorted by their c-TF-IDF score, the scores slowly decline with each word that is added. At some point adding words to the topic representation only marginally increases the total c-TF-IDF score and would not be beneficial for its representation. To visualize this effect, we can plot the c-TF-IDF scores for each topic by the term rank of each word. In other words, the position of the words (term rank), where the words with the highest c-TF-IDF score will have a rank of 1, will be put on the x-axis. Whereas the y-axis will be populated by the c-TF-IDF scores. The result is a visualization that shows you the decline of c-TF-IDF score when adding words to the topic representation. It allows you, using the elbow method, the select the best number of words in a topic. To visualize the c-TF-IDF score decline, run the following: topic_model . visualize_term_rank () To enable the log scale on the y-axis for a better view of individual topics, run the following: topic_model . visualize_term_rank ( log_scale = True ) This visualization was heavily inspired by the \"Term Probability Decline\" visualization found in an analysis by the amazing tmtoolkit . Reference to that specific analysis can be found here . Visualize Topics over Time \u00b6 After creating topics over time with Dynamic Topic Modeling, we can visualize these topics by leveraging the interactive abilities of Plotly. Plotly allows us to show the frequency of topics over time whilst giving the option of hovering over the points to show the time-specific topic representations. Simply call .visualize_topics_over_time with the newly created topics over time: import re import pandas as pd from bertopic import BERTopic # Prepare data trump = pd . read_csv ( 'https://drive.google.com/uc?export=download&id=1xRKHaP-QwACMydlDnyFPEaFdtskJuBa6' ) trump . text = trump . apply ( lambda row : re . sub ( r \"http\\S+\" , \"\" , row . text ) . lower (), 1 ) trump . text = trump . apply ( lambda row : \" \" . join ( filter ( lambda x : x [ 0 ] != \"@\" , row . text . split ())), 1 ) trump . text = trump . apply ( lambda row : \" \" . join ( re . sub ( \"[^a-zA-Z]+\" , \" \" , row . text ) . split ()), 1 ) trump = trump . loc [( trump . isRetweet == \"f\" ) & ( trump . text != \"\" ), :] timestamps = trump . date . to_list () tweets = trump . text . to_list () # Create topics over time model = BERTopic ( verbose = True ) topics , probs = model . fit_transform ( tweets ) topics_over_time = model . topics_over_time ( tweets , timestamps ) Then, we visualize some interesting topics: model . visualize_topics_over_time ( topics_over_time , topics = [ 9 , 10 , 72 , 83 , 87 , 91 ]) Visualize Topics per Class \u00b6 You might want to extract and visualize the topic representation per class. For example, if you have specific groups of users that might approach topics differently, then extracting them would help understanding how these users talk about certain topics. In other words, this is simply creating a topic representation for certain classes that you might have in your data. First, we need to train our model: from bertopic import BERTopic from sklearn.datasets import fetch_20newsgroups # Prepare data and classes data = fetch_20newsgroups ( subset = 'all' , remove = ( 'headers' , 'footers' , 'quotes' )) docs = data [ \"data\" ] classes = [ data [ \"target_names\" ][ i ] for i in data [ \"target\" ]] # Create topic model and calculate topics per class topic_model = BERTopic () topics , probs = topic_model . fit_transform ( docs ) topics_per_class = topic_model . topics_per_class ( docs , classes = classes ) Then, we visualize the topic representation of major topics per class: topic_model . visualize_topics_per_class ( topics_per_class ) Visualize Probablities or Distribution \u00b6 We can generate the topic-document probability matrix by simply setting calculate_probabilities=True if a HDBSCAN model is used: from bertopic import BERTopic topic_model = BERTopic ( calculate_probabilities = True ) topics , probs = topic_model . fit_transform ( docs ) The resulting probs variable contains the soft-clustering as done through HDBSCAN. If a non-HDBSCAN model is used, we can estimate the topic distributions after training our model: from bertopic import BERTopic topic_model = BERTopic () topics , _ = topic_model . fit_transform ( docs ) topic_distr , _ = topic_model . approximate_distribution ( docs , min_similarity = 0 ) Then, we either pass the probs or topic_distr variable to .visualize_distribution to visualize either the probability distributions or the topic distributions: # To visualize the probabilities of topic assignment topic_model . visualize_distribution ( probs [ 0 ]) # To visualize the topic distributions in a document topic_model . visualize_distribution ( topic_distr [ 0 ]) Although a topic distribution is nice, we may want to see how each token contributes to a specific topic. To do so, we need to first calculate topic distributions on a token level and then visualize the results: # Calculate the topic distributions on a token-level topic_distr , topic_token_distr = topic_model . approximate_distribution ( docs , calculate_tokens = True ) # Visualize the token-level distributions df = topic_model . visualize_approximate_distribution ( docs [ 1 ], topic_token_distr [ 1 ]) df Note To get the stylized dataframe for .visualize_approximate_distribution you will need to have Jinja installed. If you do not have this installed, an unstylized dataframe will be returned instead. You can install Jinja via pip install jinja2 Note The distribution of the probabilities does not give an indication to the distribution of the frequencies of topics across a document. It merely shows how confident BERTopic is that certain topics can be found in a document.","title":"Topic Visualization"},{"location":"getting_started/visualization/visualization.html#visualize-topics","text":"After having trained our BERTopic model, we can iteratively go through hundreds of topics to get a good understanding of the topics that were extracted. However, that takes quite some time and lacks a global representation. Instead, we can visualize the topics that were generated in a way very similar to LDAvis . We embed our c-TF-IDF representation of the topics in 2D using Umap and then visualize the two dimensions using plotly such that we can create an interactive view. First, we need to train our model: from bertopic import BERTopic from sklearn.datasets import fetch_20newsgroups docs = fetch_20newsgroups ( subset = 'all' , remove = ( 'headers' , 'footers' , 'quotes' ))[ 'data' ] topic_model = BERTopic () topics , probs = topic_model . fit_transform ( docs ) Then, we can call .visualize_topics to create a 2D representation of your topics. The resulting graph is a plotly interactive graph which can be converted to HTML: topic_model . visualize_topics () You can use the slider to select the topic which then lights up red. If you hover over a topic, then general information is given about the topic, including the size of the topic and its corresponding words.","title":"Visualize Topics"},{"location":"getting_started/visualization/visualization.html#visualize-documents","text":"Using the previous method, we can visualize the topics and get insight into their relationships. However, you might want a more fine-grained approach where we can visualize the documents inside the topics to see if they were assigned correctly or whether they make sense. To do so, we can use the topic_model.visualize_documents() function. This function recalculates the document embeddings and reduces them to 2-dimensional space for easier visualization purposes. This process can be quite expensive, so it is advised to adhere to the following pipeline: from sklearn.datasets import fetch_20newsgroups from sentence_transformers import SentenceTransformer from bertopic import BERTopic from umap import UMAP # Prepare embeddings docs = fetch_20newsgroups ( subset = 'all' , remove = ( 'headers' , 'footers' , 'quotes' ))[ 'data' ] sentence_model = SentenceTransformer ( \"all-MiniLM-L6-v2\" ) embeddings = sentence_model . encode ( docs , show_progress_bar = False ) # Train BERTopic topic_model = BERTopic () . fit ( docs , embeddings ) # Run the visualization with the original embeddings topic_model . visualize_documents ( docs , embeddings = embeddings ) # Reduce dimensionality of embeddings, this step is optional but much faster to perform iteratively: reduced_embeddings = UMAP ( n_neighbors = 10 , n_components = 2 , min_dist = 0.0 , metric = 'cosine' ) . fit_transform ( embeddings ) topic_model . visualize_documents ( docs , reduced_embeddings = reduced_embeddings ) Note The visualization above was generated with the additional parameter hide_document_hover=True which disables the option to hover over the individual points and see the content of the documents. This was done for demonstration purposes as saving all those documents in the visualization can be quite expensive and result in large files. However, it might be interesting to set hide_document_hover=False in order to hover over the points and see the content of the documents.","title":"Visualize Documents"},{"location":"getting_started/visualization/visualization.html#custom-hover","text":"When you visualize the documents, you might not always want to see the complete document over hover. Many documents have shorter information that might be more interesting to visualize, such as its title. To create the hover based on a documents' title instead of its content, you can simply pass a variable ( titles ) containing the title for each document: topic_model . visualize_documents ( titles , reduced_embeddings = reduced_embeddings )","title":"Custom Hover"},{"location":"getting_started/visualization/visualization.html#visualize-topic-hierarchy","text":"The topics that were created can be hierarchically reduced. In order to understand the potential hierarchical structure of the topics, we can use scipy.cluster.hierarchy to create clusters and visualize how they relate to one another. This might help to select an appropriate nr_topics when reducing the number of topics that you have created. To visualize this hierarchy, run the following: topic_model . visualize_hierarchy () Note Do note that this is not the actual procedure of .reduce_topics() when nr_topics is set to auto since HDBSCAN is used to automatically extract topics. The visualization above closely resembles the actual procedure of .reduce_topics() when any number of nr_topics is selected.","title":"Visualize Topic Hierarchy"},{"location":"getting_started/visualization/visualization.html#hierarchical-labels","text":"Although visualizing this hierarchy gives us information about the structure, it would be helpful to see what happens to the topic representations when merging topics. To do so, we first need to calculate the representations of the hierarchical topics: First, we train a basic BERTopic model: from bertopic import BERTopic from sklearn.datasets import fetch_20newsgroups docs = fetch_20newsgroups ( subset = 'all' , remove = ( 'headers' , 'footers' , 'quotes' ))[ \"data\" ] topic_model = BERTopic ( verbose = True ) topics , probs = topic_model . fit_transform ( docs ) hierarchical_topics = topic_model . hierarchical_topics ( docs ) To visualize these results, we simply need to pass the resulting hierarchical_topics to our .visualize_hierarchy function: topic_model . visualize_hierarchy ( hierarchical_topics = hierarchical_topics ) If you hover over the black circles, you will see the topic representation at that level of the hierarchy. These representations help you understand the effect of merging certain topics. Some might be logical to merge whilst others might not. Moreover, we can now see which sub-topics can be found within certain larger themes.","title":"Hierarchical labels"},{"location":"getting_started/visualization/visualization.html#text-based-topic-tree","text":"Although this gives a nice overview of the potential hierarchy, hovering over all black circles can be tiresome. Instead, we can use topic_model.get_topic_tree to create a text-based representation of this hierarchy. Although the general structure is more difficult to view, we can see better which topics could be logically merged: >>> tree = topic_model . get_topic_tree ( hierarchical_topics ) >>> print ( tree ) . \u2514\u2500 atheists_atheism_god_moral_atheist \u251c\u2500 atheists_atheism_god_atheist_argument \u2502 \u251c\u2500\u25a0\u2500\u2500 atheists_atheism_god_atheist_argument \u2500\u2500 Topic : 21 \u2502 \u2514\u2500\u25a0\u2500\u2500 br_god_exist_genetic_existence \u2500\u2500 Topic : 124 \u2514\u2500\u25a0\u2500\u2500 moral_morality_objective_immoral_morals \u2500\u2500 Topic : 29 Click here to view the full tree. . \u251c\u2500people_armenian_said_god_armenians \u2502 \u251c\u2500god_jesus_jehovah_lord_christ \u2502 \u2502 \u251c\u2500god_jesus_jehovah_lord_christ \u2502 \u2502 \u2502 \u251c\u2500jehovah_lord_mormon_mcconkie_god \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500ra_satan_thou_god_lucifer \u2500\u2500 Topic: 94 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500jehovah_lord_mormon_mcconkie_unto \u2500\u2500 Topic: 78 \u2502 \u2502 \u2502 \u2514\u2500jesus_mary_god_hell_sin \u2502 \u2502 \u2502 \u251c\u2500jesus_hell_god_eternal_heaven \u2502 \u2502 \u2502 \u2502 \u251c\u2500hell_jesus_eternal_god_heaven \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500jesus_tomb_disciples_resurrection_john \u2500\u2500 Topic: 69 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500hell_eternal_god_jesus_heaven \u2500\u2500 Topic: 53 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500aaron_baptism_sin_law_god \u2500\u2500 Topic: 89 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500mary_sin_maria_priest_conception \u2500\u2500 Topic: 56 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500marriage_married_marry_ceremony_marriages \u2500\u2500 Topic: 110 \u2502 \u2514\u2500people_armenian_armenians_said_mr \u2502 \u251c\u2500people_armenian_armenians_said_israel \u2502 \u2502 \u251c\u2500god_homosexual_homosexuality_atheists_sex \u2502 \u2502 \u2502 \u251c\u2500homosexual_homosexuality_sex_gay_homosexuals \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500kinsey_sex_gay_men_sexual \u2500\u2500 Topic: 44 \u2502 \u2502 \u2502 \u2502 \u2514\u2500homosexuality_homosexual_sin_homosexuals_gay \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500gay_homosexual_homosexuals_sexual_cramer \u2500\u2500 Topic: 50 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500homosexuality_homosexual_sin_paul_sex \u2500\u2500 Topic: 27 \u2502 \u2502 \u2502 \u2514\u2500god_atheists_atheism_moral_atheist \u2502 \u2502 \u2502 \u251c\u2500islam_quran_judas_islamic_book \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500jim_context_challenges_articles_quote \u2500\u2500 Topic: 36 \u2502 \u2502 \u2502 \u2502 \u2514\u2500islam_quran_judas_islamic_book \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500islam_quran_islamic_rushdie_muslims \u2500\u2500 Topic: 31 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500judas_scripture_bible_books_greek \u2500\u2500 Topic: 33 \u2502 \u2502 \u2502 \u2514\u2500atheists_atheism_god_moral_atheist \u2502 \u2502 \u2502 \u251c\u2500atheists_atheism_god_atheist_argument \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500atheists_atheism_god_atheist_argument \u2500\u2500 Topic: 21 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500br_god_exist_genetic_existence \u2500\u2500 Topic: 124 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500moral_morality_objective_immoral_morals \u2500\u2500 Topic: 29 \u2502 \u2502 \u2514\u2500armenian_armenians_people_israel_said \u2502 \u2502 \u251c\u2500armenian_armenians_israel_people_jews \u2502 \u2502 \u2502 \u251c\u2500tax_rights_government_income_taxes \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500rights_right_slavery_slaves_residence \u2500\u2500 Topic: 106 \u2502 \u2502 \u2502 \u2502 \u2514\u2500tax_government_taxes_income_libertarians \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500government_libertarians_libertarian_regulation_party \u2500\u2500 Topic: 58 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500tax_taxes_income_billion_deficit \u2500\u2500 Topic: 41 \u2502 \u2502 \u2502 \u2514\u2500armenian_armenians_israel_people_jews \u2502 \u2502 \u2502 \u251c\u2500gun_guns_militia_firearms_amendment \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500blacks_penalty_death_cruel_punishment \u2500\u2500 Topic: 55 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500gun_guns_militia_firearms_amendment \u2500\u2500 Topic: 7 \u2502 \u2502 \u2502 \u2514\u2500armenian_armenians_israel_jews_turkish \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500israel_israeli_jews_arab_jewish \u2500\u2500 Topic: 4 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500armenian_armenians_turkish_armenia_azerbaijan \u2500\u2500 Topic: 15 \u2502 \u2502 \u2514\u2500stephanopoulos_president_mr_myers_ms \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500serbs_muslims_stephanopoulos_mr_bosnia \u2500\u2500 Topic: 35 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500myers_stephanopoulos_president_ms_mr \u2500\u2500 Topic: 87 \u2502 \u2514\u2500batf_fbi_koresh_compound_gas \u2502 \u251c\u2500\u25a0\u2500\u2500reno_workers_janet_clinton_waco \u2500\u2500 Topic: 77 \u2502 \u2514\u2500batf_fbi_koresh_gas_compound \u2502 \u251c\u2500batf_koresh_fbi_warrant_compound \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500batf_warrant_raid_compound_fbi \u2500\u2500 Topic: 42 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500koresh_batf_fbi_children_compound \u2500\u2500 Topic: 61 \u2502 \u2514\u2500\u25a0\u2500\u2500fbi_gas_tear_bds_building \u2500\u2500 Topic: 23 \u2514\u2500use_like_just_dont_new \u251c\u2500game_team_year_games_like \u2502 \u251c\u2500game_team_games_25_year \u2502 \u2502 \u251c\u2500game_team_games_25_season \u2502 \u2502 \u2502 \u251c\u2500window_printer_use_problem_mhz \u2502 \u2502 \u2502 \u2502 \u251c\u2500mhz_wire_simms_wiring_battery \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500simms_mhz_battery_cpu_heat \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500simms_pds_simm_vram_lc \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500pds_nubus_lc_slot_card \u2500\u2500 Topic: 119 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500simms_simm_vram_meg_dram \u2500\u2500 Topic: 32 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500mhz_battery_cpu_heat_speed \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500mhz_cpu_speed_heat_fan \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500mhz_cpu_speed_heat_fan \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500fan_cpu_heat_sink_fans \u2500\u2500 Topic: 92 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500mhz_speed_cpu_fpu_clock \u2500\u2500 Topic: 22 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500monitor_turn_power_computer_electricity \u2500\u2500 Topic: 91 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500battery_batteries_concrete_duo_discharge \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500duo_battery_apple_230_problem \u2500\u2500 Topic: 121 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500battery_batteries_concrete_discharge_temperature \u2500\u2500 Topic: 75 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500wire_wiring_ground_neutral_outlets \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500wire_wiring_ground_neutral_outlets \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500wire_wiring_ground_neutral_outlets \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500leds_uv_blue_light_boards \u2500\u2500 Topic: 66 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500wire_wiring_ground_neutral_outlets \u2500\u2500 Topic: 120 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500scope_scopes_phone_dial_number \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500dial_number_phone_line_output \u2500\u2500 Topic: 93 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500scope_scopes_motorola_generator_oscilloscope \u2500\u2500 Topic: 113 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500celp_dsp_sampling_antenna_digital \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500antenna_antennas_receiver_cable_transmitter \u2500\u2500 Topic: 70 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500celp_dsp_sampling_speech_voice \u2500\u2500 Topic: 52 \u2502 \u2502 \u2502 \u2502 \u2514\u2500window_printer_xv_mouse_windows \u2502 \u2502 \u2502 \u2502 \u251c\u2500window_xv_error_widget_problem \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500error_symbol_undefined_xterm_rx \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500symbol_error_undefined_doug_parse \u2500\u2500 Topic: 63 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500rx_remote_server_xdm_xterm \u2500\u2500 Topic: 45 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500window_xv_widget_application_expose \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500window_widget_expose_application_event \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500gc_mydisplay_draw_gxxor_drawing \u2500\u2500 Topic: 103 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500window_widget_application_expose_event \u2500\u2500 Topic: 25 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500xv_den_polygon_points_algorithm \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500den_polygon_points_algorithm_polygons \u2500\u2500 Topic: 28 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500xv_24bit_image_bit_images \u2500\u2500 Topic: 57 \u2502 \u2502 \u2502 \u2502 \u2514\u2500printer_fonts_print_mouse_postscript \u2502 \u2502 \u2502 \u2502 \u251c\u2500printer_fonts_print_font_deskjet \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500scanner_logitech_grayscale_ocr_scanman \u2500\u2500 Topic: 108 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500printer_fonts_print_font_deskjet \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500printer_print_deskjet_hp_ink \u2500\u2500 Topic: 18 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500fonts_font_truetype_tt_atm \u2500\u2500 Topic: 49 \u2502 \u2502 \u2502 \u2502 \u2514\u2500mouse_ghostscript_midi_driver_postscript \u2502 \u2502 \u2502 \u2502 \u251c\u2500ghostscript_midi_postscript_files_file \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500ghostscript_postscript_pageview_ghostview_dsc \u2500\u2500 Topic: 104 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500midi_sound_file_windows_driver \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500location_mar_file_host_rwrr \u2500\u2500 Topic: 83 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500midi_sound_driver_blaster_soundblaster \u2500\u2500 Topic: 98 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500mouse_driver_mice_ball_problem \u2500\u2500 Topic: 68 \u2502 \u2502 \u2502 \u2514\u2500game_team_games_25_season \u2502 \u2502 \u2502 \u251c\u25001st_sale_condition_comics_hulk \u2502 \u2502 \u2502 \u2502 \u251c\u2500sale_condition_offer_asking_cd \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500condition_stereo_amp_speakers_asking \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500miles_car_amfm_toyota_cassette \u2500\u2500 Topic: 62 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500amp_speakers_condition_stereo_audio \u2500\u2500 Topic: 24 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500games_sale_pom_cds_shipping \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500pom_cds_sale_shipping_cd \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500size_shipping_sale_condition_mattress \u2500\u2500 Topic: 100 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500pom_cds_cd_sale_picture \u2500\u2500 Topic: 37 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500games_game_snes_sega_genesis \u2500\u2500 Topic: 40 \u2502 \u2502 \u2502 \u2502 \u2514\u25001st_hulk_comics_art_appears \u2502 \u2502 \u2502 \u2502 \u251c\u25001st_hulk_comics_art_appears \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500lens_tape_camera_backup_lenses \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500tape_backup_tapes_drive_4mm \u2500\u2500 Topic: 107 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500lens_camera_lenses_zoom_pouch \u2500\u2500 Topic: 114 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u25001st_hulk_comics_art_appears \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u25001st_hulk_comics_art_appears \u2500\u2500 Topic: 105 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500books_book_cover_trek_chemistry \u2500\u2500 Topic: 125 \u2502 \u2502 \u2502 \u2502 \u2514\u2500tickets_hotel_ticket_voucher_package \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500hotel_voucher_package_vacation_room \u2500\u2500 Topic: 74 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500tickets_ticket_june_airlines_july \u2500\u2500 Topic: 84 \u2502 \u2502 \u2502 \u2514\u2500game_team_games_season_hockey \u2502 \u2502 \u2502 \u251c\u2500game_hockey_team_25_550 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500espn_pt_pts_game_la \u2500\u2500 Topic: 17 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500team_25_game_hockey_550 \u2500\u2500 Topic: 2 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500year_game_hit_baseball_players \u2500\u2500 Topic: 0 \u2502 \u2502 \u2514\u2500bike_car_greek_insurance_msg \u2502 \u2502 \u251c\u2500car_bike_insurance_cars_engine \u2502 \u2502 \u2502 \u251c\u2500car_insurance_cars_radar_engine \u2502 \u2502 \u2502 \u2502 \u251c\u2500insurance_health_private_care_canada \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500insurance_health_private_care_canada \u2500\u2500 Topic: 99 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500insurance_car_accident_rates_sue \u2500\u2500 Topic: 82 \u2502 \u2502 \u2502 \u2502 \u2514\u2500car_cars_radar_engine_detector \u2502 \u2502 \u2502 \u2502 \u251c\u2500car_radar_cars_detector_engine \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500radar_detector_detectors_ka_alarm \u2500\u2500 Topic: 39 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500car_cars_mustang_ford_engine \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500clutch_shift_shifting_transmission_gear \u2500\u2500 Topic: 88 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500car_cars_mustang_ford_v8 \u2500\u2500 Topic: 14 \u2502 \u2502 \u2502 \u2502 \u2514\u2500oil_diesel_odometer_diesels_car \u2502 \u2502 \u2502 \u2502 \u251c\u2500odometer_oil_sensor_car_drain \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500odometer_sensor_speedo_gauge_mileage \u2500\u2500 Topic: 96 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500oil_drain_car_leaks_taillights \u2500\u2500 Topic: 102 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500diesel_diesels_emissions_fuel_oil \u2500\u2500 Topic: 79 \u2502 \u2502 \u2502 \u2514\u2500bike_riding_ride_bikes_motorcycle \u2502 \u2502 \u2502 \u251c\u2500bike_ride_riding_bikes_lane \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500bike_ride_riding_lane_car \u2500\u2500 Topic: 11 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500bike_bikes_miles_honda_motorcycle \u2500\u2500 Topic: 19 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500countersteering_bike_motorcycle_rear_shaft \u2500\u2500 Topic: 46 \u2502 \u2502 \u2514\u2500greek_msg_kuwait_greece_water \u2502 \u2502 \u251c\u2500greek_msg_kuwait_greece_water \u2502 \u2502 \u2502 \u251c\u2500greek_msg_kuwait_greece_dog \u2502 \u2502 \u2502 \u2502 \u251c\u2500greek_msg_kuwait_greece_dog \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500greek_kuwait_greece_turkish_greeks \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500greek_greece_turkish_greeks_cyprus \u2500\u2500 Topic: 71 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500kuwait_iraq_iran_gulf_arabia \u2500\u2500 Topic: 76 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500msg_dog_drugs_drug_food \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500dog_dogs_cooper_trial_weaver \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500clinton_bush_quayle_reagan_panicking \u2500\u2500 Topic: 101 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500dog_dogs_cooper_trial_weaver \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500cooper_trial_weaver_spence_witnesses \u2500\u2500 Topic: 90 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500dog_dogs_bike_trained_springer \u2500\u2500 Topic: 67 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500msg_drugs_drug_food_chinese \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500msg_food_chinese_foods_taste \u2500\u2500 Topic: 30 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500drugs_drug_marijuana_cocaine_alcohol \u2500\u2500 Topic: 72 \u2502 \u2502 \u2502 \u2502 \u2514\u2500water_theory_universe_science_larsons \u2502 \u2502 \u2502 \u2502 \u251c\u2500water_nuclear_cooling_steam_dept \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500rocketry_rockets_engines_nuclear_plutonium \u2500\u2500 Topic: 115 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500water_cooling_steam_dept_plants \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500water_dept_phd_environmental_atmospheric \u2500\u2500 Topic: 97 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500cooling_water_steam_towers_plants \u2500\u2500 Topic: 109 \u2502 \u2502 \u2502 \u2502 \u2514\u2500theory_universe_larsons_larson_science \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500theory_universe_larsons_larson_science \u2500\u2500 Topic: 54 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500oort_cloud_grbs_gamma_burst \u2500\u2500 Topic: 80 \u2502 \u2502 \u2502 \u2514\u2500helmet_kirlian_photography_lock_wax \u2502 \u2502 \u2502 \u251c\u2500helmet_kirlian_photography_leaf_mask \u2502 \u2502 \u2502 \u2502 \u251c\u2500kirlian_photography_leaf_pictures_deleted \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500deleted_joke_stuff_maddi_nickname \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500joke_maddi_nickname_nicknames_frank \u2500\u2500 Topic: 43 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500deleted_stuff_bookstore_joke_motto \u2500\u2500 Topic: 81 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500kirlian_photography_leaf_pictures_aura \u2500\u2500 Topic: 85 \u2502 \u2502 \u2502 \u2502 \u2514\u2500helmet_mask_liner_foam_cb \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500helmet_liner_foam_cb_helmets \u2500\u2500 Topic: 112 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500mask_goalies_77_santore_tl \u2500\u2500 Topic: 123 \u2502 \u2502 \u2502 \u2514\u2500lock_wax_paint_plastic_ear \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500lock_cable_locks_bike_600 \u2500\u2500 Topic: 117 \u2502 \u2502 \u2502 \u2514\u2500wax_paint_ear_plastic_skin \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500wax_paint_plastic_scratches_solvent \u2500\u2500 Topic: 65 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500ear_wax_skin_greasy_acne \u2500\u2500 Topic: 116 \u2502 \u2502 \u2514\u2500m4_mp_14_mw_mo \u2502 \u2502 \u251c\u2500m4_mp_14_mw_mo \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500m4_mp_14_mw_mo \u2500\u2500 Topic: 111 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500test_ensign_nameless_deane_deanebinahccbrandeisedu \u2500\u2500 Topic: 118 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500ites_cheek_hello_hi_ken \u2500\u2500 Topic: 3 \u2502 \u2514\u2500space_medical_health_disease_cancer \u2502 \u251c\u2500medical_health_disease_cancer_patients \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500cancer_centers_center_medical_research \u2500\u2500 Topic: 122 \u2502 \u2502 \u2514\u2500health_medical_disease_patients_hiv \u2502 \u2502 \u251c\u2500patients_medical_disease_candida_health \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500candida_yeast_infection_gonorrhea_infections \u2500\u2500 Topic: 48 \u2502 \u2502 \u2502 \u2514\u2500patients_disease_cancer_medical_doctor \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500hiv_medical_cancer_patients_doctor \u2500\u2500 Topic: 34 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500pain_drug_patients_disease_diet \u2500\u2500 Topic: 26 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500health_newsgroup_tobacco_vote_votes \u2500\u2500 Topic: 9 \u2502 \u2514\u2500space_launch_nasa_shuttle_orbit \u2502 \u251c\u2500space_moon_station_nasa_launch \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500sky_advertising_billboard_billboards_space \u2500\u2500 Topic: 59 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500space_station_moon_redesign_nasa \u2500\u2500 Topic: 16 \u2502 \u2514\u2500space_mission_hst_launch_orbit \u2502 \u251c\u2500space_launch_nasa_orbit_propulsion \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500space_launch_nasa_propulsion_astronaut \u2500\u2500 Topic: 47 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500orbit_km_jupiter_probe_earth \u2500\u2500 Topic: 86 \u2502 \u2514\u2500\u25a0\u2500\u2500hst_mission_shuttle_orbit_arrays \u2500\u2500 Topic: 60 \u2514\u2500drive_file_key_windows_use \u251c\u2500key_file_jpeg_encryption_image \u2502 \u251c\u2500key_encryption_clipper_chip_keys \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500key_clipper_encryption_chip_keys \u2500\u2500 Topic: 1 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500entry_file_ripem_entries_key \u2500\u2500 Topic: 73 \u2502 \u2514\u2500jpeg_image_file_gif_images \u2502 \u251c\u2500motif_graphics_ftp_available_3d \u2502 \u2502 \u251c\u2500motif_graphics_openwindows_ftp_available \u2502 \u2502 \u2502 \u251c\u2500\u25a0\u2500\u2500openwindows_motif_xview_windows_mouse \u2500\u2500 Topic: 20 \u2502 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u2500graphics_widget_ray_3d_available \u2500\u2500 Topic: 95 \u2502 \u2502 \u2514\u2500\u25a0\u2500\u25003d_machines_version_comments_contact \u2500\u2500 Topic: 38 \u2502 \u2514\u2500jpeg_image_gif_images_format \u2502 \u251c\u2500\u25a0\u2500\u2500gopher_ftp_files_stuffit_images \u2500\u2500 Topic: 51 \u2502 \u2514\u2500\u25a0\u2500\u2500jpeg_image_gif_format_images \u2500\u2500 Topic: 13 \u2514\u2500drive_db_card_scsi_windows \u251c\u2500db_windows_dos_mov_os2 \u2502 \u251c\u2500\u25a0\u2500\u2500copy_protection_program_software_disk \u2500\u2500 Topic: 64 \u2502 \u2514\u2500\u25a0\u2500\u2500db_windows_dos_mov_os2 \u2500\u2500 Topic: 8 \u2514\u2500drive_card_scsi_drives_ide \u251c\u2500drive_scsi_drives_ide_disk \u2502 \u251c\u2500\u25a0\u2500\u2500drive_scsi_drives_ide_disk \u2500\u2500 Topic: 6 \u2502 \u2514\u2500\u25a0\u2500\u2500meg_sale_ram_drive_shipping \u2500\u2500 Topic: 12 \u2514\u2500card_modem_monitor_video_drivers \u251c\u2500\u25a0\u2500\u2500card_monitor_video_drivers_vga \u2500\u2500 Topic: 5 \u2514\u2500\u25a0\u2500\u2500modem_port_serial_irq_com \u2500\u2500 Topic: 10","title":"Text-based topic tree"},{"location":"getting_started/visualization/visualization.html#visualize-hierarchical-documents","text":"We can extend the previous method by calculating the topic representation at different levels of the hierarchy and plotting them on a 2D plane. To do so, we first need to calculate the hierarchical topics: from sklearn.datasets import fetch_20newsgroups from sentence_transformers import SentenceTransformer from bertopic import BERTopic from umap import UMAP # Prepare embeddings docs = fetch_20newsgroups ( subset = 'all' , remove = ( 'headers' , 'footers' , 'quotes' ))[ 'data' ] sentence_model = SentenceTransformer ( \"all-MiniLM-L6-v2\" ) embeddings = sentence_model . encode ( docs , show_progress_bar = False ) # Train BERTopic and extract hierarchical topics topic_model = BERTopic () . fit ( docs , embeddings ) hierarchical_topics = topic_model . hierarchical_topics ( docs ) Then, we can visualize the hierarchical documents by either supplying it with our embeddings or by reducing their dimensionality ourselves: # Run the visualization with the original embeddings topic_model . visualize_hierarchical_documents ( docs , hierarchical_topics , embeddings = embeddings ) # Reduce dimensionality of embeddings, this step is optional but much faster to perform iteratively: reduced_embeddings = UMAP ( n_neighbors = 10 , n_components = 2 , min_dist = 0.0 , metric = 'cosine' ) . fit_transform ( embeddings ) topic_model . visualize_hierarchical_documents ( docs , hierarchical_topics , reduced_embeddings = reduced_embeddings ) Note The visualization above was generated with the additional parameter hide_document_hover=True which disables the option to hover over the individual points and see the content of the documents. This makes the resulting visualization smaller and fit into your RAM. However, it might be interesting to set hide_document_hover=False to hover over the points and see the content of the documents.","title":"Visualize Hierarchical Documents"},{"location":"getting_started/visualization/visualization.html#visualize-terms","text":"We can visualize the selected terms for a few topics by creating bar charts out of the c-TF-IDF scores for each topic representation. Insights can be gained from the relative c-TF-IDF scores between and within topics. Moreover, you can easily compare topic representations to each other. To visualize this hierarchy, run the following: topic_model . visualize_barchart ()","title":"Visualize Terms"},{"location":"getting_started/visualization/visualization.html#visualize-topic-similarity","text":"Having generated topic embeddings, through both c-TF-IDF and embeddings, we can create a similarity matrix by simply applying cosine similarities through those topic embeddings. The result will be a matrix indicating how similar certain topics are to each other. To visualize the heatmap, run the following: topic_model . visualize_heatmap () Note You can set n_clusters in visualize_heatmap to order the topics by their similarity. This will result in blocks being formed in the heatmap indicating which clusters of topics are similar to each other. This step is very much recommended as it will make reading the heatmap easier.","title":"Visualize Topic Similarity"},{"location":"getting_started/visualization/visualization.html#visualize-term-score-decline","text":"Topics are represented by a number of words starting with the best representative word. Each word is represented by a c-TF-IDF score. The higher the score, the more representative a word to the topic is. Since the topic words are sorted by their c-TF-IDF score, the scores slowly decline with each word that is added. At some point adding words to the topic representation only marginally increases the total c-TF-IDF score and would not be beneficial for its representation. To visualize this effect, we can plot the c-TF-IDF scores for each topic by the term rank of each word. In other words, the position of the words (term rank), where the words with the highest c-TF-IDF score will have a rank of 1, will be put on the x-axis. Whereas the y-axis will be populated by the c-TF-IDF scores. The result is a visualization that shows you the decline of c-TF-IDF score when adding words to the topic representation. It allows you, using the elbow method, the select the best number of words in a topic. To visualize the c-TF-IDF score decline, run the following: topic_model . visualize_term_rank () To enable the log scale on the y-axis for a better view of individual topics, run the following: topic_model . visualize_term_rank ( log_scale = True ) This visualization was heavily inspired by the \"Term Probability Decline\" visualization found in an analysis by the amazing tmtoolkit . Reference to that specific analysis can be found here .","title":"Visualize Term Score Decline"},{"location":"getting_started/visualization/visualization.html#visualize-topics-over-time","text":"After creating topics over time with Dynamic Topic Modeling, we can visualize these topics by leveraging the interactive abilities of Plotly. Plotly allows us to show the frequency of topics over time whilst giving the option of hovering over the points to show the time-specific topic representations. Simply call .visualize_topics_over_time with the newly created topics over time: import re import pandas as pd from bertopic import BERTopic # Prepare data trump = pd . read_csv ( 'https://drive.google.com/uc?export=download&id=1xRKHaP-QwACMydlDnyFPEaFdtskJuBa6' ) trump . text = trump . apply ( lambda row : re . sub ( r \"http\\S+\" , \"\" , row . text ) . lower (), 1 ) trump . text = trump . apply ( lambda row : \" \" . join ( filter ( lambda x : x [ 0 ] != \"@\" , row . text . split ())), 1 ) trump . text = trump . apply ( lambda row : \" \" . join ( re . sub ( \"[^a-zA-Z]+\" , \" \" , row . text ) . split ()), 1 ) trump = trump . loc [( trump . isRetweet == \"f\" ) & ( trump . text != \"\" ), :] timestamps = trump . date . to_list () tweets = trump . text . to_list () # Create topics over time model = BERTopic ( verbose = True ) topics , probs = model . fit_transform ( tweets ) topics_over_time = model . topics_over_time ( tweets , timestamps ) Then, we visualize some interesting topics: model . visualize_topics_over_time ( topics_over_time , topics = [ 9 , 10 , 72 , 83 , 87 , 91 ])","title":"Visualize Topics over Time"},{"location":"getting_started/visualization/visualization.html#visualize-topics-per-class","text":"You might want to extract and visualize the topic representation per class. For example, if you have specific groups of users that might approach topics differently, then extracting them would help understanding how these users talk about certain topics. In other words, this is simply creating a topic representation for certain classes that you might have in your data. First, we need to train our model: from bertopic import BERTopic from sklearn.datasets import fetch_20newsgroups # Prepare data and classes data = fetch_20newsgroups ( subset = 'all' , remove = ( 'headers' , 'footers' , 'quotes' )) docs = data [ \"data\" ] classes = [ data [ \"target_names\" ][ i ] for i in data [ \"target\" ]] # Create topic model and calculate topics per class topic_model = BERTopic () topics , probs = topic_model . fit_transform ( docs ) topics_per_class = topic_model . topics_per_class ( docs , classes = classes ) Then, we visualize the topic representation of major topics per class: topic_model . visualize_topics_per_class ( topics_per_class )","title":"Visualize Topics per Class"},{"location":"getting_started/visualization/visualization.html#visualize-probablities-or-distribution","text":"We can generate the topic-document probability matrix by simply setting calculate_probabilities=True if a HDBSCAN model is used: from bertopic import BERTopic topic_model = BERTopic ( calculate_probabilities = True ) topics , probs = topic_model . fit_transform ( docs ) The resulting probs variable contains the soft-clustering as done through HDBSCAN. If a non-HDBSCAN model is used, we can estimate the topic distributions after training our model: from bertopic import BERTopic topic_model = BERTopic () topics , _ = topic_model . fit_transform ( docs ) topic_distr , _ = topic_model . approximate_distribution ( docs , min_similarity = 0 ) Then, we either pass the probs or topic_distr variable to .visualize_distribution to visualize either the probability distributions or the topic distributions: # To visualize the probabilities of topic assignment topic_model . visualize_distribution ( probs [ 0 ]) # To visualize the topic distributions in a document topic_model . visualize_distribution ( topic_distr [ 0 ]) Although a topic distribution is nice, we may want to see how each token contributes to a specific topic. To do so, we need to first calculate topic distributions on a token level and then visualize the results: # Calculate the topic distributions on a token-level topic_distr , topic_token_distr = topic_model . approximate_distribution ( docs , calculate_tokens = True ) # Visualize the token-level distributions df = topic_model . visualize_approximate_distribution ( docs [ 1 ], topic_token_distr [ 1 ]) df Note To get the stylized dataframe for .visualize_approximate_distribution you will need to have Jinja installed. If you do not have this installed, an unstylized dataframe will be returned instead. You can install Jinja via pip install jinja2 Note The distribution of the probabilities does not give an indication to the distribution of the frequencies of topics across a document. It merely shows how confident BERTopic is that certain topics can be found in a document.","title":"Visualize Probablities or Distribution"}]}